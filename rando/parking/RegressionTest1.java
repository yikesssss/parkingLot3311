package rando.parking;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str29 = eVChargingDecorator24.getDetails();
        java.lang.String str30 = eVChargingDecorator24.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList13 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager14.addParkingSpot(parkingSpot18);
        java.lang.String str20 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator(parkingSpot18);
        parkingLotManager0.addParkingSpot(parkingSpot18);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot(0, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        parkingLotManager0.addParkingSpot(parkingSpot27);
        parking.ParkingSpot parkingSpot32 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str33 = parkingSpot32.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator34 = new parking.CoveredParkingDecorator(parkingSpot32);
        java.lang.String str35 = coveredParkingDecorator34.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator34);
        java.lang.String str37 = coveredParkingDecorator34.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator34);
        java.util.List<parking.ParkingSpot> parkingSpotList39 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList40 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager41 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot45 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str46 = parkingSpot45.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator47 = new parking.CoveredParkingDecorator(parkingSpot45);
        parking.EVChargingDecorator eVChargingDecorator48 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator47);
        parking.EVChargingDecorator eVChargingDecorator49 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator48);
        parking.CoveredParkingDecorator coveredParkingDecorator50 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator48);
        java.lang.String str51 = eVChargingDecorator48.getDetails();
        parkingLotManager41.addParkingSpot((parking.ParkingSpot) eVChargingDecorator48);
        parking.ParkingLotManager parkingLotManager53 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot57 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager53.addParkingSpot(parkingSpot57);
        java.lang.String str59 = parkingSpot57.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator60 = new parking.CoveredParkingDecorator(parkingSpot57);
        parking.EVChargingDecorator eVChargingDecorator61 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator60);
        java.lang.String str62 = eVChargingDecorator61.getDetails();
        parkingLotManager41.addParkingSpot((parking.ParkingSpot) eVChargingDecorator61);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator61);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList13);
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str35, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList39);
        org.junit.Assert.assertNotNull(parkingSpotList40);
        org.junit.Assert.assertNotNull(parkingLotManager41);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str51, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingLotManager53);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str62, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        int int10 = eVChargingDecorator6.getId();
        java.lang.String str11 = eVChargingDecorator6.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str13 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator(parkingSpot9);
        java.lang.String str14 = eVChargingDecorator13.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator13);
        java.lang.String str16 = eVChargingDecorator13.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.Class<?> wildcardClass9 = coveredParkingDecorator8.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator5);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        int int7 = parkingSpot4.getId();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str9 = parkingSpot4.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = coveredParkingDecorator8.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str11 = coveredParkingDecorator8.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str13 = coveredParkingDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getLocation();
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str10 = eVChargingDecorator9.getDetails();
        java.lang.String str11 = eVChargingDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str7 = eVChargingDecorator6.getDetails();
        java.lang.String str8 = eVChargingDecorator6.getDetails();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        java.lang.String str10 = eVChargingDecorator6.getDetails();
        java.lang.String str11 = eVChargingDecorator6.getDetails();
        java.lang.String str12 = eVChargingDecorator6.getDetails();
        java.lang.String str13 = eVChargingDecorator6.getDetails();
        java.lang.Class<?> wildcardClass14 = eVChargingDecorator6.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 10, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(97, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking", "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking");
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.util.List<parking.ParkingSpot> parkingSpotList28 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator(parkingSpot33);
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        java.lang.String str37 = coveredParkingDecorator35.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator35);
        java.util.List<parking.ParkingSpot> parkingSpotList39 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList40 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList28);
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList39);
        org.junit.Assert.assertNotNull(parkingSpotList40);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        int int10 = eVChargingDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str12 = eVChargingDecorator6.getParkingLot();
        java.lang.String str13 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "", "Parking Spot ID: -1, Location: , Lot: ");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator4);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.Class<?> wildcardClass7 = coveredParkingDecorator5.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str6, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(10, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, Covered Parking");
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getDetails();
        int int24 = coveredParkingDecorator20.getId();
        java.lang.String str25 = coveredParkingDecorator20.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str23, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str25, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parking.HandicapAccessDecorator handicapAccessDecorator23 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot((int) 'a', "Parking Spot ID: -1, Location: , Lot: , Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        java.lang.String str29 = parkingSpot28.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot28);
        parking.HandicapAccessDecorator handicapAccessDecorator31 = new parking.HandicapAccessDecorator(parkingSpot28);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        java.util.List<parking.ParkingSpot> parkingSpotList1 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList2 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot6 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str7 = parkingSpot6.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot6);
        java.lang.String str9 = coveredParkingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str11 = coveredParkingDecorator10.getDetails();
        java.lang.String str12 = coveredParkingDecorator10.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator10);
        java.lang.Class<?> wildcardClass14 = parkingLotManager0.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList1);
        org.junit.Assert.assertNotNull(parkingSpotList2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        int int9 = coveredParkingDecorator8.getId();
        java.lang.String str10 = coveredParkingDecorator8.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        java.lang.String str11 = handicapAccessDecorator7.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str13 = handicapAccessDecorator12.getDetails();
        java.lang.Class<?> wildcardClass14 = handicapAccessDecorator12.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 1, "", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str6 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: " + "'", str6, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: ");
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot(0, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Covered Parking");
        parkingLotManager0.addParkingSpot(parkingSpot35);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = coveredParkingDecorator8.getParkingLot();
        java.lang.String str11 = coveredParkingDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator(parkingSpot11);
        java.lang.String str16 = handicapAccessDecorator15.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator15);
        parking.HandicapAccessDecorator handicapAccessDecorator18 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator17);
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator18);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        java.lang.String str9 = handicapAccessDecorator6.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getLocation();
        java.lang.String str9 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str11 = handicapAccessDecorator7.getLocation();
        java.lang.String str12 = handicapAccessDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "", "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        int int4 = parkingSpot3.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, Handicap Accessible, Handicap Accessible" + "'", str7, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        java.lang.String str9 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        java.lang.Class<?> wildcardClass4 = parkingSpot3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str4 = parkingSpot3.getDetails();
        int int5 = parkingSpot3.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '#', "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking, EV Charging Available");
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str12 = coveredParkingDecorator7.getLocation();
        java.lang.String str13 = coveredParkingDecorator7.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        int int5 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = coveredParkingDecorator9.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str14 = handicapAccessDecorator13.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str11 = eVChargingDecorator8.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager21.addParkingSpot(parkingSpot25);
        java.lang.String str27 = parkingSpot25.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot25);
        java.lang.String str29 = parkingSpot25.getLocation();
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator(parkingSpot25);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator30);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager34 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot38 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager34.addParkingSpot(parkingSpot38);
        parking.ParkingSpot parkingSpot43 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str44 = parkingSpot43.getLocation();
        java.lang.String str45 = parkingSpot43.getLocation();
        parkingLotManager34.addParkingSpot(parkingSpot43);
        parkingLotManager0.addParkingSpot(parkingSpot43);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingLotManager34);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        int int9 = eVChargingDecorator7.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = eVChargingDecorator7.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        int int13 = coveredParkingDecorator5.getId();
        java.lang.String str14 = coveredParkingDecorator5.getDetails();
        java.lang.String str15 = coveredParkingDecorator5.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str17 = handicapAccessDecorator16.getDetails();
        java.lang.String str18 = handicapAccessDecorator16.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str17, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getParkingLot();
        java.lang.String str6 = parkingSpot3.getDetails();
        java.lang.Class<?> wildcardClass7 = parkingSpot3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str6, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        int int12 = handicapAccessDecorator9.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str5 = parkingSpot3.getDetails();
        java.lang.String str6 = parkingSpot3.getLocation();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str5, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        int int6 = parkingSpot3.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.Class<?> wildcardClass8 = parkingSpot3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str9 = parkingSpot4.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = eVChargingDecorator6.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "Parking Spot ID: -1, Location: , Lot: , Covered Parking", "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        int int4 = parkingSpot3.getId();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str7 = coveredParkingDecorator5.getDetails();
        java.lang.String str8 = coveredParkingDecorator5.getLocation();
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        java.lang.Class<?> wildcardClass10 = coveredParkingDecorator5.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        int int9 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str11 = handicapAccessDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '4', "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, Covered Parking", "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.Class<?> wildcardClass5 = parkingSpot3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str4, "Parking Spot ID: 32, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        int int4 = parkingSpot3.getId();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        int int4 = parkingSpot3.getId();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str7 = parkingSpot3.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        java.lang.String str9 = coveredParkingDecorator5.getLocation();
        java.lang.Class<?> wildcardClass10 = coveredParkingDecorator5.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator4);
        java.lang.String str6 = coveredParkingDecorator5.getParkingLot();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int8 = coveredParkingDecorator7.getId();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator11);
        java.lang.String str13 = coveredParkingDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking");
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        int int7 = parkingSpot4.getId();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str13 = coveredParkingDecorator12.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Covered Parking" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Covered Parking");
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = handicapAccessDecorator11.getDetails();
        java.lang.String str13 = handicapAccessDecorator11.getDetails();
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        java.lang.String str15 = eVChargingDecorator14.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '4', "hi!", "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator(parkingSpot9);
        java.lang.String str14 = eVChargingDecorator13.getDetails();
        java.lang.String str15 = eVChargingDecorator13.getDetails();
        java.lang.String str16 = eVChargingDecorator13.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        java.lang.String str11 = coveredParkingDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking");
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        java.util.List<parking.ParkingSpot> parkingSpotList1 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager2 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot6 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str7 = parkingSpot6.getLocation();
        java.lang.String str8 = parkingSpot6.getLocation();
        parkingLotManager2.addParkingSpot(parkingSpot6);
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str14 = parkingSpot13.getLocation();
        parkingLotManager2.addParkingSpot(parkingSpot13);
        java.util.List<parking.ParkingSpot> parkingSpotList16 = parkingLotManager2.getParkingSpots();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        java.lang.String str25 = coveredParkingDecorator22.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator26 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager2.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator22);
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager0.getParkingSpots();
        java.lang.Class<?> wildcardClass30 = parkingSpotList29.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList1);
        org.junit.Assert.assertNotNull(parkingLotManager2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(parkingSpotList16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str25, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.Class<?> wildcardClass5 = parkingSpot3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList12 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str17 = parkingSpot16.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator18 = new parking.CoveredParkingDecorator(parkingSpot16);
        java.lang.String str19 = coveredParkingDecorator18.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingLotManager parkingLotManager25 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager25.addParkingSpot(parkingSpot29);
        java.lang.String str31 = parkingSpot29.getLocation();
        int int32 = parkingSpot29.getId();
        parking.EVChargingDecorator eVChargingDecorator33 = new parking.EVChargingDecorator(parkingSpot29);
        java.lang.String str34 = eVChargingDecorator33.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator33);
        java.util.List<parking.ParkingSpot> parkingSpotList36 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(parkingSpotList12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(parkingLotManager25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str34, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList36);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str23 = eVChargingDecorator21.getLocation();
        int int24 = eVChargingDecorator21.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str26 = eVChargingDecorator21.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator27 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str28 = eVChargingDecorator21.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager9 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager9.addParkingSpot(parkingSpot13);
        java.lang.String str15 = parkingSpot13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator(parkingSpot13);
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str18 = eVChargingDecorator16.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator16);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager20.addParkingSpot(parkingSpot24);
        java.lang.String str26 = parkingSpot24.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot24);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        int int30 = handicapAccessDecorator29.getId();
        java.lang.String str31 = handicapAccessDecorator29.getLocation();
        java.lang.String str32 = handicapAccessDecorator29.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str38 = parkingSpot37.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator39 = new parking.CoveredParkingDecorator(parkingSpot37);
        java.lang.String str40 = coveredParkingDecorator39.getDetails();
        java.lang.String str41 = coveredParkingDecorator39.getDetails();
        java.lang.String str42 = coveredParkingDecorator39.getLocation();
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator39);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator43);
        java.util.List<parking.ParkingSpot> parkingSpotList45 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingLotManager9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str32, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str40, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str41, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(parkingSpotList45);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = coveredParkingDecorator11.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible, Covered Parking" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        int int6 = parkingSpot3.getId();
        java.lang.String str7 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str29 = eVChargingDecorator24.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = eVChargingDecorator6.getId();
        java.lang.String str8 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 0, "hi!", "Parking Spot ID: -1, Location: , Lot: ");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str4, "Parking Spot ID: -1, Location: , Lot: ");
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getDetails();
        java.lang.String str11 = coveredParkingDecorator7.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager24 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str29 = parkingSpot28.getLocation();
        java.lang.String str30 = parkingSpot28.getLocation();
        parkingLotManager24.addParkingSpot(parkingSpot28);
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str36 = parkingSpot35.getLocation();
        parkingLotManager24.addParkingSpot(parkingSpot35);
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str42 = parkingSpot41.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator43 = new parking.CoveredParkingDecorator(parkingSpot41);
        parking.EVChargingDecorator eVChargingDecorator44 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator43);
        parking.EVChargingDecorator eVChargingDecorator45 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator44);
        parkingLotManager24.addParkingSpot((parking.ParkingSpot) eVChargingDecorator45);
        parking.CoveredParkingDecorator coveredParkingDecorator47 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator45);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator45);
        parking.HandicapAccessDecorator handicapAccessDecorator49 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator45);
        parking.EVChargingDecorator eVChargingDecorator50 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator49);
        java.lang.String str51 = eVChargingDecorator50.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertNotNull(parkingLotManager24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        java.lang.String str15 = coveredParkingDecorator13.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str17 = handicapAccessDecorator16.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Handicap Accessible" + "'", str17, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator8.getLocation();
        int int10 = eVChargingDecorator8.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator7);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str16 = parkingSpot15.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator(parkingSpot15);
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator17);
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator18);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator18);
        java.lang.String str21 = eVChargingDecorator18.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator18);
        java.lang.String str23 = eVChargingDecorator18.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        java.lang.String str25 = eVChargingDecorator18.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        int int8 = eVChargingDecorator7.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str14 = parkingSpot13.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator(parkingSpot13);
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator15);
        parking.EVChargingDecorator eVChargingDecorator17 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator16);
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str19 = eVChargingDecorator16.getDetails();
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str21 = eVChargingDecorator20.getDetails();
        java.lang.String str22 = eVChargingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator23 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parking.CoveredParkingDecorator coveredParkingDecorator24 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator23);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator24);
        java.util.List<parking.ParkingSpot> parkingSpotList26 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList27 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str22, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList26);
        org.junit.Assert.assertNotNull(parkingSpotList27);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = coveredParkingDecorator8.getDetails();
        java.lang.String str10 = coveredParkingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str12 = coveredParkingDecorator11.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator11);
        int int14 = eVChargingDecorator13.getId();
        java.lang.String str15 = eVChargingDecorator13.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Covered Parking");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Covered Parking, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Covered Parking, EV Charging Available");
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator(parkingSpot11);
        java.lang.String str16 = handicapAccessDecorator15.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator15);
        java.lang.String str18 = handicapAccessDecorator17.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Handicap Accessible" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        java.lang.String str7 = parkingSpot4.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator(parkingSpot4);
        java.lang.String str9 = handicapAccessDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 0, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str4, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        int int11 = coveredParkingDecorator7.getId();
        java.lang.String str12 = coveredParkingDecorator7.getLocation();
        java.lang.String str13 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator5.getDetails();
        java.lang.String str8 = handicapAccessDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator4);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        int int7 = coveredParkingDecorator6.getId();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList16 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        parking.EVChargingDecorator eVChargingDecorator23 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator23);
        parking.EVChargingDecorator eVChargingDecorator25 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator23);
        java.lang.String str26 = eVChargingDecorator23.getDetails();
        parking.EVChargingDecorator eVChargingDecorator27 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator23);
        java.lang.String str28 = eVChargingDecorator27.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator27);
        java.lang.String str30 = eVChargingDecorator27.getDetails();
        java.lang.String str31 = eVChargingDecorator27.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingSpotList16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str31, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot10);
        java.lang.String str12 = parkingSpot10.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot10);
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator(parkingSpot10);
        java.lang.String str15 = parkingSpot10.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str12, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        java.lang.Class<?> wildcardClass12 = handicapAccessDecorator9.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        java.lang.String str13 = handicapAccessDecorator9.getParkingLot();
        java.lang.Class<?> wildcardClass14 = handicapAccessDecorator9.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '4', "", "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(10, "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Handicap Accessible", "Parking Spot ID: -1, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, Covered Parking");
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int8 = coveredParkingDecorator5.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager21.addParkingSpot(parkingSpot25);
        java.lang.String str27 = parkingSpot25.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot25);
        java.lang.String str29 = parkingSpot25.getLocation();
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator(parkingSpot25);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator30);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager34 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot38 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager34.addParkingSpot(parkingSpot38);
        java.lang.String str40 = parkingSpot38.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator(parkingSpot38);
        parking.CoveredParkingDecorator coveredParkingDecorator42 = new parking.CoveredParkingDecorator(parkingSpot38);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator42);
        java.lang.String str44 = coveredParkingDecorator42.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingLotManager34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str44, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator(parkingSpot4);
        java.lang.String str9 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str11 = eVChargingDecorator10.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str22 = coveredParkingDecorator20.getDetails();
        java.lang.String str23 = coveredParkingDecorator20.getDetails();
        java.lang.String str24 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator25 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str22, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str23, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str24, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot18);
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.Class<?> wildcardClass23 = coveredParkingDecorator20.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator(parkingSpot3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = coveredParkingDecorator5.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str14 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str16 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str7 = handicapAccessDecorator6.getLocation();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.Class<?> wildcardClass10 = handicapAccessDecorator7.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        java.lang.String str9 = handicapAccessDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        java.lang.String str12 = eVChargingDecorator10.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        java.lang.String str31 = handicapAccessDecorator29.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str31, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        java.lang.String str11 = coveredParkingDecorator10.getDetails();
        int int12 = coveredParkingDecorator10.getId();
        java.lang.String str13 = coveredParkingDecorator10.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking");
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str9 = handicapAccessDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager24 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager24.addParkingSpot(parkingSpot28);
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        java.lang.String str35 = parkingSpot33.getLocation();
        parkingLotManager24.addParkingSpot(parkingSpot33);
        int int37 = parkingSpot33.getId();
        java.lang.String str38 = parkingSpot33.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot33);
        java.util.List<parking.ParkingSpot> parkingSpotList40 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str45 = parkingSpot44.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator46 = new parking.CoveredParkingDecorator(parkingSpot44);
        parking.HandicapAccessDecorator handicapAccessDecorator47 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator46);
        java.lang.String str48 = handicapAccessDecorator47.getDetails();
        java.lang.String str49 = handicapAccessDecorator47.getDetails();
        java.lang.String str50 = handicapAccessDecorator47.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator51 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator47);
        int int52 = handicapAccessDecorator47.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator47);
        java.lang.String str54 = handicapAccessDecorator47.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertNotNull(parkingLotManager24);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(parkingSpotList40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str48, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str49, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str54, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        int int14 = parkingSpot11.getId();
        int int15 = parkingSpot11.getId();
        java.lang.String str16 = parkingSpot11.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str16, "Parking Spot ID: -1, Location: , Lot: ");
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList34 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingSpotList34);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        java.lang.Class<?> wildcardClass4 = parkingSpot3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        java.lang.String str5 = parkingSpot3.getLocation();
        java.lang.String str6 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList16 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        parking.EVChargingDecorator eVChargingDecorator23 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator23);
        parking.EVChargingDecorator eVChargingDecorator25 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator23);
        java.lang.String str26 = eVChargingDecorator23.getDetails();
        parking.EVChargingDecorator eVChargingDecorator27 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator23);
        java.lang.String str28 = eVChargingDecorator27.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator27);
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator27);
        java.lang.String str31 = handicapAccessDecorator30.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingSpotList16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        int int5 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str8 = coveredParkingDecorator6.getDetails();
        java.lang.String str9 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager31 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager31.addParkingSpot(parkingSpot35);
        java.lang.String str37 = parkingSpot35.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator(parkingSpot35);
        parking.CoveredParkingDecorator coveredParkingDecorator39 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator38);
        java.lang.String str40 = coveredParkingDecorator38.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator41 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator38);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator38);
        java.lang.String str43 = coveredParkingDecorator38.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingLotManager31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str40, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str43, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(35, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: ");
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str5 = eVChargingDecorator4.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '#', "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available", "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.Class<?> wildcardClass9 = coveredParkingDecorator5.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        int int9 = eVChargingDecorator8.getId();
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.EVChargingDecorator eVChargingDecorator25 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator22);
        java.lang.String str26 = eVChargingDecorator22.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator(parkingSpot4);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        java.lang.String str9 = handicapAccessDecorator7.getParkingLot();
        int int10 = handicapAccessDecorator7.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Covered Parking", "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList24 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager25 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager25.addParkingSpot(parkingSpot29);
        java.lang.String str31 = parkingSpot29.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator32 = new parking.CoveredParkingDecorator(parkingSpot29);
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator32);
        java.lang.String str34 = coveredParkingDecorator32.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator35 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator32);
        int int36 = coveredParkingDecorator32.getId();
        java.lang.String str37 = coveredParkingDecorator32.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator32);
        java.lang.Class<?> wildcardClass39 = coveredParkingDecorator32.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertNotNull(parkingSpotList24);
        org.junit.Assert.assertNotNull(parkingLotManager25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str34, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        java.util.List<parking.ParkingSpot> parkingSpotList1 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager2 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot6 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str7 = parkingSpot6.getLocation();
        java.lang.String str8 = parkingSpot6.getLocation();
        parkingLotManager2.addParkingSpot(parkingSpot6);
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str14 = parkingSpot13.getLocation();
        parkingLotManager2.addParkingSpot(parkingSpot13);
        java.util.List<parking.ParkingSpot> parkingSpotList16 = parkingLotManager2.getParkingSpots();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        java.lang.String str25 = coveredParkingDecorator22.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator26 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager2.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator22);
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        parking.CoveredParkingDecorator coveredParkingDecorator34 = new parking.CoveredParkingDecorator(parkingSpot33);
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator(parkingSpot33);
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        java.lang.String str38 = coveredParkingDecorator36.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList1);
        org.junit.Assert.assertNotNull(parkingLotManager2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(parkingSpotList16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str25, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(10, "", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str4, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str9 = coveredParkingDecorator5.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str28 = eVChargingDecorator24.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str30 = coveredParkingDecorator29.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator20 = new parking.HandicapAccessDecorator(parkingSpot17);
        java.lang.String str21 = handicapAccessDecorator20.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertNotNull(parkingSpotList23);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        int int10 = eVChargingDecorator6.getId();
        java.lang.String str11 = eVChargingDecorator6.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.Class<?> wildcardClass13 = eVChargingDecorator6.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        java.lang.String str11 = handicapAccessDecorator7.getParkingLot();
        int int12 = handicapAccessDecorator7.getId();
        java.lang.String str13 = handicapAccessDecorator7.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str15 = coveredParkingDecorator14.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator(parkingSpot19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator(parkingSpot19);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.CoveredParkingDecorator coveredParkingDecorator24 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getParkingLot();
        int int9 = coveredParkingDecorator7.getId();
        java.lang.String str10 = coveredParkingDecorator7.getDetails();
        java.lang.String str11 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: ");
        parkingLotManager0.addParkingSpot(parkingSpot18);
        parking.ParkingSpot parkingSpot23 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str24 = parkingSpot23.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator(parkingSpot23);
        java.lang.String str26 = coveredParkingDecorator25.getDetails();
        parking.EVChargingDecorator eVChargingDecorator27 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator25);
        java.lang.String str28 = coveredParkingDecorator25.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator25);
        parking.CoveredParkingDecorator coveredParkingDecorator30 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator30);
        java.lang.String str32 = coveredParkingDecorator30.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot10);
        java.lang.String str12 = parkingSpot10.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot10);
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator(parkingSpot10);
        int int15 = parkingSpot10.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator(parkingSpot10);
        int int17 = handicapAccessDecorator16.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str12, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str6 = parkingSpot3.getLocation();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = coveredParkingDecorator5.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str14 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator15);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        java.lang.String str4 = parkingSpot3.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available" + "'", str4, "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        java.lang.String str32 = parkingSpot27.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator(parkingSpot27);
        parking.HandicapAccessDecorator handicapAccessDecorator34 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator33);
        java.lang.Class<?> wildcardClass35 = handicapAccessDecorator33.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str32, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        java.lang.String str4 = parkingSpot3.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str4, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str10 = eVChargingDecorator6.getDetails();
        java.lang.String str11 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        java.lang.String str7 = parkingSpot4.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        int int9 = coveredParkingDecorator8.getId();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        int int11 = eVChargingDecorator10.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        int int10 = eVChargingDecorator6.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str12 = coveredParkingDecorator11.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        parking.ParkingSpot parkingSpot31 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str32 = parkingSpot31.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot31);
        java.util.List<parking.ParkingSpot> parkingSpotList34 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList35 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str40 = parkingSpot39.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator(parkingSpot39);
        java.lang.String str42 = coveredParkingDecorator41.getDetails();
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator41);
        java.lang.String str44 = coveredParkingDecorator41.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator45 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator41);
        java.lang.String str46 = coveredParkingDecorator41.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator47 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator41);
        parking.CoveredParkingDecorator coveredParkingDecorator48 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator47);
        java.lang.String str49 = handicapAccessDecorator47.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator47);
        java.lang.String str51 = handicapAccessDecorator47.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList34);
        org.junit.Assert.assertNotNull(parkingSpotList35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str42, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str44, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str46, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str49, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str51, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str9 = parkingSpot4.getParkingLot();
        java.lang.String str10 = parkingSpot4.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str13 = eVChargingDecorator12.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator12);
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator12);
        java.lang.String str16 = handicapAccessDecorator15.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        java.lang.String str31 = eVChargingDecorator28.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        java.lang.String str33 = eVChargingDecorator28.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str33, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Covered Parking" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Covered Parking");
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str14 = eVChargingDecorator13.getDetails();
        java.lang.String str15 = eVChargingDecorator13.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getLocation();
        java.lang.String str9 = handicapAccessDecorator7.getDetails();
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        java.lang.String str11 = handicapAccessDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator(parkingSpot11);
        java.lang.String str16 = handicapAccessDecorator15.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator15);
        parking.HandicapAccessDecorator handicapAccessDecorator18 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator17);
        java.lang.String str19 = handicapAccessDecorator18.getDetails();
        java.lang.String str20 = handicapAccessDecorator18.getDetails();
        java.lang.String str21 = handicapAccessDecorator18.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Covered Parking, Handicap Accessible" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Covered Parking, Handicap Accessible" + "'", str20, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Covered Parking, Handicap Accessible" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking, EV Charging Available");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking, EV Charging Available" + "'", str4, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking, EV Charging Available");
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int12 = handicapAccessDecorator11.getId();
        java.lang.String str13 = handicapAccessDecorator11.getDetails();
        java.lang.String str14 = handicapAccessDecorator11.getDetails();
        java.lang.String str15 = handicapAccessDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = handicapAccessDecorator11.getDetails();
        java.lang.Class<?> wildcardClass13 = handicapAccessDecorator11.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = handicapAccessDecorator11.getDetails();
        java.lang.String str13 = handicapAccessDecorator11.getDetails();
        java.lang.String str14 = handicapAccessDecorator11.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        int int16 = handicapAccessDecorator11.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking", "Parking Spot ID: 100, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!");
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator(parkingSpot11);
        java.lang.String str16 = eVChargingDecorator15.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator15);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "Parking Spot ID: -1, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: ", "");
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str11 = eVChargingDecorator10.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) -1, "", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available");
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parking.CoveredParkingDecorator coveredParkingDecorator23 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        java.lang.String str24 = coveredParkingDecorator22.getDetails();
        int int25 = coveredParkingDecorator22.getId();
        java.lang.String str26 = coveredParkingDecorator22.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking" + "'", str24, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking" + "'", str26, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 10, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available", "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking");
        parkingLotManager0.addParkingSpot(parkingSpot27);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertNotNull(parkingSpotList23);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str29 = eVChargingDecorator24.getDetails();
        java.lang.String str30 = eVChargingDecorator24.getDetails();
        java.lang.Class<?> wildcardClass31 = eVChargingDecorator24.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = parkingSpot3.getDetails();
        java.lang.String str7 = parkingSpot3.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str9 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str6, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(10, "Parking Spot ID: 1, Location: hi!, Lot: ", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.Class<?> wildcardClass5 = parkingSpot3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str4, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator9);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        java.lang.String str13 = handicapAccessDecorator10.getDetails();
        java.lang.String str14 = handicapAccessDecorator10.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str8 = parkingSpot4.getLocation();
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str10 = eVChargingDecorator9.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator9);
        java.lang.String str12 = eVChargingDecorator9.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        java.lang.String str11 = handicapAccessDecorator6.getLocation();
        java.lang.String str12 = handicapAccessDecorator6.getDetails();
        java.lang.String str13 = handicapAccessDecorator6.getDetails();
        java.lang.Class<?> wildcardClass14 = handicapAccessDecorator6.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        java.lang.String str11 = handicapAccessDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator(parkingSpot11);
        java.lang.String str16 = handicapAccessDecorator15.getParkingLot();
        java.lang.String str17 = handicapAccessDecorator15.getDetails();
        java.lang.String str18 = handicapAccessDecorator15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator15);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str17, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        java.util.List<parking.ParkingSpot> parkingSpotList1 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot5 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str6 = parkingSpot5.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot5);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str14 = eVChargingDecorator8.getDetails();
        java.lang.String str15 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: ");
        parkingLotManager0.addParkingSpot(parkingSpot18);
        parking.HandicapAccessDecorator handicapAccessDecorator20 = new parking.HandicapAccessDecorator(parkingSpot18);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str10 = eVChargingDecorator9.getDetails();
        java.lang.String str11 = eVChargingDecorator9.getDetails();
        java.lang.String str12 = eVChargingDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        int int11 = eVChargingDecorator8.getId();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        java.lang.String str13 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        java.lang.String str28 = coveredParkingDecorator27.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        java.lang.String str31 = coveredParkingDecorator27.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(parkingSpotList33);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str8 = eVChargingDecorator7.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: ");
        parkingLotManager0.addParkingSpot(parkingSpot18);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str25 = parkingSpot24.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator26 = new parking.CoveredParkingDecorator(parkingSpot24);
        java.lang.String str27 = coveredParkingDecorator26.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator26);
        parkingLotManager20.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str27, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList31);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator(parkingSpot11);
        java.lang.String str16 = parkingSpot11.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator(parkingSpot11);
        parking.HandicapAccessDecorator handicapAccessDecorator18 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator17);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str16, "Parking Spot ID: -1, Location: , Lot: ");
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        int int8 = handicapAccessDecorator6.getId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Handicap Accessible" + "'", str7, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str14 = parkingSpot13.getParkingLot();
        java.lang.String str15 = parkingSpot13.getParkingLot();
        java.lang.String str16 = parkingSpot13.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot13);
        parking.ParkingSpot parkingSpot21 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str22 = parkingSpot21.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator23 = new parking.CoveredParkingDecorator(parkingSpot21);
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator(parkingSpot21);
        parkingLotManager0.addParkingSpot(parkingSpot21);
        java.util.List<parking.ParkingSpot> parkingSpotList26 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str16, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(parkingSpotList26);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.util.List<parking.ParkingSpot> parkingSpotList10 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList11 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot((int) 'a', "Parking Spot ID: -1, Location: , Lot: , Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        int int16 = parkingSpot15.getId();
        parkingLotManager0.addParkingSpot(parkingSpot15);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList10);
        org.junit.Assert.assertNotNull(parkingSpotList11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = coveredParkingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        int int13 = parkingSpot9.getId();
        java.lang.String str14 = parkingSpot9.getLocation();
        int int15 = parkingSpot9.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator(parkingSpot9);
        java.lang.Class<?> wildcardClass17 = parkingSpot9.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getLocation();
        int int12 = eVChargingDecorator8.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        java.lang.String str13 = handicapAccessDecorator11.getParkingLot();
        java.lang.String str14 = handicapAccessDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        int int7 = parkingSpot4.getId();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator(parkingSpot9);
        java.lang.String str14 = eVChargingDecorator13.getDetails();
        java.lang.String str15 = eVChargingDecorator13.getDetails();
        java.lang.String str16 = eVChargingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator13);
        java.lang.String str18 = eVChargingDecorator13.getDetails();
        java.lang.String str19 = eVChargingDecorator13.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str19, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        java.lang.String str32 = parkingSpot27.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator(parkingSpot27);
        parking.CoveredParkingDecorator coveredParkingDecorator34 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator33);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str32, "Parking Spot ID: 1, Location: hi!, Lot: ");
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator40);
        java.lang.String str42 = coveredParkingDecorator40.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        int int5 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str7 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        parking.ParkingLotManager parkingLotManager32 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot36 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str37 = parkingSpot36.getLocation();
        java.lang.String str38 = parkingSpot36.getLocation();
        parkingLotManager32.addParkingSpot(parkingSpot36);
        parking.ParkingSpot parkingSpot43 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str44 = parkingSpot43.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator45 = new parking.CoveredParkingDecorator(parkingSpot43);
        java.lang.String str46 = coveredParkingDecorator45.getDetails();
        parking.EVChargingDecorator eVChargingDecorator47 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator45);
        java.lang.String str48 = coveredParkingDecorator45.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator49 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator45);
        java.lang.String str50 = coveredParkingDecorator45.getDetails();
        parking.EVChargingDecorator eVChargingDecorator51 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator45);
        parkingLotManager32.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator45);
        int int53 = coveredParkingDecorator45.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator45);
        parking.ParkingSpot parkingSpot58 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str59 = parkingSpot58.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator60 = new parking.HandicapAccessDecorator(parkingSpot58);
        parking.HandicapAccessDecorator handicapAccessDecorator61 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator60);
        java.lang.String str62 = handicapAccessDecorator60.getDetails();
        java.lang.String str63 = handicapAccessDecorator60.getParkingLot();
        java.lang.String str64 = handicapAccessDecorator60.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator60);
        java.lang.Class<?> wildcardClass66 = parkingLotManager0.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingLotManager32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str46, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str48, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str50, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str59, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str62, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str64, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator7);
        parking.ParkingLotManager parkingLotManager12 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager12.addParkingSpot(parkingSpot16);
        java.lang.String str18 = parkingSpot16.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot16);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        java.lang.String str21 = eVChargingDecorator20.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator20);
        int int23 = eVChargingDecorator20.getId();
        java.lang.String str24 = eVChargingDecorator20.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingLotManager12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str24, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) -1, "", "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available, Covered Parking");
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str13 = eVChargingDecorator12.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator12);
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator12);
        parking.CoveredParkingDecorator coveredParkingDecorator16 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator15);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getDetails();
        java.lang.String str24 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator25 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str23, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str24, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 0, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        java.lang.String str4 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 0, Location: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str4, "Parking Spot ID: 0, Location: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '#', "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Covered Parking", "Parking Spot ID: -1, Location: , Lot: ");
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator20 = new parking.HandicapAccessDecorator(parkingSpot17);
        java.lang.String str21 = handicapAccessDecorator20.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator20);
        parking.EVChargingDecorator eVChargingDecorator23 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator20);
        java.lang.Class<?> wildcardClass24 = handicapAccessDecorator20.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        java.lang.String str10 = eVChargingDecorator6.getDetails();
        java.lang.Class<?> wildcardClass11 = eVChargingDecorator6.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        java.lang.String str13 = handicapAccessDecorator11.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator14 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList12 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str17 = parkingSpot16.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator18 = new parking.CoveredParkingDecorator(parkingSpot16);
        java.lang.String str19 = coveredParkingDecorator18.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList25 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList26 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(parkingSpotList12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(parkingSpotList25);
        org.junit.Assert.assertNotNull(parkingSpotList26);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        int int41 = coveredParkingDecorator36.getId();
        java.lang.String str42 = coveredParkingDecorator36.getDetails();
        java.lang.String str43 = coveredParkingDecorator36.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str42, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str43, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingLotManager parkingLotManager6 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager6.addParkingSpot(parkingSpot10);
        java.lang.String str12 = parkingSpot10.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator(parkingSpot10);
        java.lang.String str14 = handicapAccessDecorator13.getDetails();
        java.lang.String str15 = handicapAccessDecorator13.getParkingLot();
        java.lang.String str16 = handicapAccessDecorator13.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator13);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingLotManager6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str8 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str9 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        java.lang.String str11 = coveredParkingDecorator5.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        java.lang.String str12 = eVChargingDecorator10.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        int int5 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str9 = coveredParkingDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingLotManager parkingLotManager6 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager6.addParkingSpot(parkingSpot10);
        java.lang.String str12 = parkingSpot10.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot10);
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        int int16 = coveredParkingDecorator13.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingLotManager6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList9 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager10 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot14 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager10.addParkingSpot(parkingSpot14);
        java.lang.String str16 = parkingSpot14.getDetails();
        parking.EVChargingDecorator eVChargingDecorator17 = new parking.EVChargingDecorator(parkingSpot14);
        java.lang.String str18 = eVChargingDecorator17.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator17);
        java.lang.String str20 = eVChargingDecorator17.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator17);
        java.lang.String str22 = eVChargingDecorator17.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingSpotList9);
        org.junit.Assert.assertNotNull(parkingLotManager10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str20, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str22, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        java.lang.String str13 = coveredParkingDecorator12.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) '4', "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingSpotList23);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        java.lang.String str11 = eVChargingDecorator8.getParkingLot();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        java.lang.Class<?> wildcardClass13 = eVChargingDecorator8.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str12 = eVChargingDecorator11.getParkingLot();
        java.lang.String str13 = eVChargingDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot10);
        java.lang.String str12 = parkingSpot10.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot10);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager14.addParkingSpot(parkingSpot18);
        java.lang.String str20 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator(parkingSpot18);
        parking.EVChargingDecorator eVChargingDecorator23 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingLotManager parkingLotManager25 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager25.addParkingSpot(parkingSpot29);
        java.lang.String str31 = parkingSpot29.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator32 = new parking.CoveredParkingDecorator(parkingSpot29);
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator(parkingSpot29);
        parking.HandicapAccessDecorator handicapAccessDecorator34 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator33);
        parking.EVChargingDecorator eVChargingDecorator35 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator33);
        parking.HandicapAccessDecorator handicapAccessDecorator36 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator33);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator36);
        java.lang.String str38 = handicapAccessDecorator36.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str12, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(parkingLotManager25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str10 = eVChargingDecorator9.getDetails();
        java.lang.String str11 = eVChargingDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager9 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager9.addParkingSpot(parkingSpot13);
        java.lang.String str15 = parkingSpot13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator(parkingSpot13);
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str18 = eVChargingDecorator16.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator16);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str25 = parkingSpot24.getLocation();
        java.lang.String str26 = parkingSpot24.getLocation();
        parkingLotManager20.addParkingSpot(parkingSpot24);
        parking.ParkingSpot parkingSpot31 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str32 = parkingSpot31.getLocation();
        parkingLotManager20.addParkingSpot(parkingSpot31);
        java.util.List<parking.ParkingSpot> parkingSpotList34 = parkingLotManager20.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList35 = parkingLotManager20.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList36 = parkingLotManager20.getParkingSpots();
        parking.ParkingSpot parkingSpot40 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str41 = parkingSpot40.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator42 = new parking.CoveredParkingDecorator(parkingSpot40);
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator42);
        parking.EVChargingDecorator eVChargingDecorator44 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator43);
        parking.EVChargingDecorator eVChargingDecorator45 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator43);
        java.lang.String str46 = eVChargingDecorator43.getDetails();
        parking.EVChargingDecorator eVChargingDecorator47 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator43);
        java.lang.String str48 = eVChargingDecorator47.getDetails();
        parkingLotManager20.addParkingSpot((parking.ParkingSpot) eVChargingDecorator47);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator47);
        parking.ParkingSpot parkingSpot54 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str55 = parkingSpot54.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator56 = new parking.CoveredParkingDecorator(parkingSpot54);
        java.lang.String str57 = parkingSpot54.getDetails();
        java.lang.String str58 = parkingSpot54.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator59 = new parking.CoveredParkingDecorator(parkingSpot54);
        java.lang.String str60 = coveredParkingDecorator59.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator59);
        java.lang.String str62 = coveredParkingDecorator59.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingLotManager9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(parkingSpotList34);
        org.junit.Assert.assertNotNull(parkingSpotList35);
        org.junit.Assert.assertNotNull(parkingSpotList36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str46, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str48, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str57, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str60, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str62, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str9 = handicapAccessDecorator6.getDetails();
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        java.lang.String str11 = handicapAccessDecorator6.getDetails();
        java.lang.String str12 = handicapAccessDecorator6.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator11);
        java.lang.Class<?> wildcardClass13 = eVChargingDecorator11.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        int int10 = handicapAccessDecorator7.getId();
        java.lang.String str11 = handicapAccessDecorator7.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int8 = coveredParkingDecorator7.getId();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str11 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str9 = parkingSpot4.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator(parkingSpot4);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        java.lang.Class<?> wildcardClass12 = handicapAccessDecorator10.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot28);
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        int int32 = handicapAccessDecorator30.getId();
        java.lang.Class<?> wildcardClass33 = handicapAccessDecorator30.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        java.lang.String str13 = handicapAccessDecorator9.getLocation();
        java.lang.String str14 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        int int10 = handicapAccessDecorator9.getId();
        java.lang.String str11 = handicapAccessDecorator9.getLocation();
        java.lang.String str12 = handicapAccessDecorator9.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: -1, Location: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
        java.lang.String str4 = parkingSpot3.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: -1, Location: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str4, "Parking Spot ID: -1, Location: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot10);
        java.lang.String str12 = parkingSpot10.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot10);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager14.addParkingSpot(parkingSpot18);
        java.lang.String str20 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator(parkingSpot18);
        parking.EVChargingDecorator eVChargingDecorator23 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingLotManager parkingLotManager25 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager25.addParkingSpot(parkingSpot29);
        java.lang.String str31 = parkingSpot29.getLocation();
        int int32 = parkingSpot29.getId();
        parking.EVChargingDecorator eVChargingDecorator33 = new parking.EVChargingDecorator(parkingSpot29);
        parking.HandicapAccessDecorator handicapAccessDecorator34 = new parking.HandicapAccessDecorator(parkingSpot29);
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator(parkingSpot29);
        parkingLotManager0.addParkingSpot(parkingSpot29);
        java.util.List<parking.ParkingSpot> parkingSpotList37 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str12, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(parkingLotManager25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(parkingSpotList37);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        java.lang.String str31 = eVChargingDecorator28.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        java.lang.Class<?> wildcardClass33 = parkingLotManager0.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str9 = parkingSpot4.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator(parkingSpot4);
        java.lang.Class<?> wildcardClass13 = handicapAccessDecorator12.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        java.lang.String str12 = handicapAccessDecorator10.getDetails();
        java.lang.String str13 = handicapAccessDecorator10.getDetails();
        java.lang.String str14 = handicapAccessDecorator10.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        int int10 = eVChargingDecorator6.getId();
        java.lang.String str11 = eVChargingDecorator6.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str14 = handicapAccessDecorator13.getDetails();
        java.lang.String str15 = handicapAccessDecorator13.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        java.lang.String str12 = eVChargingDecorator10.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        java.lang.String str10 = eVChargingDecorator6.getDetails();
        java.lang.String str11 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getDetails();
        java.lang.String str24 = coveredParkingDecorator20.getDetails();
        java.lang.String str25 = coveredParkingDecorator20.getDetails();
        java.lang.String str26 = coveredParkingDecorator20.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str23, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str24, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str25, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager33 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager33.addParkingSpot(parkingSpot37);
        java.lang.String str39 = parkingSpot37.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator(parkingSpot37);
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator(parkingSpot37);
        parking.HandicapAccessDecorator handicapAccessDecorator42 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator41);
        parking.HandicapAccessDecorator handicapAccessDecorator43 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator41);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator41);
        java.util.List<parking.ParkingSpot> parkingSpotList45 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingLotManager33);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList45);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.EVChargingDecorator eVChargingDecorator25 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator22);
        java.lang.String str26 = eVChargingDecorator25.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        int int11 = eVChargingDecorator8.getId();
        java.lang.String str12 = eVChargingDecorator8.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        int int11 = coveredParkingDecorator9.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        java.lang.String str9 = handicapAccessDecorator6.getDetails();
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str7 = coveredParkingDecorator5.getDetails();
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator(parkingSpot11);
        java.lang.String str16 = handicapAccessDecorator15.getParkingLot();
        java.lang.String str17 = handicapAccessDecorator15.getDetails();
        java.lang.String str18 = handicapAccessDecorator15.getDetails();
        java.lang.Class<?> wildcardClass19 = handicapAccessDecorator15.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str17, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.Class<?> wildcardClass14 = handicapAccessDecorator9.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        int int9 = eVChargingDecorator6.getId();
        java.lang.String str10 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        java.lang.String str10 = eVChargingDecorator6.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str20 = parkingSpot19.getParkingLot();
        java.lang.String str21 = parkingSpot19.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot19);
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot26);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        parking.ParkingLotManager parkingLotManager30 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager30.addParkingSpot(parkingSpot34);
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str40 = parkingSpot39.getLocation();
        java.lang.String str41 = parkingSpot39.getLocation();
        parkingLotManager30.addParkingSpot(parkingSpot39);
        parking.ParkingLotManager parkingLotManager43 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager43.addParkingSpot(parkingSpot47);
        java.lang.String str49 = parkingSpot47.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator50 = new parking.CoveredParkingDecorator(parkingSpot47);
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator50);
        parking.ParkingSpot parkingSpot55 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str56 = parkingSpot55.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator57 = new parking.CoveredParkingDecorator(parkingSpot55);
        parking.HandicapAccessDecorator handicapAccessDecorator58 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator57);
        int int59 = handicapAccessDecorator58.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator60 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator58);
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator58);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator58);
        java.lang.String str63 = handicapAccessDecorator58.getDetails();
        java.lang.String str64 = handicapAccessDecorator58.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str21, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager30);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(parkingLotManager43);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str63, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str64, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        int int11 = coveredParkingDecorator5.getId();
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        int int13 = handicapAccessDecorator10.getId();
        java.lang.String str14 = handicapAccessDecorator10.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator(parkingSpot35);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator36);
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator42 = new parking.HandicapAccessDecorator(parkingSpot41);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator42);
        java.util.List<parking.ParkingSpot> parkingSpotList44 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList45 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertNotNull(parkingSpotList44);
        org.junit.Assert.assertNotNull(parkingSpotList45);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getDetails();
        java.lang.String str8 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = eVChargingDecorator11.getParkingLot();
        java.lang.String str13 = eVChargingDecorator11.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, EV Charging Available" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        int int10 = handicapAccessDecorator9.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = handicapAccessDecorator11.getDetails();
        int int13 = handicapAccessDecorator11.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator40);
        java.lang.String str42 = coveredParkingDecorator41.getDetails();
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator41);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str42, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking");
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        int int13 = parkingSpot9.getId();
        java.lang.String str14 = parkingSpot9.getLocation();
        int int15 = parkingSpot9.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator(parkingSpot9);
        java.lang.String str17 = parkingSpot9.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot9);
        java.lang.String str19 = eVChargingDecorator18.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '4', "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Covered Parking", "Parking Spot ID: 100, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        int int29 = handicapAccessDecorator28.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator28);
        parking.HandicapAccessDecorator handicapAccessDecorator32 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parking.EVChargingDecorator eVChargingDecorator33 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str6 = handicapAccessDecorator5.getDetails();
        java.lang.Class<?> wildcardClass7 = handicapAccessDecorator5.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str6, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager7 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager7.addParkingSpot(parkingSpot11);
        java.lang.String str13 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator(parkingSpot11);
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator(parkingSpot11);
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator15);
        java.lang.String str17 = handicapAccessDecorator16.getLocation();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator16);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator16);
        java.lang.String str20 = handicapAccessDecorator16.getDetails();
        java.lang.String str21 = handicapAccessDecorator16.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingLotManager7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str20, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        java.lang.String str13 = handicapAccessDecorator12.getLocation();
        java.lang.String str14 = handicapAccessDecorator12.getDetails();
        java.lang.String str15 = handicapAccessDecorator12.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator16 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator12);
        java.lang.String str17 = handicapAccessDecorator12.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        int int10 = coveredParkingDecorator7.getId();
        java.lang.String str11 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (byte) 100, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking");
        parkingLotManager0.addParkingSpot(parkingSpot27);
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager30 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getLocation();
        java.lang.String str36 = parkingSpot34.getLocation();
        parkingLotManager30.addParkingSpot(parkingSpot34);
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str42 = parkingSpot41.getLocation();
        parkingLotManager30.addParkingSpot(parkingSpot41);
        parking.ParkingLotManager parkingLotManager44 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot48 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str49 = parkingSpot48.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator50 = new parking.CoveredParkingDecorator(parkingSpot48);
        java.lang.String str51 = coveredParkingDecorator50.getDetails();
        parking.EVChargingDecorator eVChargingDecorator52 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator50);
        parkingLotManager44.addParkingSpot((parking.ParkingSpot) eVChargingDecorator52);
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) eVChargingDecorator52);
        parking.ParkingSpot parkingSpot58 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager30.addParkingSpot(parkingSpot58);
        java.util.List<parking.ParkingSpot> parkingSpotList60 = parkingLotManager30.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList61 = parkingLotManager30.getParkingSpots();
        parking.ParkingSpot parkingSpot65 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parking.EVChargingDecorator eVChargingDecorator66 = new parking.EVChargingDecorator(parkingSpot65);
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) eVChargingDecorator66);
        parking.ParkingLotManager parkingLotManager68 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot72 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager68.addParkingSpot(parkingSpot72);
        java.lang.String str74 = parkingSpot72.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator75 = new parking.CoveredParkingDecorator(parkingSpot72);
        java.lang.String str76 = coveredParkingDecorator75.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator77 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator75);
        parking.CoveredParkingDecorator coveredParkingDecorator78 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator77);
        java.lang.String str79 = coveredParkingDecorator78.getDetails();
        int int80 = coveredParkingDecorator78.getId();
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator78);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator78);
        java.util.List<parking.ParkingSpot> parkingSpotList83 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList84 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertNotNull(parkingLotManager30);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(parkingLotManager44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str51, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList60);
        org.junit.Assert.assertNotNull(parkingSpotList61);
        org.junit.Assert.assertNotNull(parkingLotManager68);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str76, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str79, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(parkingSpotList83);
        org.junit.Assert.assertNotNull(parkingSpotList84);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.util.List<parking.ParkingSpot> parkingSpotList28 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator(parkingSpot33);
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        java.lang.String str37 = coveredParkingDecorator35.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator35);
        java.util.List<parking.ParkingSpot> parkingSpotList39 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager40 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str45 = parkingSpot44.getLocation();
        java.lang.String str46 = parkingSpot44.getLocation();
        parkingLotManager40.addParkingSpot(parkingSpot44);
        parking.ParkingSpot parkingSpot51 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str52 = parkingSpot51.getLocation();
        parkingLotManager40.addParkingSpot(parkingSpot51);
        parking.ParkingLotManager parkingLotManager54 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot58 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str59 = parkingSpot58.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator60 = new parking.CoveredParkingDecorator(parkingSpot58);
        java.lang.String str61 = coveredParkingDecorator60.getDetails();
        parking.EVChargingDecorator eVChargingDecorator62 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator60);
        parkingLotManager54.addParkingSpot((parking.ParkingSpot) eVChargingDecorator62);
        parkingLotManager40.addParkingSpot((parking.ParkingSpot) eVChargingDecorator62);
        parking.ParkingSpot parkingSpot68 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager40.addParkingSpot(parkingSpot68);
        parking.HandicapAccessDecorator handicapAccessDecorator70 = new parking.HandicapAccessDecorator(parkingSpot68);
        parkingLotManager0.addParkingSpot(parkingSpot68);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList28);
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList39);
        org.junit.Assert.assertNotNull(parkingLotManager40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(parkingLotManager54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str61, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        java.lang.String str8 = handicapAccessDecorator6.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        java.lang.String str11 = coveredParkingDecorator9.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator12);
        parking.HandicapAccessDecorator handicapAccessDecorator14 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Handicap Accessible, Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str11 = coveredParkingDecorator5.getParkingLot();
        int int12 = coveredParkingDecorator5.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        int int4 = parkingSpot3.getId();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int8 = coveredParkingDecorator7.getId();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str11 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = handicapAccessDecorator11.getDetails();
        java.lang.String str13 = handicapAccessDecorator11.getParkingLot();
        java.lang.String str14 = handicapAccessDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator7);
        parking.ParkingLotManager parkingLotManager12 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager12.addParkingSpot(parkingSpot16);
        java.lang.String str18 = parkingSpot16.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot16);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        java.lang.String str21 = eVChargingDecorator20.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator20);
        int int23 = eVChargingDecorator20.getId();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        java.lang.String str25 = eVChargingDecorator20.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingLotManager12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        int int10 = handicapAccessDecorator9.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = handicapAccessDecorator11.getDetails();
        java.lang.Class<?> wildcardClass13 = handicapAccessDecorator11.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager21.addParkingSpot(parkingSpot25);
        java.lang.String str27 = parkingSpot25.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot25);
        java.lang.String str29 = parkingSpot25.getLocation();
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator(parkingSpot25);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator30);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager34 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot38 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager34.addParkingSpot(parkingSpot38);
        java.lang.String str40 = parkingSpot38.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator(parkingSpot38);
        parking.CoveredParkingDecorator coveredParkingDecorator42 = new parking.CoveredParkingDecorator(parkingSpot38);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator42);
        java.util.List<parking.ParkingSpot> parkingSpotList44 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingLotManager34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList44);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(97, "Parking Spot ID: -1, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: ", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        int int11 = handicapAccessDecorator7.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str15 = eVChargingDecorator14.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available");
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) 'a', "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator4);
        java.lang.String str6 = handicapAccessDecorator5.getParkingLot();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str11 = parkingSpot10.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator(parkingSpot10);
        java.lang.String str13 = coveredParkingDecorator12.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        java.lang.String str15 = coveredParkingDecorator14.getDetails();
        java.lang.String str16 = coveredParkingDecorator14.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator14);
        parking.ParkingLotManager parkingLotManager18 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot22 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager18.addParkingSpot(parkingSpot22);
        java.lang.String str24 = parkingSpot22.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator25 = new parking.HandicapAccessDecorator(parkingSpot22);
        java.lang.String str26 = handicapAccessDecorator25.getDetails();
        java.lang.String str27 = handicapAccessDecorator25.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator25);
        parking.ParkingSpot parkingSpot32 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str33 = parkingSpot32.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator34 = new parking.CoveredParkingDecorator(parkingSpot32);
        parking.HandicapAccessDecorator handicapAccessDecorator35 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator34);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator34);
        java.lang.String str37 = coveredParkingDecorator34.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager18);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str26, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        int int4 = parkingSpot3.getId();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str9 = coveredParkingDecorator8.getDetails();
        java.lang.String str10 = coveredParkingDecorator8.getLocation();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: ");
        parkingLotManager0.addParkingSpot(parkingSpot18);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str25 = parkingSpot24.getLocation();
        java.lang.String str26 = parkingSpot24.getLocation();
        parkingLotManager20.addParkingSpot(parkingSpot24);
        parking.ParkingSpot parkingSpot31 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str32 = parkingSpot31.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator(parkingSpot31);
        java.lang.String str34 = coveredParkingDecorator33.getDetails();
        parking.EVChargingDecorator eVChargingDecorator35 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator33);
        java.lang.String str36 = coveredParkingDecorator33.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator37 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator33);
        java.lang.String str38 = coveredParkingDecorator33.getDetails();
        parking.EVChargingDecorator eVChargingDecorator39 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator33);
        parkingLotManager20.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator33);
        int int41 = coveredParkingDecorator33.getId();
        java.lang.String str42 = coveredParkingDecorator33.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator33);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str36, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str38, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str42, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = coveredParkingDecorator5.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator14 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str15 = coveredParkingDecorator5.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator9.getDetails();
        java.lang.String str11 = coveredParkingDecorator9.getDetails();
        java.lang.String str12 = coveredParkingDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager7 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager7.addParkingSpot(parkingSpot11);
        java.lang.String str13 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator(parkingSpot11);
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator(parkingSpot11);
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator15);
        java.lang.String str17 = handicapAccessDecorator16.getLocation();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator16);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator16);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str25 = parkingSpot24.getLocation();
        java.lang.String str26 = parkingSpot24.getLocation();
        parkingLotManager20.addParkingSpot(parkingSpot24);
        parking.ParkingSpot parkingSpot31 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str32 = parkingSpot31.getLocation();
        parkingLotManager20.addParkingSpot(parkingSpot31);
        java.util.List<parking.ParkingSpot> parkingSpotList34 = parkingLotManager20.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList35 = parkingLotManager20.getParkingSpots();
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator40 = new parking.EVChargingDecorator(parkingSpot39);
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator(parkingSpot39);
        parking.HandicapAccessDecorator handicapAccessDecorator42 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator41);
        parkingLotManager20.addParkingSpot((parking.ParkingSpot) eVChargingDecorator41);
        java.lang.String str44 = eVChargingDecorator41.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator41);
        java.util.List<parking.ParkingSpot> parkingSpotList46 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot47 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingLotManager0.addParkingSpot(parkingSpot47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingLotManager7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(parkingSpotList34);
        org.junit.Assert.assertNotNull(parkingSpotList35);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str44, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertNotNull(parkingSpotList46);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator40);
        java.lang.String str42 = coveredParkingDecorator41.getParkingLot();
        int int43 = coveredParkingDecorator41.getId();
        java.lang.String str44 = coveredParkingDecorator41.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str44, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking");
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator(parkingSpot15);
        parking.HandicapAccessDecorator handicapAccessDecorator18 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator17);
        java.lang.String str19 = handicapAccessDecorator18.getDetails();
        java.lang.String str20 = handicapAccessDecorator18.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator21 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator18);
        java.lang.String str22 = handicapAccessDecorator18.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator18);
        java.lang.String str24 = handicapAccessDecorator18.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str19, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str20, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str22, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str24, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getParkingLot();
        java.lang.String str9 = handicapAccessDecorator7.getDetails();
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        java.lang.String str11 = handicapAccessDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str7 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(97, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, EV Charging Available");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = handicapAccessDecorator11.getDetails();
        java.lang.String str13 = handicapAccessDecorator11.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator40);
        java.lang.String str42 = coveredParkingDecorator41.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator43 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator41);
        java.lang.String str44 = handicapAccessDecorator43.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking, Handicap Accessible" + "'", str44, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot10);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator11);
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator12);
        java.lang.String str14 = eVChargingDecorator12.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator12);
        java.lang.String str16 = eVChargingDecorator12.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str14, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available" + "'", str16, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str23 = eVChargingDecorator21.getLocation();
        int int24 = eVChargingDecorator21.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str26 = eVChargingDecorator21.getDetails();
        java.lang.String str27 = eVChargingDecorator21.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str27, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        java.lang.String str8 = coveredParkingDecorator6.getLocation();
        java.lang.Class<?> wildcardClass9 = coveredParkingDecorator6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str8, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = coveredParkingDecorator8.getDetails();
        java.lang.String str10 = coveredParkingDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((-1), "", "");
        parkingLotManager0.addParkingSpot(parkingSpot16);
        java.lang.String str18 = parkingSpot16.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot16);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        int int22 = handicapAccessDecorator19.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "", "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        int int4 = parkingSpot3.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str7 = eVChargingDecorator6.getLocation();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = handicapAccessDecorator11.getDetails();
        java.lang.String str13 = handicapAccessDecorator11.getDetails();
        java.lang.String str14 = handicapAccessDecorator11.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        java.lang.Class<?> wildcardClass16 = coveredParkingDecorator15.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        int int11 = coveredParkingDecorator7.getId();
        java.lang.String str12 = coveredParkingDecorator7.getLocation();
        java.lang.String str13 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '#', "Parking Spot ID: 100, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible", "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking");
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str11 = eVChargingDecorator10.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available", "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: ");
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str28 = eVChargingDecorator24.getDetails();
        java.lang.String str29 = eVChargingDecorator24.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        java.lang.String str17 = parkingSpot15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot15);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager20.addParkingSpot(parkingSpot24);
        java.lang.String str26 = parkingSpot24.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot24);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        java.lang.String str31 = coveredParkingDecorator27.getDetails();
        java.lang.Class<?> wildcardClass32 = coveredParkingDecorator27.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str30, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str31, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str6 = eVChargingDecorator5.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str8 = parkingSpot4.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator(parkingSpot4);
        int int10 = handicapAccessDecorator9.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator4);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available", "Parking Spot ID: -1, Location: , Lot: ");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str4, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str5, "Parking Spot ID: -1, Location: , Lot: ");
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        int int9 = eVChargingDecorator7.getId();
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str12 = eVChargingDecorator7.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        int int5 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        java.lang.String str11 = coveredParkingDecorator10.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Covered Parking");
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager9 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager9.addParkingSpot(parkingSpot13);
        java.lang.String str15 = parkingSpot13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator(parkingSpot13);
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str18 = eVChargingDecorator16.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator16);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str25 = parkingSpot24.getLocation();
        java.lang.String str26 = parkingSpot24.getLocation();
        parkingLotManager20.addParkingSpot(parkingSpot24);
        parking.ParkingSpot parkingSpot31 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str32 = parkingSpot31.getLocation();
        parkingLotManager20.addParkingSpot(parkingSpot31);
        java.util.List<parking.ParkingSpot> parkingSpotList34 = parkingLotManager20.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList35 = parkingLotManager20.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList36 = parkingLotManager20.getParkingSpots();
        parking.ParkingSpot parkingSpot40 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str41 = parkingSpot40.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator42 = new parking.CoveredParkingDecorator(parkingSpot40);
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator42);
        parking.EVChargingDecorator eVChargingDecorator44 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator43);
        parking.EVChargingDecorator eVChargingDecorator45 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator43);
        java.lang.String str46 = eVChargingDecorator43.getDetails();
        parking.EVChargingDecorator eVChargingDecorator47 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator43);
        java.lang.String str48 = eVChargingDecorator47.getDetails();
        parkingLotManager20.addParkingSpot((parking.ParkingSpot) eVChargingDecorator47);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator47);
        parking.ParkingSpot parkingSpot54 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str55 = parkingSpot54.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator56 = new parking.CoveredParkingDecorator(parkingSpot54);
        java.lang.String str57 = parkingSpot54.getDetails();
        java.lang.String str58 = parkingSpot54.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator59 = new parking.CoveredParkingDecorator(parkingSpot54);
        java.lang.String str60 = coveredParkingDecorator59.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator59);
        parking.ParkingSpot parkingSpot65 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str66 = parkingSpot65.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator67 = new parking.CoveredParkingDecorator(parkingSpot65);
        parking.EVChargingDecorator eVChargingDecorator68 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator67);
        parking.EVChargingDecorator eVChargingDecorator69 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator68);
        parking.EVChargingDecorator eVChargingDecorator70 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator68);
        java.lang.String str71 = eVChargingDecorator68.getDetails();
        parking.EVChargingDecorator eVChargingDecorator72 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator68);
        java.lang.String str73 = eVChargingDecorator72.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator74 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator72);
        java.lang.String str75 = eVChargingDecorator72.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator72);
        parking.ParkingSpot parkingSpot77 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingLotManager0.addParkingSpot(parkingSpot77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingLotManager9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(parkingSpotList34);
        org.junit.Assert.assertNotNull(parkingSpotList35);
        org.junit.Assert.assertNotNull(parkingSpotList36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str46, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str48, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str57, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str60, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str71, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str73, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str75, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        java.lang.String str11 = eVChargingDecorator8.getParkingLot();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        java.lang.String str13 = eVChargingDecorator8.getDetails();
        java.lang.String str14 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, Covered Parking", "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "Parking Spot ID: -1, Location: , Lot: , Covered Parking", "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        java.lang.String str4 = parkingSpot3.getLocation();
        java.lang.String str5 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str4, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Lot: Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str5, "Parking Spot ID: 1, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Lot: Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str5 = handicapAccessDecorator4.getParkingLot();
        java.lang.String str6 = handicapAccessDecorator4.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 10, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str6, "Parking Spot ID: 10, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str11 = eVChargingDecorator10.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        java.lang.String str9 = handicapAccessDecorator7.getParkingLot();
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        int int11 = handicapAccessDecorator10.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str23 = eVChargingDecorator21.getLocation();
        int int24 = eVChargingDecorator21.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parking.HandicapAccessDecorator handicapAccessDecorator26 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator25);
        java.lang.String str27 = handicapAccessDecorator26.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Covered Parking, Handicap Accessible" + "'", str27, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str11 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator(parkingSpot19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator(parkingSpot19);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str28 = parkingSpot27.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator(parkingSpot27);
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        int int31 = handicapAccessDecorator30.getId();
        java.lang.String str32 = handicapAccessDecorator30.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator30);
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        java.lang.String str36 = coveredParkingDecorator35.getParkingLot();
        java.lang.String str37 = coveredParkingDecorator35.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.util.List<parking.ParkingSpot> parkingSpotList10 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList11 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager12 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str17 = parkingSpot16.getLocation();
        java.lang.String str18 = parkingSpot16.getLocation();
        parkingLotManager12.addParkingSpot(parkingSpot16);
        parking.ParkingSpot parkingSpot23 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str24 = parkingSpot23.getLocation();
        parkingLotManager12.addParkingSpot(parkingSpot23);
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str30 = parkingSpot29.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator(parkingSpot29);
        parking.EVChargingDecorator eVChargingDecorator32 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator31);
        parking.EVChargingDecorator eVChargingDecorator33 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator32);
        parkingLotManager12.addParkingSpot((parking.ParkingSpot) eVChargingDecorator33);
        java.lang.String str35 = eVChargingDecorator33.getLocation();
        int int36 = eVChargingDecorator33.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator37 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator33);
        java.lang.String str38 = eVChargingDecorator33.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator39 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator33);
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator39);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator40);
        parking.CoveredParkingDecorator coveredParkingDecorator42 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator40);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList10);
        org.junit.Assert.assertNotNull(parkingSpotList11);
        org.junit.Assert.assertNotNull(parkingLotManager12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str38, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str14 = eVChargingDecorator8.getLocation();
        java.lang.String str15 = eVChargingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator16 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str17 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str17, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = coveredParkingDecorator8.getDetails();
        java.lang.String str10 = coveredParkingDecorator8.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(35, "Parking Spot ID: -1, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available, Covered Parking");
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str8 = parkingSpot4.getLocation();
        java.lang.String str9 = parkingSpot4.getDetails();
        int int10 = parkingSpot4.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str9, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str6 = eVChargingDecorator5.getDetails();
        java.lang.String str7 = eVChargingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, EV Charging Available" + "'", str6, "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, EV Charging Available" + "'", str7, "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: 1, Location: Parking Spot ID: 1, Location: , Lot: , Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available", "Parking Spot ID: 97, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator9.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) 'a', "Parking Spot ID: 1, Location: hi!, Lot: ", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator4);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(97, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking", "Parking Spot ID: -1, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator(parkingSpot4);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        java.lang.String str9 = handicapAccessDecorator7.getParkingLot();
        java.lang.String str10 = handicapAccessDecorator7.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        java.util.List<parking.ParkingSpot> parkingSpotList21 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        java.lang.String str28 = coveredParkingDecorator27.getDetails();
        parking.EVChargingDecorator eVChargingDecorator29 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator38 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        java.lang.String str39 = handicapAccessDecorator38.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator40 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator38);
        java.lang.String str41 = handicapAccessDecorator40.getDetails();
        java.lang.String str42 = handicapAccessDecorator40.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator40);
        java.lang.Class<?> wildcardClass44 = parkingLotManager0.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str39, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str41, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str42, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "Parking Spot ID: 1, Location: hi!, Lot: ", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        int int5 = parkingSpot3.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        int int6 = handicapAccessDecorator5.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        int int5 = eVChargingDecorator4.getId();
        java.lang.String str6 = eVChargingDecorator4.getParkingLot();
        java.lang.String str7 = eVChargingDecorator4.getDetails();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator4);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        java.lang.String str7 = eVChargingDecorator5.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str7, "Parking Spot ID: -1, Location: , Lot: ");
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.Class<?> wildcardClass7 = coveredParkingDecorator5.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        java.lang.String str11 = handicapAccessDecorator6.getLocation();
        java.lang.String str12 = handicapAccessDecorator6.getDetails();
        java.lang.String str13 = handicapAccessDecorator6.getDetails();
        java.lang.String str14 = handicapAccessDecorator6.getDetails();
        java.lang.String str15 = handicapAccessDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str15 = coveredParkingDecorator14.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager21.addParkingSpot(parkingSpot25);
        java.lang.String str27 = parkingSpot25.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot25);
        java.lang.String str29 = parkingSpot25.getLocation();
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator(parkingSpot25);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator30);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager34 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot38 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager34.addParkingSpot(parkingSpot38);
        java.lang.String str40 = parkingSpot38.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator(parkingSpot38);
        parking.CoveredParkingDecorator coveredParkingDecorator42 = new parking.CoveredParkingDecorator(parkingSpot38);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator42);
        java.lang.Class<?> wildcardClass44 = coveredParkingDecorator42.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingLotManager34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str15 = coveredParkingDecorator14.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator14);
        java.lang.String str17 = handicapAccessDecorator16.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator12);
        java.lang.Class<?> wildcardClass14 = handicapAccessDecorator12.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: ");
        parkingLotManager0.addParkingSpot(parkingSpot18);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str25 = parkingSpot24.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator26 = new parking.CoveredParkingDecorator(parkingSpot24);
        java.lang.String str27 = coveredParkingDecorator26.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator26);
        parkingLotManager20.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        parking.ParkingLotManager parkingLotManager31 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager31.addParkingSpot(parkingSpot35);
        parking.ParkingSpot parkingSpot40 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str41 = parkingSpot40.getLocation();
        java.lang.String str42 = parkingSpot40.getLocation();
        parkingLotManager31.addParkingSpot(parkingSpot40);
        parking.ParkingLotManager parkingLotManager44 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot48 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager44.addParkingSpot(parkingSpot48);
        java.lang.String str50 = parkingSpot48.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator51 = new parking.HandicapAccessDecorator(parkingSpot48);
        java.lang.String str52 = handicapAccessDecorator51.getDetails();
        parkingLotManager31.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator51);
        parking.EVChargingDecorator eVChargingDecorator54 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator51);
        parking.EVChargingDecorator eVChargingDecorator55 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator54);
        java.lang.String str56 = eVChargingDecorator55.getDetails();
        java.lang.String str57 = eVChargingDecorator55.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator55);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str27, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager31);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(parkingLotManager44);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str52, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, EV Charging Available, EV Charging Available" + "'", str56, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        int int41 = coveredParkingDecorator40.getId();
        parking.EVChargingDecorator eVChargingDecorator42 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator40);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator(parkingSpot9);
        java.lang.String str14 = eVChargingDecorator13.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator13);
        java.lang.String str16 = eVChargingDecorator13.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str8 = eVChargingDecorator7.getLocation();
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(35, "Parking Spot ID: -1, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking");
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList12 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str17 = parkingSpot16.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator18 = new parking.CoveredParkingDecorator(parkingSpot16);
        java.lang.String str19 = coveredParkingDecorator18.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList25 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((-1), "", "");
        parking.CoveredParkingDecorator coveredParkingDecorator30 = new parking.CoveredParkingDecorator(parkingSpot29);
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator(parkingSpot29);
        parking.CoveredParkingDecorator coveredParkingDecorator32 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator31);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator31);
        java.lang.String str34 = coveredParkingDecorator31.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(parkingSpotList12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(parkingSpotList25);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator(parkingSpot11);
        java.lang.String str16 = handicapAccessDecorator15.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator15);
        int int18 = handicapAccessDecorator15.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '4', "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
        java.lang.String str4 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available" + "'", str4, "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList9 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager10 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot14 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager10.addParkingSpot(parkingSpot14);
        java.lang.String str16 = parkingSpot14.getDetails();
        parking.EVChargingDecorator eVChargingDecorator17 = new parking.EVChargingDecorator(parkingSpot14);
        java.lang.String str18 = eVChargingDecorator17.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator17);
        java.lang.String str20 = eVChargingDecorator17.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator17);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingSpotList9);
        org.junit.Assert.assertNotNull(parkingLotManager10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str20, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertNotNull(parkingSpotList23);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList12 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str17 = parkingSpot16.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator18 = new parking.CoveredParkingDecorator(parkingSpot16);
        java.lang.String str19 = coveredParkingDecorator18.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingLotManager parkingLotManager25 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager25.addParkingSpot(parkingSpot29);
        java.lang.String str31 = parkingSpot29.getLocation();
        int int32 = parkingSpot29.getId();
        parking.EVChargingDecorator eVChargingDecorator33 = new parking.EVChargingDecorator(parkingSpot29);
        java.lang.String str34 = eVChargingDecorator33.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator33);
        java.lang.Class<?> wildcardClass36 = parkingLotManager0.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(parkingSpotList12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(parkingLotManager25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str34, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '#', "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = coveredParkingDecorator8.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str12 = eVChargingDecorator11.getDetails();
        java.lang.String str13 = eVChargingDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available");
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        int int5 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str8 = coveredParkingDecorator6.getDetails();
        java.lang.String str9 = coveredParkingDecorator6.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str9 = parkingSpot4.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator(parkingSpot4);
        java.lang.String str13 = parkingSpot4.getDetails();
        java.lang.String str14 = parkingSpot4.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: ");
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator7);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str16 = parkingSpot15.getLocation();
        parking.EVChargingDecorator eVChargingDecorator17 = new parking.EVChargingDecorator(parkingSpot15);
        parking.HandicapAccessDecorator handicapAccessDecorator18 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator17);
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator17);
        java.lang.String str20 = eVChargingDecorator17.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator21 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator21);
        parking.EVChargingDecorator eVChargingDecorator23 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator21);
        java.lang.Class<?> wildcardClass24 = eVChargingDecorator23.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str20, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str6 = eVChargingDecorator5.getLocation();
        java.lang.String str7 = eVChargingDecorator5.getDetails();
        java.lang.Class<?> wildcardClass8 = eVChargingDecorator5.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        int int4 = parkingSpot3.getId();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str8 = eVChargingDecorator7.getLocation();
        java.lang.String str9 = eVChargingDecorator7.getParkingLot();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator5.getDetails();
        int int8 = handicapAccessDecorator5.getId();
        java.lang.String str9 = handicapAccessDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        int int5 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.Class<?> wildcardClass10 = eVChargingDecorator7.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        int int29 = handicapAccessDecorator28.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator28);
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str36 = parkingSpot35.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator37 = new parking.CoveredParkingDecorator(parkingSpot35);
        java.lang.String str38 = coveredParkingDecorator37.getDetails();
        parking.EVChargingDecorator eVChargingDecorator39 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator37);
        java.lang.String str40 = coveredParkingDecorator37.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator37);
        java.lang.String str42 = coveredParkingDecorator37.getDetails();
        java.lang.String str43 = coveredParkingDecorator37.getDetails();
        java.lang.String str44 = coveredParkingDecorator37.getDetails();
        int int45 = coveredParkingDecorator37.getId();
        java.lang.String str46 = coveredParkingDecorator37.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator37);
        java.lang.String str48 = coveredParkingDecorator37.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str38, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str40, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str42, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str43, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str44, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str46, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str48, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        java.lang.String str7 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        int int9 = coveredParkingDecorator8.getId();
        java.lang.String str10 = coveredParkingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str6 = handicapAccessDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str8 = handicapAccessDecorator6.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "", "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        int int4 = parkingSpot3.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str6 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        int int11 = eVChargingDecorator8.getId();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.HandicapAccessDecorator handicapAccessDecorator14 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str15 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str10 = coveredParkingDecorator7.getLocation();
        java.lang.String str11 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingLotManager parkingLotManager31 = parking.ParkingLotManager.getInstance();
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager31.getParkingSpots();
        parking.ParkingSpot parkingSpot36 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str37 = parkingSpot36.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator(parkingSpot36);
        parking.EVChargingDecorator eVChargingDecorator39 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator38);
        parking.EVChargingDecorator eVChargingDecorator40 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator39);
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator39);
        java.lang.String str42 = eVChargingDecorator39.getDetails();
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator39);
        parkingLotManager31.addParkingSpot((parking.ParkingSpot) eVChargingDecorator39);
        java.lang.String str45 = eVChargingDecorator39.getDetails();
        java.lang.String str46 = eVChargingDecorator39.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator39);
        java.lang.String str48 = eVChargingDecorator39.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager31);
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str42, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str45, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str46, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str48, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        java.lang.String str17 = parkingSpot15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot15);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        parking.ParkingSpot parkingSpot23 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str24 = parkingSpot23.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator(parkingSpot23);
        java.lang.String str26 = coveredParkingDecorator25.getDetails();
        java.lang.String str27 = coveredParkingDecorator25.getParkingLot();
        java.lang.String str28 = coveredParkingDecorator25.getParkingLot();
        java.lang.String str29 = coveredParkingDecorator25.getParkingLot();
        int int30 = coveredParkingDecorator25.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator25);
        parking.EVChargingDecorator eVChargingDecorator32 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator25);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str8 = eVChargingDecorator7.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = eVChargingDecorator7.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        java.lang.String str5 = parkingSpot3.getLocation();
        java.lang.Class<?> wildcardClass6 = parkingSpot3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        java.lang.String str11 = coveredParkingDecorator9.getDetails();
        java.lang.String str12 = coveredParkingDecorator9.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = eVChargingDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator(parkingSpot35);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator36);
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator42 = new parking.HandicapAccessDecorator(parkingSpot41);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator42);
        java.util.List<parking.ParkingSpot> parkingSpotList44 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager45 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot49 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager45.addParkingSpot(parkingSpot49);
        parking.ParkingSpot parkingSpot54 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str55 = parkingSpot54.getLocation();
        parking.EVChargingDecorator eVChargingDecorator56 = new parking.EVChargingDecorator(parkingSpot54);
        parkingLotManager45.addParkingSpot(parkingSpot54);
        parking.EVChargingDecorator eVChargingDecorator58 = new parking.EVChargingDecorator(parkingSpot54);
        java.lang.String str59 = eVChargingDecorator58.getDetails();
        java.lang.String str60 = eVChargingDecorator58.getDetails();
        java.lang.String str61 = eVChargingDecorator58.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator62 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator58);
        java.lang.String str63 = eVChargingDecorator58.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator64 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator58);
        parking.CoveredParkingDecorator coveredParkingDecorator65 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator64);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator65);
        java.lang.String str67 = coveredParkingDecorator65.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertNotNull(parkingSpotList44);
        org.junit.Assert.assertNotNull(parkingLotManager45);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str59, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str60, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str61, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str63, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Covered Parking" + "'", str67, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        int int11 = eVChargingDecorator8.getId();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        java.lang.String str13 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getParkingLot();
        java.lang.String str9 = handicapAccessDecorator6.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        java.util.List<parking.ParkingSpot> parkingSpotList1 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList2 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList3 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList1);
        org.junit.Assert.assertNotNull(parkingSpotList2);
        org.junit.Assert.assertNotNull(parkingSpotList3);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        int int9 = handicapAccessDecorator6.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str7 = eVChargingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        int int4 = parkingSpot3.getId();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, EV Charging Available" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, EV Charging Available");
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager12 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager12.addParkingSpot(parkingSpot16);
        java.lang.String str18 = parkingSpot16.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator(parkingSpot16);
        java.lang.String str20 = eVChargingDecorator19.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator21 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator19);
        java.lang.String str22 = handicapAccessDecorator21.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator21);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str28 = parkingSpot27.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator(parkingSpot27);
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator29);
        java.lang.String str31 = handicapAccessDecorator29.getDetails();
        int int32 = handicapAccessDecorator29.getId();
        parking.EVChargingDecorator eVChargingDecorator33 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator29);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.EVChargingDecorator eVChargingDecorator35 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator29);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(parkingLotManager12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str22, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str28, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str31, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available");
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str8 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        int int10 = coveredParkingDecorator7.getId();
        java.lang.Class<?> wildcardClass11 = coveredParkingDecorator7.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = coveredParkingDecorator7.getLocation();
        int int9 = coveredParkingDecorator7.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        java.util.List<parking.ParkingSpot> parkingSpotList1 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList2 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot6 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str7 = parkingSpot6.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot6);
        java.lang.String str9 = coveredParkingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str11 = coveredParkingDecorator10.getDetails();
        java.lang.String str12 = coveredParkingDecorator10.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator10);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        java.lang.String str20 = coveredParkingDecorator19.getDetails();
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        java.lang.String str22 = coveredParkingDecorator19.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator23 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        java.lang.String str24 = coveredParkingDecorator19.getDetails();
        java.lang.String str25 = coveredParkingDecorator19.getDetails();
        java.lang.String str26 = coveredParkingDecorator19.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator19);
        parking.ParkingLotManager parkingLotManager28 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot32 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager28.addParkingSpot(parkingSpot32);
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str38 = parkingSpot37.getLocation();
        java.lang.String str39 = parkingSpot37.getLocation();
        parkingLotManager28.addParkingSpot(parkingSpot37);
        parking.ParkingLotManager parkingLotManager41 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot45 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager41.addParkingSpot(parkingSpot45);
        java.lang.String str47 = parkingSpot45.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator48 = new parking.HandicapAccessDecorator(parkingSpot45);
        java.lang.String str49 = handicapAccessDecorator48.getDetails();
        parkingLotManager28.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator48);
        java.lang.String str51 = handicapAccessDecorator48.getDetails();
        java.lang.String str52 = handicapAccessDecorator48.getDetails();
        int int53 = handicapAccessDecorator48.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator48);
        java.lang.Class<?> wildcardClass55 = handicapAccessDecorator48.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList1);
        org.junit.Assert.assertNotNull(parkingSpotList2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str20, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str22, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str24, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str25, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager28);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(parkingLotManager41);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str49, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str51, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str52, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(97, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking", "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator11);
        java.lang.String str13 = eVChargingDecorator11.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str9 = handicapAccessDecorator6.getParkingLot();
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str12 = coveredParkingDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        java.lang.String str17 = parkingSpot15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot15);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        java.util.List<parking.ParkingSpot> parkingSpotList20 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager21.addParkingSpot(parkingSpot25);
        parking.ParkingSpot parkingSpot30 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str31 = parkingSpot30.getLocation();
        parking.EVChargingDecorator eVChargingDecorator32 = new parking.EVChargingDecorator(parkingSpot30);
        parkingLotManager21.addParkingSpot(parkingSpot30);
        parking.EVChargingDecorator eVChargingDecorator34 = new parking.EVChargingDecorator(parkingSpot30);
        java.lang.String str35 = eVChargingDecorator34.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator34);
        parking.ParkingSpot parkingSpot40 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parkingLotManager0.addParkingSpot(parkingSpot40);
        parking.CoveredParkingDecorator coveredParkingDecorator42 = new parking.CoveredParkingDecorator(parkingSpot40);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingSpotList20);
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str35, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator4);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        int int7 = eVChargingDecorator5.getId();
        java.lang.String str8 = eVChargingDecorator5.getDetails();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available" + "'", str8, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available");
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str7 = eVChargingDecorator6.getDetails();
        int int8 = eVChargingDecorator6.getId();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str11 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        int int10 = handicapAccessDecorator7.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str13 = handicapAccessDecorator12.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        int int10 = coveredParkingDecorator9.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        java.lang.String str11 = coveredParkingDecorator10.getDetails();
        int int12 = coveredParkingDecorator10.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator10);
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator10);
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator10);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str7 = coveredParkingDecorator6.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(100, "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) -1, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available", "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str5 = eVChargingDecorator4.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: -1, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available, Lot: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, EV Charging Available" + "'", str5, "Parking Spot ID: -1, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available, Lot: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot18);
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingLotManager parkingLotManager22 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str27 = parkingSpot26.getLocation();
        java.lang.String str28 = parkingSpot26.getLocation();
        parkingLotManager22.addParkingSpot(parkingSpot26);
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        parkingLotManager22.addParkingSpot(parkingSpot33);
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str40 = parkingSpot39.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator(parkingSpot39);
        parking.EVChargingDecorator eVChargingDecorator42 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator41);
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator42);
        parkingLotManager22.addParkingSpot((parking.ParkingSpot) eVChargingDecorator43);
        parking.ParkingLotManager parkingLotManager45 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot49 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager45.addParkingSpot(parkingSpot49);
        java.lang.String str51 = parkingSpot49.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator52 = new parking.HandicapAccessDecorator(parkingSpot49);
        parkingLotManager22.addParkingSpot(parkingSpot49);
        java.lang.String str54 = parkingSpot49.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot49);
        parking.ParkingLotManager parkingLotManager56 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot60 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager56.addParkingSpot(parkingSpot60);
        java.lang.String str62 = parkingSpot60.getDetails();
        parking.EVChargingDecorator eVChargingDecorator63 = new parking.EVChargingDecorator(parkingSpot60);
        java.lang.String str64 = parkingSpot60.getLocation();
        parking.EVChargingDecorator eVChargingDecorator65 = new parking.EVChargingDecorator(parkingSpot60);
        java.lang.String str66 = eVChargingDecorator65.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator65);
        java.util.List<parking.ParkingSpot> parkingSpotList68 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingLotManager22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(parkingLotManager45);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str54, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertNotNull(parkingLotManager56);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str62, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(parkingSpotList68);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str5, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator(parkingSpot9);
        java.lang.String str14 = eVChargingDecorator13.getDetails();
        java.lang.String str15 = eVChargingDecorator13.getDetails();
        java.lang.String str16 = eVChargingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator13);
        java.lang.Class<?> wildcardClass18 = eVChargingDecorator13.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        java.lang.String str12 = eVChargingDecorator10.getDetails();
        java.lang.String str13 = eVChargingDecorator10.getParkingLot();
        java.lang.String str14 = eVChargingDecorator10.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str28 = eVChargingDecorator24.getDetails();
        java.lang.String str29 = eVChargingDecorator24.getDetails();
        java.lang.Class<?> wildcardClass30 = eVChargingDecorator24.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator(parkingSpot11);
        java.lang.String str16 = handicapAccessDecorator15.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator15);
        parking.HandicapAccessDecorator handicapAccessDecorator18 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator17);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = parkingSpot3.getDetails();
        java.lang.String str7 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str6, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str7, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        java.lang.String str9 = coveredParkingDecorator5.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str14 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.Class<?> wildcardClass16 = coveredParkingDecorator5.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str14 = eVChargingDecorator13.getLocation();
        java.lang.String str15 = eVChargingDecorator13.getDetails();
        java.lang.String str16 = eVChargingDecorator13.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        int int7 = parkingSpot4.getId();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        java.lang.String str14 = coveredParkingDecorator12.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str11 = parkingSpot10.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator(parkingSpot10);
        java.lang.String str13 = coveredParkingDecorator12.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        java.lang.String str15 = coveredParkingDecorator14.getDetails();
        java.lang.String str16 = coveredParkingDecorator14.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator14);
        parking.ParkingLotManager parkingLotManager18 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot22 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager18.addParkingSpot(parkingSpot22);
        java.lang.String str24 = parkingSpot22.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator25 = new parking.HandicapAccessDecorator(parkingSpot22);
        java.lang.String str26 = handicapAccessDecorator25.getDetails();
        java.lang.String str27 = handicapAccessDecorator25.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator25);
        parking.ParkingSpot parkingSpot32 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str33 = parkingSpot32.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator34 = new parking.CoveredParkingDecorator(parkingSpot32);
        parking.HandicapAccessDecorator handicapAccessDecorator35 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator34);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator34);
        java.lang.String str37 = coveredParkingDecorator34.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager18);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str26, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str7 = eVChargingDecorator6.getDetails();
        java.lang.String str8 = eVChargingDecorator6.getDetails();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        java.lang.String str10 = eVChargingDecorator6.getDetails();
        java.lang.String str11 = eVChargingDecorator6.getDetails();
        java.lang.String str12 = eVChargingDecorator6.getDetails();
        java.lang.String str13 = eVChargingDecorator6.getDetails();
        java.lang.String str14 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        int int10 = eVChargingDecorator6.getId();
        java.lang.String str11 = eVChargingDecorator6.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str9 = handicapAccessDecorator6.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str12 = handicapAccessDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator(parkingSpot3);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        int int8 = parkingSpot4.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.HandicapAccessDecorator handicapAccessDecorator25 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator22);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        java.util.List<parking.ParkingSpot> parkingSpotList21 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator30 = new parking.CoveredParkingDecorator(parkingSpot27);
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator30);
        java.lang.String str32 = coveredParkingDecorator30.getDetails();
        java.lang.String str33 = coveredParkingDecorator30.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator34 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator30);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator30);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList21);
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str32, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str33, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        int int7 = parkingSpot4.getId();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 1, "", "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking");
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot10);
        java.lang.String str12 = parkingSpot10.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot10);
        java.lang.Class<?> wildcardClass14 = parkingLotManager0.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str12, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.Class<?> wildcardClass10 = coveredParkingDecorator9.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.HandicapAccessDecorator handicapAccessDecorator14 = new parking.HandicapAccessDecorator(parkingSpot11);
        java.lang.Class<?> wildcardClass15 = handicapAccessDecorator14.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList13 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager14.addParkingSpot(parkingSpot18);
        java.lang.String str20 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator(parkingSpot18);
        parkingLotManager0.addParkingSpot(parkingSpot18);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot(0, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        parkingLotManager0.addParkingSpot(parkingSpot27);
        parking.ParkingSpot parkingSpot32 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str33 = parkingSpot32.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator34 = new parking.CoveredParkingDecorator(parkingSpot32);
        java.lang.String str35 = coveredParkingDecorator34.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator34);
        java.lang.String str37 = coveredParkingDecorator34.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator34);
        java.util.List<parking.ParkingSpot> parkingSpotList39 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot43 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str44 = parkingSpot43.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator45 = new parking.CoveredParkingDecorator(parkingSpot43);
        java.lang.String str46 = coveredParkingDecorator45.getDetails();
        parking.EVChargingDecorator eVChargingDecorator47 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator45);
        parking.CoveredParkingDecorator coveredParkingDecorator48 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator45);
        parking.CoveredParkingDecorator coveredParkingDecorator49 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator48);
        parking.EVChargingDecorator eVChargingDecorator50 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator49);
        java.lang.String str51 = coveredParkingDecorator49.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator49);
        int int53 = coveredParkingDecorator49.getId();
        java.lang.String str54 = coveredParkingDecorator49.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList13);
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str35, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str46, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str51, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str54, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking");
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator(parkingSpot11);
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator(parkingSpot11);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        java.lang.String str13 = handicapAccessDecorator12.getDetails();
        java.lang.String str14 = handicapAccessDecorator12.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager31 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager31.addParkingSpot(parkingSpot35);
        java.lang.String str37 = parkingSpot35.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator(parkingSpot35);
        parking.CoveredParkingDecorator coveredParkingDecorator39 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator38);
        java.lang.String str40 = coveredParkingDecorator38.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator41 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator38);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator38);
        java.lang.String str43 = coveredParkingDecorator38.getParkingLot();
        java.lang.String str44 = coveredParkingDecorator38.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingLotManager31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str40, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str44, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(97, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available, Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking");
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str14 = eVChargingDecorator8.getLocation();
        java.lang.String str15 = eVChargingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator16 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str17 = coveredParkingDecorator16.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str17, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str7 = eVChargingDecorator6.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(10, "Parking Spot ID: 100, Location: Parking Spot ID: 1, Location: hi!, Lot: , Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingLotManager parkingLotManager6 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager6.addParkingSpot(parkingSpot10);
        java.lang.String str12 = parkingSpot10.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot10);
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingLotManager6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str29 = handicapAccessDecorator28.getDetails();
        java.lang.String str30 = handicapAccessDecorator28.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parking.EVChargingDecorator eVChargingDecorator32 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.Class<?> wildcardClass13 = eVChargingDecorator12.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str15 = coveredParkingDecorator14.getParkingLot();
        java.lang.String str16 = coveredParkingDecorator14.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        int int5 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        java.lang.Class<?> wildcardClass11 = eVChargingDecorator7.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        java.lang.String str5 = parkingSpot3.getLocation();
        java.lang.String str6 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        int int9 = coveredParkingDecorator7.getId();
        java.lang.String str10 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager9 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager9.addParkingSpot(parkingSpot13);
        java.lang.String str15 = parkingSpot13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator(parkingSpot13);
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str18 = eVChargingDecorator16.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator16);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager20.addParkingSpot(parkingSpot24);
        java.lang.String str26 = parkingSpot24.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot24);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        int int30 = handicapAccessDecorator29.getId();
        java.lang.String str31 = handicapAccessDecorator29.getLocation();
        java.lang.String str32 = handicapAccessDecorator29.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        java.util.List<parking.ParkingSpot> parkingSpotList34 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList35 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingLotManager9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str32, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertNotNull(parkingSpotList34);
        org.junit.Assert.assertNotNull(parkingSpotList35);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str8 = parkingSpot4.getLocation();
        java.lang.String str9 = parkingSpot4.getLocation();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator(parkingSpot4);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '#', "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "Parking Spot ID: 32, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available", "");
        java.lang.Class<?> wildcardClass4 = parkingSpot3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager33 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager33.addParkingSpot(parkingSpot37);
        java.lang.String str39 = parkingSpot37.getLocation();
        int int40 = parkingSpot37.getId();
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator(parkingSpot37);
        parking.HandicapAccessDecorator handicapAccessDecorator42 = new parking.HandicapAccessDecorator(parkingSpot37);
        parkingLotManager0.addParkingSpot(parkingSpot37);
        parking.CoveredParkingDecorator coveredParkingDecorator44 = new parking.CoveredParkingDecorator(parkingSpot37);
        java.lang.String str45 = coveredParkingDecorator44.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingLotManager33);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        java.lang.String str13 = handicapAccessDecorator10.getParkingLot();
        int int14 = handicapAccessDecorator10.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        int int29 = handicapAccessDecorator28.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator28);
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str36 = parkingSpot35.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator37 = new parking.HandicapAccessDecorator(parkingSpot35);
        parking.HandicapAccessDecorator handicapAccessDecorator38 = new parking.HandicapAccessDecorator(parkingSpot35);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator38);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) 'a', "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator4);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        int int7 = parkingSpot4.getId();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.Class<?> wildcardClass9 = parkingSpot4.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        java.lang.String str13 = handicapAccessDecorator9.getDetails();
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str15 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        int int7 = parkingSpot4.getId();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str11 = parkingSpot4.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator(parkingSpot4);
        java.lang.String str13 = handicapAccessDecorator12.getDetails();
        java.lang.String str14 = handicapAccessDecorator12.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        java.lang.String str12 = eVChargingDecorator10.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available");
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList12 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str17 = parkingSpot16.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator18 = new parking.CoveredParkingDecorator(parkingSpot16);
        java.lang.String str19 = coveredParkingDecorator18.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList25 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((-1), "", "");
        parking.CoveredParkingDecorator coveredParkingDecorator30 = new parking.CoveredParkingDecorator(parkingSpot29);
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator(parkingSpot29);
        parking.CoveredParkingDecorator coveredParkingDecorator32 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator31);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator31);
        java.lang.String str34 = coveredParkingDecorator31.getDetails();
        java.lang.String str35 = coveredParkingDecorator31.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(parkingSpotList12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(parkingSpotList25);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str35, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking, EV Charging Available");
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str7 = eVChargingDecorator6.getDetails();
        java.lang.String str8 = eVChargingDecorator6.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Covered Parking");
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        java.lang.String str8 = coveredParkingDecorator6.getLocation();
        java.lang.String str9 = coveredParkingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str8, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking");
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator24 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList26 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot30 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator31 = new parking.EVChargingDecorator(parkingSpot30);
        parking.EVChargingDecorator eVChargingDecorator32 = new parking.EVChargingDecorator(parkingSpot30);
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator(parkingSpot30);
        parkingLotManager0.addParkingSpot(parkingSpot30);
        int int35 = parkingSpot30.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot30);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList26);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 32 + "'", int35 == 32);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str23 = eVChargingDecorator21.getLocation();
        int int24 = eVChargingDecorator21.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str26 = eVChargingDecorator21.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator27 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parking.CoveredParkingDecorator coveredParkingDecorator28 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator27);
        java.lang.String str29 = coveredParkingDecorator28.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Handicap Accessible, Covered Parking" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str10 = coveredParkingDecorator9.getDetails();
        java.lang.String str11 = coveredParkingDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking");
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str20 = parkingSpot19.getParkingLot();
        java.lang.String str21 = parkingSpot19.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot19);
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot26);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        parking.ParkingLotManager parkingLotManager30 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager30.addParkingSpot(parkingSpot34);
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str40 = parkingSpot39.getLocation();
        java.lang.String str41 = parkingSpot39.getLocation();
        parkingLotManager30.addParkingSpot(parkingSpot39);
        parking.ParkingLotManager parkingLotManager43 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager43.addParkingSpot(parkingSpot47);
        java.lang.String str49 = parkingSpot47.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator50 = new parking.CoveredParkingDecorator(parkingSpot47);
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator50);
        parking.ParkingSpot parkingSpot55 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str56 = parkingSpot55.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator57 = new parking.CoveredParkingDecorator(parkingSpot55);
        parking.HandicapAccessDecorator handicapAccessDecorator58 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator57);
        int int59 = handicapAccessDecorator58.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator60 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator58);
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator58);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator58);
        java.lang.String str63 = handicapAccessDecorator58.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str21, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager30);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(parkingLotManager43);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator4);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator4);
        int int7 = handicapAccessDecorator4.getId();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        java.lang.String str13 = handicapAccessDecorator12.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str13 = eVChargingDecorator12.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator5.getDetails();
        java.lang.String str8 = handicapAccessDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        int int10 = handicapAccessDecorator5.getId();
        int int11 = handicapAccessDecorator5.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = coveredParkingDecorator8.getDetails();
        int int11 = coveredParkingDecorator8.getId();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible", "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, EV Charging Available");
        java.lang.String str4 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, EV Charging Available" + "'", str4, "Parking Spot ID: 1, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        int int8 = coveredParkingDecorator7.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }
}

