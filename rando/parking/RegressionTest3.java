package rando.parking;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        int int9 = handicapAccessDecorator6.getId();
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        java.lang.String str11 = handicapAccessDecorator6.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str13 = handicapAccessDecorator12.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        int int10 = coveredParkingDecorator5.getId();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, EV Charging Available");
        java.lang.String str4 = parkingSpot3.getLocation();
        int int5 = parkingSpot3.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator(parkingSpot3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        java.lang.String str12 = coveredParkingDecorator11.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator11);
        java.lang.String str14 = coveredParkingDecorator11.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available, Covered Parking" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(32, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible", "");
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager21.addParkingSpot(parkingSpot25);
        java.lang.String str27 = parkingSpot25.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot25);
        java.lang.String str29 = parkingSpot25.getLocation();
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator(parkingSpot25);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator30);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager34 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot38 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager34.addParkingSpot(parkingSpot38);
        java.lang.String str40 = parkingSpot38.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator(parkingSpot38);
        parking.CoveredParkingDecorator coveredParkingDecorator42 = new parking.CoveredParkingDecorator(parkingSpot38);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator42);
        java.lang.String str44 = coveredParkingDecorator42.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingLotManager34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str44, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        int int10 = eVChargingDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str12 = eVChargingDecorator6.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str14 = handicapAccessDecorator13.getLocation();
        java.lang.String str15 = handicapAccessDecorator13.getParkingLot();
        java.lang.Class<?> wildcardClass16 = handicapAccessDecorator13.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot18);
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        java.lang.String str28 = coveredParkingDecorator27.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        java.lang.String str31 = coveredParkingDecorator27.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str33 = coveredParkingDecorator27.getDetails();
        parking.EVChargingDecorator eVChargingDecorator34 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.Class<?> wildcardClass35 = eVChargingDecorator34.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str33, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str20 = parkingSpot19.getParkingLot();
        java.lang.String str21 = parkingSpot19.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot19);
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot26);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        java.lang.String str31 = eVChargingDecorator30.getDetails();
        java.lang.String str32 = eVChargingDecorator30.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str21, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, EV Charging Available" + "'", str31, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int12 = eVChargingDecorator11.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getDetails();
        java.lang.String str8 = coveredParkingDecorator5.getLocation();
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int10 = eVChargingDecorator9.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator9);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        int int12 = handicapAccessDecorator11.getId();
        java.lang.String str13 = handicapAccessDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        int int14 = eVChargingDecorator13.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: 1, Location: Parking Spot ID: 1, Location: , Lot: , Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available", "Parking Spot ID: -1, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.util.List<parking.ParkingSpot> parkingSpotList28 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        java.lang.String str35 = parkingSpot33.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot33);
        parking.ParkingSpot parkingSpot40 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str41 = parkingSpot40.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator42 = new parking.CoveredParkingDecorator(parkingSpot40);
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator42);
        parking.CoveredParkingDecorator coveredParkingDecorator44 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator43);
        java.lang.String str45 = coveredParkingDecorator44.getDetails();
        java.lang.String str46 = coveredParkingDecorator44.getDetails();
        parking.EVChargingDecorator eVChargingDecorator47 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator44);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator44);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList28);
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str45, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str46, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager21.addParkingSpot(parkingSpot25);
        java.lang.String str27 = parkingSpot25.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot25);
        java.lang.String str29 = parkingSpot25.getLocation();
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator(parkingSpot25);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator30);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList34 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList35 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator40 = new parking.HandicapAccessDecorator(parkingSpot39);
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator(parkingSpot39);
        java.lang.String str42 = coveredParkingDecorator41.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator41);
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str48 = parkingSpot47.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator49 = new parking.CoveredParkingDecorator(parkingSpot47);
        int int50 = parkingSpot47.getId();
        java.lang.String str51 = parkingSpot47.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot47);
        parking.ParkingLotManager parkingLotManager53 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot57 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str58 = parkingSpot57.getLocation();
        java.lang.String str59 = parkingSpot57.getLocation();
        parkingLotManager53.addParkingSpot(parkingSpot57);
        parking.ParkingSpot parkingSpot64 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str65 = parkingSpot64.getLocation();
        parkingLotManager53.addParkingSpot(parkingSpot64);
        parking.ParkingSpot parkingSpot70 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str71 = parkingSpot70.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator72 = new parking.CoveredParkingDecorator(parkingSpot70);
        parking.EVChargingDecorator eVChargingDecorator73 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator72);
        parking.EVChargingDecorator eVChargingDecorator74 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator73);
        parkingLotManager53.addParkingSpot((parking.ParkingSpot) eVChargingDecorator74);
        parking.ParkingLotManager parkingLotManager76 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot80 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager76.addParkingSpot(parkingSpot80);
        java.lang.String str82 = parkingSpot80.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator83 = new parking.HandicapAccessDecorator(parkingSpot80);
        parkingLotManager53.addParkingSpot(parkingSpot80);
        java.lang.String str85 = parkingSpot80.getDetails();
        java.lang.String str86 = parkingSpot80.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator87 = new parking.CoveredParkingDecorator(parkingSpot80);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator87);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingSpotList34);
        org.junit.Assert.assertNotNull(parkingSpotList35);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str51, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertNotNull(parkingLotManager53);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(parkingLotManager76);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str85, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.Class<?> wildcardClass5 = parkingSpot3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int8 = coveredParkingDecorator7.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator5.getDetails();
        int int8 = handicapAccessDecorator5.getId();
        java.lang.String str9 = handicapAccessDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingLotManager parkingLotManager31 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager31.addParkingSpot(parkingSpot35);
        java.lang.String str37 = parkingSpot35.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator(parkingSpot35);
        java.lang.String str39 = coveredParkingDecorator38.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator38);
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str45 = parkingSpot44.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator46 = new parking.CoveredParkingDecorator(parkingSpot44);
        java.lang.String str47 = coveredParkingDecorator46.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator48 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator46);
        java.lang.String str49 = coveredParkingDecorator46.getDetails();
        java.lang.String str50 = coveredParkingDecorator46.getLocation();
        java.lang.String str51 = coveredParkingDecorator46.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator46);
        java.lang.String str53 = coveredParkingDecorator46.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str39, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str47, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str49, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str53, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str14 = eVChargingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str16 = coveredParkingDecorator15.getDetails();
        int int17 = coveredParkingDecorator15.getId();
        int int18 = coveredParkingDecorator15.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager9 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager9.addParkingSpot(parkingSpot13);
        java.lang.String str15 = parkingSpot13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator(parkingSpot13);
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str18 = eVChargingDecorator16.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator16);
        parking.ParkingSpot parkingSpot23 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str24 = parkingSpot23.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator(parkingSpot23);
        parking.EVChargingDecorator eVChargingDecorator26 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator25);
        parking.EVChargingDecorator eVChargingDecorator27 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator26);
        java.lang.String str28 = eVChargingDecorator26.getLocation();
        int int29 = eVChargingDecorator26.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator26);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        int int35 = parkingSpot34.getId();
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator(parkingSpot34);
        parking.CoveredParkingDecorator coveredParkingDecorator37 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator37);
        parking.ParkingLotManager parkingLotManager39 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot43 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str44 = parkingSpot43.getLocation();
        java.lang.String str45 = parkingSpot43.getLocation();
        parkingLotManager39.addParkingSpot(parkingSpot43);
        parking.ParkingSpot parkingSpot50 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str51 = parkingSpot50.getLocation();
        parkingLotManager39.addParkingSpot(parkingSpot50);
        java.util.List<parking.ParkingSpot> parkingSpotList53 = parkingLotManager39.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList54 = parkingLotManager39.getParkingSpots();
        parking.ParkingLotManager parkingLotManager55 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot59 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str60 = parkingSpot59.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator61 = new parking.CoveredParkingDecorator(parkingSpot59);
        java.lang.String str62 = coveredParkingDecorator61.getDetails();
        parking.EVChargingDecorator eVChargingDecorator63 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator61);
        parkingLotManager55.addParkingSpot((parking.ParkingSpot) eVChargingDecorator63);
        java.lang.String str65 = eVChargingDecorator63.getDetails();
        parkingLotManager39.addParkingSpot((parking.ParkingSpot) eVChargingDecorator63);
        java.util.List<parking.ParkingSpot> parkingSpotList67 = parkingLotManager39.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList68 = parkingLotManager39.getParkingSpots();
        parking.ParkingSpot parkingSpot72 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str73 = parkingSpot72.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator74 = new parking.CoveredParkingDecorator(parkingSpot72);
        parking.EVChargingDecorator eVChargingDecorator75 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator74);
        java.lang.String str76 = coveredParkingDecorator74.getDetails();
        parkingLotManager39.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator74);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator74);
        java.lang.String str79 = coveredParkingDecorator74.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingLotManager9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(parkingLotManager39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(parkingSpotList53);
        org.junit.Assert.assertNotNull(parkingSpotList54);
        org.junit.Assert.assertNotNull(parkingLotManager55);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str62, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str65, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList67);
        org.junit.Assert.assertNotNull(parkingSpotList68);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str76, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str79, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList12 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str17 = parkingSpot16.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator18 = new parking.CoveredParkingDecorator(parkingSpot16);
        java.lang.String str19 = coveredParkingDecorator18.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingLotManager parkingLotManager25 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager25.addParkingSpot(parkingSpot29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str35 = parkingSpot34.getLocation();
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator(parkingSpot34);
        parkingLotManager25.addParkingSpot(parkingSpot34);
        parking.EVChargingDecorator eVChargingDecorator38 = new parking.EVChargingDecorator(parkingSpot34);
        java.lang.String str39 = eVChargingDecorator38.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator38);
        java.util.List<parking.ParkingSpot> parkingSpotList41 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(parkingSpotList12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(parkingLotManager25);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str39, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList41);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        int int10 = eVChargingDecorator6.getId();
        java.lang.String str11 = eVChargingDecorator6.getDetails();
        java.lang.String str12 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '4', "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking", "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator10);
        java.lang.String str13 = eVChargingDecorator10.getDetails();
        java.lang.String str14 = eVChargingDecorator10.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        java.util.List<parking.ParkingSpot> parkingSpotList21 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        java.lang.String str28 = coveredParkingDecorator27.getDetails();
        parking.EVChargingDecorator eVChargingDecorator29 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str31 = coveredParkingDecorator27.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str31, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str20 = parkingSpot19.getParkingLot();
        java.lang.String str21 = parkingSpot19.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot19);
        parking.CoveredParkingDecorator coveredParkingDecorator23 = new parking.CoveredParkingDecorator(parkingSpot19);
        java.lang.String str24 = coveredParkingDecorator23.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str21, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str24, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator11);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator12);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking", "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager24 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager24.addParkingSpot(parkingSpot28);
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        java.lang.String str35 = parkingSpot33.getLocation();
        parkingLotManager24.addParkingSpot(parkingSpot33);
        int int37 = parkingSpot33.getId();
        java.lang.String str38 = parkingSpot33.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot33);
        java.util.List<parking.ParkingSpot> parkingSpotList40 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str45 = parkingSpot44.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator46 = new parking.CoveredParkingDecorator(parkingSpot44);
        parking.HandicapAccessDecorator handicapAccessDecorator47 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator46);
        java.lang.String str48 = handicapAccessDecorator47.getDetails();
        java.lang.String str49 = handicapAccessDecorator47.getDetails();
        java.lang.String str50 = handicapAccessDecorator47.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator51 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator47);
        int int52 = handicapAccessDecorator47.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator47);
        parking.CoveredParkingDecorator coveredParkingDecorator54 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator47);
        parking.HandicapAccessDecorator handicapAccessDecorator55 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator54);
        java.lang.Class<?> wildcardClass56 = coveredParkingDecorator54.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertNotNull(parkingLotManager24);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(parkingSpotList40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str48, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str49, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        java.lang.String str10 = eVChargingDecorator6.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator(parkingSpot11);
        java.lang.String str16 = handicapAccessDecorator15.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator15);
        parking.HandicapAccessDecorator handicapAccessDecorator18 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator17);
        java.lang.String str19 = handicapAccessDecorator18.getDetails();
        java.lang.String str20 = handicapAccessDecorator18.getDetails();
        int int21 = handicapAccessDecorator18.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Covered Parking, Handicap Accessible" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Covered Parking, Handicap Accessible" + "'", str20, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str13 = coveredParkingDecorator12.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        java.lang.String str7 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        int int9 = coveredParkingDecorator8.getId();
        java.lang.String str10 = coveredParkingDecorator8.getLocation();
        java.lang.String str11 = coveredParkingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "Parking Spot ID: 100, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible", "Parking Spot ID: -1, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, Covered Parking");
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot18);
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        java.lang.String str28 = coveredParkingDecorator27.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        java.lang.String str31 = coveredParkingDecorator27.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        parking.ParkingSpot parkingSpot36 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str37 = parkingSpot36.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator(parkingSpot36);
        java.lang.String str39 = coveredParkingDecorator38.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator40 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator38);
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator38);
        parking.EVChargingDecorator eVChargingDecorator42 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator41);
        java.lang.String str43 = eVChargingDecorator42.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator42);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str39, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str43, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator4);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        int int7 = eVChargingDecorator5.getId();
        int int8 = eVChargingDecorator5.getId();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot18);
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        java.lang.String str28 = coveredParkingDecorator27.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        java.lang.String str31 = coveredParkingDecorator27.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator38 = new parking.HandicapAccessDecorator(parkingSpot37);
        parkingLotManager0.addParkingSpot(parkingSpot37);
        parking.ParkingSpot parkingSpot43 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str44 = parkingSpot43.getDetails();
        java.lang.String str45 = parkingSpot43.getDetails();
        java.lang.String str46 = parkingSpot43.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator47 = new parking.CoveredParkingDecorator(parkingSpot43);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator47);
        java.util.List<parking.ParkingSpot> parkingSpotList49 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str44, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str45, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList49);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        java.lang.String str17 = parkingSpot15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot15);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        java.util.List<parking.ParkingSpot> parkingSpotList20 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getLocation();
        java.lang.String str27 = parkingSpot25.getLocation();
        parkingLotManager21.addParkingSpot(parkingSpot25);
        parking.ParkingSpot parkingSpot32 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str33 = parkingSpot32.getLocation();
        parkingLotManager21.addParkingSpot(parkingSpot32);
        parking.ParkingSpot parkingSpot38 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str39 = parkingSpot38.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator(parkingSpot38);
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator40);
        parking.EVChargingDecorator eVChargingDecorator42 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator41);
        parkingLotManager21.addParkingSpot((parking.ParkingSpot) eVChargingDecorator42);
        parking.CoveredParkingDecorator coveredParkingDecorator44 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator42);
        java.lang.String str45 = eVChargingDecorator42.getDetails();
        java.lang.String str46 = eVChargingDecorator42.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator42);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingSpotList20);
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str45, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str46, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str6 = handicapAccessDecorator5.getLocation();
        java.lang.String str7 = handicapAccessDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str10 = eVChargingDecorator9.getDetails();
        java.lang.String str11 = eVChargingDecorator9.getDetails();
        java.lang.String str12 = eVChargingDecorator9.getDetails();
        java.lang.String str13 = eVChargingDecorator9.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str28 = parkingSpot27.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator(parkingSpot27);
        java.lang.String str30 = coveredParkingDecorator29.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator31 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        java.lang.String str32 = handicapAccessDecorator31.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator31);
        java.lang.String str34 = handicapAccessDecorator31.getDetails();
        java.lang.String str35 = handicapAccessDecorator31.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator36 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator31);
        java.lang.String str37 = handicapAccessDecorator36.getDetails();
        java.lang.String str38 = handicapAccessDecorator36.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator36);
        java.util.List<parking.ParkingSpot> parkingSpotList40 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str38, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertNotNull(parkingSpotList40);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int8 = coveredParkingDecorator7.getId();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str20 = parkingSpot19.getParkingLot();
        java.lang.String str21 = parkingSpot19.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot19);
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot26);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        parking.ParkingLotManager parkingLotManager30 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager30.addParkingSpot(parkingSpot34);
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str40 = parkingSpot39.getLocation();
        java.lang.String str41 = parkingSpot39.getLocation();
        parkingLotManager30.addParkingSpot(parkingSpot39);
        parking.ParkingLotManager parkingLotManager43 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager43.addParkingSpot(parkingSpot47);
        java.lang.String str49 = parkingSpot47.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator50 = new parking.CoveredParkingDecorator(parkingSpot47);
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator50);
        parking.ParkingSpot parkingSpot55 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str56 = parkingSpot55.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator57 = new parking.CoveredParkingDecorator(parkingSpot55);
        parking.HandicapAccessDecorator handicapAccessDecorator58 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator57);
        int int59 = handicapAccessDecorator58.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator60 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator58);
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator58);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator58);
        java.lang.String str63 = handicapAccessDecorator58.getDetails();
        parking.EVChargingDecorator eVChargingDecorator64 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator58);
        java.lang.String str65 = eVChargingDecorator64.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str21, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager30);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(parkingLotManager43);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str63, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available" + "'", str65, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = handicapAccessDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager24 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str29 = parkingSpot28.getLocation();
        java.lang.String str30 = parkingSpot28.getLocation();
        parkingLotManager24.addParkingSpot(parkingSpot28);
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str36 = parkingSpot35.getLocation();
        parkingLotManager24.addParkingSpot(parkingSpot35);
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str42 = parkingSpot41.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator43 = new parking.CoveredParkingDecorator(parkingSpot41);
        parking.EVChargingDecorator eVChargingDecorator44 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator43);
        parking.EVChargingDecorator eVChargingDecorator45 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator44);
        parkingLotManager24.addParkingSpot((parking.ParkingSpot) eVChargingDecorator45);
        parking.CoveredParkingDecorator coveredParkingDecorator47 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator45);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator45);
        java.util.List<parking.ParkingSpot> parkingSpotList49 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot53 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str54 = parkingSpot53.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator55 = new parking.CoveredParkingDecorator(parkingSpot53);
        java.lang.String str56 = coveredParkingDecorator55.getDetails();
        parking.EVChargingDecorator eVChargingDecorator57 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator55);
        parking.CoveredParkingDecorator coveredParkingDecorator58 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator55);
        java.lang.String str59 = coveredParkingDecorator55.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator55);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertNotNull(parkingLotManager24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(parkingSpotList49);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str56, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str59, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        java.lang.String str9 = coveredParkingDecorator5.getLocation();
        java.lang.String str10 = coveredParkingDecorator5.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        java.lang.String str42 = eVChargingDecorator41.getLocation();
        java.lang.String str43 = eVChargingDecorator41.getDetails();
        int int44 = eVChargingDecorator41.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str43, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        java.lang.String str11 = eVChargingDecorator8.getParkingLot();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        java.lang.String str13 = eVChargingDecorator8.getDetails();
        java.lang.String str14 = eVChargingDecorator8.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str11 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator20 = new parking.HandicapAccessDecorator(parkingSpot17);
        java.lang.String str21 = handicapAccessDecorator20.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator20);
        parking.EVChargingDecorator eVChargingDecorator23 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator20);
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator23);
        java.lang.String str25 = eVChargingDecorator24.getDetails();
        java.lang.String str26 = eVChargingDecorator24.getParkingLot();
        java.lang.Class<?> wildcardClass27 = eVChargingDecorator24.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, EV Charging Available, EV Charging Available" + "'", str25, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        java.util.List<parking.ParkingSpot> parkingSpotList1 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot5 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str6 = parkingSpot5.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot5);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str14 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str16 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot10);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator11);
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator12);
        java.lang.String str14 = eVChargingDecorator12.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator12);
        java.util.List<parking.ParkingSpot> parkingSpotList16 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager17 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot21 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager17.addParkingSpot(parkingSpot21);
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str27 = parkingSpot26.getLocation();
        java.lang.String str28 = parkingSpot26.getLocation();
        parkingLotManager17.addParkingSpot(parkingSpot26);
        parking.ParkingLotManager parkingLotManager30 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager30.addParkingSpot(parkingSpot34);
        java.lang.String str36 = parkingSpot34.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator37 = new parking.CoveredParkingDecorator(parkingSpot34);
        parkingLotManager17.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator37);
        parking.ParkingSpot parkingSpot42 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str43 = parkingSpot42.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator44 = new parking.CoveredParkingDecorator(parkingSpot42);
        parking.HandicapAccessDecorator handicapAccessDecorator45 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator44);
        int int46 = handicapAccessDecorator45.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator47 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator45);
        parkingLotManager17.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator45);
        parking.ParkingSpot parkingSpot52 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str53 = parkingSpot52.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator54 = new parking.CoveredParkingDecorator(parkingSpot52);
        java.lang.String str55 = coveredParkingDecorator54.getDetails();
        parking.EVChargingDecorator eVChargingDecorator56 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator54);
        java.lang.String str57 = coveredParkingDecorator54.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator58 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator54);
        java.lang.String str59 = coveredParkingDecorator54.getDetails();
        java.lang.String str60 = coveredParkingDecorator54.getDetails();
        java.lang.String str61 = coveredParkingDecorator54.getDetails();
        int int62 = coveredParkingDecorator54.getId();
        java.lang.String str63 = coveredParkingDecorator54.getDetails();
        parkingLotManager17.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator54);
        parking.ParkingSpot parkingSpot68 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str69 = parkingSpot68.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator70 = new parking.CoveredParkingDecorator(parkingSpot68);
        parking.EVChargingDecorator eVChargingDecorator71 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator70);
        parking.EVChargingDecorator eVChargingDecorator72 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator71);
        parking.EVChargingDecorator eVChargingDecorator73 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator71);
        java.lang.String str74 = eVChargingDecorator73.getDetails();
        parking.EVChargingDecorator eVChargingDecorator75 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator73);
        int int76 = eVChargingDecorator73.getId();
        parkingLotManager17.addParkingSpot((parking.ParkingSpot) eVChargingDecorator73);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator73);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str14, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertNotNull(parkingSpotList16);
        org.junit.Assert.assertNotNull(parkingLotManager17);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(parkingLotManager30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str55, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str57, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str59, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str60, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str61, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str63, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str74, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible", "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, EV Charging Available");
        java.lang.Class<?> wildcardClass4 = parkingSpot3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator4);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str11 = coveredParkingDecorator7.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        java.lang.String str11 = handicapAccessDecorator6.getDetails();
        java.lang.String str12 = handicapAccessDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        java.lang.String str32 = parkingSpot27.getDetails();
        java.lang.String str33 = parkingSpot27.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator34 = new parking.CoveredParkingDecorator(parkingSpot27);
        java.lang.String str35 = coveredParkingDecorator34.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str32, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str35, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator7);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str16 = parkingSpot15.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator(parkingSpot15);
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator17);
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator18);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator18);
        java.lang.String str21 = eVChargingDecorator18.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator18);
        java.lang.String str23 = eVChargingDecorator18.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot((int) (short) 100, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator29 = new parking.EVChargingDecorator(parkingSpot28);
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot28);
        java.lang.String str31 = handicapAccessDecorator30.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator30);
        parking.ParkingLotManager parkingLotManager33 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str38 = parkingSpot37.getLocation();
        java.lang.String str39 = parkingSpot37.getLocation();
        parkingLotManager33.addParkingSpot(parkingSpot37);
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str45 = parkingSpot44.getLocation();
        parkingLotManager33.addParkingSpot(parkingSpot44);
        java.util.List<parking.ParkingSpot> parkingSpotList47 = parkingLotManager33.getParkingSpots();
        parking.ParkingSpot parkingSpot51 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator52 = new parking.HandicapAccessDecorator(parkingSpot51);
        parking.CoveredParkingDecorator coveredParkingDecorator53 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator52);
        parkingLotManager33.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator53);
        parking.ParkingSpot parkingSpot58 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str59 = parkingSpot58.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator60 = new parking.CoveredParkingDecorator(parkingSpot58);
        java.lang.String str61 = coveredParkingDecorator60.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator62 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator60);
        java.lang.String str63 = coveredParkingDecorator60.getDetails();
        java.lang.String str64 = coveredParkingDecorator60.getParkingLot();
        parkingLotManager33.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator60);
        java.lang.String str66 = coveredParkingDecorator60.getDetails();
        parking.EVChargingDecorator eVChargingDecorator67 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator60);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator60);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str31, "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertNotNull(parkingLotManager33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(parkingSpotList47);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str61, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str63, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str66, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '#', "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available, EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Covered Parking");
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str8 = eVChargingDecorator7.getLocation();
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        java.lang.String str11 = eVChargingDecorator7.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        java.util.List<parking.ParkingSpot> parkingSpotList1 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot5 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str6 = parkingSpot5.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot5);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str14 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str16 = eVChargingDecorator8.getDetails();
        java.lang.String str17 = eVChargingDecorator8.getLocation();
        java.lang.String str18 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        java.lang.String str5 = parkingSpot3.getLocation();
        java.lang.String str6 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        int int9 = coveredParkingDecorator8.getId();
        java.lang.String str10 = coveredParkingDecorator8.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        java.lang.String str13 = eVChargingDecorator8.getDetails();
        java.lang.String str14 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str16 = eVChargingDecorator8.getDetails();
        int int17 = eVChargingDecorator8.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot10);
        java.lang.String str12 = parkingSpot10.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot10);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager14.addParkingSpot(parkingSpot18);
        java.lang.String str20 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator(parkingSpot18);
        parking.EVChargingDecorator eVChargingDecorator23 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingLotManager parkingLotManager25 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager25.addParkingSpot(parkingSpot29);
        java.lang.String str31 = parkingSpot29.getLocation();
        int int32 = parkingSpot29.getId();
        parking.EVChargingDecorator eVChargingDecorator33 = new parking.EVChargingDecorator(parkingSpot29);
        parking.HandicapAccessDecorator handicapAccessDecorator34 = new parking.HandicapAccessDecorator(parkingSpot29);
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator(parkingSpot29);
        parkingLotManager0.addParkingSpot(parkingSpot29);
        parking.EVChargingDecorator eVChargingDecorator37 = new parking.EVChargingDecorator(parkingSpot29);
        java.lang.String str38 = eVChargingDecorator37.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str12, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(parkingLotManager25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str38, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot(0, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available");
        parkingLotManager0.addParkingSpot(parkingSpot17);
        parking.ParkingLotManager parkingLotManager19 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot23 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager19.addParkingSpot(parkingSpot23);
        java.lang.String str25 = parkingSpot23.getDetails();
        parking.EVChargingDecorator eVChargingDecorator26 = new parking.EVChargingDecorator(parkingSpot23);
        java.lang.String str27 = parkingSpot23.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot23);
        parkingLotManager0.addParkingSpot(parkingSpot23);
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot23);
        java.lang.String str31 = handicapAccessDecorator30.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager19);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str25, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str12 = eVChargingDecorator11.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator11);
        parking.HandicapAccessDecorator handicapAccessDecorator14 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        java.lang.String str17 = parkingSpot15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot15);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager20.addParkingSpot(parkingSpot24);
        java.lang.String str26 = parkingSpot24.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot24);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator31 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        int int32 = handicapAccessDecorator31.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str30, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str5 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str5, "Parking Spot ID: 32, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(10, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking");
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str7 = eVChargingDecorator6.getDetails();
        java.lang.String str8 = eVChargingDecorator6.getDetails();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        java.lang.String str10 = eVChargingDecorator6.getDetails();
        java.lang.String str11 = eVChargingDecorator6.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator5.getDetails();
        java.lang.String str8 = handicapAccessDecorator5.getDetails();
        java.lang.String str9 = handicapAccessDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Covered Parking" + "'", str6, "Parking Spot ID: 32, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        int int11 = eVChargingDecorator8.getId();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        java.lang.String str13 = eVChargingDecorator8.getDetails();
        int int14 = eVChargingDecorator8.getId();
        java.lang.String str15 = eVChargingDecorator8.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str14 = parkingSpot13.getParkingLot();
        java.lang.String str15 = parkingSpot13.getParkingLot();
        java.lang.String str16 = parkingSpot13.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot13);
        parking.ParkingSpot parkingSpot21 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str22 = parkingSpot21.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator23 = new parking.CoveredParkingDecorator(parkingSpot21);
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator(parkingSpot21);
        parkingLotManager0.addParkingSpot(parkingSpot21);
        parking.ParkingLotManager parkingLotManager26 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot30 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str31 = parkingSpot30.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator32 = new parking.CoveredParkingDecorator(parkingSpot30);
        java.lang.String str33 = coveredParkingDecorator32.getDetails();
        parking.EVChargingDecorator eVChargingDecorator34 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator32);
        parkingLotManager26.addParkingSpot((parking.ParkingSpot) eVChargingDecorator34);
        java.lang.String str36 = eVChargingDecorator34.getDetails();
        java.lang.String str37 = eVChargingDecorator34.getDetails();
        java.lang.String str38 = eVChargingDecorator34.getDetails();
        java.lang.String str39 = eVChargingDecorator34.getDetails();
        java.lang.String str40 = eVChargingDecorator34.getDetails();
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator34);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator41);
        java.lang.Class<?> wildcardClass43 = eVChargingDecorator41.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str16, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(parkingLotManager26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str33, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str36, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str38, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str39, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str40, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        int int6 = parkingSpot3.getId();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str10 = coveredParkingDecorator9.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager9 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager9.addParkingSpot(parkingSpot13);
        java.lang.String str15 = parkingSpot13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator(parkingSpot13);
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str18 = eVChargingDecorator16.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator16);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager20.addParkingSpot(parkingSpot24);
        java.lang.String str26 = parkingSpot24.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot24);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        int int30 = handicapAccessDecorator29.getId();
        java.lang.String str31 = handicapAccessDecorator29.getLocation();
        java.lang.String str32 = handicapAccessDecorator29.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str38 = parkingSpot37.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator39 = new parking.CoveredParkingDecorator(parkingSpot37);
        java.lang.String str40 = coveredParkingDecorator39.getDetails();
        java.lang.String str41 = coveredParkingDecorator39.getDetails();
        java.lang.String str42 = coveredParkingDecorator39.getLocation();
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator39);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator43);
        parking.ParkingLotManager parkingLotManager45 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot49 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str50 = parkingSpot49.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator51 = new parking.CoveredParkingDecorator(parkingSpot49);
        java.lang.String str52 = coveredParkingDecorator51.getDetails();
        parking.EVChargingDecorator eVChargingDecorator53 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator51);
        parkingLotManager45.addParkingSpot((parking.ParkingSpot) eVChargingDecorator53);
        java.lang.String str55 = eVChargingDecorator53.getLocation();
        int int56 = eVChargingDecorator53.getId();
        parking.EVChargingDecorator eVChargingDecorator57 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator53);
        java.lang.String str58 = eVChargingDecorator53.getDetails();
        java.lang.String str59 = eVChargingDecorator53.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator53);
        java.lang.String str61 = eVChargingDecorator53.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingLotManager9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str32, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str40, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str41, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(parkingLotManager45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str52, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str58, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str59, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str61, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator(parkingSpot19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator(parkingSpot19);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str28 = parkingSpot27.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator(parkingSpot27);
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        int int31 = handicapAccessDecorator30.getId();
        java.lang.String str32 = handicapAccessDecorator30.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator30);
        parking.EVChargingDecorator eVChargingDecorator35 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator35);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        int int29 = handicapAccessDecorator28.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator28);
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str36 = parkingSpot35.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator37 = new parking.CoveredParkingDecorator(parkingSpot35);
        java.lang.String str38 = coveredParkingDecorator37.getDetails();
        parking.EVChargingDecorator eVChargingDecorator39 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator37);
        java.lang.String str40 = coveredParkingDecorator37.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator37);
        java.lang.String str42 = coveredParkingDecorator37.getDetails();
        java.lang.String str43 = coveredParkingDecorator37.getDetails();
        java.lang.String str44 = coveredParkingDecorator37.getDetails();
        int int45 = coveredParkingDecorator37.getId();
        java.lang.String str46 = coveredParkingDecorator37.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator37);
        parking.ParkingSpot parkingSpot51 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str52 = parkingSpot51.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator53 = new parking.CoveredParkingDecorator(parkingSpot51);
        parking.EVChargingDecorator eVChargingDecorator54 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator53);
        parking.EVChargingDecorator eVChargingDecorator55 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator54);
        parking.EVChargingDecorator eVChargingDecorator56 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator54);
        java.lang.String str57 = eVChargingDecorator56.getDetails();
        parking.EVChargingDecorator eVChargingDecorator58 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator56);
        int int59 = eVChargingDecorator56.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator56);
        java.lang.String str61 = eVChargingDecorator56.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str38, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str40, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str42, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str43, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str44, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str46, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str57, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        java.lang.String str15 = coveredParkingDecorator13.getDetails();
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str28 = parkingSpot27.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator(parkingSpot27);
        java.lang.String str30 = coveredParkingDecorator29.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator31 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        java.lang.String str32 = handicapAccessDecorator31.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator31);
        java.lang.String str34 = handicapAccessDecorator31.getDetails();
        java.lang.String str35 = handicapAccessDecorator31.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator36 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator31);
        java.lang.String str37 = handicapAccessDecorator36.getDetails();
        java.lang.String str38 = handicapAccessDecorator36.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator36);
        java.lang.String str40 = handicapAccessDecorator36.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator41 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator36);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str38, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        int int10 = handicapAccessDecorator9.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        int int12 = handicapAccessDecorator11.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator5.getDetails();
        java.lang.String str8 = handicapAccessDecorator5.getDetails();
        int int9 = handicapAccessDecorator5.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str20 = parkingSpot19.getParkingLot();
        java.lang.String str21 = parkingSpot19.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot19);
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot26);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        parking.ParkingLotManager parkingLotManager30 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager30.addParkingSpot(parkingSpot34);
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str40 = parkingSpot39.getLocation();
        java.lang.String str41 = parkingSpot39.getLocation();
        parkingLotManager30.addParkingSpot(parkingSpot39);
        parking.ParkingLotManager parkingLotManager43 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager43.addParkingSpot(parkingSpot47);
        java.lang.String str49 = parkingSpot47.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator50 = new parking.CoveredParkingDecorator(parkingSpot47);
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator50);
        parking.ParkingSpot parkingSpot55 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str56 = parkingSpot55.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator57 = new parking.CoveredParkingDecorator(parkingSpot55);
        parking.HandicapAccessDecorator handicapAccessDecorator58 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator57);
        int int59 = handicapAccessDecorator58.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator60 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator58);
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator58);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator58);
        java.util.List<parking.ParkingSpot> parkingSpotList63 = parkingLotManager0.getParkingSpots();
        java.lang.Class<?> wildcardClass64 = parkingSpotList63.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str21, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager30);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(parkingLotManager43);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(parkingSpotList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str10 = eVChargingDecorator6.getDetails();
        java.lang.String str11 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        java.lang.String str8 = eVChargingDecorator5.getDetails();
        java.lang.String str9 = eVChargingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        int int11 = eVChargingDecorator5.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        java.util.List<parking.ParkingSpot> parkingSpotList21 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        java.lang.String str28 = coveredParkingDecorator27.getDetails();
        parking.EVChargingDecorator eVChargingDecorator29 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.Class<?> wildcardClass31 = coveredParkingDecorator27.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str20 = parkingSpot19.getParkingLot();
        java.lang.String str21 = parkingSpot19.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot19);
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot26);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        parking.ParkingLotManager parkingLotManager30 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager30.addParkingSpot(parkingSpot34);
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str40 = parkingSpot39.getLocation();
        java.lang.String str41 = parkingSpot39.getLocation();
        parkingLotManager30.addParkingSpot(parkingSpot39);
        parking.ParkingLotManager parkingLotManager43 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager43.addParkingSpot(parkingSpot47);
        java.lang.String str49 = parkingSpot47.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator50 = new parking.CoveredParkingDecorator(parkingSpot47);
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator50);
        parking.ParkingSpot parkingSpot55 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str56 = parkingSpot55.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator57 = new parking.CoveredParkingDecorator(parkingSpot55);
        parking.HandicapAccessDecorator handicapAccessDecorator58 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator57);
        int int59 = handicapAccessDecorator58.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator60 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator58);
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator58);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator58);
        java.lang.String str63 = handicapAccessDecorator58.getDetails();
        java.lang.String str64 = handicapAccessDecorator58.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str21, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager30);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(parkingLotManager43);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str63, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: 1, Location: hi!, Lot: ", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        java.lang.String str12 = eVChargingDecorator10.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str5 = coveredParkingDecorator4.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 0, Location: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking" + "'", str5, "Parking Spot ID: 0, Location: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator9);
        java.lang.String str11 = coveredParkingDecorator10.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available, Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator(parkingSpot9);
        int int14 = eVChargingDecorator13.getId();
        java.lang.String str15 = eVChargingDecorator13.getDetails();
        java.lang.String str16 = eVChargingDecorator13.getDetails();
        java.lang.String str17 = eVChargingDecorator13.getLocation();
        java.lang.String str18 = eVChargingDecorator13.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: ");
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str8 = parkingSpot4.getLocation();
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str10 = eVChargingDecorator9.getDetails();
        java.lang.String str11 = eVChargingDecorator9.getDetails();
        java.lang.String str12 = eVChargingDecorator9.getDetails();
        java.lang.String str13 = eVChargingDecorator9.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getParkingLot();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator(parkingSpot35);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator36);
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator42 = new parking.HandicapAccessDecorator(parkingSpot41);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator42);
        java.util.List<parking.ParkingSpot> parkingSpotList44 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager45 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot49 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str50 = parkingSpot49.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator51 = new parking.CoveredParkingDecorator(parkingSpot49);
        java.lang.String str52 = coveredParkingDecorator51.getDetails();
        parking.EVChargingDecorator eVChargingDecorator53 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator51);
        parkingLotManager45.addParkingSpot((parking.ParkingSpot) eVChargingDecorator53);
        java.lang.String str55 = eVChargingDecorator53.getLocation();
        java.lang.String str56 = eVChargingDecorator53.getDetails();
        java.lang.String str57 = eVChargingDecorator53.getDetails();
        java.lang.String str58 = eVChargingDecorator53.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator53);
        java.lang.String str60 = eVChargingDecorator53.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertNotNull(parkingSpotList44);
        org.junit.Assert.assertNotNull(parkingLotManager45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str52, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str56, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str57, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str58, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str60, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList13 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager14.addParkingSpot(parkingSpot18);
        java.lang.String str20 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator(parkingSpot18);
        parkingLotManager0.addParkingSpot(parkingSpot18);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot(0, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        parkingLotManager0.addParkingSpot(parkingSpot27);
        parking.ParkingSpot parkingSpot32 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str33 = parkingSpot32.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator34 = new parking.CoveredParkingDecorator(parkingSpot32);
        java.lang.String str35 = coveredParkingDecorator34.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator34);
        java.lang.String str37 = coveredParkingDecorator34.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator34);
        java.util.List<parking.ParkingSpot> parkingSpotList39 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot43 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str44 = parkingSpot43.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator45 = new parking.CoveredParkingDecorator(parkingSpot43);
        java.lang.String str46 = coveredParkingDecorator45.getDetails();
        parking.EVChargingDecorator eVChargingDecorator47 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator45);
        parking.CoveredParkingDecorator coveredParkingDecorator48 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator45);
        parking.CoveredParkingDecorator coveredParkingDecorator49 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator48);
        parking.EVChargingDecorator eVChargingDecorator50 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator49);
        java.lang.String str51 = coveredParkingDecorator49.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator49);
        java.lang.String str53 = coveredParkingDecorator49.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList13);
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str35, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str46, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str51, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str53, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking");
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        int int10 = coveredParkingDecorator5.getId();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        java.lang.String str12 = coveredParkingDecorator11.getDetails();
        java.lang.String str13 = coveredParkingDecorator11.getDetails();
        java.lang.String str14 = coveredParkingDecorator11.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available, Covered Parking" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available, Covered Parking" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator20 = new parking.HandicapAccessDecorator(parkingSpot17);
        java.lang.String str21 = handicapAccessDecorator20.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator20);
        java.lang.String str23 = handicapAccessDecorator20.getDetails();
        java.lang.String str24 = handicapAccessDecorator20.getDetails();
        int int25 = handicapAccessDecorator20.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator26 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator20);
        java.lang.String str27 = handicapAccessDecorator20.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str23, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str24, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = parkingSpot3.getDetails();
        java.lang.String str7 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str9 = coveredParkingDecorator8.getDetails();
        java.lang.String str10 = coveredParkingDecorator8.getDetails();
        java.lang.Class<?> wildcardClass11 = coveredParkingDecorator8.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str6, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str21 = coveredParkingDecorator13.getDetails();
        java.lang.String str22 = coveredParkingDecorator13.getParkingLot();
        java.lang.String str23 = coveredParkingDecorator13.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator(parkingSpot35);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator36);
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator42 = new parking.HandicapAccessDecorator(parkingSpot41);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator42);
        java.util.List<parking.ParkingSpot> parkingSpotList44 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager45 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot49 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager45.addParkingSpot(parkingSpot49);
        parking.ParkingSpot parkingSpot54 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str55 = parkingSpot54.getLocation();
        parking.EVChargingDecorator eVChargingDecorator56 = new parking.EVChargingDecorator(parkingSpot54);
        parkingLotManager45.addParkingSpot(parkingSpot54);
        parking.EVChargingDecorator eVChargingDecorator58 = new parking.EVChargingDecorator(parkingSpot54);
        java.lang.String str59 = eVChargingDecorator58.getDetails();
        java.lang.String str60 = eVChargingDecorator58.getDetails();
        java.lang.String str61 = eVChargingDecorator58.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator62 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator58);
        java.lang.String str63 = eVChargingDecorator58.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator64 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator58);
        parking.CoveredParkingDecorator coveredParkingDecorator65 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator64);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator65);
        parking.ParkingLotManager parkingLotManager67 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot71 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager67.addParkingSpot(parkingSpot71);
        java.util.List<parking.ParkingSpot> parkingSpotList73 = parkingLotManager67.getParkingSpots();
        parking.ParkingSpot parkingSpot77 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator78 = new parking.EVChargingDecorator(parkingSpot77);
        java.lang.String str79 = parkingSpot77.getDetails();
        parkingLotManager67.addParkingSpot(parkingSpot77);
        parkingLotManager0.addParkingSpot(parkingSpot77);
        java.util.List<parking.ParkingSpot> parkingSpotList82 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertNotNull(parkingSpotList44);
        org.junit.Assert.assertNotNull(parkingLotManager45);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str59, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str60, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str61, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str63, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(parkingLotManager67);
        org.junit.Assert.assertNotNull(parkingSpotList73);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str79, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList82);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking");
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator(parkingSpot19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator(parkingSpot19);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str28 = parkingSpot27.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator(parkingSpot27);
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        int int31 = handicapAccessDecorator30.getId();
        java.lang.String str32 = handicapAccessDecorator30.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator30);
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        java.lang.String str36 = coveredParkingDecorator35.getDetails();
        parking.EVChargingDecorator eVChargingDecorator37 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        parking.HandicapAccessDecorator handicapAccessDecorator38 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator37);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str36, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str13 = coveredParkingDecorator5.getDetails();
        java.lang.String str14 = coveredParkingDecorator5.getDetails();
        java.lang.String str15 = coveredParkingDecorator5.getDetails();
        java.lang.String str16 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str7 = eVChargingDecorator6.getDetails();
        java.lang.String str8 = eVChargingDecorator6.getDetails();
        java.lang.String str9 = eVChargingDecorator6.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = parkingSpot3.getDetails();
        java.lang.String str7 = parkingSpot3.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot3);
        int int9 = parkingSpot3.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str6, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((-1), "", "");
        parkingLotManager0.addParkingSpot(parkingSpot16);
        java.lang.String str18 = parkingSpot16.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot16);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        java.lang.String str22 = handicapAccessDecorator19.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str22, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager24 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager24.addParkingSpot(parkingSpot28);
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        java.lang.String str35 = parkingSpot33.getLocation();
        parkingLotManager24.addParkingSpot(parkingSpot33);
        int int37 = parkingSpot33.getId();
        java.lang.String str38 = parkingSpot33.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot33);
        java.util.List<parking.ParkingSpot> parkingSpotList40 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str45 = parkingSpot44.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator46 = new parking.CoveredParkingDecorator(parkingSpot44);
        parking.HandicapAccessDecorator handicapAccessDecorator47 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator46);
        java.lang.String str48 = handicapAccessDecorator47.getDetails();
        java.lang.String str49 = handicapAccessDecorator47.getDetails();
        java.lang.String str50 = handicapAccessDecorator47.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator51 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator47);
        int int52 = handicapAccessDecorator47.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator47);
        java.lang.String str54 = handicapAccessDecorator47.getLocation();
        java.lang.String str55 = handicapAccessDecorator47.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertNotNull(parkingLotManager24);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(parkingSpotList40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str48, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str49, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        java.util.List<parking.ParkingSpot> parkingSpotList1 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList2 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot6 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str7 = parkingSpot6.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot6);
        java.lang.String str9 = coveredParkingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str11 = coveredParkingDecorator10.getDetails();
        java.lang.String str12 = coveredParkingDecorator10.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator10);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        java.lang.String str20 = coveredParkingDecorator19.getDetails();
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        java.lang.String str22 = coveredParkingDecorator19.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator23 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        java.lang.String str24 = coveredParkingDecorator19.getDetails();
        java.lang.String str25 = coveredParkingDecorator19.getDetails();
        java.lang.String str26 = coveredParkingDecorator19.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator19);
        java.lang.String str28 = coveredParkingDecorator19.getLocation();
        java.lang.Class<?> wildcardClass29 = coveredParkingDecorator19.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList1);
        org.junit.Assert.assertNotNull(parkingSpotList2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str20, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str22, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str24, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str25, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        int int10 = eVChargingDecorator6.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator24 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingLotManager parkingLotManager26 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot30 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str31 = parkingSpot30.getLocation();
        java.lang.String str32 = parkingSpot30.getLocation();
        parkingLotManager26.addParkingSpot(parkingSpot30);
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str38 = parkingSpot37.getLocation();
        parkingLotManager26.addParkingSpot(parkingSpot37);
        java.util.List<parking.ParkingSpot> parkingSpotList40 = parkingLotManager26.getParkingSpots();
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str45 = parkingSpot44.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator46 = new parking.CoveredParkingDecorator(parkingSpot44);
        parking.EVChargingDecorator eVChargingDecorator47 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator46);
        parking.EVChargingDecorator eVChargingDecorator48 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator47);
        parkingLotManager26.addParkingSpot((parking.ParkingSpot) eVChargingDecorator47);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator47);
        java.lang.String str51 = eVChargingDecorator47.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(parkingSpotList40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str51, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator(parkingSpot11);
        java.lang.String str16 = handicapAccessDecorator15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator17 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator15);
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator15);
        java.lang.String str19 = eVChargingDecorator18.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, EV Charging Available" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str23 = eVChargingDecorator21.getLocation();
        int int24 = eVChargingDecorator21.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str26 = eVChargingDecorator21.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator27 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parking.CoveredParkingDecorator coveredParkingDecorator28 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        int int29 = eVChargingDecorator21.getId();
        java.lang.Class<?> wildcardClass30 = eVChargingDecorator21.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str8 = eVChargingDecorator7.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        int int11 = handicapAccessDecorator9.getId();
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator11);
        java.lang.String str13 = eVChargingDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        java.lang.String str31 = eVChargingDecorator28.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        java.lang.String str33 = eVChargingDecorator28.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        java.util.List<parking.ParkingSpot> parkingSpotList1 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager2 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot6 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str7 = parkingSpot6.getLocation();
        java.lang.String str8 = parkingSpot6.getLocation();
        parkingLotManager2.addParkingSpot(parkingSpot6);
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str14 = parkingSpot13.getLocation();
        parkingLotManager2.addParkingSpot(parkingSpot13);
        java.util.List<parking.ParkingSpot> parkingSpotList16 = parkingLotManager2.getParkingSpots();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        java.lang.String str25 = coveredParkingDecorator22.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator26 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager2.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator22);
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        parking.CoveredParkingDecorator coveredParkingDecorator34 = new parking.CoveredParkingDecorator(parkingSpot33);
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator(parkingSpot33);
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        java.util.List<parking.ParkingSpot> parkingSpotList38 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList1);
        org.junit.Assert.assertNotNull(parkingLotManager2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(parkingSpotList16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str25, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertNotNull(parkingSpotList38);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager9 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager9.addParkingSpot(parkingSpot13);
        java.lang.String str15 = parkingSpot13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator(parkingSpot13);
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str18 = eVChargingDecorator16.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator16);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str21 = eVChargingDecorator20.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingLotManager9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager24 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager24.addParkingSpot(parkingSpot28);
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        java.lang.String str35 = parkingSpot33.getLocation();
        parkingLotManager24.addParkingSpot(parkingSpot33);
        int int37 = parkingSpot33.getId();
        java.lang.String str38 = parkingSpot33.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot33);
        java.util.List<parking.ParkingSpot> parkingSpotList40 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str45 = parkingSpot44.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator46 = new parking.CoveredParkingDecorator(parkingSpot44);
        parking.HandicapAccessDecorator handicapAccessDecorator47 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator46);
        java.lang.String str48 = handicapAccessDecorator47.getDetails();
        java.lang.String str49 = handicapAccessDecorator47.getDetails();
        java.lang.String str50 = handicapAccessDecorator47.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator51 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator47);
        int int52 = handicapAccessDecorator47.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator47);
        parking.CoveredParkingDecorator coveredParkingDecorator54 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator47);
        parking.HandicapAccessDecorator handicapAccessDecorator55 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator54);
        parking.CoveredParkingDecorator coveredParkingDecorator56 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator54);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertNotNull(parkingLotManager24);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(parkingSpotList40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str48, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str49, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = coveredParkingDecorator8.getDetails();
        int int10 = coveredParkingDecorator8.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager7 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager7.addParkingSpot(parkingSpot11);
        java.lang.String str13 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator(parkingSpot11);
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator(parkingSpot11);
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator15);
        java.lang.String str17 = handicapAccessDecorator16.getLocation();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator16);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator16);
        java.lang.String str20 = handicapAccessDecorator16.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator16);
        java.lang.String str22 = coveredParkingDecorator21.getLocation();
        java.lang.String str23 = coveredParkingDecorator21.getDetails();
        int int24 = coveredParkingDecorator21.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingLotManager7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str20, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str23, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList13 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager15 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str20 = parkingSpot19.getLocation();
        java.lang.String str21 = parkingSpot19.getLocation();
        parkingLotManager15.addParkingSpot(parkingSpot19);
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str27 = parkingSpot26.getLocation();
        parkingLotManager15.addParkingSpot(parkingSpot26);
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager15.getParkingSpots();
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator(parkingSpot33);
        java.lang.String str36 = coveredParkingDecorator35.getDetails();
        parking.EVChargingDecorator eVChargingDecorator37 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        java.lang.String str38 = coveredParkingDecorator35.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator39 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        parkingLotManager15.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator35);
        java.util.List<parking.ParkingSpot> parkingSpotList41 = parkingLotManager15.getParkingSpots();
        parking.ParkingSpot parkingSpot45 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator46 = new parking.EVChargingDecorator(parkingSpot45);
        parking.EVChargingDecorator eVChargingDecorator47 = new parking.EVChargingDecorator(parkingSpot45);
        parking.CoveredParkingDecorator coveredParkingDecorator48 = new parking.CoveredParkingDecorator(parkingSpot45);
        parkingLotManager15.addParkingSpot(parkingSpot45);
        parkingLotManager0.addParkingSpot(parkingSpot45);
        parking.ParkingLotManager parkingLotManager51 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot55 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager51.addParkingSpot(parkingSpot55);
        java.lang.String str57 = parkingSpot55.getDetails();
        parking.EVChargingDecorator eVChargingDecorator58 = new parking.EVChargingDecorator(parkingSpot55);
        parking.EVChargingDecorator eVChargingDecorator59 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator58);
        int int60 = eVChargingDecorator58.getId();
        int int61 = eVChargingDecorator58.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator62 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator58);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator62);
        java.lang.String str64 = coveredParkingDecorator62.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingSpotList13);
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingLotManager15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str36, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str38, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList41);
        org.junit.Assert.assertNotNull(parkingLotManager51);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str57, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Covered Parking" + "'", str64, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Covered Parking");
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        java.lang.String str10 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        java.lang.String str9 = handicapAccessDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str12 = handicapAccessDecorator6.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "Parking Spot ID: 1, Location: , Lot: ", "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
        java.lang.String str4 = parkingSpot3.getDetails();
        int int5 = parkingSpot3.getId();
        java.lang.String str6 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: Parking Spot ID: 1, Location: , Lot: , Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available" + "'", str4, "Parking Spot ID: 1, Location: Parking Spot ID: 1, Location: , Lot: , Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: Parking Spot ID: 1, Location: , Lot: , Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available" + "'", str6, "Parking Spot ID: 1, Location: Parking Spot ID: 1, Location: , Lot: , Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str13 = handicapAccessDecorator12.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        parking.ParkingSpot parkingSpot31 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str32 = parkingSpot31.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot31);
        java.util.List<parking.ParkingSpot> parkingSpotList34 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList35 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList36 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList34);
        org.junit.Assert.assertNotNull(parkingSpotList35);
        org.junit.Assert.assertNotNull(parkingSpotList36);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str9 = handicapAccessDecorator6.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        java.lang.String str12 = handicapAccessDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        java.lang.String str10 = eVChargingDecorator7.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        java.lang.String str41 = coveredParkingDecorator36.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str41, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str14 = parkingSpot13.getParkingLot();
        java.lang.String str15 = parkingSpot13.getParkingLot();
        java.lang.String str16 = parkingSpot13.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot13);
        parking.ParkingSpot parkingSpot21 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str22 = parkingSpot21.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator23 = new parking.CoveredParkingDecorator(parkingSpot21);
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator(parkingSpot21);
        parkingLotManager0.addParkingSpot(parkingSpot21);
        parking.ParkingLotManager parkingLotManager26 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot30 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str31 = parkingSpot30.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator32 = new parking.CoveredParkingDecorator(parkingSpot30);
        java.lang.String str33 = coveredParkingDecorator32.getDetails();
        parking.EVChargingDecorator eVChargingDecorator34 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator32);
        parkingLotManager26.addParkingSpot((parking.ParkingSpot) eVChargingDecorator34);
        java.lang.String str36 = eVChargingDecorator34.getDetails();
        java.lang.String str37 = eVChargingDecorator34.getDetails();
        java.lang.String str38 = eVChargingDecorator34.getDetails();
        java.lang.String str39 = eVChargingDecorator34.getDetails();
        java.lang.String str40 = eVChargingDecorator34.getDetails();
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator34);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator41);
        parking.ParkingLotManager parkingLotManager43 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str48 = parkingSpot47.getLocation();
        java.lang.String str49 = parkingSpot47.getLocation();
        parkingLotManager43.addParkingSpot(parkingSpot47);
        parking.ParkingSpot parkingSpot54 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str55 = parkingSpot54.getLocation();
        parkingLotManager43.addParkingSpot(parkingSpot54);
        java.util.List<parking.ParkingSpot> parkingSpotList57 = parkingLotManager43.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList58 = parkingLotManager43.getParkingSpots();
        parking.ParkingLotManager parkingLotManager59 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot63 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str64 = parkingSpot63.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator65 = new parking.CoveredParkingDecorator(parkingSpot63);
        java.lang.String str66 = coveredParkingDecorator65.getDetails();
        parking.EVChargingDecorator eVChargingDecorator67 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator65);
        parkingLotManager59.addParkingSpot((parking.ParkingSpot) eVChargingDecorator67);
        java.lang.String str69 = eVChargingDecorator67.getDetails();
        parkingLotManager43.addParkingSpot((parking.ParkingSpot) eVChargingDecorator67);
        parking.HandicapAccessDecorator handicapAccessDecorator71 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator67);
        java.lang.String str72 = eVChargingDecorator67.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator73 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator67);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator67);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str16, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(parkingLotManager26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str33, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str36, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str38, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str39, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str40, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingLotManager43);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(parkingSpotList57);
        org.junit.Assert.assertNotNull(parkingSpotList58);
        org.junit.Assert.assertNotNull(parkingLotManager59);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str66, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str69, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str72, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible", "");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str5 = handicapAccessDecorator4.getParkingLot();
        java.lang.String str6 = handicapAccessDecorator4.getDetails();
        java.lang.String str7 = handicapAccessDecorator4.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 10, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Lot: , Handicap Accessible" + "'", str6, "Parking Spot ID: 10, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 10, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Lot: , Handicap Accessible" + "'", str7, "Parking Spot ID: 10, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Lot: , Handicap Accessible");
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        java.lang.String str7 = parkingSpot4.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator(parkingSpot4);
        java.lang.String str10 = handicapAccessDecorator9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator(parkingSpot19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator(parkingSpot19);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str28 = parkingSpot27.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator(parkingSpot27);
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        int int31 = handicapAccessDecorator30.getId();
        java.lang.String str32 = handicapAccessDecorator30.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator30);
        parking.EVChargingDecorator eVChargingDecorator35 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        java.lang.String str36 = eVChargingDecorator35.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str13 = eVChargingDecorator12.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator12);
        int int15 = eVChargingDecorator12.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = coveredParkingDecorator5.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str14 = coveredParkingDecorator5.getDetails();
        java.lang.String str15 = coveredParkingDecorator5.getDetails();
        java.lang.String str16 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str18 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.CoveredParkingDecorator coveredParkingDecorator23 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str24 = eVChargingDecorator21.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        int int26 = eVChargingDecorator21.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        int int4 = parkingSpot3.getId();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) -1, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available", "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        int int5 = parkingSpot3.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator(parkingSpot3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList13 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager14.addParkingSpot(parkingSpot18);
        java.lang.String str20 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator(parkingSpot18);
        parkingLotManager0.addParkingSpot(parkingSpot18);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot(0, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        parkingLotManager0.addParkingSpot(parkingSpot27);
        parking.ParkingSpot parkingSpot32 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str33 = parkingSpot32.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator34 = new parking.CoveredParkingDecorator(parkingSpot32);
        java.lang.String str35 = coveredParkingDecorator34.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator34);
        java.lang.String str37 = coveredParkingDecorator34.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator34);
        java.util.List<parking.ParkingSpot> parkingSpotList39 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot43 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str44 = parkingSpot43.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator45 = new parking.CoveredParkingDecorator(parkingSpot43);
        java.lang.String str46 = coveredParkingDecorator45.getDetails();
        parking.EVChargingDecorator eVChargingDecorator47 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator45);
        parking.CoveredParkingDecorator coveredParkingDecorator48 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator45);
        parking.CoveredParkingDecorator coveredParkingDecorator49 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator48);
        parking.EVChargingDecorator eVChargingDecorator50 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator49);
        java.lang.String str51 = coveredParkingDecorator49.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator49);
        parking.CoveredParkingDecorator coveredParkingDecorator53 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator49);
        java.lang.String str54 = coveredParkingDecorator53.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList13);
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str35, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str46, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str51, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking, Covered Parking" + "'", str54, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking, Covered Parking");
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str10 = eVChargingDecorator6.getDetails();
        java.lang.String str11 = eVChargingDecorator6.getParkingLot();
        java.lang.String str12 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        java.lang.String str13 = handicapAccessDecorator11.getDetails();
        java.lang.String str14 = handicapAccessDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getParkingLot();
        java.lang.String str9 = handicapAccessDecorator7.getLocation();
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str12 = handicapAccessDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str14 = eVChargingDecorator8.getDetails();
        java.lang.String str15 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator12);
        parking.HandicapAccessDecorator handicapAccessDecorator14 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.Class<?> wildcardClass16 = eVChargingDecorator15.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager9 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager9.addParkingSpot(parkingSpot13);
        java.lang.String str15 = parkingSpot13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator(parkingSpot13);
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str18 = eVChargingDecorator16.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator16);
        java.util.List<parking.ParkingSpot> parkingSpotList20 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager21.addParkingSpot(parkingSpot25);
        java.util.List<parking.ParkingSpot> parkingSpotList27 = parkingLotManager21.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList28 = parkingLotManager21.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager21.getParkingSpots();
        parking.ParkingLotManager parkingLotManager30 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager30.addParkingSpot(parkingSpot34);
        java.lang.String str36 = parkingSpot34.getDetails();
        parking.EVChargingDecorator eVChargingDecorator37 = new parking.EVChargingDecorator(parkingSpot34);
        parking.HandicapAccessDecorator handicapAccessDecorator38 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator37);
        java.lang.String str39 = eVChargingDecorator37.getDetails();
        parkingLotManager21.addParkingSpot((parking.ParkingSpot) eVChargingDecorator37);
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str45 = parkingSpot44.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator46 = new parking.CoveredParkingDecorator(parkingSpot44);
        parking.EVChargingDecorator eVChargingDecorator47 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator46);
        parking.EVChargingDecorator eVChargingDecorator48 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator47);
        java.lang.String str49 = eVChargingDecorator47.getLocation();
        int int50 = eVChargingDecorator47.getId();
        parkingLotManager21.addParkingSpot((parking.ParkingSpot) eVChargingDecorator47);
        parking.ParkingSpot parkingSpot55 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str56 = parkingSpot55.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator57 = new parking.CoveredParkingDecorator(parkingSpot55);
        parking.EVChargingDecorator eVChargingDecorator58 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator57);
        parking.EVChargingDecorator eVChargingDecorator59 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator58);
        java.lang.String str60 = eVChargingDecorator58.getDetails();
        parkingLotManager21.addParkingSpot((parking.ParkingSpot) eVChargingDecorator58);
        parking.EVChargingDecorator eVChargingDecorator62 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator58);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator62);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingLotManager9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList20);
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertNotNull(parkingSpotList27);
        org.junit.Assert.assertNotNull(parkingSpotList28);
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertNotNull(parkingLotManager30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str36, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str39, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str60, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str29 = handicapAccessDecorator28.getDetails();
        java.lang.String str30 = handicapAccessDecorator28.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        java.lang.String str32 = coveredParkingDecorator31.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible, Covered Parking" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(10, "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str9 = handicapAccessDecorator8.getDetails();
        java.lang.Class<?> wildcardClass10 = handicapAccessDecorator8.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str5 = parkingSpot3.getParkingLot();
        int int6 = parkingSpot3.getId();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        int int5 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.Class<?> wildcardClass8 = handicapAccessDecorator7.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str6 = handicapAccessDecorator5.getLocation();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = handicapAccessDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator8);
        java.lang.String str11 = coveredParkingDecorator10.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, EV Charging Available, Handicap Accessible" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, EV Charging Available, Handicap Accessible, Covered Parking" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, EV Charging Available, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = coveredParkingDecorator8.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible, Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager7 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        java.lang.String str13 = parkingSpot11.getLocation();
        parkingLotManager7.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parkingLotManager7.addParkingSpot(parkingSpot18);
        java.util.List<parking.ParkingSpot> parkingSpotList21 = parkingLotManager7.getParkingSpots();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        java.lang.String str28 = coveredParkingDecorator27.getDetails();
        parking.EVChargingDecorator eVChargingDecorator29 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator31 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parkingLotManager7.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager7.getParkingSpots();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator38 = new parking.EVChargingDecorator(parkingSpot37);
        parking.EVChargingDecorator eVChargingDecorator39 = new parking.EVChargingDecorator(parkingSpot37);
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator(parkingSpot37);
        parkingLotManager7.addParkingSpot(parkingSpot37);
        parkingLotManager0.addParkingSpot(parkingSpot37);
        parking.ParkingSpot parkingSpot46 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str47 = parkingSpot46.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator48 = new parking.CoveredParkingDecorator(parkingSpot46);
        java.lang.String str49 = coveredParkingDecorator48.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator50 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator48);
        java.lang.String str51 = coveredParkingDecorator48.getDetails();
        java.lang.String str52 = coveredParkingDecorator48.getLocation();
        java.lang.String str53 = coveredParkingDecorator48.getLocation();
        java.lang.String str54 = coveredParkingDecorator48.getDetails();
        java.lang.String str55 = coveredParkingDecorator48.getDetails();
        java.lang.String str56 = coveredParkingDecorator48.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator48);
        java.lang.String str58 = coveredParkingDecorator48.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingLotManager7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(parkingSpotList21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str49, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str51, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str54, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str55, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str56, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str58, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str8 = parkingSpot4.getLocation();
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str10 = eVChargingDecorator9.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator9);
        java.lang.String str12 = coveredParkingDecorator11.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking");
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        java.lang.String str13 = handicapAccessDecorator12.getDetails();
        java.lang.String str14 = handicapAccessDecorator12.getLocation();
        java.lang.String str15 = handicapAccessDecorator12.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator16 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator12);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '4', "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = parkingSpot3.getLocation();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str6, "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator10);
        int int13 = eVChargingDecorator10.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator14 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator12);
        parking.HandicapAccessDecorator handicapAccessDecorator14 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator14);
        int int16 = handicapAccessDecorator14.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str23 = eVChargingDecorator21.getLocation();
        int int24 = eVChargingDecorator21.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str26 = eVChargingDecorator21.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator27 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str28 = eVChargingDecorator21.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str29 = handicapAccessDecorator28.getDetails();
        java.lang.String str30 = handicapAccessDecorator28.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parking.HandicapAccessDecorator handicapAccessDecorator32 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator31);
        int int33 = coveredParkingDecorator31.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager9 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager9.addParkingSpot(parkingSpot13);
        java.lang.String str15 = parkingSpot13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator(parkingSpot13);
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str18 = eVChargingDecorator16.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator16);
        parking.ParkingSpot parkingSpot23 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str24 = parkingSpot23.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator(parkingSpot23);
        parking.EVChargingDecorator eVChargingDecorator26 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator25);
        parking.EVChargingDecorator eVChargingDecorator27 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator26);
        java.lang.String str28 = eVChargingDecorator26.getLocation();
        int int29 = eVChargingDecorator26.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator26);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        parking.EVChargingDecorator eVChargingDecorator37 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parking.EVChargingDecorator eVChargingDecorator38 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator37);
        java.lang.String str39 = eVChargingDecorator37.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator37);
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator37);
        java.lang.String str42 = eVChargingDecorator37.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingLotManager9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str39, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str6 = eVChargingDecorator5.getLocation();
        java.lang.String str7 = eVChargingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, EV Charging Available" + "'", str7, "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Handicap Accessible", "");
        java.lang.Class<?> wildcardClass4 = parkingSpot3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str9 = handicapAccessDecorator6.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = parkingSpot3.getDetails();
        java.lang.String str7 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str6, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str7, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking, Covered Parking");
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str11 = parkingSpot10.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator(parkingSpot10);
        java.lang.String str13 = coveredParkingDecorator12.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        java.lang.String str15 = coveredParkingDecorator14.getDetails();
        java.lang.String str16 = coveredParkingDecorator14.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator14);
        parking.ParkingSpot parkingSpot21 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str22 = parkingSpot21.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator23 = new parking.CoveredParkingDecorator(parkingSpot21);
        java.lang.String str24 = coveredParkingDecorator23.getDetails();
        parking.EVChargingDecorator eVChargingDecorator25 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator23);
        java.lang.String str26 = coveredParkingDecorator23.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator23);
        java.lang.String str28 = coveredParkingDecorator23.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator23);
        java.lang.String str30 = coveredParkingDecorator23.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator23);
        parking.ParkingLotManager parkingLotManager32 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot36 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager32.addParkingSpot(parkingSpot36);
        parking.ParkingLotManager parkingLotManager38 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot42 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager38.addParkingSpot(parkingSpot42);
        java.lang.String str44 = parkingSpot42.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator45 = new parking.CoveredParkingDecorator(parkingSpot42);
        parking.CoveredParkingDecorator coveredParkingDecorator46 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator45);
        parkingLotManager32.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator45);
        java.util.List<parking.ParkingSpot> parkingSpotList48 = parkingLotManager32.getParkingSpots();
        parking.ParkingSpot parkingSpot52 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str53 = parkingSpot52.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator54 = new parking.CoveredParkingDecorator(parkingSpot52);
        parking.EVChargingDecorator eVChargingDecorator55 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator54);
        parking.EVChargingDecorator eVChargingDecorator56 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator55);
        parking.EVChargingDecorator eVChargingDecorator57 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator55);
        java.lang.String str58 = eVChargingDecorator55.getDetails();
        parking.EVChargingDecorator eVChargingDecorator59 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator55);
        java.lang.String str60 = eVChargingDecorator59.getDetails();
        java.lang.String str61 = eVChargingDecorator59.getDetails();
        parking.EVChargingDecorator eVChargingDecorator62 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator59);
        parking.CoveredParkingDecorator coveredParkingDecorator63 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator62);
        parkingLotManager32.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator63);
        int int65 = coveredParkingDecorator63.getId();
        parking.EVChargingDecorator eVChargingDecorator66 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator63);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator66);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str24, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(parkingLotManager32);
        org.junit.Assert.assertNotNull(parkingLotManager38);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str58, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str60, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str61, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        java.lang.String str12 = coveredParkingDecorator11.getParkingLot();
        java.lang.String str13 = coveredParkingDecorator11.getParkingLot();
        java.lang.String str14 = coveredParkingDecorator11.getDetails();
        java.lang.String str15 = coveredParkingDecorator11.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator11);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available, Covered Parking" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available, Covered Parking" + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        java.util.List<parking.ParkingSpot> parkingSpotList1 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager2 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot6 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str7 = parkingSpot6.getLocation();
        java.lang.String str8 = parkingSpot6.getLocation();
        parkingLotManager2.addParkingSpot(parkingSpot6);
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str14 = parkingSpot13.getLocation();
        parkingLotManager2.addParkingSpot(parkingSpot13);
        java.util.List<parking.ParkingSpot> parkingSpotList16 = parkingLotManager2.getParkingSpots();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        java.lang.String str25 = coveredParkingDecorator22.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator26 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager2.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator22);
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        parking.CoveredParkingDecorator coveredParkingDecorator34 = new parking.CoveredParkingDecorator(parkingSpot33);
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator(parkingSpot33);
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        parking.ParkingLotManager parkingLotManager38 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot42 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager38.addParkingSpot(parkingSpot42);
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str48 = parkingSpot47.getLocation();
        java.lang.String str49 = parkingSpot47.getLocation();
        parkingLotManager38.addParkingSpot(parkingSpot47);
        parking.ParkingLotManager parkingLotManager51 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot55 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager51.addParkingSpot(parkingSpot55);
        java.lang.String str57 = parkingSpot55.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator58 = new parking.CoveredParkingDecorator(parkingSpot55);
        parkingLotManager38.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator58);
        java.util.List<parking.ParkingSpot> parkingSpotList60 = parkingLotManager38.getParkingSpots();
        parking.ParkingSpot parkingSpot64 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str65 = parkingSpot64.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator66 = new parking.HandicapAccessDecorator(parkingSpot64);
        parking.HandicapAccessDecorator handicapAccessDecorator67 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator66);
        parkingLotManager38.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator67);
        parking.ParkingSpot parkingSpot72 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str73 = parkingSpot72.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator74 = new parking.CoveredParkingDecorator(parkingSpot72);
        java.lang.String str75 = coveredParkingDecorator74.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator76 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator74);
        parkingLotManager38.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator74);
        parking.CoveredParkingDecorator coveredParkingDecorator78 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator74);
        int int79 = coveredParkingDecorator74.getId();
        java.lang.String str80 = coveredParkingDecorator74.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator74);
        java.lang.String str82 = coveredParkingDecorator74.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList1);
        org.junit.Assert.assertNotNull(parkingLotManager2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(parkingSpotList16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str25, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertNotNull(parkingLotManager38);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(parkingLotManager51);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str65, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str75, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str80, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str82, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str6 = handicapAccessDecorator5.getLocation();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = handicapAccessDecorator8.getDetails();
        java.lang.String str10 = handicapAccessDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, EV Charging Available, Handicap Accessible" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, EV Charging Available, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator(parkingSpot9);
        java.lang.String str14 = eVChargingDecorator13.getDetails();
        java.lang.String str15 = eVChargingDecorator13.getDetails();
        java.lang.String str16 = eVChargingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator13);
        java.lang.String str18 = eVChargingDecorator13.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator13);
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        java.lang.String str22 = coveredParkingDecorator20.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Covered Parking" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Covered Parking");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Covered Parking" + "'", str22, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        int int9 = eVChargingDecorator8.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str14 = eVChargingDecorator8.getLocation();
        java.lang.String str15 = eVChargingDecorator8.getDetails();
        java.lang.String str16 = eVChargingDecorator8.getDetails();
        java.lang.String str17 = eVChargingDecorator8.getDetails();
        java.lang.String str18 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str17, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        java.lang.String str13 = handicapAccessDecorator12.getDetails();
        java.lang.String str14 = handicapAccessDecorator12.getLocation();
        java.lang.String str15 = handicapAccessDecorator12.getParkingLot();
        java.lang.String str16 = handicapAccessDecorator12.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator(parkingSpot9);
        java.lang.String str14 = eVChargingDecorator13.getDetails();
        java.lang.String str15 = eVChargingDecorator13.getParkingLot();
        java.lang.String str16 = eVChargingDecorator13.getDetails();
        java.lang.String str17 = eVChargingDecorator13.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        int int9 = eVChargingDecorator6.getId();
        java.lang.String str10 = eVChargingDecorator6.getDetails();
        java.lang.String str11 = eVChargingDecorator6.getDetails();
        java.lang.Class<?> wildcardClass12 = eVChargingDecorator6.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        java.lang.String str12 = eVChargingDecorator10.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator13);
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator14);
        java.lang.String str16 = coveredParkingDecorator14.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getDetails();
        java.lang.String str11 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        java.lang.String str13 = handicapAccessDecorator9.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str15 = handicapAccessDecorator9.getDetails();
        java.lang.String str16 = handicapAccessDecorator9.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator12);
        parking.HandicapAccessDecorator handicapAccessDecorator14 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator14);
        java.lang.String str16 = handicapAccessDecorator15.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Handicap Accessible, Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Handicap Accessible, Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        java.lang.String str13 = coveredParkingDecorator9.getDetails();
        java.lang.String str14 = coveredParkingDecorator9.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot18);
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        java.lang.String str28 = coveredParkingDecorator27.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        java.lang.String str31 = coveredParkingDecorator27.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str38 = parkingSpot37.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator39 = new parking.HandicapAccessDecorator(parkingSpot37);
        parking.HandicapAccessDecorator handicapAccessDecorator40 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator39);
        java.lang.String str41 = handicapAccessDecorator40.getDetails();
        java.lang.String str42 = handicapAccessDecorator40.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator43 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator40);
        java.lang.String str44 = handicapAccessDecorator40.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator40);
        java.lang.String str46 = handicapAccessDecorator40.getDetails();
        java.lang.String str47 = handicapAccessDecorator40.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str38, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str41, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str42, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str44, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str46, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: ");
        parkingLotManager0.addParkingSpot(parkingSpot18);
        java.lang.String str20 = parkingSpot18.getDetails();
        java.lang.Class<?> wildcardClass21 = parkingSpot18.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: -1, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: " + "'", str20, "Parking Spot ID: -1, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        int int10 = eVChargingDecorator6.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str12 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = parkingSpot3.getDetails();
        java.lang.String str7 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str6, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str7, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(32, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str5 = coveredParkingDecorator4.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, Covered Parking" + "'", str5, "Parking Spot ID: 32, Location: Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str7 = coveredParkingDecorator5.getDetails();
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str13 = eVChargingDecorator12.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        java.lang.String str17 = parkingSpot15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot15);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        java.util.List<parking.ParkingSpot> parkingSpotList20 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager21.addParkingSpot(parkingSpot25);
        parking.ParkingSpot parkingSpot30 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str31 = parkingSpot30.getLocation();
        parking.EVChargingDecorator eVChargingDecorator32 = new parking.EVChargingDecorator(parkingSpot30);
        parkingLotManager21.addParkingSpot(parkingSpot30);
        parking.EVChargingDecorator eVChargingDecorator34 = new parking.EVChargingDecorator(parkingSpot30);
        java.lang.String str35 = eVChargingDecorator34.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator34);
        java.lang.String str37 = eVChargingDecorator34.getDetails();
        java.lang.String str38 = eVChargingDecorator34.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingSpotList20);
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str35, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str37, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str20 = parkingSpot19.getParkingLot();
        java.lang.String str21 = parkingSpot19.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot19);
        int int23 = parkingSpot19.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str21, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        java.lang.String str12 = eVChargingDecorator10.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator13);
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator14);
        int int16 = coveredParkingDecorator15.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        int int14 = parkingSpot11.getId();
        int int15 = parkingSpot11.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator(parkingSpot11);
        java.lang.String str17 = parkingSpot11.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator(parkingSpot19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator(parkingSpot19);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str28 = parkingSpot27.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator(parkingSpot27);
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        int int31 = handicapAccessDecorator30.getId();
        java.lang.String str32 = handicapAccessDecorator30.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator30);
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        java.lang.String str37 = eVChargingDecorator36.getDetails();
        java.lang.String str38 = eVChargingDecorator36.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, EV Charging Available" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, EV Charging Available" + "'", str38, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager21.addParkingSpot(parkingSpot25);
        java.lang.String str27 = parkingSpot25.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot25);
        java.lang.String str29 = parkingSpot25.getLocation();
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator(parkingSpot25);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator30);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager34 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot38 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager34.addParkingSpot(parkingSpot38);
        java.lang.String str40 = parkingSpot38.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator(parkingSpot38);
        parking.CoveredParkingDecorator coveredParkingDecorator42 = new parking.CoveredParkingDecorator(parkingSpot38);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator42);
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str48 = parkingSpot47.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator49 = new parking.HandicapAccessDecorator(parkingSpot47);
        parking.HandicapAccessDecorator handicapAccessDecorator50 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator49);
        java.lang.String str51 = handicapAccessDecorator49.getDetails();
        java.lang.String str52 = handicapAccessDecorator49.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator53 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator49);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator53);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingLotManager34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str48, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str51, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str52, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        int int5 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str8 = coveredParkingDecorator6.getDetails();
        int int9 = coveredParkingDecorator6.getId();
        java.lang.String str10 = coveredParkingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        java.util.List<parking.ParkingSpot> parkingSpotList40 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList41 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList40);
        org.junit.Assert.assertNotNull(parkingSpotList41);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str13 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (byte) 100, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking");
        parkingLotManager0.addParkingSpot(parkingSpot27);
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager30 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getLocation();
        java.lang.String str36 = parkingSpot34.getLocation();
        parkingLotManager30.addParkingSpot(parkingSpot34);
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str42 = parkingSpot41.getLocation();
        parkingLotManager30.addParkingSpot(parkingSpot41);
        parking.ParkingLotManager parkingLotManager44 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot48 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str49 = parkingSpot48.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator50 = new parking.CoveredParkingDecorator(parkingSpot48);
        java.lang.String str51 = coveredParkingDecorator50.getDetails();
        parking.EVChargingDecorator eVChargingDecorator52 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator50);
        parkingLotManager44.addParkingSpot((parking.ParkingSpot) eVChargingDecorator52);
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) eVChargingDecorator52);
        parking.ParkingSpot parkingSpot58 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager30.addParkingSpot(parkingSpot58);
        java.util.List<parking.ParkingSpot> parkingSpotList60 = parkingLotManager30.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList61 = parkingLotManager30.getParkingSpots();
        parking.ParkingSpot parkingSpot65 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parking.EVChargingDecorator eVChargingDecorator66 = new parking.EVChargingDecorator(parkingSpot65);
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) eVChargingDecorator66);
        parking.ParkingLotManager parkingLotManager68 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot72 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager68.addParkingSpot(parkingSpot72);
        java.lang.String str74 = parkingSpot72.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator75 = new parking.CoveredParkingDecorator(parkingSpot72);
        java.lang.String str76 = coveredParkingDecorator75.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator77 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator75);
        parking.CoveredParkingDecorator coveredParkingDecorator78 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator77);
        java.lang.String str79 = coveredParkingDecorator78.getDetails();
        int int80 = coveredParkingDecorator78.getId();
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator78);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator78);
        parking.ParkingSpot parkingSpot86 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator87 = new parking.HandicapAccessDecorator(parkingSpot86);
        parking.CoveredParkingDecorator coveredParkingDecorator88 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator87);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator87);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertNotNull(parkingLotManager30);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(parkingLotManager44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str51, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList60);
        org.junit.Assert.assertNotNull(parkingSpotList61);
        org.junit.Assert.assertNotNull(parkingLotManager68);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str76, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str79, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingLotManager parkingLotManager6 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager6.addParkingSpot(parkingSpot10);
        java.lang.String str12 = parkingSpot10.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot10);
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        java.util.List<parking.ParkingSpot> parkingSpotList16 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        parking.EVChargingDecorator eVChargingDecorator23 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator23);
        parking.EVChargingDecorator eVChargingDecorator25 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator23);
        java.lang.String str26 = eVChargingDecorator23.getDetails();
        parking.EVChargingDecorator eVChargingDecorator27 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator23);
        java.lang.String str28 = eVChargingDecorator27.getDetails();
        java.lang.String str29 = eVChargingDecorator27.getDetails();
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator27);
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator30);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator31);
        int int33 = coveredParkingDecorator31.getId();
        parking.EVChargingDecorator eVChargingDecorator34 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator31);
        java.lang.String str35 = eVChargingDecorator34.getDetails();
        java.lang.String str36 = eVChargingDecorator34.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingLotManager6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking, EV Charging Available" + "'", str35, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking, EV Charging Available" + "'", str36, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 10, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available", "");
        java.lang.String str4 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 10, Location: Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, Lot: " + "'", str4, "Parking Spot ID: 10, Location: Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, Lot: ");
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(35, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Handicap Accessible", "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str13 = coveredParkingDecorator5.getDetails();
        java.lang.String str14 = coveredParkingDecorator5.getDetails();
        java.lang.Class<?> wildcardClass15 = coveredParkingDecorator5.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        java.lang.String str32 = parkingSpot27.getDetails();
        java.lang.String str33 = parkingSpot27.getLocation();
        parking.EVChargingDecorator eVChargingDecorator34 = new parking.EVChargingDecorator(parkingSpot27);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str32, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        java.lang.String str11 = coveredParkingDecorator9.getDetails();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        java.lang.String str13 = coveredParkingDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking");
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.util.List<parking.ParkingSpot> parkingSpotList28 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator(parkingSpot33);
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        java.lang.String str37 = coveredParkingDecorator35.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator35);
        parking.ParkingLotManager parkingLotManager39 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot43 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager39.addParkingSpot(parkingSpot43);
        java.util.List<parking.ParkingSpot> parkingSpotList45 = parkingLotManager39.getParkingSpots();
        parking.ParkingLotManager parkingLotManager46 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot50 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager46.addParkingSpot(parkingSpot50);
        java.lang.String str52 = parkingSpot50.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator53 = new parking.CoveredParkingDecorator(parkingSpot50);
        parking.CoveredParkingDecorator coveredParkingDecorator54 = new parking.CoveredParkingDecorator(parkingSpot50);
        parking.HandicapAccessDecorator handicapAccessDecorator55 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator54);
        java.lang.String str56 = handicapAccessDecorator55.getLocation();
        parking.EVChargingDecorator eVChargingDecorator57 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator55);
        parkingLotManager39.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator55);
        parking.ParkingSpot parkingSpot62 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str63 = parkingSpot62.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator64 = new parking.CoveredParkingDecorator(parkingSpot62);
        java.lang.String str65 = coveredParkingDecorator64.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator66 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator64);
        java.lang.String str67 = handicapAccessDecorator66.getLocation();
        parking.EVChargingDecorator eVChargingDecorator68 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator66);
        java.lang.String str69 = eVChargingDecorator68.getDetails();
        parkingLotManager39.addParkingSpot((parking.ParkingSpot) eVChargingDecorator68);
        java.lang.String str71 = eVChargingDecorator68.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator68);
        parking.ParkingSpot parkingSpot76 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str77 = parkingSpot76.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator78 = new parking.CoveredParkingDecorator(parkingSpot76);
        parking.EVChargingDecorator eVChargingDecorator79 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator78);
        parking.EVChargingDecorator eVChargingDecorator80 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator79);
        parking.EVChargingDecorator eVChargingDecorator81 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator79);
        parking.HandicapAccessDecorator handicapAccessDecorator82 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator81);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator81);
        java.util.List<parking.ParkingSpot> parkingSpotList84 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList28);
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager39);
        org.junit.Assert.assertNotNull(parkingSpotList45);
        org.junit.Assert.assertNotNull(parkingLotManager46);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str65, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available" + "'", str69, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available" + "'", str71, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(parkingSpotList84);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator(parkingSpot19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator(parkingSpot19);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str28 = parkingSpot27.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator(parkingSpot27);
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        int int31 = handicapAccessDecorator30.getId();
        java.lang.String str32 = handicapAccessDecorator30.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator30);
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        java.lang.String str36 = handicapAccessDecorator30.getDetails();
        java.lang.String str37 = handicapAccessDecorator30.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str36, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        java.lang.String str17 = parkingSpot15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot15);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager20.addParkingSpot(parkingSpot24);
        java.lang.String str26 = parkingSpot24.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot24);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parking.EVChargingDecorator eVChargingDecorator32 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str33 = coveredParkingDecorator27.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str30, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str33, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking", "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str4, "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking", "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking");
        java.lang.String str4 = parkingSpot3.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking" + "'", str4, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList13 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager14.addParkingSpot(parkingSpot18);
        java.lang.String str20 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator(parkingSpot18);
        parkingLotManager0.addParkingSpot(parkingSpot18);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot(0, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        parkingLotManager0.addParkingSpot(parkingSpot27);
        parking.ParkingSpot parkingSpot32 = new parking.ParkingSpot(10, "Parking Spot ID: -1, Location: , Lot: ", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator33 = new parking.EVChargingDecorator(parkingSpot32);
        parking.HandicapAccessDecorator handicapAccessDecorator34 = new parking.HandicapAccessDecorator(parkingSpot32);
        java.lang.String str35 = parkingSpot32.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot32);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList13);
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str35, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator(parkingSpot15);
        parking.HandicapAccessDecorator handicapAccessDecorator18 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator17);
        java.lang.String str19 = handicapAccessDecorator18.getDetails();
        java.lang.String str20 = handicapAccessDecorator18.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator21 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator18);
        java.lang.String str22 = handicapAccessDecorator18.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator18);
        parking.ParkingLotManager parkingLotManager24 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager24.addParkingSpot(parkingSpot28);
        java.lang.String str30 = parkingSpot28.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator(parkingSpot28);
        parking.EVChargingDecorator eVChargingDecorator32 = new parking.EVChargingDecorator(parkingSpot28);
        java.lang.String str33 = eVChargingDecorator32.getDetails();
        parking.EVChargingDecorator eVChargingDecorator34 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator32);
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator34);
        java.lang.String str36 = coveredParkingDecorator35.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator37 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        java.lang.String str38 = coveredParkingDecorator35.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator39 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator35);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str19, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str20, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str22, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertNotNull(parkingLotManager24);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str33, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available, Covered Parking" + "'", str38, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str6 = handicapAccessDecorator5.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '4', "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.Class<?> wildcardClass5 = parkingSpot3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking", "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str11 = parkingSpot10.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator(parkingSpot10);
        java.lang.String str13 = coveredParkingDecorator12.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        java.lang.String str15 = coveredParkingDecorator14.getDetails();
        java.lang.String str16 = coveredParkingDecorator14.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator14);
        parking.ParkingLotManager parkingLotManager18 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot22 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager18.addParkingSpot(parkingSpot22);
        java.lang.String str24 = parkingSpot22.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator25 = new parking.HandicapAccessDecorator(parkingSpot22);
        java.lang.String str26 = handicapAccessDecorator25.getDetails();
        java.lang.String str27 = handicapAccessDecorator25.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator25);
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot(1, "hi!", "hi!");
        parking.EVChargingDecorator eVChargingDecorator35 = new parking.EVChargingDecorator(parkingSpot34);
        int int36 = eVChargingDecorator35.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator37 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator35);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator35);
        java.util.List<parking.ParkingSpot> parkingSpotList39 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager18);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str26, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(parkingSpotList39);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot18);
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        java.lang.String str28 = coveredParkingDecorator27.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        java.lang.String str31 = coveredParkingDecorator27.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator38 = new parking.HandicapAccessDecorator(parkingSpot37);
        parkingLotManager0.addParkingSpot(parkingSpot37);
        java.util.List<parking.ParkingSpot> parkingSpotList40 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot(10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        parking.HandicapAccessDecorator handicapAccessDecorator45 = new parking.HandicapAccessDecorator(parkingSpot44);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator45);
        java.util.List<parking.ParkingSpot> parkingSpotList47 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList48 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList49 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingSpotList40);
        org.junit.Assert.assertNotNull(parkingSpotList47);
        org.junit.Assert.assertNotNull(parkingSpotList48);
        org.junit.Assert.assertNotNull(parkingSpotList49);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager12 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager12.addParkingSpot(parkingSpot16);
        java.lang.String str18 = parkingSpot16.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator(parkingSpot16);
        java.lang.String str20 = eVChargingDecorator19.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator21 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator19);
        java.lang.String str22 = handicapAccessDecorator21.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator21);
        java.lang.String str24 = handicapAccessDecorator21.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator25 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator21);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(parkingLotManager12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str22, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.util.List<parking.ParkingSpot> parkingSpotList28 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        java.lang.String str35 = parkingSpot33.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot33);
        parking.ParkingSpot parkingSpot40 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: ");
        java.lang.String str41 = parkingSpot40.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot40);
        parking.ParkingSpot parkingSpot46 = new parking.ParkingSpot((-1), "", "");
        int int47 = parkingSpot46.getId();
        parking.EVChargingDecorator eVChargingDecorator48 = new parking.EVChargingDecorator(parkingSpot46);
        parking.CoveredParkingDecorator coveredParkingDecorator49 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator48);
        java.lang.String str50 = coveredParkingDecorator49.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator49);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList28);
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str41, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking" + "'", str50, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking");
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int12 = handicapAccessDecorator11.getId();
        java.lang.String str13 = handicapAccessDecorator11.getLocation();
        java.lang.String str14 = handicapAccessDecorator11.getParkingLot();
        int int15 = handicapAccessDecorator11.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        java.lang.String str13 = coveredParkingDecorator12.getDetails();
        java.lang.String str14 = coveredParkingDecorator12.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.CoveredParkingDecorator coveredParkingDecorator23 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str24 = eVChargingDecorator21.getDetails();
        java.lang.String str25 = eVChargingDecorator21.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator26 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parking.EVChargingDecorator eVChargingDecorator27 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str24, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str25, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager7 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager7.addParkingSpot(parkingSpot11);
        java.lang.String str13 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator(parkingSpot11);
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator(parkingSpot11);
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator15);
        java.lang.String str17 = handicapAccessDecorator16.getLocation();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator16);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator16);
        parking.ParkingSpot parkingSpot23 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str24 = parkingSpot23.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator(parkingSpot23);
        java.lang.String str26 = coveredParkingDecorator25.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator27 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator25);
        java.lang.String str28 = handicapAccessDecorator27.getLocation();
        parking.EVChargingDecorator eVChargingDecorator29 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator27);
        java.lang.String str30 = eVChargingDecorator29.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator29);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingLotManager7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList32);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str11 = parkingSpot10.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator(parkingSpot10);
        java.lang.String str13 = coveredParkingDecorator12.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator14);
        int int16 = coveredParkingDecorator14.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str29 = eVChargingDecorator24.getDetails();
        int int30 = eVChargingDecorator24.getId();
        java.lang.Class<?> wildcardClass31 = eVChargingDecorator24.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        java.lang.String str42 = coveredParkingDecorator36.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        int int5 = eVChargingDecorator4.getId();
        java.lang.String str6 = eVChargingDecorator4.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        parking.ParkingLotManager parkingLotManager32 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot36 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str37 = parkingSpot36.getLocation();
        java.lang.String str38 = parkingSpot36.getLocation();
        parkingLotManager32.addParkingSpot(parkingSpot36);
        parking.ParkingSpot parkingSpot43 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str44 = parkingSpot43.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator45 = new parking.CoveredParkingDecorator(parkingSpot43);
        java.lang.String str46 = coveredParkingDecorator45.getDetails();
        parking.EVChargingDecorator eVChargingDecorator47 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator45);
        java.lang.String str48 = coveredParkingDecorator45.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator49 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator45);
        java.lang.String str50 = coveredParkingDecorator45.getDetails();
        parking.EVChargingDecorator eVChargingDecorator51 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator45);
        parkingLotManager32.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator45);
        int int53 = coveredParkingDecorator45.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator45);
        parking.ParkingSpot parkingSpot58 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str59 = parkingSpot58.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator60 = new parking.HandicapAccessDecorator(parkingSpot58);
        parking.HandicapAccessDecorator handicapAccessDecorator61 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator60);
        java.lang.String str62 = handicapAccessDecorator60.getDetails();
        java.lang.String str63 = handicapAccessDecorator60.getParkingLot();
        java.lang.String str64 = handicapAccessDecorator60.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator60);
        java.lang.String str66 = handicapAccessDecorator60.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator67 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator60);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingLotManager32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str46, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str48, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str50, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str59, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str62, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str64, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str66, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        int int14 = coveredParkingDecorator13.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        java.lang.String str17 = parkingSpot15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot15);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator18);
        java.lang.String str21 = eVChargingDecorator20.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, EV Charging Available" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator20 = new parking.HandicapAccessDecorator(parkingSpot17);
        java.lang.String str21 = handicapAccessDecorator20.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator20);
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot((-1), "", "");
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        java.lang.String str29 = parkingSpot26.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot26);
        parking.ParkingLotManager parkingLotManager31 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager31.addParkingSpot(parkingSpot35);
        java.lang.String str37 = parkingSpot35.getLocation();
        int int38 = parkingSpot35.getId();
        parking.EVChargingDecorator eVChargingDecorator39 = new parking.EVChargingDecorator(parkingSpot35);
        parking.HandicapAccessDecorator handicapAccessDecorator40 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator39);
        java.lang.String str41 = handicapAccessDecorator40.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator40);
        java.lang.String str43 = handicapAccessDecorator40.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(parkingLotManager31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str41, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str43, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) -1, "", "Parking Spot ID: 10, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator7);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str16 = parkingSpot15.getLocation();
        parking.EVChargingDecorator eVChargingDecorator17 = new parking.EVChargingDecorator(parkingSpot15);
        parking.HandicapAccessDecorator handicapAccessDecorator18 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator17);
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator17);
        java.lang.String str20 = eVChargingDecorator17.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator21 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator21);
        java.lang.String str23 = handicapAccessDecorator21.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator24 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator21);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str20, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str23, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: -1, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: ", "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking");
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available", "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        int int5 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str7 = parkingSpot3.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator8);
        java.lang.String str10 = handicapAccessDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int9 = coveredParkingDecorator8.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        java.lang.String str10 = coveredParkingDecorator5.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = coveredParkingDecorator5.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '4', "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available", "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking");
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        java.lang.String str12 = handicapAccessDecorator10.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str7 = eVChargingDecorator6.getDetails();
        int int8 = eVChargingDecorator6.getId();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str11 = coveredParkingDecorator10.getDetails();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, Covered Parking" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        java.util.List<parking.ParkingSpot> parkingSpotList1 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot5 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str6 = parkingSpot5.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot5);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str14 = eVChargingDecorator8.getDetails();
        java.lang.String str15 = eVChargingDecorator8.getDetails();
        java.lang.String str16 = eVChargingDecorator8.getDetails();
        java.lang.String str17 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str17, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str8 = eVChargingDecorator7.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager33 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager33.addParkingSpot(parkingSpot37);
        java.lang.String str39 = parkingSpot37.getLocation();
        int int40 = parkingSpot37.getId();
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator(parkingSpot37);
        parking.HandicapAccessDecorator handicapAccessDecorator42 = new parking.HandicapAccessDecorator(parkingSpot37);
        parkingLotManager0.addParkingSpot(parkingSpot37);
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        parkingLotManager0.addParkingSpot(parkingSpot47);
        parking.ParkingLotManager parkingLotManager49 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot53 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str54 = parkingSpot53.getLocation();
        java.lang.String str55 = parkingSpot53.getLocation();
        parkingLotManager49.addParkingSpot(parkingSpot53);
        parking.ParkingSpot parkingSpot60 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str61 = parkingSpot60.getLocation();
        parkingLotManager49.addParkingSpot(parkingSpot60);
        java.lang.String str63 = parkingSpot60.getParkingLot();
        int int64 = parkingSpot60.getId();
        int int65 = parkingSpot60.getId();
        parkingLotManager0.addParkingSpot(parkingSpot60);
        java.util.List<parking.ParkingSpot> parkingSpotList67 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingLotManager33);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(parkingLotManager49);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(parkingSpotList67);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        int int11 = handicapAccessDecorator10.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot28);
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        java.lang.String str32 = handicapAccessDecorator30.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: 100, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str32, "Parking Spot ID: 100, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager24 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager24.addParkingSpot(parkingSpot28);
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        java.lang.String str35 = parkingSpot33.getLocation();
        parkingLotManager24.addParkingSpot(parkingSpot33);
        int int37 = parkingSpot33.getId();
        java.lang.String str38 = parkingSpot33.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot33);
        java.lang.Class<?> wildcardClass40 = parkingSpot33.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertNotNull(parkingLotManager24);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager9 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager9.addParkingSpot(parkingSpot13);
        java.lang.String str15 = parkingSpot13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator(parkingSpot13);
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str18 = eVChargingDecorator16.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator16);
        parking.ParkingSpot parkingSpot23 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str24 = parkingSpot23.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator(parkingSpot23);
        parking.EVChargingDecorator eVChargingDecorator26 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator25);
        parking.EVChargingDecorator eVChargingDecorator27 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator26);
        java.lang.String str28 = eVChargingDecorator26.getLocation();
        int int29 = eVChargingDecorator26.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator26);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        int int35 = parkingSpot34.getId();
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator(parkingSpot34);
        parking.CoveredParkingDecorator coveredParkingDecorator37 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator37);
        java.lang.String str39 = coveredParkingDecorator37.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingLotManager9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking" + "'", str39, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking");
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator4);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        int int7 = coveredParkingDecorator6.getId();
        java.lang.String str8 = coveredParkingDecorator6.getLocation();
        java.lang.String str9 = coveredParkingDecorator6.getDetails();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str8, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking" + "'", str9, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator10);
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator12);
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator13);
        java.lang.String str15 = handicapAccessDecorator13.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Handicap Accessible, Handicap Accessible" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot10);
        java.lang.String str12 = parkingSpot10.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot10);
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator(parkingSpot10);
        int int15 = parkingSpot10.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator(parkingSpot10);
        parking.EVChargingDecorator eVChargingDecorator17 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator16);
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator16);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str12, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str15 = eVChargingDecorator14.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator14);
        java.lang.String str17 = handicapAccessDecorator16.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        int int12 = eVChargingDecorator10.getId();
        java.lang.String str13 = eVChargingDecorator10.getDetails();
        java.lang.String str14 = eVChargingDecorator10.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(32, "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Covered Parking");
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str10 = eVChargingDecorator9.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator9);
        java.lang.String str12 = eVChargingDecorator11.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 1, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible, Handicap Accessible", "Parking Spot ID: 32, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator(parkingSpot4);
        java.lang.String str9 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator10);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        java.lang.String str13 = eVChargingDecorator12.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: ");
        parkingLotManager0.addParkingSpot(parkingSpot18);
        parking.ParkingSpot parkingSpot23 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str24 = parkingSpot23.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator(parkingSpot23);
        java.lang.String str26 = coveredParkingDecorator25.getDetails();
        parking.EVChargingDecorator eVChargingDecorator27 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator25);
        java.lang.String str28 = coveredParkingDecorator25.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator25);
        parking.CoveredParkingDecorator coveredParkingDecorator30 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator30);
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str36 = parkingSpot35.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator37 = new parking.HandicapAccessDecorator(parkingSpot35);
        parking.HandicapAccessDecorator handicapAccessDecorator38 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator37);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator37);
        java.util.List<parking.ParkingSpot> parkingSpotList40 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str36, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingSpotList40);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str5 = handicapAccessDecorator4.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible" + "'", str5, "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator24 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList26 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot30 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator31 = new parking.EVChargingDecorator(parkingSpot30);
        parking.EVChargingDecorator eVChargingDecorator32 = new parking.EVChargingDecorator(parkingSpot30);
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator(parkingSpot30);
        parkingLotManager0.addParkingSpot(parkingSpot30);
        parking.HandicapAccessDecorator handicapAccessDecorator35 = new parking.HandicapAccessDecorator(parkingSpot30);
        java.lang.String str36 = handicapAccessDecorator35.getDetails();
        java.lang.String str37 = handicapAccessDecorator35.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList26);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Handicap Accessible" + "'", str36, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str37, "Parking Spot ID: -1, Location: , Lot: ");
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getParkingLot();
        java.lang.String str6 = parkingSpot3.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: ", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator(parkingSpot11);
        java.lang.String str16 = parkingSpot11.getDetails();
        java.lang.String str17 = parkingSpot11.getLocation();
        java.lang.String str18 = parkingSpot11.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str16, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str11 = parkingSpot10.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator(parkingSpot10);
        java.lang.String str13 = coveredParkingDecorator12.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        java.lang.String str15 = coveredParkingDecorator14.getDetails();
        java.lang.String str16 = coveredParkingDecorator14.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator14);
        parking.ParkingLotManager parkingLotManager18 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot22 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager18.addParkingSpot(parkingSpot22);
        java.lang.String str24 = parkingSpot22.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator25 = new parking.HandicapAccessDecorator(parkingSpot22);
        java.lang.String str26 = handicapAccessDecorator25.getDetails();
        java.lang.String str27 = handicapAccessDecorator25.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator25);
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager30 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getLocation();
        java.lang.String str36 = parkingSpot34.getLocation();
        parkingLotManager30.addParkingSpot(parkingSpot34);
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str42 = parkingSpot41.getLocation();
        parkingLotManager30.addParkingSpot(parkingSpot41);
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str48 = parkingSpot47.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator49 = new parking.CoveredParkingDecorator(parkingSpot47);
        parking.EVChargingDecorator eVChargingDecorator50 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator49);
        parking.EVChargingDecorator eVChargingDecorator51 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator50);
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) eVChargingDecorator51);
        parking.ParkingLotManager parkingLotManager53 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot57 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager53.addParkingSpot(parkingSpot57);
        java.lang.String str59 = parkingSpot57.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator60 = new parking.HandicapAccessDecorator(parkingSpot57);
        parkingLotManager30.addParkingSpot(parkingSpot57);
        parkingLotManager0.addParkingSpot(parkingSpot57);
        parking.ParkingSpot parkingSpot66 = new parking.ParkingSpot(32, "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, EV Charging Available", "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        parkingLotManager0.addParkingSpot(parkingSpot66);
        int int68 = parkingSpot66.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager18);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str26, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertNotNull(parkingLotManager30);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(parkingLotManager53);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 32 + "'", int68 == 32);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str8 = parkingSpot4.getLocation();
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator9);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator(parkingSpot35);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator36);
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator42 = new parking.HandicapAccessDecorator(parkingSpot41);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator42);
        java.util.List<parking.ParkingSpot> parkingSpotList44 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager45 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot49 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager45.addParkingSpot(parkingSpot49);
        java.lang.String str51 = parkingSpot49.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator52 = new parking.CoveredParkingDecorator(parkingSpot49);
        parking.CoveredParkingDecorator coveredParkingDecorator53 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator52);
        java.lang.String str54 = coveredParkingDecorator52.getDetails();
        java.lang.String str55 = coveredParkingDecorator52.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator56 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator52);
        java.lang.String str57 = coveredParkingDecorator52.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator58 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator52);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator58);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertNotNull(parkingSpotList44);
        org.junit.Assert.assertNotNull(parkingLotManager45);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str54, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(32, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking", "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking" + "'", str4, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking");
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int8 = coveredParkingDecorator7.getId();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator10);
        java.lang.String str12 = handicapAccessDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: ");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 0, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: 1, Location: hi!, Lot: " + "'", str5, "Parking Spot ID: 0, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: 1, Location: hi!, Lot: ");
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str36 = parkingSpot35.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator37 = new parking.CoveredParkingDecorator(parkingSpot35);
        parking.EVChargingDecorator eVChargingDecorator38 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator37);
        parking.HandicapAccessDecorator handicapAccessDecorator39 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator38);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator38);
        parking.HandicapAccessDecorator handicapAccessDecorator41 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator38);
        parking.HandicapAccessDecorator handicapAccessDecorator42 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator41);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        int int7 = parkingSpot4.getId();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        int int10 = eVChargingDecorator8.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        java.lang.String str13 = handicapAccessDecorator10.getDetails();
        java.lang.String str14 = handicapAccessDecorator10.getDetails();
        java.lang.String str15 = handicapAccessDecorator10.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.util.List<parking.ParkingSpot> parkingSpotList24 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager25 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager25.addParkingSpot(parkingSpot29);
        java.lang.String str31 = parkingSpot29.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator32 = new parking.CoveredParkingDecorator(parkingSpot29);
        parking.EVChargingDecorator eVChargingDecorator33 = new parking.EVChargingDecorator(parkingSpot29);
        java.lang.String str34 = parkingSpot29.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator35 = new parking.HandicapAccessDecorator(parkingSpot29);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator35);
        java.util.List<parking.ParkingSpot> parkingSpotList37 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(parkingSpotList24);
        org.junit.Assert.assertNotNull(parkingLotManager25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(parkingSpotList37);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        int int10 = coveredParkingDecorator7.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator9);
        java.lang.String str11 = coveredParkingDecorator10.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, EV Charging Available, Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        int int10 = eVChargingDecorator6.getId();
        java.lang.String str11 = eVChargingDecorator6.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str14 = handicapAccessDecorator13.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator13);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 100, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str5 = handicapAccessDecorator4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator4);
        java.lang.Class<?> wildcardClass7 = handicapAccessDecorator4.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available" + "'", str5, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList13 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager15 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str20 = parkingSpot19.getLocation();
        java.lang.String str21 = parkingSpot19.getLocation();
        parkingLotManager15.addParkingSpot(parkingSpot19);
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str27 = parkingSpot26.getLocation();
        parkingLotManager15.addParkingSpot(parkingSpot26);
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager15.getParkingSpots();
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator(parkingSpot33);
        java.lang.String str36 = coveredParkingDecorator35.getDetails();
        parking.EVChargingDecorator eVChargingDecorator37 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        java.lang.String str38 = coveredParkingDecorator35.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator39 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        parkingLotManager15.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator35);
        java.util.List<parking.ParkingSpot> parkingSpotList41 = parkingLotManager15.getParkingSpots();
        parking.ParkingSpot parkingSpot45 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator46 = new parking.EVChargingDecorator(parkingSpot45);
        parking.EVChargingDecorator eVChargingDecorator47 = new parking.EVChargingDecorator(parkingSpot45);
        parking.CoveredParkingDecorator coveredParkingDecorator48 = new parking.CoveredParkingDecorator(parkingSpot45);
        parkingLotManager15.addParkingSpot(parkingSpot45);
        parkingLotManager0.addParkingSpot(parkingSpot45);
        parking.ParkingLotManager parkingLotManager51 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot55 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager51.addParkingSpot(parkingSpot55);
        java.lang.String str57 = parkingSpot55.getDetails();
        parking.EVChargingDecorator eVChargingDecorator58 = new parking.EVChargingDecorator(parkingSpot55);
        parking.EVChargingDecorator eVChargingDecorator59 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator58);
        int int60 = eVChargingDecorator58.getId();
        int int61 = eVChargingDecorator58.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator62 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator58);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator62);
        java.util.List<parking.ParkingSpot> parkingSpotList64 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot68 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str69 = parkingSpot68.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator70 = new parking.CoveredParkingDecorator(parkingSpot68);
        parking.EVChargingDecorator eVChargingDecorator71 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator70);
        parking.EVChargingDecorator eVChargingDecorator72 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator71);
        java.lang.String str73 = eVChargingDecorator71.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator71);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingSpotList13);
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingLotManager15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str36, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str38, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList41);
        org.junit.Assert.assertNotNull(parkingLotManager51);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str57, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(parkingSpotList64);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot18);
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        java.lang.String str28 = coveredParkingDecorator27.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        java.lang.String str31 = coveredParkingDecorator27.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator38 = new parking.HandicapAccessDecorator(parkingSpot37);
        parkingLotManager0.addParkingSpot(parkingSpot37);
        java.util.List<parking.ParkingSpot> parkingSpotList40 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot(10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        parking.HandicapAccessDecorator handicapAccessDecorator45 = new parking.HandicapAccessDecorator(parkingSpot44);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator45);
        java.lang.String str47 = handicapAccessDecorator45.getDetails();
        java.lang.String str48 = handicapAccessDecorator45.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingSpotList40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Handicap Accessible" + "'", str47, "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Handicap Accessible" + "'", str48, "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager31 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager31.addParkingSpot(parkingSpot35);
        java.lang.String str37 = parkingSpot35.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator(parkingSpot35);
        parking.CoveredParkingDecorator coveredParkingDecorator39 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator38);
        java.lang.String str40 = coveredParkingDecorator38.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator41 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator38);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator38);
        java.lang.String str43 = coveredParkingDecorator38.getParkingLot();
        int int44 = coveredParkingDecorator38.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator45 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator38);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingLotManager31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str40, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getParkingLot();
        int int6 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot18);
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingLotManager parkingLotManager22 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str27 = parkingSpot26.getLocation();
        java.lang.String str28 = parkingSpot26.getLocation();
        parkingLotManager22.addParkingSpot(parkingSpot26);
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        parkingLotManager22.addParkingSpot(parkingSpot33);
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str40 = parkingSpot39.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator(parkingSpot39);
        parking.EVChargingDecorator eVChargingDecorator42 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator41);
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator42);
        parkingLotManager22.addParkingSpot((parking.ParkingSpot) eVChargingDecorator43);
        parking.ParkingLotManager parkingLotManager45 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot49 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager45.addParkingSpot(parkingSpot49);
        java.lang.String str51 = parkingSpot49.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator52 = new parking.HandicapAccessDecorator(parkingSpot49);
        parkingLotManager22.addParkingSpot(parkingSpot49);
        java.lang.String str54 = parkingSpot49.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot49);
        java.util.List<parking.ParkingSpot> parkingSpotList56 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot60 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str61 = parkingSpot60.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator62 = new parking.CoveredParkingDecorator(parkingSpot60);
        parking.EVChargingDecorator eVChargingDecorator63 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator62);
        parking.EVChargingDecorator eVChargingDecorator64 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator63);
        parking.EVChargingDecorator eVChargingDecorator65 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator63);
        java.lang.String str66 = eVChargingDecorator63.getDetails();
        parking.EVChargingDecorator eVChargingDecorator67 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator63);
        java.lang.String str68 = eVChargingDecorator67.getDetails();
        java.lang.String str69 = eVChargingDecorator67.getDetails();
        parking.EVChargingDecorator eVChargingDecorator70 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator67);
        parking.CoveredParkingDecorator coveredParkingDecorator71 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator70);
        parking.CoveredParkingDecorator coveredParkingDecorator72 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator70);
        java.lang.String str73 = coveredParkingDecorator72.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator72);
        java.util.List<parking.ParkingSpot> parkingSpotList75 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot79 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str80 = parkingSpot79.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator81 = new parking.CoveredParkingDecorator(parkingSpot79);
        java.lang.String str82 = coveredParkingDecorator81.getDetails();
        parking.EVChargingDecorator eVChargingDecorator83 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator81);
        parking.CoveredParkingDecorator coveredParkingDecorator84 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator83);
        java.lang.String str85 = coveredParkingDecorator84.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator86 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator84);
        parking.EVChargingDecorator eVChargingDecorator87 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator84);
        java.lang.String str88 = eVChargingDecorator87.getDetails();
        parking.EVChargingDecorator eVChargingDecorator89 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator87);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator89);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingLotManager22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(parkingLotManager45);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str54, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertNotNull(parkingSpotList56);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str66, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str68, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str69, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking" + "'", str73, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList75);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str82, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available" + "'", str88, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator10);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        java.lang.String str13 = handicapAccessDecorator9.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str15 = handicapAccessDecorator9.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator16 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str17 = handicapAccessDecorator9.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator18 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 1, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        int int10 = eVChargingDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator(parkingSpot19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator(parkingSpot19);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str24 = eVChargingDecorator21.getLocation();
        java.lang.String str25 = eVChargingDecorator21.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str24, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available" + "'", str25, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available");
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        java.lang.String str8 = eVChargingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        java.lang.String str11 = coveredParkingDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Covered Parking" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Covered Parking");
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 100, "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator24 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str30 = parkingSpot29.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator(parkingSpot29);
        java.lang.String str32 = coveredParkingDecorator31.getDetails();
        parking.EVChargingDecorator eVChargingDecorator33 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator31);
        java.lang.String str34 = coveredParkingDecorator31.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator31);
        java.lang.String str36 = coveredParkingDecorator31.getDetails();
        parking.EVChargingDecorator eVChargingDecorator37 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator31);
        java.lang.String str38 = coveredParkingDecorator31.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator31);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str36, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str9 = handicapAccessDecorator6.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        int int12 = coveredParkingDecorator11.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator11);
        java.lang.String str13 = handicapAccessDecorator12.getDetails();
        java.lang.String str14 = handicapAccessDecorator12.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str22 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator23 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        int int24 = handicapAccessDecorator23.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator23);
        java.lang.String str26 = coveredParkingDecorator25.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str22, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str26, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getLocation();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        int int12 = handicapAccessDecorator9.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        java.lang.String str17 = parkingSpot15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot15);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager20.addParkingSpot(parkingSpot24);
        java.lang.String str26 = parkingSpot24.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot24);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.Class<?> wildcardClass32 = coveredParkingDecorator31.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str30, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 1, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Covered Parking", "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking");
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        int int11 = eVChargingDecorator8.getId();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str13 = eVChargingDecorator12.getDetails();
        java.lang.String str14 = eVChargingDecorator12.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager33 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager33.addParkingSpot(parkingSpot37);
        java.lang.String str39 = parkingSpot37.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator(parkingSpot37);
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator(parkingSpot37);
        parking.HandicapAccessDecorator handicapAccessDecorator42 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator41);
        parking.HandicapAccessDecorator handicapAccessDecorator43 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator41);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator41);
        java.lang.String str45 = coveredParkingDecorator41.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator46 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator41);
        java.lang.String str47 = handicapAccessDecorator46.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingLotManager33);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str45, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str47, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str7 = eVChargingDecorator6.getDetails();
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        int int11 = coveredParkingDecorator9.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager12 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager12.addParkingSpot(parkingSpot16);
        java.lang.String str18 = parkingSpot16.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator(parkingSpot16);
        java.lang.String str20 = eVChargingDecorator19.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator21 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator19);
        java.lang.String str22 = handicapAccessDecorator21.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator21);
        java.util.List<parking.ParkingSpot> parkingSpotList24 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager25 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager25.addParkingSpot(parkingSpot29);
        java.lang.String str31 = parkingSpot29.getDetails();
        parking.EVChargingDecorator eVChargingDecorator32 = new parking.EVChargingDecorator(parkingSpot29);
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator32);
        java.lang.String str34 = handicapAccessDecorator33.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator33);
        java.lang.Class<?> wildcardClass36 = handicapAccessDecorator33.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(parkingLotManager12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str22, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertNotNull(parkingSpotList24);
        org.junit.Assert.assertNotNull(parkingLotManager25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str31, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str34, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str20 = parkingSpot19.getParkingLot();
        java.lang.String str21 = parkingSpot19.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot19);
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot26);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator35 = new parking.HandicapAccessDecorator(parkingSpot33);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator35);
        parking.ParkingLotManager parkingLotManager37 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager37.addParkingSpot(parkingSpot41);
        parking.ParkingSpot parkingSpot46 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str47 = parkingSpot46.getLocation();
        java.lang.String str48 = parkingSpot46.getLocation();
        parkingLotManager37.addParkingSpot(parkingSpot46);
        parking.ParkingLotManager parkingLotManager50 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot54 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager50.addParkingSpot(parkingSpot54);
        java.lang.String str56 = parkingSpot54.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator57 = new parking.HandicapAccessDecorator(parkingSpot54);
        java.lang.String str58 = handicapAccessDecorator57.getDetails();
        parkingLotManager37.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator57);
        java.lang.String str60 = handicapAccessDecorator57.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator57);
        java.util.List<parking.ParkingSpot> parkingSpotList62 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str21, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(parkingLotManager37);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(parkingLotManager50);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str58, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str60, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertNotNull(parkingSpotList62);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str14 = eVChargingDecorator13.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator13);
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator15);
        java.lang.String str17 = handicapAccessDecorator16.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Handicap Accessible" + "'", str17, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        java.lang.String str13 = coveredParkingDecorator5.getDetails();
        java.lang.String str14 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        java.lang.String str9 = handicapAccessDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        java.lang.Class<?> wildcardClass12 = eVChargingDecorator10.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str7 = eVChargingDecorator6.getDetails();
        java.lang.String str8 = eVChargingDecorator6.getDetails();
        int int9 = eVChargingDecorator6.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager21.addParkingSpot(parkingSpot25);
        java.lang.String str27 = parkingSpot25.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot25);
        java.lang.String str29 = parkingSpot25.getLocation();
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator(parkingSpot25);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator30);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList34 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList35 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator40 = new parking.HandicapAccessDecorator(parkingSpot39);
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator(parkingSpot39);
        java.lang.String str42 = coveredParkingDecorator41.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator41);
        java.util.List<parking.ParkingSpot> parkingSpotList44 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingSpotList34);
        org.junit.Assert.assertNotNull(parkingSpotList35);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(parkingSpotList44);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager33 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager33.addParkingSpot(parkingSpot37);
        parking.ParkingSpot parkingSpot42 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str43 = parkingSpot42.getLocation();
        parking.EVChargingDecorator eVChargingDecorator44 = new parking.EVChargingDecorator(parkingSpot42);
        parkingLotManager33.addParkingSpot(parkingSpot42);
        parking.EVChargingDecorator eVChargingDecorator46 = new parking.EVChargingDecorator(parkingSpot42);
        java.lang.String str47 = eVChargingDecorator46.getDetails();
        java.lang.String str48 = eVChargingDecorator46.getDetails();
        java.lang.String str49 = eVChargingDecorator46.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator50 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator46);
        java.lang.String str51 = eVChargingDecorator46.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator46);
        java.util.List<parking.ParkingSpot> parkingSpotList53 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingLotManager33);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str47, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str48, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str49, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str51, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList53);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str23 = eVChargingDecorator21.getLocation();
        int int24 = eVChargingDecorator21.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator25 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str26 = handicapAccessDecorator25.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Handicap Accessible" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 100, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        int int5 = parkingSpot3.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str23 = eVChargingDecorator21.getLocation();
        int int24 = eVChargingDecorator21.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator25 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator21);
        int int26 = handicapAccessDecorator25.getId();
        java.lang.String str27 = handicapAccessDecorator25.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.Class<?> wildcardClass10 = eVChargingDecorator9.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        int int10 = handicapAccessDecorator9.getId();
        java.lang.String str11 = handicapAccessDecorator9.getLocation();
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        java.lang.String str13 = handicapAccessDecorator9.getParkingLot();
        java.lang.String str14 = handicapAccessDecorator9.getDetails();
        java.lang.String str15 = handicapAccessDecorator9.getDetails();
        int int16 = handicapAccessDecorator9.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str14 = eVChargingDecorator8.getDetails();
        java.lang.String str15 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str17 = eVChargingDecorator16.getDetails();
        java.lang.String str18 = eVChargingDecorator16.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str17, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        int int4 = parkingSpot3.getId();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking");
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(10, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible, Handicap Accessible", "Parking Spot ID: 32, Location: Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int8 = coveredParkingDecorator7.getId();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str12 = coveredParkingDecorator7.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator40);
        java.lang.String str42 = coveredParkingDecorator41.getDetails();
        java.lang.String str43 = coveredParkingDecorator41.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str42, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        int int9 = handicapAccessDecorator6.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str11 = coveredParkingDecorator10.getParkingLot();
        java.lang.String str12 = coveredParkingDecorator10.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 100, "Parking Spot ID: 10, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: 32, Location: Parking Spot ID: 32, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        java.lang.String str17 = parkingSpot15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot15);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        java.util.List<parking.ParkingSpot> parkingSpotList20 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager21.addParkingSpot(parkingSpot25);
        parking.ParkingSpot parkingSpot30 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str31 = parkingSpot30.getLocation();
        parking.EVChargingDecorator eVChargingDecorator32 = new parking.EVChargingDecorator(parkingSpot30);
        parkingLotManager21.addParkingSpot(parkingSpot30);
        parking.EVChargingDecorator eVChargingDecorator34 = new parking.EVChargingDecorator(parkingSpot30);
        java.lang.String str35 = eVChargingDecorator34.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator34);
        parking.ParkingSpot parkingSpot40 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parkingLotManager0.addParkingSpot(parkingSpot40);
        parking.ParkingSpot parkingSpot45 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str46 = parkingSpot45.getDetails();
        java.lang.String str47 = parkingSpot45.getDetails();
        parking.EVChargingDecorator eVChargingDecorator48 = new parking.EVChargingDecorator(parkingSpot45);
        java.lang.String str49 = eVChargingDecorator48.getDetails();
        java.lang.String str50 = eVChargingDecorator48.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator51 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator48);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator48);
        java.lang.String str53 = eVChargingDecorator48.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingSpotList20);
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str35, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str46, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str47, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str49, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str53, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager9 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager9.addParkingSpot(parkingSpot13);
        java.lang.String str15 = parkingSpot13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator(parkingSpot13);
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str18 = eVChargingDecorator16.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator16);
        parking.ParkingSpot parkingSpot23 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str24 = parkingSpot23.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator(parkingSpot23);
        parking.EVChargingDecorator eVChargingDecorator26 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator25);
        parking.EVChargingDecorator eVChargingDecorator27 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator26);
        java.lang.String str28 = eVChargingDecorator26.getLocation();
        int int29 = eVChargingDecorator26.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator26);
        java.lang.Class<?> wildcardClass31 = eVChargingDecorator26.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingLotManager9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        int int40 = coveredParkingDecorator36.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator41 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        java.lang.String str42 = coveredParkingDecorator36.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str42, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str8 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.Class<?> wildcardClass11 = coveredParkingDecorator5.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        int int9 = eVChargingDecorator7.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        java.lang.String str17 = parkingSpot15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot15);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        java.util.List<parking.ParkingSpot> parkingSpotList20 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getLocation();
        java.lang.String str27 = parkingSpot25.getLocation();
        parkingLotManager21.addParkingSpot(parkingSpot25);
        parking.ParkingSpot parkingSpot32 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str33 = parkingSpot32.getLocation();
        parkingLotManager21.addParkingSpot(parkingSpot32);
        java.util.List<parking.ParkingSpot> parkingSpotList35 = parkingLotManager21.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList36 = parkingLotManager21.getParkingSpots();
        parking.ParkingLotManager parkingLotManager37 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str42 = parkingSpot41.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator43 = new parking.CoveredParkingDecorator(parkingSpot41);
        java.lang.String str44 = coveredParkingDecorator43.getDetails();
        parking.EVChargingDecorator eVChargingDecorator45 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator43);
        parkingLotManager37.addParkingSpot((parking.ParkingSpot) eVChargingDecorator45);
        java.lang.String str47 = eVChargingDecorator45.getDetails();
        parkingLotManager21.addParkingSpot((parking.ParkingSpot) eVChargingDecorator45);
        java.lang.String str49 = eVChargingDecorator45.getDetails();
        java.lang.String str50 = eVChargingDecorator45.getDetails();
        java.lang.String str51 = eVChargingDecorator45.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator45);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingSpotList20);
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(parkingSpotList35);
        org.junit.Assert.assertNotNull(parkingSpotList36);
        org.junit.Assert.assertNotNull(parkingLotManager37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str44, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str47, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str49, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str50, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str51, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator(parkingSpot35);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator36);
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator42 = new parking.HandicapAccessDecorator(parkingSpot41);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator42);
        java.util.List<parking.ParkingSpot> parkingSpotList44 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager45 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot49 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager45.addParkingSpot(parkingSpot49);
        parking.ParkingSpot parkingSpot54 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str55 = parkingSpot54.getLocation();
        parking.EVChargingDecorator eVChargingDecorator56 = new parking.EVChargingDecorator(parkingSpot54);
        parkingLotManager45.addParkingSpot(parkingSpot54);
        parking.EVChargingDecorator eVChargingDecorator58 = new parking.EVChargingDecorator(parkingSpot54);
        java.lang.String str59 = eVChargingDecorator58.getDetails();
        java.lang.String str60 = eVChargingDecorator58.getDetails();
        java.lang.String str61 = eVChargingDecorator58.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator62 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator58);
        java.lang.String str63 = eVChargingDecorator58.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator64 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator58);
        parking.CoveredParkingDecorator coveredParkingDecorator65 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator64);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator65);
        parking.EVChargingDecorator eVChargingDecorator67 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator65);
        parking.EVChargingDecorator eVChargingDecorator68 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator65);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertNotNull(parkingSpotList44);
        org.junit.Assert.assertNotNull(parkingLotManager45);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str59, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str60, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str61, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str63, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available", "Parking Spot ID: 1, Location: , Lot: ");
        java.lang.String str4 = parkingSpot3.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available" + "'", str4, "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        parking.HandicapAccessDecorator handicapAccessDecorator14 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str15 = handicapAccessDecorator14.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator14);
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        java.lang.String str25 = coveredParkingDecorator22.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator26 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        java.lang.String str27 = coveredParkingDecorator22.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        java.lang.String str29 = coveredParkingDecorator22.getDetails();
        java.lang.String str30 = coveredParkingDecorator22.getDetails();
        java.lang.String str31 = coveredParkingDecorator22.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator32 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator22);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str25, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str27, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str31, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: -1, Location: , Lot: ");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str5 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: -1, Location: , Lot: " + "'", str5, "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: -1, Location: , Lot: ");
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        java.util.List<parking.ParkingSpot> parkingSpotList1 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager2 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot6 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str7 = parkingSpot6.getLocation();
        java.lang.String str8 = parkingSpot6.getLocation();
        parkingLotManager2.addParkingSpot(parkingSpot6);
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str14 = parkingSpot13.getLocation();
        parkingLotManager2.addParkingSpot(parkingSpot13);
        java.util.List<parking.ParkingSpot> parkingSpotList16 = parkingLotManager2.getParkingSpots();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        java.lang.String str25 = coveredParkingDecorator22.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator26 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager2.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator22);
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.lang.Class<?> wildcardClass31 = parkingLotManager0.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList1);
        org.junit.Assert.assertNotNull(parkingLotManager2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(parkingSpotList16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str25, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 10, "Parking Spot ID: 35, Location: , Lot: Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, Handicap Accessible, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator4);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Covered Parking, Covered Parking" + "'", str6, "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Covered Parking, Covered Parking");
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: ", "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str4, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 100, Location: Parking Spot ID: 1, Location: hi!, Lot: , Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str5, "Parking Spot ID: 100, Location: Parking Spot ID: 1, Location: hi!, Lot: , Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str8 = eVChargingDecorator7.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = handicapAccessDecorator9.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = eVChargingDecorator11.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, EV Charging Available" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        int int4 = parkingSpot3.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str36 = parkingSpot35.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator37 = new parking.CoveredParkingDecorator(parkingSpot35);
        parking.EVChargingDecorator eVChargingDecorator38 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator37);
        parking.HandicapAccessDecorator handicapAccessDecorator39 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator38);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator38);
        parking.HandicapAccessDecorator handicapAccessDecorator41 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator38);
        java.lang.Class<?> wildcardClass42 = handicapAccessDecorator41.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator(parkingSpot9);
        java.lang.String str14 = eVChargingDecorator13.getDetails();
        java.lang.String str15 = eVChargingDecorator13.getDetails();
        java.lang.String str16 = eVChargingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator13);
        java.lang.String str18 = eVChargingDecorator13.getDetails();
        java.lang.String str19 = eVChargingDecorator13.getLocation();
        java.lang.String str20 = eVChargingDecorator13.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str20, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator7);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str16 = parkingSpot15.getLocation();
        parking.EVChargingDecorator eVChargingDecorator17 = new parking.EVChargingDecorator(parkingSpot15);
        parking.HandicapAccessDecorator handicapAccessDecorator18 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator17);
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator17);
        java.lang.String str20 = eVChargingDecorator17.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator21 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator21);
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str28 = parkingSpot27.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator(parkingSpot27);
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        parking.EVChargingDecorator eVChargingDecorator31 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator30);
        java.lang.String str32 = eVChargingDecorator30.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator30);
        java.lang.String str34 = eVChargingDecorator30.getDetails();
        parking.EVChargingDecorator eVChargingDecorator35 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator30);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator35);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str20, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        java.lang.String str12 = handicapAccessDecorator10.getDetails();
        java.lang.String str13 = handicapAccessDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator14 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        java.lang.String str9 = handicapAccessDecorator6.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        java.lang.String str8 = eVChargingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        java.lang.String str10 = eVChargingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        int int21 = coveredParkingDecorator13.getId();
        java.lang.String str22 = coveredParkingDecorator13.getDetails();
        java.lang.String str23 = coveredParkingDecorator13.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str22, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        java.lang.String str12 = eVChargingDecorator10.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getLocation();
        java.lang.String str9 = handicapAccessDecorator7.getDetails();
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        java.lang.String str11 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str13 = handicapAccessDecorator12.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int12 = coveredParkingDecorator11.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator20 = new parking.HandicapAccessDecorator(parkingSpot17);
        java.lang.String str21 = handicapAccessDecorator20.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator20);
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        java.lang.String str30 = handicapAccessDecorator29.getDetails();
        java.lang.String str31 = handicapAccessDecorator29.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator32 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator29);
        java.lang.String str33 = handicapAccessDecorator29.getDetails();
        java.lang.String str34 = handicapAccessDecorator29.getLocation();
        java.lang.String str35 = handicapAccessDecorator29.getDetails();
        java.lang.String str36 = handicapAccessDecorator29.getDetails();
        java.lang.String str37 = handicapAccessDecorator29.getDetails();
        java.lang.String str38 = handicapAccessDecorator29.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        java.lang.String str40 = handicapAccessDecorator29.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str30, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str31, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str33, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str35, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str36, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str37, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str40, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str7 = eVChargingDecorator6.getDetails();
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        java.lang.String str11 = coveredParkingDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, Covered Parking" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        int int4 = parkingSpot3.getId();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str5 = handicapAccessDecorator4.getLocation();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot28);
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        java.lang.String str32 = handicapAccessDecorator30.getDetails();
        int int33 = handicapAccessDecorator30.getId();
        java.lang.String str34 = handicapAccessDecorator30.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: 100, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str32, "Parking Spot ID: 100, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str34, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str29 = eVChargingDecorator24.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator30 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator24);
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator30);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        java.lang.String str7 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        int int9 = coveredParkingDecorator8.getId();
        java.lang.String str10 = coveredParkingDecorator8.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager9 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager9.addParkingSpot(parkingSpot13);
        java.lang.String str15 = parkingSpot13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator(parkingSpot13);
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str18 = eVChargingDecorator16.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator16);
        parking.ParkingSpot parkingSpot23 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str24 = parkingSpot23.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator(parkingSpot23);
        parking.EVChargingDecorator eVChargingDecorator26 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator25);
        parking.EVChargingDecorator eVChargingDecorator27 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator26);
        java.lang.String str28 = eVChargingDecorator26.getLocation();
        int int29 = eVChargingDecorator26.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator26);
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        java.lang.Class<?> wildcardClass32 = parkingLotManager0.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingLotManager9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 0, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, EV Charging Available", "Parking Spot ID: -1, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available, Lot: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 100, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        int int4 = parkingSpot3.getId();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        java.lang.String str12 = handicapAccessDecorator10.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(10, "Parking Spot ID: -1, Location: , Lot: ", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str5 = parkingSpot3.getLocation();
        java.lang.String str6 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str5, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 10, Location: Parking Spot ID: -1, Location: , Lot: , Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str6, "Parking Spot ID: 10, Location: Parking Spot ID: -1, Location: , Lot: , Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parking.CoveredParkingDecorator coveredParkingDecorator23 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parking.CoveredParkingDecorator coveredParkingDecorator24 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator23);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        java.lang.String str11 = coveredParkingDecorator10.getDetails();
        int int12 = coveredParkingDecorator10.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator10);
        int int14 = coveredParkingDecorator10.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        int int11 = eVChargingDecorator8.getId();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.HandicapAccessDecorator handicapAccessDecorator14 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str15 = handicapAccessDecorator14.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator14);
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator14);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        java.lang.String str8 = eVChargingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator5);
        int int10 = eVChargingDecorator5.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getLocation();
        java.lang.String str9 = handicapAccessDecorator7.getDetails();
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        java.lang.String str11 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator12);
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator12);
        java.lang.String str15 = eVChargingDecorator14.getDetails();
        java.lang.String str16 = eVChargingDecorator14.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        java.lang.String str13 = eVChargingDecorator8.getDetails();
        java.lang.String str14 = eVChargingDecorator8.getDetails();
        java.lang.String str15 = eVChargingDecorator8.getDetails();
        java.lang.String str16 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        int int10 = handicapAccessDecorator9.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = handicapAccessDecorator9.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getParkingLot();
        java.lang.String str9 = handicapAccessDecorator7.getDetails();
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        int int11 = handicapAccessDecorator7.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str13 = handicapAccessDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator24 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList26 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot30 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator31 = new parking.EVChargingDecorator(parkingSpot30);
        parkingLotManager0.addParkingSpot(parkingSpot30);
        parking.ParkingSpot parkingSpot36 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        parkingLotManager0.addParkingSpot(parkingSpot36);
        parking.ParkingLotManager parkingLotManager38 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot42 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager38.addParkingSpot(parkingSpot42);
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str48 = parkingSpot47.getLocation();
        java.lang.String str49 = parkingSpot47.getLocation();
        parkingLotManager38.addParkingSpot(parkingSpot47);
        parking.ParkingLotManager parkingLotManager51 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot55 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager51.addParkingSpot(parkingSpot55);
        java.lang.String str57 = parkingSpot55.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator58 = new parking.CoveredParkingDecorator(parkingSpot55);
        parkingLotManager38.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator58);
        parking.CoveredParkingDecorator coveredParkingDecorator60 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator58);
        parking.CoveredParkingDecorator coveredParkingDecorator61 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator58);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator61);
        java.lang.String str63 = coveredParkingDecorator61.getLocation();
        parking.EVChargingDecorator eVChargingDecorator64 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator61);
        java.lang.String str65 = coveredParkingDecorator61.getParkingLot();
        java.lang.String str66 = coveredParkingDecorator61.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList26);
        org.junit.Assert.assertNotNull(parkingLotManager38);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(parkingLotManager51);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking" + "'", str66, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        java.lang.String str32 = parkingSpot27.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator(parkingSpot27);
        parking.HandicapAccessDecorator handicapAccessDecorator34 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator33);
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator34);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str32, "Parking Spot ID: 1, Location: hi!, Lot: ");
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager34 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot38 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager34.addParkingSpot(parkingSpot38);
        parking.ParkingSpot parkingSpot43 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str44 = parkingSpot43.getLocation();
        parking.EVChargingDecorator eVChargingDecorator45 = new parking.EVChargingDecorator(parkingSpot43);
        parkingLotManager34.addParkingSpot(parkingSpot43);
        parking.EVChargingDecorator eVChargingDecorator47 = new parking.EVChargingDecorator(parkingSpot43);
        java.lang.String str48 = eVChargingDecorator47.getDetails();
        java.lang.String str49 = eVChargingDecorator47.getDetails();
        java.lang.String str50 = eVChargingDecorator47.getDetails();
        int int51 = eVChargingDecorator47.getId();
        java.lang.String str52 = eVChargingDecorator47.getDetails();
        java.lang.String str53 = eVChargingDecorator47.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator47);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingLotManager34);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str48, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str49, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str50, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str52, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str53, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingLotManager parkingLotManager31 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager31.addParkingSpot(parkingSpot35);
        java.lang.String str37 = parkingSpot35.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator(parkingSpot35);
        java.lang.String str39 = coveredParkingDecorator38.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator38);
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str45 = parkingSpot44.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator46 = new parking.CoveredParkingDecorator(parkingSpot44);
        java.lang.String str47 = coveredParkingDecorator46.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator48 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator46);
        java.lang.String str49 = coveredParkingDecorator46.getDetails();
        java.lang.String str50 = coveredParkingDecorator46.getLocation();
        java.lang.String str51 = coveredParkingDecorator46.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator46);
        java.util.List<parking.ParkingSpot> parkingSpotList53 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot54 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingLotManager0.addParkingSpot(parkingSpot54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str39, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str47, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str49, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(parkingSpotList53);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        java.lang.String str6 = parkingSpot3.getParkingLot();
        java.lang.String str7 = parkingSpot3.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = handicapAccessDecorator11.getLocation();
        java.lang.String str13 = handicapAccessDecorator11.getDetails();
        java.lang.String str14 = handicapAccessDecorator11.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        parking.CoveredParkingDecorator coveredParkingDecorator16 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator15);
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator15);
        java.lang.String str18 = eVChargingDecorator15.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator(parkingSpot9);
        java.lang.String str14 = eVChargingDecorator13.getDetails();
        java.lang.String str15 = eVChargingDecorator13.getDetails();
        java.lang.String str16 = eVChargingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator13);
        parking.CoveredParkingDecorator coveredParkingDecorator18 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator17);
        java.lang.String str19 = coveredParkingDecorator17.getLocation();
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator17);
        java.lang.String str21 = eVChargingDecorator20.getDetails();
        java.lang.String str22 = eVChargingDecorator20.getDetails();
        java.lang.String str23 = eVChargingDecorator20.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Covered Parking, EV Charging Available" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Covered Parking, EV Charging Available" + "'", str22, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Covered Parking, EV Charging Available" + "'", str23, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        java.lang.Class<?> wildcardClass10 = eVChargingDecorator6.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot18);
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingLotManager parkingLotManager22 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str27 = parkingSpot26.getLocation();
        java.lang.String str28 = parkingSpot26.getLocation();
        parkingLotManager22.addParkingSpot(parkingSpot26);
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        parkingLotManager22.addParkingSpot(parkingSpot33);
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str40 = parkingSpot39.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator(parkingSpot39);
        parking.EVChargingDecorator eVChargingDecorator42 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator41);
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator42);
        parkingLotManager22.addParkingSpot((parking.ParkingSpot) eVChargingDecorator43);
        parking.ParkingLotManager parkingLotManager45 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot49 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager45.addParkingSpot(parkingSpot49);
        java.lang.String str51 = parkingSpot49.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator52 = new parking.HandicapAccessDecorator(parkingSpot49);
        parkingLotManager22.addParkingSpot(parkingSpot49);
        java.lang.String str54 = parkingSpot49.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot49);
        java.util.List<parking.ParkingSpot> parkingSpotList56 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList57 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot61 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str62 = parkingSpot61.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator63 = new parking.CoveredParkingDecorator(parkingSpot61);
        java.lang.String str64 = coveredParkingDecorator63.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator65 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator63);
        int int66 = coveredParkingDecorator65.getId();
        java.lang.String str67 = coveredParkingDecorator65.getDetails();
        parking.EVChargingDecorator eVChargingDecorator68 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator65);
        parking.HandicapAccessDecorator handicapAccessDecorator69 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator68);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator69);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingLotManager22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(parkingLotManager45);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str54, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertNotNull(parkingSpotList56);
        org.junit.Assert.assertNotNull(parkingSpotList57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str64, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str67, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, Covered Parking", "Parking Spot ID: 32, Location: Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = coveredParkingDecorator5.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str14 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str15 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: -1, Location: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
        int int4 = parkingSpot3.getId();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        java.lang.String str31 = eVChargingDecorator28.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str38 = parkingSpot37.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator39 = new parking.CoveredParkingDecorator(parkingSpot37);
        java.lang.String str40 = coveredParkingDecorator39.getDetails();
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator39);
        java.lang.String str42 = coveredParkingDecorator39.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator43 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator39);
        java.lang.String str44 = coveredParkingDecorator39.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator45 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator39);
        java.lang.String str46 = handicapAccessDecorator45.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator45);
        java.lang.String str48 = handicapAccessDecorator45.getLocation();
        java.lang.String str49 = handicapAccessDecorator45.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str40, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str42, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str44, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        java.lang.String str31 = eVChargingDecorator28.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator28);
        java.lang.String str34 = eVChargingDecorator28.getDetails();
        java.lang.String str35 = eVChargingDecorator28.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str35, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = eVChargingDecorator11.getParkingLot();
        java.lang.String str13 = eVChargingDecorator11.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, EV Charging Available" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str14 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: ");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.Class<?> wildcardClass10 = coveredParkingDecorator7.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str29 = handicapAccessDecorator28.getDetails();
        java.lang.String str30 = handicapAccessDecorator28.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parking.HandicapAccessDecorator handicapAccessDecorator32 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator31);
        java.lang.String str33 = coveredParkingDecorator31.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible, Covered Parking" + "'", str33, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator4);
        java.lang.String str6 = eVChargingDecorator5.getLocation();
        java.lang.String str7 = eVChargingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str6, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available" + "'", str7, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        java.lang.String str13 = handicapAccessDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        java.lang.String str9 = coveredParkingDecorator5.getLocation();
        java.lang.String str10 = coveredParkingDecorator5.getLocation();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        int int11 = eVChargingDecorator8.getId();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.HandicapAccessDecorator handicapAccessDecorator14 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str15 = handicapAccessDecorator14.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator14);
        int int17 = handicapAccessDecorator14.getId();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator14);
        java.lang.String str19 = handicapAccessDecorator14.getDetails();
        java.lang.String str20 = handicapAccessDecorator14.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str20, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator(parkingSpot11);
        java.lang.String str16 = handicapAccessDecorator15.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator15);
        java.lang.Class<?> wildcardClass18 = handicapAccessDecorator15.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parking.HandicapAccessDecorator handicapAccessDecorator23 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator22);
        java.util.List<parking.ParkingSpot> parkingSpotList25 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str30 = parkingSpot29.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator(parkingSpot29);
        java.lang.String str32 = coveredParkingDecorator31.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator31);
        java.lang.String str34 = coveredParkingDecorator33.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator35 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator33);
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator35);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator35);
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((int) (short) 1, "", "");
        java.lang.String str42 = parkingSpot41.getLocation();
        java.lang.String str43 = parkingSpot41.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot41);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager33 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager33.addParkingSpot(parkingSpot37);
        java.lang.String str39 = parkingSpot37.getLocation();
        int int40 = parkingSpot37.getId();
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator(parkingSpot37);
        parking.HandicapAccessDecorator handicapAccessDecorator42 = new parking.HandicapAccessDecorator(parkingSpot37);
        parkingLotManager0.addParkingSpot(parkingSpot37);
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        parkingLotManager0.addParkingSpot(parkingSpot47);
        parking.ParkingSpot parkingSpot52 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str53 = parkingSpot52.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator54 = new parking.CoveredParkingDecorator(parkingSpot52);
        java.lang.String str55 = coveredParkingDecorator54.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator56 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator54);
        java.lang.String str57 = coveredParkingDecorator54.getDetails();
        java.lang.String str58 = coveredParkingDecorator54.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator59 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator54);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator54);
        java.util.List<parking.ParkingSpot> parkingSpotList61 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingLotManager33);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str55, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str57, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(parkingSpotList61);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator5.getDetails();
        java.lang.String str8 = handicapAccessDecorator5.getParkingLot();
        java.lang.String str9 = handicapAccessDecorator5.getDetails();
        java.lang.Class<?> wildcardClass10 = handicapAccessDecorator5.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = parkingSpot3.getDetails();
        java.lang.String str7 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str6, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str7, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        java.lang.String str12 = eVChargingDecorator10.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator13);
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator14);
        int int16 = coveredParkingDecorator14.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator14);
        java.lang.String str18 = handicapAccessDecorator17.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(100, "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot10);
        java.lang.String str12 = parkingSpot10.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot10);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager14.addParkingSpot(parkingSpot18);
        java.lang.String str20 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator(parkingSpot18);
        parking.EVChargingDecorator eVChargingDecorator23 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        java.lang.Class<?> wildcardClass25 = parkingLotManager0.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str12, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        java.lang.String str7 = parkingSpot4.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        int int9 = coveredParkingDecorator8.getId();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator12);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        java.lang.String str9 = coveredParkingDecorator7.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        java.lang.String str13 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 100, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Covered Parking", "Parking Spot ID: 97, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getLocation();
        int int9 = handicapAccessDecorator6.getId();
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator(parkingSpot4);
        java.lang.String str9 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: ");
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = coveredParkingDecorator5.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str14 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, EV Charging Available, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '4', "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str5 = eVChargingDecorator4.getDetails();
        java.lang.String str6 = eVChargingDecorator4.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator4);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        java.lang.String str9 = eVChargingDecorator7.getLocation();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, EV Charging Available" + "'", str5, "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available" + "'", str6, "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available" + "'", str8, "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str9, "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        java.lang.String str17 = parkingSpot15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot15);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        parking.ParkingSpot parkingSpot23 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str24 = parkingSpot23.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator(parkingSpot23);
        java.lang.String str26 = coveredParkingDecorator25.getDetails();
        java.lang.String str27 = coveredParkingDecorator25.getParkingLot();
        java.lang.String str28 = coveredParkingDecorator25.getParkingLot();
        java.lang.String str29 = coveredParkingDecorator25.getParkingLot();
        int int30 = coveredParkingDecorator25.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator25);
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str36 = parkingSpot35.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator37 = new parking.CoveredParkingDecorator(parkingSpot35);
        java.lang.String str38 = coveredParkingDecorator37.getDetails();
        parking.EVChargingDecorator eVChargingDecorator39 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator37);
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator37);
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator40);
        parking.HandicapAccessDecorator handicapAccessDecorator42 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator41);
        java.lang.String str43 = handicapAccessDecorator42.getDetails();
        java.lang.String str44 = handicapAccessDecorator42.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator42);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str38, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking, Handicap Accessible" + "'", str43, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking, Handicap Accessible" + "'", str44, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        int int11 = eVChargingDecorator8.getId();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        java.lang.String str13 = eVChargingDecorator8.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parking.CoveredParkingDecorator coveredParkingDecorator23 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parking.HandicapAccessDecorator handicapAccessDecorator24 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator24 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList26 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot30 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator31 = new parking.EVChargingDecorator(parkingSpot30);
        parkingLotManager0.addParkingSpot(parkingSpot30);
        parking.ParkingSpot parkingSpot36 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        parkingLotManager0.addParkingSpot(parkingSpot36);
        parking.ParkingLotManager parkingLotManager38 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot42 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager38.addParkingSpot(parkingSpot42);
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str48 = parkingSpot47.getLocation();
        java.lang.String str49 = parkingSpot47.getLocation();
        parkingLotManager38.addParkingSpot(parkingSpot47);
        parking.ParkingLotManager parkingLotManager51 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot55 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager51.addParkingSpot(parkingSpot55);
        java.lang.String str57 = parkingSpot55.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator58 = new parking.CoveredParkingDecorator(parkingSpot55);
        parkingLotManager38.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator58);
        parking.CoveredParkingDecorator coveredParkingDecorator60 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator58);
        parking.CoveredParkingDecorator coveredParkingDecorator61 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator58);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator61);
        java.util.List<parking.ParkingSpot> parkingSpotList63 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList26);
        org.junit.Assert.assertNotNull(parkingLotManager38);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(parkingLotManager51);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList63);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '4', "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: ", "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        int int10 = handicapAccessDecorator9.getId();
        java.lang.String str11 = handicapAccessDecorator9.getLocation();
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        java.lang.String str13 = handicapAccessDecorator9.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str8 = eVChargingDecorator7.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        java.lang.String str13 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str20 = parkingSpot19.getParkingLot();
        java.lang.String str21 = parkingSpot19.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot19);
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot26);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        java.lang.String str31 = eVChargingDecorator30.getDetails();
        int int32 = eVChargingDecorator30.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str21, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, EV Charging Available" + "'", str31, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        java.util.List<parking.ParkingSpot> parkingSpotList21 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        java.lang.String str28 = coveredParkingDecorator27.getDetails();
        parking.EVChargingDecorator eVChargingDecorator29 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList31);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        int int4 = parkingSpot3.getId();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str6 = eVChargingDecorator5.getDetails();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 10, Location: Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, EV Charging Available" + "'", str6, "Parking Spot ID: 10, Location: Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str12 = eVChargingDecorator11.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator11);
        java.lang.String str14 = eVChargingDecorator13.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getDetails();
        java.lang.Class<?> wildcardClass11 = coveredParkingDecorator7.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str8 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str9 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        java.util.List<parking.ParkingSpot> parkingSpotList21 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        java.lang.String str28 = coveredParkingDecorator27.getDetails();
        parking.EVChargingDecorator eVChargingDecorator29 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        parking.ParkingSpot parkingSpot31 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingLotManager0.addParkingSpot(parkingSpot31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList13 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str18 = parkingSpot17.getDetails();
        java.lang.String str19 = parkingSpot17.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot17);
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str25 = parkingSpot24.getDetails();
        java.lang.String str26 = parkingSpot24.getDetails();
        parking.EVChargingDecorator eVChargingDecorator27 = new parking.EVChargingDecorator(parkingSpot24);
        java.lang.String str28 = eVChargingDecorator27.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator27);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str36 = parkingSpot35.getParkingLot();
        java.lang.String str37 = parkingSpot35.getDetails();
        parking.EVChargingDecorator eVChargingDecorator38 = new parking.EVChargingDecorator(parkingSpot35);
        java.lang.String str39 = eVChargingDecorator38.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator38);
        java.lang.String str41 = eVChargingDecorator38.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str25, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str26, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str28, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str37, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str39, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.Class<?> wildcardClass10 = handicapAccessDecorator9.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        int int7 = coveredParkingDecorator6.getId();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 100, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, EV Charging Available, EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        int int11 = eVChargingDecorator8.getId();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 100, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str5 = handicapAccessDecorator4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator4);
        java.lang.String str7 = handicapAccessDecorator4.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available" + "'", str5, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str7, "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int10 = coveredParkingDecorator5.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getLocation();
        java.lang.String str9 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        java.lang.String str8 = eVChargingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator5);
        java.lang.String str10 = eVChargingDecorator5.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        int int4 = parkingSpot3.getId();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = coveredParkingDecorator8.getDetails();
        java.lang.String str11 = coveredParkingDecorator8.getDetails();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, Covered Parking");
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator7);
        parking.ParkingLotManager parkingLotManager12 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager12.addParkingSpot(parkingSpot16);
        java.lang.String str18 = parkingSpot16.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot16);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        java.lang.String str21 = eVChargingDecorator20.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        java.lang.Class<?> wildcardClass24 = parkingLotManager0.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingLotManager12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        int int12 = coveredParkingDecorator8.getId();
        java.lang.String str13 = coveredParkingDecorator8.getLocation();
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        java.lang.String str13 = handicapAccessDecorator12.getLocation();
        java.lang.String str14 = handicapAccessDecorator12.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 10, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available", "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking");
        java.lang.String str4 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 10, Location: Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, Lot: Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str4, "Parking Spot ID: 10, Location: Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, Lot: Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        int int11 = coveredParkingDecorator10.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        int int11 = eVChargingDecorator8.getId();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator12);
        java.lang.String str14 = eVChargingDecorator12.getDetails();
        java.lang.String str15 = eVChargingDecorator12.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        java.lang.String str9 = handicapAccessDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str12 = coveredParkingDecorator7.getDetails();
        java.lang.String str13 = coveredParkingDecorator7.getDetails();
        int int14 = coveredParkingDecorator7.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str16 = handicapAccessDecorator15.getLocation();
        java.lang.String str17 = handicapAccessDecorator15.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        java.lang.String str11 = handicapAccessDecorator6.getLocation();
        java.lang.String str12 = handicapAccessDecorator6.getDetails();
        java.lang.String str13 = handicapAccessDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getParkingLot();
        java.lang.String str12 = handicapAccessDecorator9.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        int int10 = eVChargingDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str12 = handicapAccessDecorator11.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str29 = parkingSpot28.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator30 = new parking.CoveredParkingDecorator(parkingSpot28);
        java.lang.String str31 = coveredParkingDecorator30.getDetails();
        parking.EVChargingDecorator eVChargingDecorator32 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator30);
        java.lang.String str33 = coveredParkingDecorator30.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator34 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator30);
        java.lang.String str35 = handicapAccessDecorator34.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator36 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator34);
        int int37 = handicapAccessDecorator36.getId();
        java.lang.String str38 = handicapAccessDecorator36.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator36);
        java.lang.Class<?> wildcardClass40 = handicapAccessDecorator36.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str31, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str33, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str35, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager12 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager12.addParkingSpot(parkingSpot16);
        java.lang.String str18 = parkingSpot16.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator(parkingSpot16);
        java.lang.String str20 = eVChargingDecorator19.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator21 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator19);
        java.lang.String str22 = handicapAccessDecorator21.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator21);
        parking.HandicapAccessDecorator handicapAccessDecorator24 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator21);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(parkingLotManager12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str22, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        java.lang.String str13 = handicapAccessDecorator9.getLocation();
        java.lang.String str14 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        int int29 = handicapAccessDecorator28.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator28);
        java.lang.String str32 = handicapAccessDecorator28.getDetails();
        parking.EVChargingDecorator eVChargingDecorator33 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getParkingLot();
        java.lang.String str6 = parkingSpot3.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str7 = coveredParkingDecorator5.getDetails();
        java.lang.String str8 = coveredParkingDecorator5.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str8 = coveredParkingDecorator6.getDetails();
        java.lang.String str9 = coveredParkingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking");
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager31 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager31.addParkingSpot(parkingSpot35);
        java.lang.String str37 = parkingSpot35.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator(parkingSpot35);
        parking.CoveredParkingDecorator coveredParkingDecorator39 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator38);
        java.lang.String str40 = coveredParkingDecorator38.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator41 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator38);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator38);
        parking.ParkingSpot parkingSpot46 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str47 = parkingSpot46.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator48 = new parking.CoveredParkingDecorator(parkingSpot46);
        java.lang.String str49 = coveredParkingDecorator48.getDetails();
        parking.EVChargingDecorator eVChargingDecorator50 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator48);
        java.lang.String str51 = coveredParkingDecorator48.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator52 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator48);
        java.lang.String str53 = coveredParkingDecorator48.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator54 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator48);
        java.lang.String str55 = handicapAccessDecorator54.getDetails();
        java.lang.String str56 = handicapAccessDecorator54.getDetails();
        parking.EVChargingDecorator eVChargingDecorator57 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator54);
        java.lang.String str58 = handicapAccessDecorator54.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator54);
        java.lang.String str60 = handicapAccessDecorator54.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator61 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator54);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingLotManager31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str40, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str49, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str51, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str53, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str55, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str56, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str60, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        java.lang.String str13 = handicapAccessDecorator12.getLocation();
        java.lang.String str14 = handicapAccessDecorator12.getDetails();
        java.lang.String str15 = handicapAccessDecorator12.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator16 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator12);
        java.lang.String str17 = coveredParkingDecorator16.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible, Covered Parking" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: ");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator4);
        java.lang.String str6 = handicapAccessDecorator5.getDetails();
        java.lang.String str7 = handicapAccessDecorator5.getLocation();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Handicap Accessible" + "'", str6, "Parking Spot ID: 1, Location: Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
    }
}

