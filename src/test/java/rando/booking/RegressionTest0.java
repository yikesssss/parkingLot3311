package rando.booking;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        booking.Subject subject0 = null;
        // The following exception was thrown during execution in test generation
        try {
            booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor(subject0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.Subject.attach(booking.Observer)\" because \"subject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.Class<?> wildcardClass1 = bookingReceiver0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        booking.BookingReceiver bookingReceiver0 = null;
        booking.UserType userType4 = null;
        booking.ExtendCommand extendCommand5 = new booking.ExtendCommand(bookingReceiver0, "", "hi!", (int) 'a', userType4);
        // The following exception was thrown during execution in test generation
        try {
            extendCommand5.doAction();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.BookingReceiver.extendBooking(String, String, int, booking.UserType)\" because \"this.receiver\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        booking.Subject subject0 = null;
        // The following exception was thrown during execution in test generation
        try {
            booking.BookingSystem bookingSystem1 = new booking.BookingSystem(subject0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.Subject.attach(booking.Observer)\" because \"subject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        // The following exception was thrown during execution in test generation
        try {
            extendCommand6.doAction();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.UserType.ordinal()\" because \"userType\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        booking.BookingReceiver bookingReceiver0 = null;
        booking.UserType userType4 = null;
        booking.ExtendCommand extendCommand5 = new booking.ExtendCommand(bookingReceiver0, "", "hi!", (int) 'a', userType4);
        // The following exception was thrown during execution in test generation
        try {
            extendCommand5.doAction();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.BookingReceiver.extendBooking(String, String, int, booking.UserType)\" because \"this.receiver\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        double double2 = bookingReceiver0.getDeposit();
        double double3 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        booking.BookingReceiver bookingReceiver0 = null;
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        booking.UserType userType8 = booking.UserType.FACULTY;
        bookingReceiver4.bookSpace("", "", 100, userType8);
        booking.BookCommand bookCommand10 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType8);
        // The following exception was thrown during execution in test generation
        try {
            bookCommand10.doAction();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.BookingReceiver.bookSpace(String, String, int, booking.UserType)\" because \"this.receiver\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + userType8 + "' != '" + booking.UserType.FACULTY + "'", userType8.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        booking.UserType userType0 = booking.UserType.STUDENT;
        java.lang.Class<?> wildcardClass1 = userType0.getClass();
        org.junit.Assert.assertTrue("'" + userType0 + "' != '" + booking.UserType.STUDENT + "'", userType0.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        bookCommand11.doAction();
        bookCommand11.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        bookCommand11.doAction();
        java.lang.Class<?> wildcardClass13 = bookCommand11.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        booking.CancelCommand cancelCommand15 = new booking.CancelCommand(bookingReceiver0, "hi!", "BOOK");
        cancelCommand15.doAction();
        cancelCommand15.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.freeSpot();
        boolean boolean2 = parkingSpot0.isOccupied();
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        parkingSpot3.occupySpot("hi!");
        booking.BookingSystem bookingSystem6 = new booking.BookingSystem((booking.Subject) parkingSpot3);
        booking.ParkingSpot parkingSpot7 = new booking.ParkingSpot();
        parkingSpot7.occupySpot("hi!");
        booking.BookingSystem bookingSystem10 = new booking.BookingSystem((booking.Subject) parkingSpot7);
        booking.ParkingSpot parkingSpot11 = new booking.ParkingSpot();
        parkingSpot11.occupySpot("hi!");
        bookingSystem10.update((booking.Subject) parkingSpot11);
        parkingSpot3.detach((booking.Observer) bookingSystem10);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        parkingSpot16.occupySpot("hi!");
        booking.BookingSystem bookingSystem19 = new booking.BookingSystem((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        parkingSpot20.occupySpot("hi!");
        booking.BookingSystem bookingSystem23 = new booking.BookingSystem((booking.Subject) parkingSpot20);
        booking.ParkingSpot parkingSpot24 = new booking.ParkingSpot();
        parkingSpot24.occupySpot("hi!");
        bookingSystem23.update((booking.Subject) parkingSpot24);
        parkingSpot16.detach((booking.Observer) bookingSystem23);
        parkingSpot3.detach((booking.Observer) bookingSystem23);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        booking.BookingSystem bookingSystem33 = new booking.BookingSystem((booking.Subject) parkingSpot30);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        bookingSystem37.update((booking.Subject) parkingSpot38);
        parkingSpot30.detach((booking.Observer) bookingSystem37);
        bookingSystem23.update((booking.Subject) parkingSpot30);
        booking.ParkingSensor parkingSensor44 = new booking.ParkingSensor((booking.Subject) parkingSpot30);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSensor44.update((booking.Subject) parkingSpot45);
        parkingSpot0.detach((booking.Observer) parkingSensor44);
        java.lang.Class<?> wildcardClass48 = parkingSensor44.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSpot2.detach((booking.Observer) bookingSystem22);
        parkingSpot2.occupySpot("CANCEL");
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        booking.BookingSystem bookingSystem41 = new booking.BookingSystem((booking.Subject) parkingSpot38);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        bookingSystem41.update((booking.Subject) parkingSpot42);
        parkingSpot34.detach((booking.Observer) bookingSystem41);
        parkingSensor33.update((booking.Subject) parkingSpot34);
        parkingSpot2.detach((booking.Observer) parkingSensor33);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor50 = new booking.ParkingSensor((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        booking.BookingSystem bookingSystem54 = new booking.BookingSystem((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot55);
        booking.ParkingSpot parkingSpot59 = new booking.ParkingSpot();
        parkingSpot59.occupySpot("hi!");
        bookingSystem58.update((booking.Subject) parkingSpot59);
        parkingSpot51.detach((booking.Observer) bookingSystem58);
        parkingSensor50.update((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot65 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor66 = new booking.ParkingSensor((booking.Subject) parkingSpot65);
        booking.ParkingSpot parkingSpot67 = new booking.ParkingSpot();
        parkingSpot67.occupySpot("hi!");
        booking.BookingSystem bookingSystem70 = new booking.BookingSystem((booking.Subject) parkingSpot67);
        booking.ParkingSpot parkingSpot71 = new booking.ParkingSpot();
        parkingSpot71.occupySpot("hi!");
        booking.BookingSystem bookingSystem74 = new booking.BookingSystem((booking.Subject) parkingSpot71);
        booking.ParkingSpot parkingSpot75 = new booking.ParkingSpot();
        parkingSpot75.occupySpot("hi!");
        bookingSystem74.update((booking.Subject) parkingSpot75);
        parkingSpot67.detach((booking.Observer) bookingSystem74);
        booking.ParkingSpot parkingSpot80 = new booking.ParkingSpot();
        parkingSpot80.occupySpot("hi!");
        booking.BookingSystem bookingSystem83 = new booking.BookingSystem((booking.Subject) parkingSpot80);
        booking.ParkingSpot parkingSpot84 = new booking.ParkingSpot();
        parkingSpot84.occupySpot("hi!");
        booking.BookingSystem bookingSystem87 = new booking.BookingSystem((booking.Subject) parkingSpot84);
        booking.ParkingSpot parkingSpot88 = new booking.ParkingSpot();
        parkingSpot88.occupySpot("hi!");
        bookingSystem87.update((booking.Subject) parkingSpot88);
        parkingSpot80.detach((booking.Observer) bookingSystem87);
        parkingSpot67.detach((booking.Observer) bookingSystem87);
        parkingSpot67.occupySpot("CANCEL");
        parkingSensor66.update((booking.Subject) parkingSpot67);
        parkingSensor50.update((booking.Subject) parkingSpot67);
        booking.ParkingSensor parkingSensor98 = new booking.ParkingSensor((booking.Subject) parkingSpot67);
        parkingSensor33.update((booking.Subject) parkingSpot67);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        bookingReceiver0.cancelBooking("", "");
        java.lang.Class<?> wildcardClass7 = bookingReceiver0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor28 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        parkingSpot29.occupySpot("hi!");
        booking.BookingSystem bookingSystem32 = new booking.BookingSystem((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        booking.BookingSystem bookingSystem36 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        bookingSystem36.update((booking.Subject) parkingSpot37);
        parkingSpot29.detach((booking.Observer) bookingSystem36);
        parkingSensor28.update((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor44 = new booking.ParkingSensor((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        bookingSystem52.update((booking.Subject) parkingSpot53);
        parkingSpot45.detach((booking.Observer) bookingSystem52);
        parkingSensor44.update((booking.Subject) parkingSpot45);
        parkingSpot29.detach((booking.Observer) parkingSensor44);
        parkingSpot0.detach((booking.Observer) parkingSensor44);
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        booking.BookingSystem bookingSystem65 = new booking.BookingSystem((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        booking.BookingSystem bookingSystem69 = new booking.BookingSystem((booking.Subject) parkingSpot66);
        booking.ParkingSpot parkingSpot70 = new booking.ParkingSpot();
        parkingSpot70.occupySpot("hi!");
        bookingSystem69.update((booking.Subject) parkingSpot70);
        parkingSpot62.detach((booking.Observer) bookingSystem69);
        booking.ParkingSpot parkingSpot75 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor76 = new booking.ParkingSensor((booking.Subject) parkingSpot75);
        booking.ParkingSpot parkingSpot77 = new booking.ParkingSpot();
        parkingSpot77.occupySpot("hi!");
        booking.BookingSystem bookingSystem80 = new booking.BookingSystem((booking.Subject) parkingSpot77);
        booking.ParkingSpot parkingSpot81 = new booking.ParkingSpot();
        parkingSpot81.occupySpot("hi!");
        booking.BookingSystem bookingSystem84 = new booking.BookingSystem((booking.Subject) parkingSpot81);
        booking.ParkingSpot parkingSpot85 = new booking.ParkingSpot();
        parkingSpot85.occupySpot("hi!");
        bookingSystem84.update((booking.Subject) parkingSpot85);
        parkingSpot77.detach((booking.Observer) bookingSystem84);
        parkingSensor76.update((booking.Subject) parkingSpot77);
        booking.ParkingSpot parkingSpot91 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor92 = new booking.ParkingSensor((booking.Subject) parkingSpot91);
        parkingSpot77.detach((booking.Observer) parkingSensor92);
        bookingSystem69.update((booking.Subject) parkingSpot77);
        parkingSpot77.freeSpot();
        bookingSystem61.update((booking.Subject) parkingSpot77);
        java.lang.Class<?> wildcardClass97 = bookingSystem61.getClass();
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.BookingReceiver bookingReceiver15 = new booking.BookingReceiver();
        booking.UserType userType19 = booking.UserType.FACULTY;
        bookingReceiver15.bookSpace("", "", 100, userType19);
        bookingReceiver0.extendBooking("", "", (int) 'a', userType19);
        booking.CancelCommand cancelCommand24 = new booking.CancelCommand(bookingReceiver0, "BOOK", "CANCEL");
        java.lang.Class<?> wildcardClass25 = cancelCommand24.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType19 + "' != '" + booking.UserType.FACULTY + "'", userType19.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        booking.CancelCommand cancelCommand15 = new booking.CancelCommand(bookingReceiver0, "hi!", "BOOK");
        java.lang.Class<?> wildcardClass16 = cancelCommand15.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        bookCommand11.doAction();
        bookCommand11.doAction();
        java.lang.Class<?> wildcardClass14 = bookCommand11.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.BookingReceiver bookingReceiver50 = new booking.BookingReceiver();
        java.lang.String str51 = bookingReceiver50.getAction();
        booking.UserType userType55 = null;
        booking.ExtendCommand extendCommand56 = new booking.ExtendCommand(bookingReceiver50, "hi!", "", 100, userType55);
        booking.UserType userType60 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand61 = new booking.BookCommand(bookingReceiver50, "hi!", "hi!", 100, userType60);
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        booking.UserType userType69 = booking.UserType.FACULTY;
        bookingReceiver65.bookSpace("", "", 100, userType69);
        bookingReceiver50.extendBooking("", "", (int) 'a', userType69);
        booking.UserType userType72 = booking.UserType.NON_FACULTY;
        double double73 = bookingReceiver50.getRate(userType72);
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver0, "hi!", "BOOK", 1, userType72);
        booking.CancelCommand cancelCommand77 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        java.lang.Class<?> wildcardClass78 = cancelCommand77.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType69 + "' != '" + booking.UserType.FACULTY + "'", userType69.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.NON_FACULTY + "'", userType72.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor11 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot10.occupySpot("CANCEL");
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        bookingSystem18.update((booking.Subject) parkingSpot19);
        booking.BookingSystem bookingSystem24 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        parkingSpot10.attach((booking.Observer) bookingSystem24);
        java.lang.Class<?> wildcardClass26 = bookingSystem24.getClass();
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.UserType userType4 = booking.UserType.FACULTY;
        bookingReceiver0.bookSpace("", "", 100, userType4);
        java.lang.Class<?> wildcardClass6 = userType4.getClass();
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.FACULTY + "'", userType4.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = new booking.BookingReceiver();
        java.lang.String str2 = bookingReceiver1.getAction();
        booking.UserType userType6 = null;
        booking.ExtendCommand extendCommand7 = new booking.ExtendCommand(bookingReceiver1, "hi!", "", 100, userType6);
        booking.UserType userType11 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand12 = new booking.BookCommand(bookingReceiver1, "hi!", "hi!", 100, userType11);
        booking.UserType userType16 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver1, "", "", (int) (short) 1, userType16);
        commandInvoker0.setCommand((booking.ICommand) extendCommand17);
        booking.BookingReceiver bookingReceiver19 = new booking.BookingReceiver();
        java.lang.String str20 = bookingReceiver19.getAction();
        booking.UserType userType24 = null;
        booking.ExtendCommand extendCommand25 = new booking.ExtendCommand(bookingReceiver19, "hi!", "", 100, userType24);
        booking.BookingReceiver bookingReceiver29 = new booking.BookingReceiver();
        java.lang.String str30 = bookingReceiver29.getAction();
        booking.UserType userType34 = null;
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver29, "hi!", "", 100, userType34);
        booking.UserType userType39 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand40 = new booking.BookCommand(bookingReceiver29, "hi!", "hi!", 100, userType39);
        booking.BookingReceiver bookingReceiver44 = new booking.BookingReceiver();
        booking.UserType userType48 = booking.UserType.FACULTY;
        bookingReceiver44.bookSpace("", "", 100, userType48);
        bookingReceiver29.extendBooking("", "", (int) 'a', userType48);
        booking.ExtendCommand extendCommand51 = new booking.ExtendCommand(bookingReceiver19, "", "", 0, userType48);
        extendCommand51.doAction();
        commandInvoker0.setCommand((booking.ICommand) extendCommand51);
        extendCommand51.doAction();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.FACULTY + "'", userType11.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType16 + "' != '" + booking.UserType.FACULTY + "'", userType16.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.FACULTY + "'", userType39.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType48 + "' != '" + booking.UserType.FACULTY + "'", userType48.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        boolean boolean13 = parkingSpot0.isOccupied();
        parkingSpot0.occupySpot("hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = new booking.BookingReceiver();
        java.lang.String str2 = bookingReceiver1.getAction();
        booking.UserType userType6 = null;
        booking.ExtendCommand extendCommand7 = new booking.ExtendCommand(bookingReceiver1, "hi!", "", 100, userType6);
        booking.UserType userType11 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand12 = new booking.BookCommand(bookingReceiver1, "hi!", "hi!", 100, userType11);
        booking.UserType userType16 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver1, "", "", (int) (short) 1, userType16);
        commandInvoker0.setCommand((booking.ICommand) extendCommand17);
        extendCommand17.doAction();
        extendCommand17.doAction();
        extendCommand17.doAction();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.FACULTY + "'", userType11.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType16 + "' != '" + booking.UserType.FACULTY + "'", userType16.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.occupySpot("hi!");
        booking.BookingSystem bookingSystem44 = new booking.BookingSystem((booking.Subject) parkingSpot41);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        bookingSystem48.update((booking.Subject) parkingSpot49);
        parkingSpot41.detach((booking.Observer) bookingSystem48);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        booking.BookingSystem bookingSystem57 = new booking.BookingSystem((booking.Subject) parkingSpot54);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        bookingSystem61.update((booking.Subject) parkingSpot62);
        parkingSpot54.detach((booking.Observer) bookingSystem61);
        parkingSpot41.detach((booking.Observer) bookingSystem61);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        booking.BookingSystem bookingSystem75 = new booking.BookingSystem((booking.Subject) parkingSpot72);
        booking.ParkingSpot parkingSpot76 = new booking.ParkingSpot();
        parkingSpot76.occupySpot("hi!");
        bookingSystem75.update((booking.Subject) parkingSpot76);
        parkingSpot68.detach((booking.Observer) bookingSystem75);
        bookingSystem61.update((booking.Subject) parkingSpot68);
        bookingSystem20.update((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot83 = new booking.ParkingSpot();
        parkingSpot83.occupySpot("hi!");
        booking.BookingSystem bookingSystem86 = new booking.BookingSystem((booking.Subject) parkingSpot83);
        booking.ParkingSpot parkingSpot87 = new booking.ParkingSpot();
        parkingSpot87.occupySpot("hi!");
        booking.BookingSystem bookingSystem90 = new booking.BookingSystem((booking.Subject) parkingSpot87);
        booking.ParkingSpot parkingSpot91 = new booking.ParkingSpot();
        parkingSpot91.occupySpot("hi!");
        bookingSystem90.update((booking.Subject) parkingSpot91);
        parkingSpot83.detach((booking.Observer) bookingSystem90);
        parkingSpot68.detach((booking.Observer) bookingSystem90);
        booking.ParkingSpot parkingSpot97 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor98 = new booking.ParkingSensor((booking.Subject) parkingSpot97);
        bookingSystem90.update((booking.Subject) parkingSpot97);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        booking.UserType userType4 = booking.UserType.STUDENT;
        double double5 = bookingReceiver0.getRate(userType4);
        double double6 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("", "BOOK");
        booking.BookingReceiver bookingReceiver13 = new booking.BookingReceiver();
        java.lang.String str14 = bookingReceiver13.getAction();
        booking.UserType userType18 = null;
        booking.ExtendCommand extendCommand19 = new booking.ExtendCommand(bookingReceiver13, "hi!", "", 100, userType18);
        booking.BookingReceiver bookingReceiver23 = new booking.BookingReceiver();
        java.lang.String str24 = bookingReceiver23.getAction();
        booking.UserType userType28 = null;
        booking.ExtendCommand extendCommand29 = new booking.ExtendCommand(bookingReceiver23, "hi!", "", 100, userType28);
        booking.UserType userType33 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand34 = new booking.BookCommand(bookingReceiver23, "hi!", "hi!", 100, userType33);
        booking.BookingReceiver bookingReceiver38 = new booking.BookingReceiver();
        booking.UserType userType42 = booking.UserType.FACULTY;
        bookingReceiver38.bookSpace("", "", 100, userType42);
        bookingReceiver23.extendBooking("", "", (int) 'a', userType42);
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver13, "", "", 0, userType42);
        booking.BookingReceiver bookingReceiver46 = new booking.BookingReceiver();
        java.lang.String str47 = bookingReceiver46.getAction();
        booking.UserType userType51 = null;
        booking.ExtendCommand extendCommand52 = new booking.ExtendCommand(bookingReceiver46, "hi!", "", 100, userType51);
        java.lang.String str53 = bookingReceiver46.getAction();
        booking.UserType userType57 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand58 = new booking.ExtendCommand(bookingReceiver46, "hi!", "hi!", (int) (byte) 0, userType57);
        double double59 = bookingReceiver13.getRate(userType57);
        booking.BookingReceiver bookingReceiver63 = new booking.BookingReceiver();
        java.lang.String str64 = bookingReceiver63.getAction();
        booking.UserType userType68 = null;
        booking.ExtendCommand extendCommand69 = new booking.ExtendCommand(bookingReceiver63, "hi!", "", 100, userType68);
        booking.UserType userType73 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand74 = new booking.BookCommand(bookingReceiver63, "hi!", "hi!", 100, userType73);
        booking.BookingReceiver bookingReceiver78 = new booking.BookingReceiver();
        booking.UserType userType82 = booking.UserType.FACULTY;
        bookingReceiver78.bookSpace("", "", 100, userType82);
        bookingReceiver63.extendBooking("", "", (int) 'a', userType82);
        booking.UserType userType85 = booking.UserType.NON_FACULTY;
        double double86 = bookingReceiver63.getRate(userType85);
        booking.ExtendCommand extendCommand87 = new booking.ExtendCommand(bookingReceiver13, "hi!", "BOOK", 1, userType85);
        bookingReceiver0.bookSpace("BOOK", "hi!", (int) (byte) 1, userType85);
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.STUDENT + "'", userType4.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 5.0d + "'", double5 == 5.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + userType33 + "' != '" + booking.UserType.FACULTY + "'", userType33.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType42 + "' != '" + booking.UserType.FACULTY + "'", userType42.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + userType57 + "' != '" + booking.UserType.NON_FACULTY + "'", userType57.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + userType73 + "' != '" + booking.UserType.FACULTY + "'", userType73.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType82 + "' != '" + booking.UserType.FACULTY + "'", userType82.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType85 + "' != '" + booking.UserType.NON_FACULTY + "'", userType85.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 10.0d + "'", double86 == 10.0d);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.CancelCommand cancelCommand20 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        cancelCommand20.doAction();
        cancelCommand20.doAction();
        cancelCommand20.doAction();
        cancelCommand20.doAction();
        cancelCommand20.doAction();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSensor parkingSensor49 = new booking.ParkingSensor((booking.Subject) parkingSpot18);
        parkingSpot18.freeSpot();
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = null;
        booking.BookingReceiver bookingReceiver5 = new booking.BookingReceiver();
        booking.UserType userType9 = booking.UserType.FACULTY;
        bookingReceiver5.bookSpace("", "", 100, userType9);
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver1, "hi!", "", 0, userType9);
        commandInvoker0.setCommand((booking.ICommand) bookCommand11);
        // The following exception was thrown during execution in test generation
        try {
            bookCommand11.doAction();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.BookingReceiver.bookSpace(String, String, int, booking.UserType)\" because \"this.receiver\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + userType9 + "' != '" + booking.UserType.FACULTY + "'", userType9.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        booking.UserType userType12 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand13 = new booking.BookCommand(bookingReceiver2, "hi!", "hi!", 100, userType12);
        bookCommand13.doAction();
        bookCommand13.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand13);
        commandInvoker0.executeCommand();
        java.lang.Class<?> wildcardClass18 = commandInvoker0.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + booking.UserType.FACULTY + "'", userType12.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor28 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        parkingSpot29.occupySpot("hi!");
        booking.BookingSystem bookingSystem32 = new booking.BookingSystem((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        booking.BookingSystem bookingSystem36 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        bookingSystem36.update((booking.Subject) parkingSpot37);
        parkingSpot29.detach((booking.Observer) bookingSystem36);
        parkingSensor28.update((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor44 = new booking.ParkingSensor((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        bookingSystem52.update((booking.Subject) parkingSpot53);
        parkingSpot45.detach((booking.Observer) bookingSystem52);
        parkingSensor44.update((booking.Subject) parkingSpot45);
        parkingSpot29.detach((booking.Observer) parkingSensor44);
        parkingSpot0.detach((booking.Observer) parkingSensor44);
        parkingSpot0.occupySpot("hi!");
        java.lang.String str63 = parkingSpot0.getLicensePlate();
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        booking.BookingSystem bookingSystem54 = new booking.BookingSystem((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot55);
        booking.ParkingSpot parkingSpot59 = new booking.ParkingSpot();
        parkingSpot59.occupySpot("hi!");
        bookingSystem58.update((booking.Subject) parkingSpot59);
        parkingSpot51.detach((booking.Observer) bookingSystem58);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        bookingSystem71.update((booking.Subject) parkingSpot72);
        parkingSpot64.detach((booking.Observer) bookingSystem71);
        parkingSpot51.detach((booking.Observer) bookingSystem71);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        parkingSpot78.occupySpot("hi!");
        booking.BookingSystem bookingSystem81 = new booking.BookingSystem((booking.Subject) parkingSpot78);
        booking.ParkingSpot parkingSpot82 = new booking.ParkingSpot();
        parkingSpot82.occupySpot("hi!");
        booking.BookingSystem bookingSystem85 = new booking.BookingSystem((booking.Subject) parkingSpot82);
        booking.ParkingSpot parkingSpot86 = new booking.ParkingSpot();
        parkingSpot86.occupySpot("hi!");
        bookingSystem85.update((booking.Subject) parkingSpot86);
        parkingSpot78.detach((booking.Observer) bookingSystem85);
        bookingSystem71.update((booking.Subject) parkingSpot78);
        booking.ParkingSensor parkingSensor92 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        parkingSensor1.update((booking.Subject) parkingSpot78);
        booking.Observer observer94 = null;
        parkingSpot78.detach(observer94);
        parkingSpot78.freeSpot();
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        java.lang.String str41 = parkingSpot27.getLicensePlate();
        java.lang.Class<?> wildcardClass42 = parkingSpot27.getClass();
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = null;
        booking.BookingReceiver bookingReceiver5 = new booking.BookingReceiver();
        booking.UserType userType9 = booking.UserType.FACULTY;
        bookingReceiver5.bookSpace("", "", 100, userType9);
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver1, "hi!", "", 0, userType9);
        commandInvoker0.setCommand((booking.ICommand) bookCommand11);
        booking.BookingReceiver bookingReceiver13 = new booking.BookingReceiver();
        java.lang.String str14 = bookingReceiver13.getAction();
        booking.UserType userType18 = null;
        booking.ExtendCommand extendCommand19 = new booking.ExtendCommand(bookingReceiver13, "hi!", "", 100, userType18);
        booking.UserType userType23 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand24 = new booking.BookCommand(bookingReceiver13, "hi!", "hi!", 100, userType23);
        bookCommand24.doAction();
        bookCommand24.doAction();
        bookCommand24.doAction();
        bookCommand24.doAction();
        bookCommand24.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand24);
        booking.ICommand iCommand31 = null;
        commandInvoker0.setCommand(iCommand31);
        org.junit.Assert.assertTrue("'" + userType9 + "' != '" + booking.UserType.FACULTY + "'", userType9.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + userType23 + "' != '" + booking.UserType.FACULTY + "'", userType23.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.freeSpot();
        boolean boolean2 = parkingSpot0.isOccupied();
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        parkingSpot3.occupySpot("hi!");
        booking.BookingSystem bookingSystem6 = new booking.BookingSystem((booking.Subject) parkingSpot3);
        booking.ParkingSpot parkingSpot7 = new booking.ParkingSpot();
        parkingSpot7.occupySpot("hi!");
        booking.BookingSystem bookingSystem10 = new booking.BookingSystem((booking.Subject) parkingSpot7);
        booking.ParkingSpot parkingSpot11 = new booking.ParkingSpot();
        parkingSpot11.occupySpot("hi!");
        bookingSystem10.update((booking.Subject) parkingSpot11);
        parkingSpot3.detach((booking.Observer) bookingSystem10);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        parkingSpot16.occupySpot("hi!");
        booking.BookingSystem bookingSystem19 = new booking.BookingSystem((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        parkingSpot20.occupySpot("hi!");
        booking.BookingSystem bookingSystem23 = new booking.BookingSystem((booking.Subject) parkingSpot20);
        booking.ParkingSpot parkingSpot24 = new booking.ParkingSpot();
        parkingSpot24.occupySpot("hi!");
        bookingSystem23.update((booking.Subject) parkingSpot24);
        parkingSpot16.detach((booking.Observer) bookingSystem23);
        parkingSpot3.detach((booking.Observer) bookingSystem23);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        booking.BookingSystem bookingSystem33 = new booking.BookingSystem((booking.Subject) parkingSpot30);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        bookingSystem37.update((booking.Subject) parkingSpot38);
        parkingSpot30.detach((booking.Observer) bookingSystem37);
        bookingSystem23.update((booking.Subject) parkingSpot30);
        booking.ParkingSensor parkingSensor44 = new booking.ParkingSensor((booking.Subject) parkingSpot30);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSensor44.update((booking.Subject) parkingSpot45);
        parkingSpot0.detach((booking.Observer) parkingSensor44);
        booking.ParkingSpot parkingSpot48 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor49 = new booking.ParkingSensor((booking.Subject) parkingSpot48);
        booking.ParkingSpot parkingSpot50 = new booking.ParkingSpot();
        parkingSpot50.occupySpot("hi!");
        booking.BookingSystem bookingSystem53 = new booking.BookingSystem((booking.Subject) parkingSpot50);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        booking.BookingSystem bookingSystem57 = new booking.BookingSystem((booking.Subject) parkingSpot54);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        bookingSystem57.update((booking.Subject) parkingSpot58);
        parkingSpot50.detach((booking.Observer) bookingSystem57);
        parkingSensor49.update((booking.Subject) parkingSpot50);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor65 = new booking.ParkingSensor((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        booking.BookingSystem bookingSystem69 = new booking.BookingSystem((booking.Subject) parkingSpot66);
        booking.ParkingSpot parkingSpot70 = new booking.ParkingSpot();
        parkingSpot70.occupySpot("hi!");
        booking.BookingSystem bookingSystem73 = new booking.BookingSystem((booking.Subject) parkingSpot70);
        booking.ParkingSpot parkingSpot74 = new booking.ParkingSpot();
        parkingSpot74.occupySpot("hi!");
        bookingSystem73.update((booking.Subject) parkingSpot74);
        parkingSpot66.detach((booking.Observer) bookingSystem73);
        parkingSensor65.update((booking.Subject) parkingSpot66);
        parkingSpot50.detach((booking.Observer) parkingSensor65);
        booking.ParkingSpot parkingSpot81 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor82 = new booking.ParkingSensor((booking.Subject) parkingSpot81);
        booking.ParkingSpot parkingSpot83 = new booking.ParkingSpot();
        parkingSpot83.occupySpot("hi!");
        booking.BookingSystem bookingSystem86 = new booking.BookingSystem((booking.Subject) parkingSpot83);
        booking.ParkingSpot parkingSpot87 = new booking.ParkingSpot();
        parkingSpot87.occupySpot("hi!");
        booking.BookingSystem bookingSystem90 = new booking.BookingSystem((booking.Subject) parkingSpot87);
        booking.ParkingSpot parkingSpot91 = new booking.ParkingSpot();
        parkingSpot91.occupySpot("hi!");
        bookingSystem90.update((booking.Subject) parkingSpot91);
        parkingSpot83.detach((booking.Observer) bookingSystem90);
        parkingSensor82.update((booking.Subject) parkingSpot83);
        booking.ParkingSensor parkingSensor97 = new booking.ParkingSensor((booking.Subject) parkingSpot83);
        parkingSpot50.attach((booking.Observer) parkingSensor97);
        parkingSpot0.detach((booking.Observer) parkingSensor97);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        bookingReceiver0.cancelBooking("", "");
        booking.CancelCommand cancelCommand9 = new booking.CancelCommand(bookingReceiver0, "", "hi!");
        cancelCommand9.doAction();
        java.lang.Class<?> wildcardClass11 = cancelCommand9.getClass();
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        java.lang.String str34 = bookingReceiver0.getAction();
        booking.CancelCommand cancelCommand37 = new booking.CancelCommand(bookingReceiver0, "CANCEL", "BOOK");
        java.lang.Class<?> wildcardClass38 = bookingReceiver0.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "BOOK" + "'", str34, "BOOK");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        booking.BookingReceiver bookingReceiver14 = new booking.BookingReceiver();
        java.lang.String str15 = bookingReceiver14.getAction();
        booking.UserType userType19 = null;
        booking.ExtendCommand extendCommand20 = new booking.ExtendCommand(bookingReceiver14, "hi!", "", 100, userType19);
        booking.UserType userType24 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand25 = new booking.BookCommand(bookingReceiver14, "hi!", "hi!", 100, userType24);
        booking.BookingReceiver bookingReceiver29 = new booking.BookingReceiver();
        booking.UserType userType33 = booking.UserType.FACULTY;
        bookingReceiver29.bookSpace("", "", 100, userType33);
        bookingReceiver14.extendBooking("", "", (int) 'a', userType33);
        booking.UserType userType36 = booking.UserType.NON_FACULTY;
        double double37 = bookingReceiver14.getRate(userType36);
        bookingReceiver0.bookSpace("BOOK", "BOOK", (int) (byte) 10, userType36);
        java.lang.Class<?> wildcardClass39 = bookingReceiver0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + userType24 + "' != '" + booking.UserType.FACULTY + "'", userType24.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType33 + "' != '" + booking.UserType.FACULTY + "'", userType33.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType36 + "' != '" + booking.UserType.NON_FACULTY + "'", userType36.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor11 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        bookingSystem9.update((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        booking.ParkingSpot parkingSpot28 = new booking.ParkingSpot();
        parkingSpot28.occupySpot("hi!");
        booking.BookingSystem bookingSystem31 = new booking.BookingSystem((booking.Subject) parkingSpot28);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.BookingSystem bookingSystem35 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        bookingSystem35.update((booking.Subject) parkingSpot36);
        parkingSpot28.detach((booking.Observer) bookingSystem35);
        parkingSpot15.detach((booking.Observer) bookingSystem35);
        parkingSpot15.occupySpot("CANCEL");
        parkingSensor14.update((booking.Subject) parkingSpot15);
        bookingSystem9.update((booking.Subject) parkingSpot15);
        boolean boolean46 = parkingSpot15.isOccupied();
        booking.ParkingSpot parkingSpot47 = new booking.ParkingSpot();
        parkingSpot47.occupySpot("hi!");
        booking.BookingSystem bookingSystem50 = new booking.BookingSystem((booking.Subject) parkingSpot47);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        booking.BookingSystem bookingSystem54 = new booking.BookingSystem((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        bookingSystem54.update((booking.Subject) parkingSpot55);
        parkingSpot47.detach((booking.Observer) bookingSystem54);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        booking.BookingSystem bookingSystem63 = new booking.BookingSystem((booking.Subject) parkingSpot60);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        bookingSystem67.update((booking.Subject) parkingSpot68);
        parkingSpot60.detach((booking.Observer) bookingSystem67);
        parkingSpot47.detach((booking.Observer) bookingSystem67);
        booking.ParkingSpot parkingSpot74 = new booking.ParkingSpot();
        parkingSpot74.occupySpot("hi!");
        booking.BookingSystem bookingSystem77 = new booking.BookingSystem((booking.Subject) parkingSpot74);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        parkingSpot78.occupySpot("hi!");
        booking.BookingSystem bookingSystem81 = new booking.BookingSystem((booking.Subject) parkingSpot78);
        booking.ParkingSpot parkingSpot82 = new booking.ParkingSpot();
        parkingSpot82.occupySpot("hi!");
        bookingSystem81.update((booking.Subject) parkingSpot82);
        parkingSpot74.detach((booking.Observer) bookingSystem81);
        bookingSystem67.update((booking.Subject) parkingSpot74);
        java.lang.String str88 = parkingSpot74.getLicensePlate();
        booking.ParkingSensor parkingSensor89 = new booking.ParkingSensor((booking.Subject) parkingSpot74);
        parkingSpot15.attach((booking.Observer) parkingSensor89);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSpot2.detach((booking.Observer) parkingSensor17);
        parkingSpot2.freeSpot();
        // The following exception was thrown during execution in test generation
        try {
            parkingSpot2.occupySpot("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: License plate must not be null or empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor28 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        parkingSpot29.occupySpot("hi!");
        booking.BookingSystem bookingSystem32 = new booking.BookingSystem((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        booking.BookingSystem bookingSystem36 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        bookingSystem36.update((booking.Subject) parkingSpot37);
        parkingSpot29.detach((booking.Observer) bookingSystem36);
        parkingSensor28.update((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor44 = new booking.ParkingSensor((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        bookingSystem52.update((booking.Subject) parkingSpot53);
        parkingSpot45.detach((booking.Observer) bookingSystem52);
        parkingSensor44.update((booking.Subject) parkingSpot45);
        parkingSpot29.detach((booking.Observer) parkingSensor44);
        parkingSpot0.detach((booking.Observer) parkingSensor44);
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        parkingSpot0.freeSpot();
        parkingSpot0.occupySpot("EXTEND");
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        java.lang.String str48 = bookingReceiver41.getAction();
        booking.UserType userType52 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver41, "hi!", "hi!", (int) (byte) 0, userType52);
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver37, "", "", (int) (byte) 100, userType52);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        booking.UserType userType68 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand69 = new booking.BookCommand(bookingReceiver58, "hi!", "hi!", 100, userType68);
        bookingReceiver37.bookSpace("hi!", "hi!", (int) (short) -1, userType68);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType68);
        booking.BookingReceiver bookingReceiver72 = new booking.BookingReceiver();
        bookingReceiver72.cancelBooking("hi!", "hi!");
        bookingReceiver72.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver79 = new booking.BookingReceiver();
        booking.UserType userType83 = booking.UserType.FACULTY;
        bookingReceiver79.bookSpace("", "", 100, userType83);
        double double85 = bookingReceiver72.getRate(userType83);
        booking.BookingReceiver bookingReceiver89 = new booking.BookingReceiver();
        bookingReceiver89.cancelBooking("hi!", "hi!");
        booking.UserType userType93 = booking.UserType.STUDENT;
        double double94 = bookingReceiver89.getRate(userType93);
        booking.BookCommand bookCommand95 = new booking.BookCommand(bookingReceiver72, "hi!", "CANCEL", (int) (short) 10, userType93);
        double double96 = bookingReceiver0.getRate(userType93);
        double double97 = bookingReceiver0.getAmount();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + booking.UserType.NON_FACULTY + "'", userType52.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType68 + "' != '" + booking.UserType.FACULTY + "'", userType68.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType83 + "' != '" + booking.UserType.FACULTY + "'", userType83.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 8.0d + "'", double85 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType93 + "' != '" + booking.UserType.STUDENT + "'", userType93.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 5.0d + "'", double94 == 5.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 5.0d + "'", double96 == 5.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + (-8.0d) + "'", double97 == (-8.0d));
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        java.lang.String str48 = bookingReceiver41.getAction();
        booking.UserType userType52 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver41, "hi!", "hi!", (int) (byte) 0, userType52);
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver37, "", "", (int) (byte) 100, userType52);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        booking.UserType userType68 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand69 = new booking.BookCommand(bookingReceiver58, "hi!", "hi!", 100, userType68);
        bookingReceiver37.bookSpace("hi!", "hi!", (int) (short) -1, userType68);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType68);
        booking.BookingReceiver bookingReceiver72 = new booking.BookingReceiver();
        bookingReceiver72.cancelBooking("hi!", "hi!");
        bookingReceiver72.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver79 = new booking.BookingReceiver();
        booking.UserType userType83 = booking.UserType.FACULTY;
        bookingReceiver79.bookSpace("", "", 100, userType83);
        double double85 = bookingReceiver72.getRate(userType83);
        booking.BookingReceiver bookingReceiver89 = new booking.BookingReceiver();
        bookingReceiver89.cancelBooking("hi!", "hi!");
        booking.UserType userType93 = booking.UserType.STUDENT;
        double double94 = bookingReceiver89.getRate(userType93);
        booking.BookCommand bookCommand95 = new booking.BookCommand(bookingReceiver72, "hi!", "CANCEL", (int) (short) 10, userType93);
        double double96 = bookingReceiver0.getRate(userType93);
        java.lang.Class<?> wildcardClass97 = userType93.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + booking.UserType.NON_FACULTY + "'", userType52.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType68 + "' != '" + booking.UserType.FACULTY + "'", userType68.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType83 + "' != '" + booking.UserType.FACULTY + "'", userType83.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 8.0d + "'", double85 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType93 + "' != '" + booking.UserType.STUDENT + "'", userType93.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 5.0d + "'", double94 == 5.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 5.0d + "'", double96 == 5.0d);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        boolean boolean51 = parkingSpot49.isOccupied();
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        booking.BookingSystem bookingSystem59 = new booking.BookingSystem((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        bookingSystem59.update((booking.Subject) parkingSpot60);
        parkingSpot52.detach((booking.Observer) bookingSystem59);
        booking.ParkingSpot parkingSpot65 = new booking.ParkingSpot();
        parkingSpot65.occupySpot("hi!");
        booking.BookingSystem bookingSystem68 = new booking.BookingSystem((booking.Subject) parkingSpot65);
        booking.ParkingSpot parkingSpot69 = new booking.ParkingSpot();
        parkingSpot69.occupySpot("hi!");
        booking.BookingSystem bookingSystem72 = new booking.BookingSystem((booking.Subject) parkingSpot69);
        booking.ParkingSpot parkingSpot73 = new booking.ParkingSpot();
        parkingSpot73.occupySpot("hi!");
        bookingSystem72.update((booking.Subject) parkingSpot73);
        parkingSpot65.detach((booking.Observer) bookingSystem72);
        parkingSpot52.detach((booking.Observer) bookingSystem72);
        booking.ParkingSpot parkingSpot79 = new booking.ParkingSpot();
        parkingSpot79.occupySpot("hi!");
        booking.BookingSystem bookingSystem82 = new booking.BookingSystem((booking.Subject) parkingSpot79);
        booking.ParkingSpot parkingSpot83 = new booking.ParkingSpot();
        parkingSpot83.occupySpot("hi!");
        booking.BookingSystem bookingSystem86 = new booking.BookingSystem((booking.Subject) parkingSpot83);
        booking.ParkingSpot parkingSpot87 = new booking.ParkingSpot();
        parkingSpot87.occupySpot("hi!");
        bookingSystem86.update((booking.Subject) parkingSpot87);
        parkingSpot79.detach((booking.Observer) bookingSystem86);
        bookingSystem72.update((booking.Subject) parkingSpot79);
        booking.ParkingSensor parkingSensor93 = new booking.ParkingSensor((booking.Subject) parkingSpot79);
        parkingSpot49.detach((booking.Observer) parkingSensor93);
        booking.BookingSystem bookingSystem95 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        java.lang.Class<?> wildcardClass96 = parkingSpot49.getClass();
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        booking.BookingReceiver bookingReceiver0 = null;
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        booking.UserType userType14 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand15 = new booking.BookCommand(bookingReceiver4, "hi!", "hi!", 100, userType14);
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver0, "BOOK", "", (int) (short) 0, userType14);
        // The following exception was thrown during execution in test generation
        try {
            extendCommand16.doAction();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.BookingReceiver.extendBooking(String, String, int, booking.UserType)\" because \"this.receiver\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + userType14 + "' != '" + booking.UserType.FACULTY + "'", userType14.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        bookingReceiver0.cancelBooking("", "");
        booking.UserType userType7 = booking.UserType.STUDENT;
        double double8 = bookingReceiver0.getRate(userType7);
        bookingReceiver0.cancelBooking("hi!", "");
        booking.UserType userType12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = bookingReceiver0.getRate(userType12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.UserType.ordinal()\" because \"userType\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + userType7 + "' != '" + booking.UserType.STUDENT + "'", userType7.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        booking.BookingReceiver bookingReceiver14 = new booking.BookingReceiver();
        java.lang.String str15 = bookingReceiver14.getAction();
        booking.UserType userType19 = null;
        booking.ExtendCommand extendCommand20 = new booking.ExtendCommand(bookingReceiver14, "hi!", "", 100, userType19);
        booking.UserType userType24 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand25 = new booking.BookCommand(bookingReceiver14, "hi!", "hi!", 100, userType24);
        booking.BookingReceiver bookingReceiver29 = new booking.BookingReceiver();
        booking.UserType userType33 = booking.UserType.FACULTY;
        bookingReceiver29.bookSpace("", "", 100, userType33);
        bookingReceiver14.extendBooking("", "", (int) 'a', userType33);
        booking.UserType userType36 = booking.UserType.NON_FACULTY;
        double double37 = bookingReceiver14.getRate(userType36);
        bookingReceiver0.bookSpace("BOOK", "BOOK", (int) (byte) 10, userType36);
        double double39 = bookingReceiver0.getAmount();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + userType24 + "' != '" + booking.UserType.FACULTY + "'", userType24.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType33 + "' != '" + booking.UserType.FACULTY + "'", userType33.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType36 + "' != '" + booking.UserType.NON_FACULTY + "'", userType36.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.occupySpot("hi!");
        booking.BookingSystem bookingSystem44 = new booking.BookingSystem((booking.Subject) parkingSpot41);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        bookingSystem48.update((booking.Subject) parkingSpot49);
        parkingSpot41.detach((booking.Observer) bookingSystem48);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        booking.BookingSystem bookingSystem57 = new booking.BookingSystem((booking.Subject) parkingSpot54);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        bookingSystem61.update((booking.Subject) parkingSpot62);
        parkingSpot54.detach((booking.Observer) bookingSystem61);
        parkingSpot41.detach((booking.Observer) bookingSystem61);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        booking.BookingSystem bookingSystem75 = new booking.BookingSystem((booking.Subject) parkingSpot72);
        booking.ParkingSpot parkingSpot76 = new booking.ParkingSpot();
        parkingSpot76.occupySpot("hi!");
        bookingSystem75.update((booking.Subject) parkingSpot76);
        parkingSpot68.detach((booking.Observer) bookingSystem75);
        bookingSystem61.update((booking.Subject) parkingSpot68);
        bookingSystem20.update((booking.Subject) parkingSpot68);
        boolean boolean83 = parkingSpot68.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        java.lang.String str9 = bookingReceiver2.getAction();
        booking.UserType userType13 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand14 = new booking.ExtendCommand(bookingReceiver2, "hi!", "hi!", (int) (byte) 0, userType13);
        extendCommand14.doAction();
        commandInvoker0.setCommand((booking.ICommand) extendCommand14);
        booking.BookingReceiver bookingReceiver17 = new booking.BookingReceiver();
        java.lang.String str18 = bookingReceiver17.getAction();
        booking.UserType userType22 = null;
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver17, "hi!", "", 100, userType22);
        booking.UserType userType27 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand28 = new booking.BookCommand(bookingReceiver17, "hi!", "hi!", 100, userType27);
        bookCommand28.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand28);
        booking.BookingReceiver bookingReceiver31 = new booking.BookingReceiver();
        java.lang.String str32 = bookingReceiver31.getAction();
        booking.UserType userType36 = null;
        booking.ExtendCommand extendCommand37 = new booking.ExtendCommand(bookingReceiver31, "hi!", "", 100, userType36);
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        booking.UserType userType51 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand52 = new booking.BookCommand(bookingReceiver41, "hi!", "hi!", 100, userType51);
        booking.BookingReceiver bookingReceiver56 = new booking.BookingReceiver();
        booking.UserType userType60 = booking.UserType.FACULTY;
        bookingReceiver56.bookSpace("", "", 100, userType60);
        bookingReceiver41.extendBooking("", "", (int) 'a', userType60);
        booking.ExtendCommand extendCommand63 = new booking.ExtendCommand(bookingReceiver31, "", "", 0, userType60);
        commandInvoker0.setCommand((booking.ICommand) extendCommand63);
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        java.lang.String str66 = bookingReceiver65.getAction();
        booking.UserType userType70 = null;
        booking.ExtendCommand extendCommand71 = new booking.ExtendCommand(bookingReceiver65, "hi!", "", 100, userType70);
        java.lang.String str72 = bookingReceiver65.getAction();
        booking.UserType userType76 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand77 = new booking.ExtendCommand(bookingReceiver65, "hi!", "hi!", (int) (byte) 0, userType76);
        extendCommand77.doAction();
        extendCommand77.doAction();
        commandInvoker0.setCommand((booking.ICommand) extendCommand77);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + userType13 + "' != '" + booking.UserType.NON_FACULTY + "'", userType13.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + userType27 + "' != '" + booking.UserType.FACULTY + "'", userType27.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + userType51 + "' != '" + booking.UserType.FACULTY + "'", userType51.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + userType76 + "' != '" + booking.UserType.NON_FACULTY + "'", userType76.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = null;
        booking.BookingReceiver bookingReceiver5 = new booking.BookingReceiver();
        booking.UserType userType9 = booking.UserType.FACULTY;
        bookingReceiver5.bookSpace("", "", 100, userType9);
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver1, "hi!", "", 0, userType9);
        commandInvoker0.setCommand((booking.ICommand) bookCommand11);
        booking.BookingReceiver bookingReceiver13 = new booking.BookingReceiver();
        java.lang.String str14 = bookingReceiver13.getAction();
        booking.UserType userType18 = null;
        booking.ExtendCommand extendCommand19 = new booking.ExtendCommand(bookingReceiver13, "hi!", "", 100, userType18);
        booking.UserType userType23 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand24 = new booking.BookCommand(bookingReceiver13, "hi!", "hi!", 100, userType23);
        bookCommand24.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand24);
        bookCommand24.doAction();
        bookCommand24.doAction();
        org.junit.Assert.assertTrue("'" + userType9 + "' != '" + booking.UserType.FACULTY + "'", userType9.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + userType23 + "' != '" + booking.UserType.FACULTY + "'", userType23.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.BookingReceiver bookingReceiver12 = new booking.BookingReceiver();
        java.lang.String str13 = bookingReceiver12.getAction();
        booking.UserType userType17 = null;
        booking.ExtendCommand extendCommand18 = new booking.ExtendCommand(bookingReceiver12, "hi!", "", 100, userType17);
        booking.UserType userType22 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand23 = new booking.BookCommand(bookingReceiver12, "hi!", "hi!", 100, userType22);
        booking.BookingReceiver bookingReceiver27 = new booking.BookingReceiver();
        booking.UserType userType31 = booking.UserType.FACULTY;
        bookingReceiver27.bookSpace("", "", 100, userType31);
        bookingReceiver12.extendBooking("", "", (int) 'a', userType31);
        double double34 = bookingReceiver0.getRate(userType31);
        booking.UserType userType38 = booking.UserType.VISITOR;
        bookingReceiver0.extendBooking("", "hi!", (int) '#', userType38);
        java.lang.String str40 = bookingReceiver0.getAction();
        java.lang.Class<?> wildcardClass41 = bookingReceiver0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + userType22 + "' != '" + booking.UserType.FACULTY + "'", userType22.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.0d + "'", double34 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType38 + "' != '" + booking.UserType.VISITOR + "'", userType38.equals(booking.UserType.VISITOR));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "EXTEND" + "'", str40, "EXTEND");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        bookingSystem3.update((booking.Subject) parkingSpot4);
        boolean boolean8 = parkingSpot4.isOccupied();
        booking.ParkingSpot parkingSpot9 = new booking.ParkingSpot();
        parkingSpot9.occupySpot("hi!");
        booking.BookingSystem bookingSystem12 = new booking.BookingSystem((booking.Subject) parkingSpot9);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        bookingSystem16.update((booking.Subject) parkingSpot17);
        parkingSpot9.detach((booking.Observer) bookingSystem16);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        booking.BookingSystem bookingSystem29 = new booking.BookingSystem((booking.Subject) parkingSpot26);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        bookingSystem29.update((booking.Subject) parkingSpot30);
        parkingSpot22.detach((booking.Observer) bookingSystem29);
        parkingSpot9.detach((booking.Observer) bookingSystem29);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        booking.BookingSystem bookingSystem39 = new booking.BookingSystem((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        booking.BookingSystem bookingSystem43 = new booking.BookingSystem((booking.Subject) parkingSpot40);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        bookingSystem43.update((booking.Subject) parkingSpot44);
        parkingSpot36.detach((booking.Observer) bookingSystem43);
        bookingSystem29.update((booking.Subject) parkingSpot36);
        booking.ParkingSensor parkingSensor50 = new booking.ParkingSensor((booking.Subject) parkingSpot36);
        booking.ParkingSensor parkingSensor51 = new booking.ParkingSensor((booking.Subject) parkingSpot36);
        booking.ParkingSensor parkingSensor52 = new booking.ParkingSensor((booking.Subject) parkingSpot36);
        parkingSpot4.attach((booking.Observer) parkingSensor52);
        booking.ParkingSensor parkingSensor54 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        boolean boolean55 = parkingSpot4.isOccupied();
        parkingSpot4.occupySpot("CANCEL");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        java.lang.String str48 = bookingReceiver41.getAction();
        booking.UserType userType52 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver41, "hi!", "hi!", (int) (byte) 0, userType52);
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver37, "", "", (int) (byte) 100, userType52);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        booking.UserType userType68 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand69 = new booking.BookCommand(bookingReceiver58, "hi!", "hi!", 100, userType68);
        bookingReceiver37.bookSpace("hi!", "hi!", (int) (short) -1, userType68);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType68);
        double double72 = bookingReceiver0.getAmount();
        java.lang.String str73 = bookingReceiver0.getAction();
        double double74 = bookingReceiver0.getAmount();
        java.lang.String str75 = bookingReceiver0.getAction();
        double double76 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + booking.UserType.NON_FACULTY + "'", userType52.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType68 + "' != '" + booking.UserType.FACULTY + "'", userType68.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-8.0d) + "'", double72 == (-8.0d));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "BOOK" + "'", str73, "BOOK");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-8.0d) + "'", double74 == (-8.0d));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "BOOK" + "'", str75, "BOOK");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 8.0d + "'", double76 == 8.0d);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        java.lang.String str10 = parkingSpot4.getLicensePlate();
        java.lang.Class<?> wildcardClass11 = parkingSpot4.getClass();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.CancelCommand cancelCommand20 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        booking.BookingReceiver bookingReceiver24 = new booking.BookingReceiver();
        java.lang.String str25 = bookingReceiver24.getAction();
        booking.UserType userType29 = null;
        booking.ExtendCommand extendCommand30 = new booking.ExtendCommand(bookingReceiver24, "hi!", "", 100, userType29);
        booking.UserType userType34 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand35 = new booking.BookCommand(bookingReceiver24, "hi!", "hi!", 100, userType34);
        booking.UserType userType39 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand40 = new booking.ExtendCommand(bookingReceiver24, "", "", (int) (short) 1, userType39);
        bookingReceiver0.bookSpace("CANCEL", "EXTEND", (int) (byte) 10, userType39);
        booking.BookingReceiver bookingReceiver45 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver49 = new booking.BookingReceiver();
        java.lang.String str50 = bookingReceiver49.getAction();
        booking.UserType userType54 = null;
        booking.ExtendCommand extendCommand55 = new booking.ExtendCommand(bookingReceiver49, "hi!", "", 100, userType54);
        java.lang.String str56 = bookingReceiver49.getAction();
        booking.UserType userType60 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand61 = new booking.ExtendCommand(bookingReceiver49, "hi!", "hi!", (int) (byte) 0, userType60);
        booking.ExtendCommand extendCommand62 = new booking.ExtendCommand(bookingReceiver45, "", "", (int) (byte) 100, userType60);
        booking.BookingReceiver bookingReceiver66 = new booking.BookingReceiver();
        java.lang.String str67 = bookingReceiver66.getAction();
        booking.UserType userType71 = null;
        booking.ExtendCommand extendCommand72 = new booking.ExtendCommand(bookingReceiver66, "hi!", "", 100, userType71);
        booking.UserType userType76 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand77 = new booking.BookCommand(bookingReceiver66, "hi!", "hi!", 100, userType76);
        bookingReceiver45.bookSpace("hi!", "hi!", (int) (short) -1, userType76);
        bookingReceiver0.bookSpace("EXTEND", "hi!", (int) (byte) -1, userType76);
        double double80 = bookingReceiver0.getDeposit();
        double double81 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver82 = new booking.BookingReceiver();
        java.lang.String str83 = bookingReceiver82.getAction();
        booking.UserType userType87 = null;
        booking.ExtendCommand extendCommand88 = new booking.ExtendCommand(bookingReceiver82, "hi!", "", 100, userType87);
        booking.UserType userType92 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand93 = new booking.BookCommand(bookingReceiver82, "hi!", "hi!", 100, userType92);
        double double94 = bookingReceiver0.getRate(userType92);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + userType34 + "' != '" + booking.UserType.FACULTY + "'", userType34.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.FACULTY + "'", userType39.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.NON_FACULTY + "'", userType60.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + userType76 + "' != '" + booking.UserType.FACULTY + "'", userType76.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 8.0d + "'", double80 == 8.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-8.0d) + "'", double81 == (-8.0d));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + userType92 + "' != '" + booking.UserType.FACULTY + "'", userType92.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 8.0d + "'", double94 == 8.0d);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.occupySpot("hi!");
        booking.BookingSystem bookingSystem44 = new booking.BookingSystem((booking.Subject) parkingSpot41);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        bookingSystem48.update((booking.Subject) parkingSpot49);
        parkingSpot41.detach((booking.Observer) bookingSystem48);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        booking.BookingSystem bookingSystem57 = new booking.BookingSystem((booking.Subject) parkingSpot54);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        bookingSystem61.update((booking.Subject) parkingSpot62);
        parkingSpot54.detach((booking.Observer) bookingSystem61);
        parkingSpot41.detach((booking.Observer) bookingSystem61);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        booking.BookingSystem bookingSystem75 = new booking.BookingSystem((booking.Subject) parkingSpot72);
        booking.ParkingSpot parkingSpot76 = new booking.ParkingSpot();
        parkingSpot76.occupySpot("hi!");
        bookingSystem75.update((booking.Subject) parkingSpot76);
        parkingSpot68.detach((booking.Observer) bookingSystem75);
        bookingSystem61.update((booking.Subject) parkingSpot68);
        bookingSystem20.update((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot83 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor84 = new booking.ParkingSensor((booking.Subject) parkingSpot83);
        booking.ParkingSpot parkingSpot85 = new booking.ParkingSpot();
        parkingSpot85.occupySpot("hi!");
        booking.BookingSystem bookingSystem88 = new booking.BookingSystem((booking.Subject) parkingSpot85);
        booking.ParkingSpot parkingSpot89 = new booking.ParkingSpot();
        parkingSpot89.occupySpot("hi!");
        booking.BookingSystem bookingSystem92 = new booking.BookingSystem((booking.Subject) parkingSpot89);
        booking.ParkingSpot parkingSpot93 = new booking.ParkingSpot();
        parkingSpot93.occupySpot("hi!");
        bookingSystem92.update((booking.Subject) parkingSpot93);
        parkingSpot85.detach((booking.Observer) bookingSystem92);
        parkingSensor84.update((booking.Subject) parkingSpot85);
        bookingSystem20.update((booking.Subject) parkingSpot85);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        parkingSpot3.occupySpot("hi!");
        booking.BookingSystem bookingSystem6 = new booking.BookingSystem((booking.Subject) parkingSpot3);
        booking.ParkingSpot parkingSpot7 = new booking.ParkingSpot();
        parkingSpot7.occupySpot("hi!");
        booking.BookingSystem bookingSystem10 = new booking.BookingSystem((booking.Subject) parkingSpot7);
        booking.ParkingSpot parkingSpot11 = new booking.ParkingSpot();
        parkingSpot11.occupySpot("hi!");
        bookingSystem10.update((booking.Subject) parkingSpot11);
        parkingSpot3.detach((booking.Observer) bookingSystem10);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        parkingSpot16.occupySpot("hi!");
        booking.BookingSystem bookingSystem19 = new booking.BookingSystem((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        parkingSpot20.occupySpot("hi!");
        booking.BookingSystem bookingSystem23 = new booking.BookingSystem((booking.Subject) parkingSpot20);
        booking.ParkingSpot parkingSpot24 = new booking.ParkingSpot();
        parkingSpot24.occupySpot("hi!");
        bookingSystem23.update((booking.Subject) parkingSpot24);
        parkingSpot16.detach((booking.Observer) bookingSystem23);
        parkingSpot3.detach((booking.Observer) bookingSystem23);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        booking.BookingSystem bookingSystem33 = new booking.BookingSystem((booking.Subject) parkingSpot30);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        bookingSystem37.update((booking.Subject) parkingSpot38);
        parkingSpot30.detach((booking.Observer) bookingSystem37);
        bookingSystem23.update((booking.Subject) parkingSpot30);
        parkingSpot0.attach((booking.Observer) bookingSystem23);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        bookingSystem52.update((booking.Subject) parkingSpot53);
        parkingSpot45.detach((booking.Observer) bookingSystem52);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        booking.BookingSystem bookingSystem65 = new booking.BookingSystem((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        bookingSystem65.update((booking.Subject) parkingSpot66);
        parkingSpot58.detach((booking.Observer) bookingSystem65);
        parkingSpot45.detach((booking.Observer) bookingSystem65);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        booking.BookingSystem bookingSystem75 = new booking.BookingSystem((booking.Subject) parkingSpot72);
        booking.ParkingSpot parkingSpot76 = new booking.ParkingSpot();
        parkingSpot76.occupySpot("hi!");
        booking.BookingSystem bookingSystem79 = new booking.BookingSystem((booking.Subject) parkingSpot76);
        booking.ParkingSpot parkingSpot80 = new booking.ParkingSpot();
        parkingSpot80.occupySpot("hi!");
        bookingSystem79.update((booking.Subject) parkingSpot80);
        parkingSpot72.detach((booking.Observer) bookingSystem79);
        bookingSystem65.update((booking.Subject) parkingSpot72);
        booking.ParkingSensor parkingSensor86 = new booking.ParkingSensor((booking.Subject) parkingSpot72);
        booking.ParkingSpot parkingSpot87 = new booking.ParkingSpot();
        parkingSensor86.update((booking.Subject) parkingSpot87);
        parkingSpot0.attach((booking.Observer) parkingSensor86);
        parkingSpot0.occupySpot("EXTEND");
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        booking.BookingReceiver bookingReceiver0 = null;
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        bookingReceiver4.cancelBooking("hi!", "hi!");
        booking.UserType userType8 = booking.UserType.STUDENT;
        double double9 = bookingReceiver4.getRate(userType8);
        booking.BookCommand bookCommand10 = new booking.BookCommand(bookingReceiver0, "BOOK", "hi!", 0, userType8);
        // The following exception was thrown during execution in test generation
        try {
            bookCommand10.doAction();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.BookingReceiver.bookSpace(String, String, int, booking.UserType)\" because \"this.receiver\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + userType8 + "' != '" + booking.UserType.STUDENT + "'", userType8.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5.0d + "'", double9 == 5.0d);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.UserType userType50 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand51 = new booking.ExtendCommand(bookingReceiver0, "hi!", "CANCEL", (int) ' ', userType50);
        double double52 = bookingReceiver0.getDeposit();
        booking.UserType userType56 = null;
        booking.BookCommand bookCommand57 = new booking.BookCommand(bookingReceiver0, "hi!", "", (int) 'a', userType56);
        // The following exception was thrown during execution in test generation
        try {
            bookCommand57.doAction();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.UserType.ordinal()\" because \"userType\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + userType50 + "' != '" + booking.UserType.NON_FACULTY + "'", userType50.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        bookingReceiver0.extendBooking("hi!", "", 0, userType29);
        double double33 = bookingReceiver0.getAmount();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = new booking.BookingReceiver();
        java.lang.String str2 = bookingReceiver1.getAction();
        booking.UserType userType6 = null;
        booking.ExtendCommand extendCommand7 = new booking.ExtendCommand(bookingReceiver1, "hi!", "", 100, userType6);
        booking.UserType userType11 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand12 = new booking.BookCommand(bookingReceiver1, "hi!", "hi!", 100, userType11);
        booking.UserType userType16 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver1, "", "", (int) (short) 1, userType16);
        commandInvoker0.setCommand((booking.ICommand) extendCommand17);
        java.lang.Class<?> wildcardClass19 = commandInvoker0.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.FACULTY + "'", userType11.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType16 + "' != '" + booking.UserType.FACULTY + "'", userType16.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor11 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        bookingSystem9.update((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor27 = new booking.ParkingSensor((booking.Subject) parkingSpot26);
        booking.ParkingSpot parkingSpot28 = new booking.ParkingSpot();
        parkingSpot28.occupySpot("hi!");
        booking.BookingSystem bookingSystem31 = new booking.BookingSystem((booking.Subject) parkingSpot28);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.BookingSystem bookingSystem35 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        bookingSystem35.update((booking.Subject) parkingSpot36);
        parkingSpot28.detach((booking.Observer) bookingSystem35);
        parkingSensor27.update((booking.Subject) parkingSpot28);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor43 = new booking.ParkingSensor((booking.Subject) parkingSpot42);
        parkingSpot28.detach((booking.Observer) parkingSensor43);
        bookingSystem20.update((booking.Subject) parkingSpot28);
        booking.ParkingSensor parkingSensor46 = new booking.ParkingSensor((booking.Subject) parkingSpot28);
        parkingSpot10.detach((booking.Observer) parkingSensor46);
        boolean boolean48 = parkingSpot10.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        java.lang.String str48 = bookingReceiver41.getAction();
        booking.UserType userType52 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver41, "hi!", "hi!", (int) (byte) 0, userType52);
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver37, "", "", (int) (byte) 100, userType52);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        booking.UserType userType68 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand69 = new booking.BookCommand(bookingReceiver58, "hi!", "hi!", 100, userType68);
        bookingReceiver37.bookSpace("hi!", "hi!", (int) (short) -1, userType68);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType68);
        booking.BookingReceiver bookingReceiver75 = new booking.BookingReceiver();
        java.lang.String str76 = bookingReceiver75.getAction();
        booking.UserType userType80 = null;
        booking.ExtendCommand extendCommand81 = new booking.ExtendCommand(bookingReceiver75, "hi!", "", 100, userType80);
        java.lang.String str82 = bookingReceiver75.getAction();
        booking.UserType userType86 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand87 = new booking.ExtendCommand(bookingReceiver75, "hi!", "hi!", (int) (byte) 0, userType86);
        booking.BookCommand bookCommand88 = new booking.BookCommand(bookingReceiver0, "", "", (int) (short) 1, userType86);
        bookingReceiver0.cancelBooking("BOOK", "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + booking.UserType.NON_FACULTY + "'", userType52.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType68 + "' != '" + booking.UserType.FACULTY + "'", userType68.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + userType86 + "' != '" + booking.UserType.NON_FACULTY + "'", userType86.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        parkingSpot0.freeSpot();
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor5 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        booking.BookingSystem bookingSystem13 = new booking.BookingSystem((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot14 = new booking.ParkingSpot();
        parkingSpot14.occupySpot("hi!");
        bookingSystem13.update((booking.Subject) parkingSpot14);
        parkingSpot6.detach((booking.Observer) bookingSystem13);
        parkingSensor5.update((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor21 = new booking.ParkingSensor((booking.Subject) parkingSpot20);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        booking.BookingSystem bookingSystem29 = new booking.BookingSystem((booking.Subject) parkingSpot26);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        bookingSystem29.update((booking.Subject) parkingSpot30);
        parkingSpot22.detach((booking.Observer) bookingSystem29);
        parkingSensor21.update((booking.Subject) parkingSpot22);
        parkingSpot6.detach((booking.Observer) parkingSensor21);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor38 = new booking.ParkingSensor((booking.Subject) parkingSpot37);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        booking.BookingSystem bookingSystem42 = new booking.BookingSystem((booking.Subject) parkingSpot39);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        parkingSpot43.occupySpot("hi!");
        booking.BookingSystem bookingSystem46 = new booking.BookingSystem((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot47 = new booking.ParkingSpot();
        parkingSpot47.occupySpot("hi!");
        bookingSystem46.update((booking.Subject) parkingSpot47);
        parkingSpot39.detach((booking.Observer) bookingSystem46);
        parkingSensor38.update((booking.Subject) parkingSpot39);
        booking.ParkingSensor parkingSensor53 = new booking.ParkingSensor((booking.Subject) parkingSpot39);
        parkingSpot6.attach((booking.Observer) parkingSensor53);
        parkingSpot3.attach((booking.Observer) parkingSensor53);
        parkingSpot0.attach((booking.Observer) parkingSensor53);
        parkingSpot0.occupySpot("EXTEND");
        parkingSpot0.occupySpot("BOOK");
        parkingSpot0.freeSpot();
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSpot2.detach((booking.Observer) bookingSystem22);
        parkingSpot2.occupySpot("CANCEL");
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        booking.BookingSystem bookingSystem41 = new booking.BookingSystem((booking.Subject) parkingSpot38);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        bookingSystem41.update((booking.Subject) parkingSpot42);
        parkingSpot34.detach((booking.Observer) bookingSystem41);
        parkingSensor33.update((booking.Subject) parkingSpot34);
        parkingSpot2.detach((booking.Observer) parkingSensor33);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        booking.BookingSystem bookingSystem56 = new booking.BookingSystem((booking.Subject) parkingSpot53);
        bookingSystem52.update((booking.Subject) parkingSpot53);
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot53);
        parkingSpot2.detach((booking.Observer) bookingSystem58);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        bookingSystem58.update((booking.Subject) parkingSpot60);
        java.lang.Class<?> wildcardClass62 = parkingSpot60.getClass();
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        parkingSpot16.occupySpot("hi!");
        booking.BookingSystem bookingSystem19 = new booking.BookingSystem((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        parkingSpot20.occupySpot("hi!");
        bookingSystem19.update((booking.Subject) parkingSpot20);
        parkingSpot20.freeSpot();
        java.lang.String str25 = parkingSpot20.getLicensePlate();
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor27 = new booking.ParkingSensor((booking.Subject) parkingSpot26);
        booking.ParkingSpot parkingSpot28 = new booking.ParkingSpot();
        parkingSpot28.occupySpot("hi!");
        booking.BookingSystem bookingSystem31 = new booking.BookingSystem((booking.Subject) parkingSpot28);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.BookingSystem bookingSystem35 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        bookingSystem35.update((booking.Subject) parkingSpot36);
        parkingSpot28.detach((booking.Observer) bookingSystem35);
        parkingSensor27.update((booking.Subject) parkingSpot28);
        booking.ParkingSensor parkingSensor42 = new booking.ParkingSensor((booking.Subject) parkingSpot28);
        parkingSpot20.detach((booking.Observer) parkingSensor42);
        parkingSpot20.freeSpot();
        parkingSensor1.update((booking.Subject) parkingSpot20);
        java.lang.Class<?> wildcardClass46 = parkingSpot20.getClass();
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.CancelCommand cancelCommand20 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        booking.UserType userType24 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand25 = new booking.BookCommand(bookingReceiver0, "", "CANCEL", (int) (byte) 1, userType24);
        booking.UserType userType26 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double27 = bookingReceiver0.getRate(userType26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.UserType.ordinal()\" because \"userType\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + userType24 + "' != '" + booking.UserType.FACULTY + "'", userType24.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.CancelCommand cancelCommand20 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        booking.UserType userType24 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand25 = new booking.BookCommand(bookingReceiver0, "", "CANCEL", (int) (byte) 1, userType24);
        booking.CancelCommand cancelCommand28 = new booking.CancelCommand(bookingReceiver0, "BOOK", "");
        java.lang.Class<?> wildcardClass29 = cancelCommand28.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + userType24 + "' != '" + booking.UserType.FACULTY + "'", userType24.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        java.lang.Class<?> wildcardClass13 = extendCommand12.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        java.lang.String str48 = bookingReceiver41.getAction();
        booking.UserType userType52 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver41, "hi!", "hi!", (int) (byte) 0, userType52);
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver37, "", "", (int) (byte) 100, userType52);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        booking.UserType userType68 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand69 = new booking.BookCommand(bookingReceiver58, "hi!", "hi!", 100, userType68);
        bookingReceiver37.bookSpace("hi!", "hi!", (int) (short) -1, userType68);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType68);
        booking.BookingReceiver bookingReceiver72 = new booking.BookingReceiver();
        bookingReceiver72.cancelBooking("hi!", "hi!");
        bookingReceiver72.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver79 = new booking.BookingReceiver();
        booking.UserType userType83 = booking.UserType.FACULTY;
        bookingReceiver79.bookSpace("", "", 100, userType83);
        double double85 = bookingReceiver72.getRate(userType83);
        booking.BookingReceiver bookingReceiver89 = new booking.BookingReceiver();
        bookingReceiver89.cancelBooking("hi!", "hi!");
        booking.UserType userType93 = booking.UserType.STUDENT;
        double double94 = bookingReceiver89.getRate(userType93);
        booking.BookCommand bookCommand95 = new booking.BookCommand(bookingReceiver72, "hi!", "CANCEL", (int) (short) 10, userType93);
        double double96 = bookingReceiver0.getRate(userType93);
        booking.CancelCommand cancelCommand99 = new booking.CancelCommand(bookingReceiver0, "hi!", "CANCEL");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + booking.UserType.NON_FACULTY + "'", userType52.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType68 + "' != '" + booking.UserType.FACULTY + "'", userType68.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType83 + "' != '" + booking.UserType.FACULTY + "'", userType83.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 8.0d + "'", double85 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType93 + "' != '" + booking.UserType.STUDENT + "'", userType93.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 5.0d + "'", double94 == 5.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 5.0d + "'", double96 == 5.0d);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        boolean boolean16 = parkingSpot2.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.freeSpot();
        boolean boolean2 = parkingSpot0.isOccupied();
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        parkingSpot3.occupySpot("hi!");
        booking.BookingSystem bookingSystem6 = new booking.BookingSystem((booking.Subject) parkingSpot3);
        booking.ParkingSpot parkingSpot7 = new booking.ParkingSpot();
        parkingSpot7.occupySpot("hi!");
        booking.BookingSystem bookingSystem10 = new booking.BookingSystem((booking.Subject) parkingSpot7);
        booking.ParkingSpot parkingSpot11 = new booking.ParkingSpot();
        parkingSpot11.occupySpot("hi!");
        bookingSystem10.update((booking.Subject) parkingSpot11);
        parkingSpot3.detach((booking.Observer) bookingSystem10);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        parkingSpot16.occupySpot("hi!");
        booking.BookingSystem bookingSystem19 = new booking.BookingSystem((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        parkingSpot20.occupySpot("hi!");
        booking.BookingSystem bookingSystem23 = new booking.BookingSystem((booking.Subject) parkingSpot20);
        booking.ParkingSpot parkingSpot24 = new booking.ParkingSpot();
        parkingSpot24.occupySpot("hi!");
        bookingSystem23.update((booking.Subject) parkingSpot24);
        parkingSpot16.detach((booking.Observer) bookingSystem23);
        parkingSpot3.detach((booking.Observer) bookingSystem23);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        booking.BookingSystem bookingSystem33 = new booking.BookingSystem((booking.Subject) parkingSpot30);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        bookingSystem37.update((booking.Subject) parkingSpot38);
        parkingSpot30.detach((booking.Observer) bookingSystem37);
        bookingSystem23.update((booking.Subject) parkingSpot30);
        booking.ParkingSensor parkingSensor44 = new booking.ParkingSensor((booking.Subject) parkingSpot30);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSensor44.update((booking.Subject) parkingSpot45);
        parkingSpot0.detach((booking.Observer) parkingSensor44);
        boolean boolean48 = parkingSpot0.isOccupied();
        boolean boolean49 = parkingSpot0.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        java.lang.String str9 = bookingReceiver2.getAction();
        booking.UserType userType13 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand14 = new booking.ExtendCommand(bookingReceiver2, "hi!", "hi!", (int) (byte) 0, userType13);
        extendCommand14.doAction();
        commandInvoker0.setCommand((booking.ICommand) extendCommand14);
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + userType13 + "' != '" + booking.UserType.NON_FACULTY + "'", userType13.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        boolean boolean13 = parkingSpot0.isOccupied();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSensor parkingSensor15 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        java.lang.Class<?> wildcardClass16 = parkingSpot0.getClass();
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        double double13 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver17 = new booking.BookingReceiver();
        bookingReceiver17.cancelBooking("hi!", "hi!");
        booking.UserType userType21 = booking.UserType.STUDENT;
        double double22 = bookingReceiver17.getRate(userType21);
        booking.BookCommand bookCommand23 = new booking.BookCommand(bookingReceiver0, "EXTEND", "", (int) (byte) 10, userType21);
        bookCommand23.doAction();
        java.lang.Class<?> wildcardClass25 = bookCommand23.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + userType21 + "' != '" + booking.UserType.STUDENT + "'", userType21.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        booking.UserType userType4 = booking.UserType.STUDENT;
        double double5 = bookingReceiver0.getRate(userType4);
        double double6 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("", "BOOK");
        booking.CancelCommand cancelCommand12 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        booking.CancelCommand cancelCommand15 = new booking.CancelCommand(bookingReceiver0, "CANCEL", "BOOK");
        java.lang.Class<?> wildcardClass16 = bookingReceiver0.getClass();
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.STUDENT + "'", userType4.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 5.0d + "'", double5 == 5.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        double double8 = bookingReceiver0.getDeposit();
        java.lang.String str9 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("", "CANCEL");
        java.lang.String str13 = bookingReceiver0.getAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CANCEL" + "'", str13, "CANCEL");
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        double double4 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("EXTEND", "hi!");
        booking.CancelCommand cancelCommand10 = new booking.CancelCommand(bookingReceiver0, "EXTEND", "EXTEND");
        booking.BookingReceiver bookingReceiver14 = new booking.BookingReceiver();
        bookingReceiver14.cancelBooking("hi!", "hi!");
        bookingReceiver14.cancelBooking("", "");
        booking.UserType userType21 = booking.UserType.STUDENT;
        double double22 = bookingReceiver14.getRate(userType21);
        booking.BookCommand bookCommand23 = new booking.BookCommand(bookingReceiver0, "EXTEND", "", (int) (byte) 0, userType21);
        bookingReceiver0.cancelBooking("BOOK", "EXTEND");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + userType21 + "' != '" + booking.UserType.STUDENT + "'", userType21.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.CancelCommand cancelCommand20 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        booking.BookingReceiver bookingReceiver24 = new booking.BookingReceiver();
        java.lang.String str25 = bookingReceiver24.getAction();
        booking.UserType userType29 = null;
        booking.ExtendCommand extendCommand30 = new booking.ExtendCommand(bookingReceiver24, "hi!", "", 100, userType29);
        booking.UserType userType34 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand35 = new booking.BookCommand(bookingReceiver24, "hi!", "hi!", 100, userType34);
        booking.UserType userType39 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand40 = new booking.ExtendCommand(bookingReceiver24, "", "", (int) (short) 1, userType39);
        bookingReceiver0.bookSpace("CANCEL", "EXTEND", (int) (byte) 10, userType39);
        booking.BookingReceiver bookingReceiver45 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver49 = new booking.BookingReceiver();
        java.lang.String str50 = bookingReceiver49.getAction();
        booking.UserType userType54 = null;
        booking.ExtendCommand extendCommand55 = new booking.ExtendCommand(bookingReceiver49, "hi!", "", 100, userType54);
        java.lang.String str56 = bookingReceiver49.getAction();
        booking.UserType userType60 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand61 = new booking.ExtendCommand(bookingReceiver49, "hi!", "hi!", (int) (byte) 0, userType60);
        booking.ExtendCommand extendCommand62 = new booking.ExtendCommand(bookingReceiver45, "", "", (int) (byte) 100, userType60);
        booking.BookingReceiver bookingReceiver66 = new booking.BookingReceiver();
        java.lang.String str67 = bookingReceiver66.getAction();
        booking.UserType userType71 = null;
        booking.ExtendCommand extendCommand72 = new booking.ExtendCommand(bookingReceiver66, "hi!", "", 100, userType71);
        booking.UserType userType76 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand77 = new booking.BookCommand(bookingReceiver66, "hi!", "hi!", 100, userType76);
        bookingReceiver45.bookSpace("hi!", "hi!", (int) (short) -1, userType76);
        bookingReceiver0.bookSpace("EXTEND", "hi!", (int) (byte) -1, userType76);
        double double80 = bookingReceiver0.getDeposit();
        double double81 = bookingReceiver0.getAmount();
        booking.CancelCommand cancelCommand84 = new booking.CancelCommand(bookingReceiver0, "hi!", "BOOK");
        cancelCommand84.doAction();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + userType34 + "' != '" + booking.UserType.FACULTY + "'", userType34.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.FACULTY + "'", userType39.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.NON_FACULTY + "'", userType60.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + userType76 + "' != '" + booking.UserType.FACULTY + "'", userType76.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 8.0d + "'", double80 == 8.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-8.0d) + "'", double81 == (-8.0d));
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = new booking.BookingReceiver();
        java.lang.String str2 = bookingReceiver1.getAction();
        booking.UserType userType6 = null;
        booking.ExtendCommand extendCommand7 = new booking.ExtendCommand(bookingReceiver1, "hi!", "", 100, userType6);
        booking.UserType userType11 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand12 = new booking.BookCommand(bookingReceiver1, "hi!", "hi!", 100, userType11);
        booking.UserType userType16 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver1, "", "", (int) (short) 1, userType16);
        commandInvoker0.setCommand((booking.ICommand) extendCommand17);
        booking.BookingReceiver bookingReceiver19 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver23 = new booking.BookingReceiver();
        java.lang.String str24 = bookingReceiver23.getAction();
        booking.UserType userType28 = null;
        booking.ExtendCommand extendCommand29 = new booking.ExtendCommand(bookingReceiver23, "hi!", "", 100, userType28);
        java.lang.String str30 = bookingReceiver23.getAction();
        booking.UserType userType34 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver23, "hi!", "hi!", (int) (byte) 0, userType34);
        booking.ExtendCommand extendCommand36 = new booking.ExtendCommand(bookingReceiver19, "", "", (int) (byte) 100, userType34);
        booking.BookingReceiver bookingReceiver40 = new booking.BookingReceiver();
        java.lang.String str41 = bookingReceiver40.getAction();
        booking.UserType userType45 = null;
        booking.ExtendCommand extendCommand46 = new booking.ExtendCommand(bookingReceiver40, "hi!", "", 100, userType45);
        booking.UserType userType50 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand51 = new booking.BookCommand(bookingReceiver40, "hi!", "hi!", 100, userType50);
        bookingReceiver19.bookSpace("hi!", "hi!", (int) (short) -1, userType50);
        booking.BookingReceiver bookingReceiver56 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver60 = new booking.BookingReceiver();
        java.lang.String str61 = bookingReceiver60.getAction();
        booking.UserType userType65 = null;
        booking.ExtendCommand extendCommand66 = new booking.ExtendCommand(bookingReceiver60, "hi!", "", 100, userType65);
        java.lang.String str67 = bookingReceiver60.getAction();
        booking.UserType userType71 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand72 = new booking.ExtendCommand(bookingReceiver60, "hi!", "hi!", (int) (byte) 0, userType71);
        booking.ExtendCommand extendCommand73 = new booking.ExtendCommand(bookingReceiver56, "", "", (int) (byte) 100, userType71);
        booking.BookingReceiver bookingReceiver77 = new booking.BookingReceiver();
        java.lang.String str78 = bookingReceiver77.getAction();
        booking.UserType userType82 = null;
        booking.ExtendCommand extendCommand83 = new booking.ExtendCommand(bookingReceiver77, "hi!", "", 100, userType82);
        booking.UserType userType87 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand88 = new booking.BookCommand(bookingReceiver77, "hi!", "hi!", 100, userType87);
        bookingReceiver56.bookSpace("hi!", "hi!", (int) (short) -1, userType87);
        booking.BookCommand bookCommand90 = new booking.BookCommand(bookingReceiver19, "hi!", "", 0, userType87);
        commandInvoker0.setCommand((booking.ICommand) bookCommand90);
        bookCommand90.doAction();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.FACULTY + "'", userType11.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType16 + "' != '" + booking.UserType.FACULTY + "'", userType16.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + userType34 + "' != '" + booking.UserType.NON_FACULTY + "'", userType34.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + userType50 + "' != '" + booking.UserType.FACULTY + "'", userType50.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + userType71 + "' != '" + booking.UserType.NON_FACULTY + "'", userType71.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + userType87 + "' != '" + booking.UserType.FACULTY + "'", userType87.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        bookingReceiver0.cancelBooking("", "");
        booking.CancelCommand cancelCommand9 = new booking.CancelCommand(bookingReceiver0, "", "hi!");
        booking.BookingReceiver bookingReceiver13 = new booking.BookingReceiver();
        java.lang.String str14 = bookingReceiver13.getAction();
        booking.UserType userType18 = null;
        booking.ExtendCommand extendCommand19 = new booking.ExtendCommand(bookingReceiver13, "hi!", "", 100, userType18);
        booking.BookingReceiver bookingReceiver23 = new booking.BookingReceiver();
        java.lang.String str24 = bookingReceiver23.getAction();
        booking.UserType userType28 = null;
        booking.ExtendCommand extendCommand29 = new booking.ExtendCommand(bookingReceiver23, "hi!", "", 100, userType28);
        booking.UserType userType33 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand34 = new booking.BookCommand(bookingReceiver23, "hi!", "hi!", 100, userType33);
        booking.BookingReceiver bookingReceiver38 = new booking.BookingReceiver();
        booking.UserType userType42 = booking.UserType.FACULTY;
        bookingReceiver38.bookSpace("", "", 100, userType42);
        bookingReceiver23.extendBooking("", "", (int) 'a', userType42);
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver13, "", "", 0, userType42);
        booking.BookingReceiver bookingReceiver46 = new booking.BookingReceiver();
        java.lang.String str47 = bookingReceiver46.getAction();
        booking.UserType userType51 = null;
        booking.ExtendCommand extendCommand52 = new booking.ExtendCommand(bookingReceiver46, "hi!", "", 100, userType51);
        java.lang.String str53 = bookingReceiver46.getAction();
        booking.UserType userType57 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand58 = new booking.ExtendCommand(bookingReceiver46, "hi!", "hi!", (int) (byte) 0, userType57);
        double double59 = bookingReceiver13.getRate(userType57);
        booking.UserType userType63 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver13, "hi!", "CANCEL", (int) ' ', userType63);
        bookingReceiver0.bookSpace("hi!", "hi!", 10, userType63);
        booking.BookingReceiver bookingReceiver69 = new booking.BookingReceiver();
        java.lang.String str70 = bookingReceiver69.getAction();
        booking.UserType userType74 = null;
        booking.ExtendCommand extendCommand75 = new booking.ExtendCommand(bookingReceiver69, "hi!", "", 100, userType74);
        booking.UserType userType79 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand80 = new booking.BookCommand(bookingReceiver69, "hi!", "hi!", 100, userType79);
        booking.UserType userType84 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand85 = new booking.ExtendCommand(bookingReceiver69, "", "", (int) (short) 1, userType84);
        bookingReceiver0.bookSpace("EXTEND", "BOOK", (int) 'a', userType84);
        java.lang.Class<?> wildcardClass87 = bookingReceiver0.getClass();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + userType33 + "' != '" + booking.UserType.FACULTY + "'", userType33.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType42 + "' != '" + booking.UserType.FACULTY + "'", userType42.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + userType57 + "' != '" + booking.UserType.NON_FACULTY + "'", userType57.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + userType63 + "' != '" + booking.UserType.NON_FACULTY + "'", userType63.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + userType79 + "' != '" + booking.UserType.FACULTY + "'", userType79.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType84 + "' != '" + booking.UserType.FACULTY + "'", userType84.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        java.lang.String str4 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver5 = null;
        booking.BookingReceiver bookingReceiver9 = new booking.BookingReceiver();
        booking.UserType userType13 = booking.UserType.FACULTY;
        bookingReceiver9.bookSpace("", "", 100, userType13);
        booking.BookCommand bookCommand15 = new booking.BookCommand(bookingReceiver5, "hi!", "", 0, userType13);
        double double16 = bookingReceiver0.getRate(userType13);
        booking.BookingReceiver bookingReceiver20 = new booking.BookingReceiver();
        java.lang.String str21 = bookingReceiver20.getAction();
        booking.UserType userType25 = null;
        booking.ExtendCommand extendCommand26 = new booking.ExtendCommand(bookingReceiver20, "hi!", "", 100, userType25);
        booking.UserType userType30 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand31 = new booking.BookCommand(bookingReceiver20, "hi!", "hi!", 100, userType30);
        booking.UserType userType35 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand36 = new booking.ExtendCommand(bookingReceiver20, "", "", (int) (short) 1, userType35);
        booking.BookingReceiver bookingReceiver40 = new booking.BookingReceiver();
        java.lang.String str41 = bookingReceiver40.getAction();
        booking.UserType userType45 = null;
        booking.ExtendCommand extendCommand46 = new booking.ExtendCommand(bookingReceiver40, "hi!", "", 100, userType45);
        java.lang.String str47 = bookingReceiver40.getAction();
        booking.UserType userType51 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand52 = new booking.ExtendCommand(bookingReceiver40, "hi!", "hi!", (int) (byte) 0, userType51);
        booking.BookingReceiver bookingReceiver56 = new booking.BookingReceiver();
        java.lang.String str57 = bookingReceiver56.getAction();
        booking.UserType userType61 = null;
        booking.ExtendCommand extendCommand62 = new booking.ExtendCommand(bookingReceiver56, "hi!", "", 100, userType61);
        java.lang.String str63 = bookingReceiver56.getAction();
        booking.UserType userType67 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand68 = new booking.ExtendCommand(bookingReceiver56, "hi!", "hi!", (int) (byte) 0, userType67);
        booking.ExtendCommand extendCommand69 = new booking.ExtendCommand(bookingReceiver40, "CANCEL", "CANCEL", (int) (short) 1, userType67);
        booking.BookingReceiver bookingReceiver73 = new booking.BookingReceiver();
        java.lang.String str74 = bookingReceiver73.getAction();
        booking.UserType userType78 = null;
        booking.ExtendCommand extendCommand79 = new booking.ExtendCommand(bookingReceiver73, "hi!", "", 100, userType78);
        booking.UserType userType83 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand84 = new booking.BookCommand(bookingReceiver73, "hi!", "hi!", 100, userType83);
        booking.BookingReceiver bookingReceiver88 = new booking.BookingReceiver();
        booking.UserType userType92 = booking.UserType.FACULTY;
        bookingReceiver88.bookSpace("", "", 100, userType92);
        bookingReceiver73.extendBooking("", "", (int) 'a', userType92);
        booking.UserType userType95 = booking.UserType.NON_FACULTY;
        double double96 = bookingReceiver73.getRate(userType95);
        bookingReceiver40.extendBooking("hi!", "", (int) (byte) -1, userType95);
        booking.ExtendCommand extendCommand98 = new booking.ExtendCommand(bookingReceiver20, "BOOK", "CANCEL", 0, userType95);
        booking.BookCommand bookCommand99 = new booking.BookCommand(bookingReceiver0, "CANCEL", "", 10, userType95);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CANCEL" + "'", str4, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType13 + "' != '" + booking.UserType.FACULTY + "'", userType13.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 8.0d + "'", double16 == 8.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + userType30 + "' != '" + booking.UserType.FACULTY + "'", userType30.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType35 + "' != '" + booking.UserType.FACULTY + "'", userType35.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + userType51 + "' != '" + booking.UserType.NON_FACULTY + "'", userType51.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + userType67 + "' != '" + booking.UserType.NON_FACULTY + "'", userType67.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + userType83 + "' != '" + booking.UserType.FACULTY + "'", userType83.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType92 + "' != '" + booking.UserType.FACULTY + "'", userType92.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType95 + "' != '" + booking.UserType.NON_FACULTY + "'", userType95.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 10.0d + "'", double96 == 10.0d);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        booking.CancelCommand cancelCommand15 = new booking.CancelCommand(bookingReceiver0, "hi!", "BOOK");
        bookingReceiver0.cancelBooking("CANCEL", "BOOK");
        double double19 = bookingReceiver0.getAmount();
        double double20 = bookingReceiver0.getAmount();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.freeSpot();
        boolean boolean43 = parkingSpot41.isOccupied();
        parkingSpot41.freeSpot();
        bookingSystem20.update((booking.Subject) parkingSpot41);
        booking.BookingSystem bookingSystem46 = new booking.BookingSystem((booking.Subject) parkingSpot41);
        java.lang.Class<?> wildcardClass47 = parkingSpot41.getClass();
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSpot2.detach((booking.Observer) bookingSystem22);
        parkingSpot2.occupySpot("CANCEL");
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.BookingSystem bookingSystem35 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        booking.BookingSystem bookingSystem39 = new booking.BookingSystem((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        bookingSystem39.update((booking.Subject) parkingSpot40);
        parkingSpot32.detach((booking.Observer) bookingSystem39);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        bookingSystem52.update((booking.Subject) parkingSpot53);
        parkingSpot45.detach((booking.Observer) bookingSystem52);
        parkingSpot32.detach((booking.Observer) bookingSystem52);
        booking.ParkingSpot parkingSpot59 = new booking.ParkingSpot();
        parkingSpot59.occupySpot("hi!");
        booking.BookingSystem bookingSystem62 = new booking.BookingSystem((booking.Subject) parkingSpot59);
        booking.ParkingSpot parkingSpot63 = new booking.ParkingSpot();
        parkingSpot63.occupySpot("hi!");
        booking.BookingSystem bookingSystem66 = new booking.BookingSystem((booking.Subject) parkingSpot63);
        booking.ParkingSpot parkingSpot67 = new booking.ParkingSpot();
        parkingSpot67.occupySpot("hi!");
        bookingSystem66.update((booking.Subject) parkingSpot67);
        parkingSpot59.detach((booking.Observer) bookingSystem66);
        bookingSystem52.update((booking.Subject) parkingSpot59);
        parkingSpot2.attach((booking.Observer) bookingSystem52);
        booking.ParkingSensor parkingSensor74 = new booking.ParkingSensor((booking.Subject) parkingSpot2);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSensor parkingSensor10 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        java.lang.Class<?> wildcardClass11 = parkingSpot4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor41 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor42 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        parkingSpot43.occupySpot("hi!");
        booking.BookingSystem bookingSystem46 = new booking.BookingSystem((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot47 = new booking.ParkingSpot();
        parkingSpot47.occupySpot("hi!");
        booking.BookingSystem bookingSystem50 = new booking.BookingSystem((booking.Subject) parkingSpot47);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        bookingSystem50.update((booking.Subject) parkingSpot51);
        parkingSpot43.detach((booking.Observer) bookingSystem50);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor57 = new booking.ParkingSensor((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        booking.BookingSystem bookingSystem65 = new booking.BookingSystem((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        bookingSystem65.update((booking.Subject) parkingSpot66);
        parkingSpot58.detach((booking.Observer) bookingSystem65);
        parkingSensor57.update((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor73 = new booking.ParkingSensor((booking.Subject) parkingSpot72);
        parkingSpot58.detach((booking.Observer) parkingSensor73);
        bookingSystem50.update((booking.Subject) parkingSpot58);
        parkingSpot58.freeSpot();
        parkingSensor42.update((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        parkingSpot78.freeSpot();
        boolean boolean80 = parkingSpot78.isOccupied();
        booking.ParkingSensor parkingSensor81 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        booking.ParkingSpot parkingSpot82 = new booking.ParkingSpot();
        parkingSpot82.occupySpot("hi!");
        booking.BookingSystem bookingSystem85 = new booking.BookingSystem((booking.Subject) parkingSpot82);
        booking.ParkingSpot parkingSpot86 = new booking.ParkingSpot();
        parkingSpot86.occupySpot("hi!");
        booking.BookingSystem bookingSystem89 = new booking.BookingSystem((booking.Subject) parkingSpot86);
        booking.ParkingSpot parkingSpot90 = new booking.ParkingSpot();
        parkingSpot90.occupySpot("hi!");
        bookingSystem89.update((booking.Subject) parkingSpot90);
        parkingSpot82.detach((booking.Observer) bookingSystem89);
        boolean boolean95 = parkingSpot82.isOccupied();
        booking.ParkingSensor parkingSensor96 = new booking.ParkingSensor((booking.Subject) parkingSpot82);
        booking.ParkingSensor parkingSensor97 = new booking.ParkingSensor((booking.Subject) parkingSpot82);
        parkingSensor81.update((booking.Subject) parkingSpot82);
        parkingSensor42.update((booking.Subject) parkingSpot82);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.freeSpot();
        boolean boolean43 = parkingSpot41.isOccupied();
        parkingSpot41.freeSpot();
        bookingSystem20.update((booking.Subject) parkingSpot41);
        booking.BookingSystem bookingSystem46 = new booking.BookingSystem((booking.Subject) parkingSpot41);
        booking.ParkingSensor parkingSensor47 = new booking.ParkingSensor((booking.Subject) parkingSpot41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        double double7 = bookingReceiver0.getDeposit();
        java.lang.String str8 = bookingReceiver0.getAction();
        double double9 = bookingReceiver0.getDeposit();
        double double10 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        boolean boolean51 = parkingSpot49.isOccupied();
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        booking.BookingSystem bookingSystem59 = new booking.BookingSystem((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        bookingSystem59.update((booking.Subject) parkingSpot60);
        parkingSpot52.detach((booking.Observer) bookingSystem59);
        booking.ParkingSpot parkingSpot65 = new booking.ParkingSpot();
        parkingSpot65.occupySpot("hi!");
        booking.BookingSystem bookingSystem68 = new booking.BookingSystem((booking.Subject) parkingSpot65);
        booking.ParkingSpot parkingSpot69 = new booking.ParkingSpot();
        parkingSpot69.occupySpot("hi!");
        booking.BookingSystem bookingSystem72 = new booking.BookingSystem((booking.Subject) parkingSpot69);
        booking.ParkingSpot parkingSpot73 = new booking.ParkingSpot();
        parkingSpot73.occupySpot("hi!");
        bookingSystem72.update((booking.Subject) parkingSpot73);
        parkingSpot65.detach((booking.Observer) bookingSystem72);
        parkingSpot52.detach((booking.Observer) bookingSystem72);
        booking.ParkingSpot parkingSpot79 = new booking.ParkingSpot();
        parkingSpot79.occupySpot("hi!");
        booking.BookingSystem bookingSystem82 = new booking.BookingSystem((booking.Subject) parkingSpot79);
        booking.ParkingSpot parkingSpot83 = new booking.ParkingSpot();
        parkingSpot83.occupySpot("hi!");
        booking.BookingSystem bookingSystem86 = new booking.BookingSystem((booking.Subject) parkingSpot83);
        booking.ParkingSpot parkingSpot87 = new booking.ParkingSpot();
        parkingSpot87.occupySpot("hi!");
        bookingSystem86.update((booking.Subject) parkingSpot87);
        parkingSpot79.detach((booking.Observer) bookingSystem86);
        bookingSystem72.update((booking.Subject) parkingSpot79);
        booking.ParkingSensor parkingSensor93 = new booking.ParkingSensor((booking.Subject) parkingSpot79);
        parkingSpot49.detach((booking.Observer) parkingSensor93);
        booking.BookingSystem bookingSystem95 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSensor parkingSensor96 = new booking.ParkingSensor((booking.Subject) parkingSpot49);
        java.lang.String str97 = parkingSpot49.getLicensePlate();
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        booking.Observer observer51 = null;
        parkingSpot49.attach(observer51);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        double double7 = bookingReceiver0.getDeposit();
        java.lang.String str8 = bookingReceiver0.getAction();
        double double9 = bookingReceiver0.getDeposit();
        bookingReceiver0.cancelBooking("", "");
        java.lang.Class<?> wildcardClass13 = bookingReceiver0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.BookingReceiver bookingReceiver50 = new booking.BookingReceiver();
        java.lang.String str51 = bookingReceiver50.getAction();
        booking.UserType userType55 = null;
        booking.ExtendCommand extendCommand56 = new booking.ExtendCommand(bookingReceiver50, "hi!", "", 100, userType55);
        booking.UserType userType60 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand61 = new booking.BookCommand(bookingReceiver50, "hi!", "hi!", 100, userType60);
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        booking.UserType userType69 = booking.UserType.FACULTY;
        bookingReceiver65.bookSpace("", "", 100, userType69);
        bookingReceiver50.extendBooking("", "", (int) 'a', userType69);
        booking.UserType userType72 = booking.UserType.NON_FACULTY;
        double double73 = bookingReceiver50.getRate(userType72);
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver0, "hi!", "BOOK", 1, userType72);
        booking.CancelCommand cancelCommand77 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        double double78 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType69 + "' != '" + booking.UserType.FACULTY + "'", userType69.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.NON_FACULTY + "'", userType72.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        double double4 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("EXTEND", "hi!");
        java.lang.String str8 = bookingReceiver0.getAction();
        java.lang.String str9 = bookingReceiver0.getAction();
        double double10 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CANCEL" + "'", str8, "CANCEL");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CANCEL" + "'", str9, "CANCEL");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        bookCommand11.doAction();
        bookCommand11.doAction();
        bookCommand11.doAction();
        bookCommand11.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        booking.BookingReceiver bookingReceiver11 = new booking.BookingReceiver();
        java.lang.String str12 = bookingReceiver11.getAction();
        booking.UserType userType16 = null;
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver11, "hi!", "", 100, userType16);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        booking.BookingReceiver bookingReceiver36 = new booking.BookingReceiver();
        booking.UserType userType40 = booking.UserType.FACULTY;
        bookingReceiver36.bookSpace("", "", 100, userType40);
        bookingReceiver21.extendBooking("", "", (int) 'a', userType40);
        booking.ExtendCommand extendCommand43 = new booking.ExtendCommand(bookingReceiver11, "", "", 0, userType40);
        booking.BookingReceiver bookingReceiver44 = new booking.BookingReceiver();
        java.lang.String str45 = bookingReceiver44.getAction();
        booking.UserType userType49 = null;
        booking.ExtendCommand extendCommand50 = new booking.ExtendCommand(bookingReceiver44, "hi!", "", 100, userType49);
        java.lang.String str51 = bookingReceiver44.getAction();
        booking.UserType userType55 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand56 = new booking.ExtendCommand(bookingReceiver44, "hi!", "hi!", (int) (byte) 0, userType55);
        double double57 = bookingReceiver11.getRate(userType55);
        double double58 = bookingReceiver0.getRate(userType55);
        booking.CancelCommand cancelCommand61 = new booking.CancelCommand(bookingReceiver0, "", "BOOK");
        double double62 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("hi!", "CANCEL");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType40 + "' != '" + booking.UserType.FACULTY + "'", userType40.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + userType55 + "' != '" + booking.UserType.NON_FACULTY + "'", userType55.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSpot2.detach((booking.Observer) bookingSystem22);
        parkingSpot2.occupySpot("CANCEL");
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        booking.BookingSystem bookingSystem41 = new booking.BookingSystem((booking.Subject) parkingSpot38);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        bookingSystem41.update((booking.Subject) parkingSpot42);
        parkingSpot34.detach((booking.Observer) bookingSystem41);
        parkingSensor33.update((booking.Subject) parkingSpot34);
        parkingSpot2.detach((booking.Observer) parkingSensor33);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        booking.BookingSystem bookingSystem56 = new booking.BookingSystem((booking.Subject) parkingSpot53);
        booking.ParkingSpot parkingSpot57 = new booking.ParkingSpot();
        parkingSpot57.occupySpot("hi!");
        bookingSystem56.update((booking.Subject) parkingSpot57);
        parkingSpot49.detach((booking.Observer) bookingSystem56);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor63 = new booking.ParkingSensor((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        bookingSystem71.update((booking.Subject) parkingSpot72);
        parkingSpot64.detach((booking.Observer) bookingSystem71);
        parkingSensor63.update((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor79 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        parkingSpot64.detach((booking.Observer) parkingSensor79);
        bookingSystem56.update((booking.Subject) parkingSpot64);
        parkingSensor33.update((booking.Subject) parkingSpot64);
        java.lang.Class<?> wildcardClass83 = parkingSensor33.getClass();
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        booking.UserType userType12 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand13 = new booking.BookCommand(bookingReceiver2, "hi!", "hi!", 100, userType12);
        bookCommand13.doAction();
        bookCommand13.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand13);
        bookCommand13.doAction();
        bookCommand13.doAction();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + booking.UserType.FACULTY + "'", userType12.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        double double13 = bookingReceiver0.getAmount();
        java.lang.String str14 = bookingReceiver0.getAction();
        double double15 = bookingReceiver0.getDeposit();
        double double16 = bookingReceiver0.getDeposit();
        booking.CancelCommand cancelCommand19 = new booking.CancelCommand(bookingReceiver0, "", "BOOK");
        cancelCommand19.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSpot parkingSpot1 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor2 = new booking.ParkingSensor((booking.Subject) parkingSpot1);
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        parkingSpot3.occupySpot("hi!");
        booking.BookingSystem bookingSystem6 = new booking.BookingSystem((booking.Subject) parkingSpot3);
        booking.ParkingSpot parkingSpot7 = new booking.ParkingSpot();
        parkingSpot7.occupySpot("hi!");
        booking.BookingSystem bookingSystem10 = new booking.BookingSystem((booking.Subject) parkingSpot7);
        booking.ParkingSpot parkingSpot11 = new booking.ParkingSpot();
        parkingSpot11.occupySpot("hi!");
        bookingSystem10.update((booking.Subject) parkingSpot11);
        parkingSpot3.detach((booking.Observer) bookingSystem10);
        parkingSensor2.update((booking.Subject) parkingSpot3);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor18 = new booking.ParkingSensor((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        booking.BookingSystem bookingSystem26 = new booking.BookingSystem((booking.Subject) parkingSpot23);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        bookingSystem26.update((booking.Subject) parkingSpot27);
        parkingSpot19.detach((booking.Observer) bookingSystem26);
        parkingSensor18.update((booking.Subject) parkingSpot19);
        parkingSpot3.detach((booking.Observer) parkingSensor18);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor35 = new booking.ParkingSensor((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        booking.BookingSystem bookingSystem39 = new booking.BookingSystem((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        booking.BookingSystem bookingSystem43 = new booking.BookingSystem((booking.Subject) parkingSpot40);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        bookingSystem43.update((booking.Subject) parkingSpot44);
        parkingSpot36.detach((booking.Observer) bookingSystem43);
        parkingSensor35.update((booking.Subject) parkingSpot36);
        booking.ParkingSensor parkingSensor50 = new booking.ParkingSensor((booking.Subject) parkingSpot36);
        parkingSpot3.attach((booking.Observer) parkingSensor50);
        parkingSpot0.attach((booking.Observer) parkingSensor50);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor54 = new booking.ParkingSensor((booking.Subject) parkingSpot53);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot55);
        booking.ParkingSpot parkingSpot59 = new booking.ParkingSpot();
        parkingSpot59.occupySpot("hi!");
        booking.BookingSystem bookingSystem62 = new booking.BookingSystem((booking.Subject) parkingSpot59);
        booking.ParkingSpot parkingSpot63 = new booking.ParkingSpot();
        parkingSpot63.occupySpot("hi!");
        bookingSystem62.update((booking.Subject) parkingSpot63);
        parkingSpot55.detach((booking.Observer) bookingSystem62);
        parkingSensor54.update((booking.Subject) parkingSpot55);
        booking.ParkingSpot parkingSpot69 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor70 = new booking.ParkingSensor((booking.Subject) parkingSpot69);
        booking.ParkingSpot parkingSpot71 = new booking.ParkingSpot();
        parkingSpot71.occupySpot("hi!");
        booking.BookingSystem bookingSystem74 = new booking.BookingSystem((booking.Subject) parkingSpot71);
        booking.ParkingSpot parkingSpot75 = new booking.ParkingSpot();
        parkingSpot75.occupySpot("hi!");
        booking.BookingSystem bookingSystem78 = new booking.BookingSystem((booking.Subject) parkingSpot75);
        booking.ParkingSpot parkingSpot79 = new booking.ParkingSpot();
        parkingSpot79.occupySpot("hi!");
        bookingSystem78.update((booking.Subject) parkingSpot79);
        parkingSpot71.detach((booking.Observer) bookingSystem78);
        parkingSensor70.update((booking.Subject) parkingSpot71);
        parkingSpot55.detach((booking.Observer) parkingSensor70);
        parkingSpot0.attach((booking.Observer) parkingSensor70);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor11 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        bookingSystem9.update((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        booking.BookingSystem bookingSystem47 = new booking.BookingSystem((booking.Subject) parkingSpot44);
        booking.ParkingSpot parkingSpot48 = new booking.ParkingSpot();
        parkingSpot48.occupySpot("hi!");
        booking.BookingSystem bookingSystem51 = new booking.BookingSystem((booking.Subject) parkingSpot48);
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        bookingSystem51.update((booking.Subject) parkingSpot52);
        parkingSpot44.detach((booking.Observer) bookingSystem51);
        parkingSpot31.detach((booking.Observer) bookingSystem51);
        parkingSpot31.occupySpot("CANCEL");
        parkingSensor30.update((booking.Subject) parkingSpot31);
        parkingSensor14.update((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSensor14.update((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        bookingSystem71.update((booking.Subject) parkingSpot72);
        parkingSpot64.detach((booking.Observer) bookingSystem71);
        parkingSpot62.detach((booking.Observer) bookingSystem71);
        parkingSpot10.attach((booking.Observer) bookingSystem71);
        boolean boolean79 = parkingSpot10.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        // The following exception was thrown during execution in test generation
        try {
            parkingSpot49.occupySpot("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: License plate must not be null or empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        double double13 = bookingReceiver0.getAmount();
        java.lang.String str14 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver18 = new booking.BookingReceiver();
        java.lang.String str19 = bookingReceiver18.getAction();
        booking.UserType userType23 = null;
        booking.ExtendCommand extendCommand24 = new booking.ExtendCommand(bookingReceiver18, "hi!", "", 100, userType23);
        booking.BookingReceiver bookingReceiver28 = new booking.BookingReceiver();
        java.lang.String str29 = bookingReceiver28.getAction();
        booking.UserType userType33 = null;
        booking.ExtendCommand extendCommand34 = new booking.ExtendCommand(bookingReceiver28, "hi!", "", 100, userType33);
        booking.UserType userType38 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand39 = new booking.BookCommand(bookingReceiver28, "hi!", "hi!", 100, userType38);
        booking.BookingReceiver bookingReceiver43 = new booking.BookingReceiver();
        booking.UserType userType47 = booking.UserType.FACULTY;
        bookingReceiver43.bookSpace("", "", 100, userType47);
        bookingReceiver28.extendBooking("", "", (int) 'a', userType47);
        booking.ExtendCommand extendCommand50 = new booking.ExtendCommand(bookingReceiver18, "", "", 0, userType47);
        booking.BookCommand bookCommand51 = new booking.BookCommand(bookingReceiver0, "hi!", "", 1, userType47);
        booking.BookingReceiver bookingReceiver55 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver59 = new booking.BookingReceiver();
        java.lang.String str60 = bookingReceiver59.getAction();
        booking.UserType userType64 = null;
        booking.ExtendCommand extendCommand65 = new booking.ExtendCommand(bookingReceiver59, "hi!", "", 100, userType64);
        java.lang.String str66 = bookingReceiver59.getAction();
        booking.UserType userType70 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand71 = new booking.ExtendCommand(bookingReceiver59, "hi!", "hi!", (int) (byte) 0, userType70);
        booking.ExtendCommand extendCommand72 = new booking.ExtendCommand(bookingReceiver55, "", "", (int) (byte) 100, userType70);
        booking.CancelCommand cancelCommand75 = new booking.CancelCommand(bookingReceiver55, "hi!", "hi!");
        booking.BookingReceiver bookingReceiver79 = new booking.BookingReceiver();
        java.lang.String str80 = bookingReceiver79.getAction();
        booking.UserType userType84 = null;
        booking.ExtendCommand extendCommand85 = new booking.ExtendCommand(bookingReceiver79, "hi!", "", 100, userType84);
        booking.UserType userType89 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand90 = new booking.BookCommand(bookingReceiver79, "hi!", "hi!", 100, userType89);
        booking.UserType userType94 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand95 = new booking.ExtendCommand(bookingReceiver79, "", "", (int) (short) 1, userType94);
        bookingReceiver55.bookSpace("CANCEL", "EXTEND", (int) (byte) 10, userType94);
        bookingReceiver0.extendBooking("CANCEL", "hi!", (int) (byte) 100, userType94);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + userType38 + "' != '" + booking.UserType.FACULTY + "'", userType38.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType47 + "' != '" + booking.UserType.FACULTY + "'", userType47.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + userType70 + "' != '" + booking.UserType.NON_FACULTY + "'", userType70.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + userType89 + "' != '" + booking.UserType.FACULTY + "'", userType89.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType94 + "' != '" + booking.UserType.FACULTY + "'", userType94.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        boolean boolean51 = parkingSpot49.isOccupied();
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        booking.BookingSystem bookingSystem59 = new booking.BookingSystem((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        bookingSystem59.update((booking.Subject) parkingSpot60);
        parkingSpot52.detach((booking.Observer) bookingSystem59);
        booking.ParkingSpot parkingSpot65 = new booking.ParkingSpot();
        parkingSpot65.occupySpot("hi!");
        booking.BookingSystem bookingSystem68 = new booking.BookingSystem((booking.Subject) parkingSpot65);
        booking.ParkingSpot parkingSpot69 = new booking.ParkingSpot();
        parkingSpot69.occupySpot("hi!");
        booking.BookingSystem bookingSystem72 = new booking.BookingSystem((booking.Subject) parkingSpot69);
        booking.ParkingSpot parkingSpot73 = new booking.ParkingSpot();
        parkingSpot73.occupySpot("hi!");
        bookingSystem72.update((booking.Subject) parkingSpot73);
        parkingSpot65.detach((booking.Observer) bookingSystem72);
        parkingSpot52.detach((booking.Observer) bookingSystem72);
        booking.ParkingSpot parkingSpot79 = new booking.ParkingSpot();
        parkingSpot79.occupySpot("hi!");
        booking.BookingSystem bookingSystem82 = new booking.BookingSystem((booking.Subject) parkingSpot79);
        booking.ParkingSpot parkingSpot83 = new booking.ParkingSpot();
        parkingSpot83.occupySpot("hi!");
        booking.BookingSystem bookingSystem86 = new booking.BookingSystem((booking.Subject) parkingSpot83);
        booking.ParkingSpot parkingSpot87 = new booking.ParkingSpot();
        parkingSpot87.occupySpot("hi!");
        bookingSystem86.update((booking.Subject) parkingSpot87);
        parkingSpot79.detach((booking.Observer) bookingSystem86);
        bookingSystem72.update((booking.Subject) parkingSpot79);
        booking.ParkingSensor parkingSensor93 = new booking.ParkingSensor((booking.Subject) parkingSpot79);
        parkingSpot49.detach((booking.Observer) parkingSensor93);
        booking.BookingSystem bookingSystem95 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSensor parkingSensor96 = new booking.ParkingSensor((booking.Subject) parkingSpot49);
        booking.BookingSystem bookingSystem97 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot15.detach((booking.Observer) parkingSensor30);
        bookingSystem7.update((booking.Subject) parkingSpot15);
        java.lang.String str33 = parkingSpot15.getLicensePlate();
        java.lang.String str34 = parkingSpot15.getLicensePlate();
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        booking.UserType userType4 = booking.UserType.STUDENT;
        double double5 = bookingReceiver0.getRate(userType4);
        booking.CancelCommand cancelCommand8 = new booking.CancelCommand(bookingReceiver0, "BOOK", "hi!");
        booking.BookingReceiver bookingReceiver12 = new booking.BookingReceiver();
        bookingReceiver12.cancelBooking("hi!", "hi!");
        bookingReceiver12.cancelBooking("", "");
        booking.UserType userType19 = booking.UserType.STUDENT;
        double double20 = bookingReceiver12.getRate(userType19);
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver0, "", "hi!", (int) '#', userType19);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        bookingReceiver25.cancelBooking("hi!", "hi!");
        java.lang.String str29 = bookingReceiver25.getAction();
        booking.BookingReceiver bookingReceiver30 = null;
        booking.BookingReceiver bookingReceiver34 = new booking.BookingReceiver();
        booking.UserType userType38 = booking.UserType.FACULTY;
        bookingReceiver34.bookSpace("", "", 100, userType38);
        booking.BookCommand bookCommand40 = new booking.BookCommand(bookingReceiver30, "hi!", "", 0, userType38);
        double double41 = bookingReceiver25.getRate(userType38);
        bookingReceiver0.extendBooking("hi!", "CANCEL", (int) (short) 1, userType38);
        java.lang.String str43 = bookingReceiver0.getAction();
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.STUDENT + "'", userType4.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 5.0d + "'", double5 == 5.0d);
        org.junit.Assert.assertTrue("'" + userType19 + "' != '" + booking.UserType.STUDENT + "'", userType19.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5.0d + "'", double20 == 5.0d);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CANCEL" + "'", str29, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType38 + "' != '" + booking.UserType.FACULTY + "'", userType38.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 8.0d + "'", double41 == 8.0d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "EXTEND" + "'", str43, "EXTEND");
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        parkingSpot3.occupySpot("hi!");
        booking.BookingSystem bookingSystem6 = new booking.BookingSystem((booking.Subject) parkingSpot3);
        booking.ParkingSpot parkingSpot7 = new booking.ParkingSpot();
        parkingSpot7.occupySpot("hi!");
        booking.BookingSystem bookingSystem10 = new booking.BookingSystem((booking.Subject) parkingSpot7);
        booking.ParkingSpot parkingSpot11 = new booking.ParkingSpot();
        parkingSpot11.occupySpot("hi!");
        bookingSystem10.update((booking.Subject) parkingSpot11);
        parkingSpot3.detach((booking.Observer) bookingSystem10);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        parkingSpot16.occupySpot("hi!");
        booking.BookingSystem bookingSystem19 = new booking.BookingSystem((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        parkingSpot20.occupySpot("hi!");
        booking.BookingSystem bookingSystem23 = new booking.BookingSystem((booking.Subject) parkingSpot20);
        booking.ParkingSpot parkingSpot24 = new booking.ParkingSpot();
        parkingSpot24.occupySpot("hi!");
        bookingSystem23.update((booking.Subject) parkingSpot24);
        parkingSpot16.detach((booking.Observer) bookingSystem23);
        parkingSpot3.detach((booking.Observer) bookingSystem23);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        booking.BookingSystem bookingSystem33 = new booking.BookingSystem((booking.Subject) parkingSpot30);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        bookingSystem37.update((booking.Subject) parkingSpot38);
        parkingSpot30.detach((booking.Observer) bookingSystem37);
        bookingSystem23.update((booking.Subject) parkingSpot30);
        parkingSpot0.attach((booking.Observer) bookingSystem23);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        bookingSystem52.update((booking.Subject) parkingSpot53);
        parkingSpot45.detach((booking.Observer) bookingSystem52);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        booking.BookingSystem bookingSystem65 = new booking.BookingSystem((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        bookingSystem65.update((booking.Subject) parkingSpot66);
        parkingSpot58.detach((booking.Observer) bookingSystem65);
        parkingSpot45.detach((booking.Observer) bookingSystem65);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        booking.BookingSystem bookingSystem75 = new booking.BookingSystem((booking.Subject) parkingSpot72);
        booking.ParkingSpot parkingSpot76 = new booking.ParkingSpot();
        parkingSpot76.occupySpot("hi!");
        booking.BookingSystem bookingSystem79 = new booking.BookingSystem((booking.Subject) parkingSpot76);
        booking.ParkingSpot parkingSpot80 = new booking.ParkingSpot();
        parkingSpot80.occupySpot("hi!");
        bookingSystem79.update((booking.Subject) parkingSpot80);
        parkingSpot72.detach((booking.Observer) bookingSystem79);
        bookingSystem65.update((booking.Subject) parkingSpot72);
        booking.ParkingSensor parkingSensor86 = new booking.ParkingSensor((booking.Subject) parkingSpot72);
        booking.ParkingSpot parkingSpot87 = new booking.ParkingSpot();
        parkingSensor86.update((booking.Subject) parkingSpot87);
        parkingSpot0.attach((booking.Observer) parkingSensor86);
        java.lang.Class<?> wildcardClass90 = parkingSpot0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        bookingReceiver0.cancelBooking("", "");
        booking.CancelCommand cancelCommand9 = new booking.CancelCommand(bookingReceiver0, "", "hi!");
        booking.BookingReceiver bookingReceiver13 = new booking.BookingReceiver();
        java.lang.String str14 = bookingReceiver13.getAction();
        booking.UserType userType18 = null;
        booking.ExtendCommand extendCommand19 = new booking.ExtendCommand(bookingReceiver13, "hi!", "", 100, userType18);
        booking.BookingReceiver bookingReceiver23 = new booking.BookingReceiver();
        java.lang.String str24 = bookingReceiver23.getAction();
        booking.UserType userType28 = null;
        booking.ExtendCommand extendCommand29 = new booking.ExtendCommand(bookingReceiver23, "hi!", "", 100, userType28);
        booking.UserType userType33 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand34 = new booking.BookCommand(bookingReceiver23, "hi!", "hi!", 100, userType33);
        booking.BookingReceiver bookingReceiver38 = new booking.BookingReceiver();
        booking.UserType userType42 = booking.UserType.FACULTY;
        bookingReceiver38.bookSpace("", "", 100, userType42);
        bookingReceiver23.extendBooking("", "", (int) 'a', userType42);
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver13, "", "", 0, userType42);
        booking.BookingReceiver bookingReceiver46 = new booking.BookingReceiver();
        java.lang.String str47 = bookingReceiver46.getAction();
        booking.UserType userType51 = null;
        booking.ExtendCommand extendCommand52 = new booking.ExtendCommand(bookingReceiver46, "hi!", "", 100, userType51);
        java.lang.String str53 = bookingReceiver46.getAction();
        booking.UserType userType57 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand58 = new booking.ExtendCommand(bookingReceiver46, "hi!", "hi!", (int) (byte) 0, userType57);
        double double59 = bookingReceiver13.getRate(userType57);
        booking.UserType userType63 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver13, "hi!", "CANCEL", (int) ' ', userType63);
        bookingReceiver0.bookSpace("hi!", "hi!", 10, userType63);
        double double66 = bookingReceiver0.getDeposit();
        booking.BookingReceiver bookingReceiver67 = new booking.BookingReceiver();
        java.lang.String str68 = bookingReceiver67.getAction();
        booking.UserType userType72 = null;
        booking.ExtendCommand extendCommand73 = new booking.ExtendCommand(bookingReceiver67, "hi!", "", 100, userType72);
        java.lang.String str74 = bookingReceiver67.getAction();
        booking.UserType userType78 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand79 = new booking.ExtendCommand(bookingReceiver67, "hi!", "hi!", (int) (byte) 0, userType78);
        double double80 = bookingReceiver0.getRate(userType78);
        booking.CancelCommand cancelCommand83 = new booking.CancelCommand(bookingReceiver0, "", "EXTEND");
        cancelCommand83.doAction();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + userType33 + "' != '" + booking.UserType.FACULTY + "'", userType33.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType42 + "' != '" + booking.UserType.FACULTY + "'", userType42.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + userType57 + "' != '" + booking.UserType.NON_FACULTY + "'", userType57.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + userType63 + "' != '" + booking.UserType.NON_FACULTY + "'", userType63.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + userType78 + "' != '" + booking.UserType.NON_FACULTY + "'", userType78.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 10.0d + "'", double80 == 10.0d);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.Subject subject49 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingSensor1.update(subject49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Object.equals(Object)\" because \"changedSubject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        boolean boolean51 = parkingSpot49.isOccupied();
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        booking.BookingSystem bookingSystem59 = new booking.BookingSystem((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        bookingSystem59.update((booking.Subject) parkingSpot60);
        parkingSpot52.detach((booking.Observer) bookingSystem59);
        boolean boolean65 = parkingSpot52.isOccupied();
        booking.ParkingSensor parkingSensor66 = new booking.ParkingSensor((booking.Subject) parkingSpot52);
        booking.ParkingSensor parkingSensor67 = new booking.ParkingSensor((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        booking.BookingSystem bookingSystem75 = new booking.BookingSystem((booking.Subject) parkingSpot72);
        bookingSystem71.update((booking.Subject) parkingSpot72);
        booking.BookingSystem bookingSystem77 = new booking.BookingSystem((booking.Subject) parkingSpot72);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor79 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        bookingSystem77.update((booking.Subject) parkingSpot78);
        parkingSpot78.occupySpot("CANCEL");
        booking.ParkingSpot parkingSpot83 = new booking.ParkingSpot();
        parkingSpot83.occupySpot("hi!");
        booking.BookingSystem bookingSystem86 = new booking.BookingSystem((booking.Subject) parkingSpot83);
        booking.ParkingSpot parkingSpot87 = new booking.ParkingSpot();
        parkingSpot87.occupySpot("hi!");
        booking.BookingSystem bookingSystem90 = new booking.BookingSystem((booking.Subject) parkingSpot87);
        bookingSystem86.update((booking.Subject) parkingSpot87);
        booking.BookingSystem bookingSystem92 = new booking.BookingSystem((booking.Subject) parkingSpot87);
        parkingSpot78.attach((booking.Observer) bookingSystem92);
        parkingSensor67.update((booking.Subject) parkingSpot78);
        parkingSpot49.attach((booking.Observer) parkingSensor67);
        // The following exception was thrown during execution in test generation
        try {
            parkingSpot49.occupySpot("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: License plate must not be null or empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        boolean boolean41 = parkingSpot27.isOccupied();
        booking.ParkingSensor parkingSensor42 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.Subject subject43 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingSensor42.update(subject43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Object.equals(Object)\" because \"changedSubject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        bookingSystem3.update((booking.Subject) parkingSpot4);
        boolean boolean8 = parkingSpot4.isOccupied();
        booking.ParkingSpot parkingSpot9 = new booking.ParkingSpot();
        parkingSpot9.occupySpot("hi!");
        booking.BookingSystem bookingSystem12 = new booking.BookingSystem((booking.Subject) parkingSpot9);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        bookingSystem16.update((booking.Subject) parkingSpot17);
        parkingSpot9.detach((booking.Observer) bookingSystem16);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        booking.BookingSystem bookingSystem29 = new booking.BookingSystem((booking.Subject) parkingSpot26);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        bookingSystem29.update((booking.Subject) parkingSpot30);
        parkingSpot22.detach((booking.Observer) bookingSystem29);
        parkingSpot9.detach((booking.Observer) bookingSystem29);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        booking.BookingSystem bookingSystem39 = new booking.BookingSystem((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        booking.BookingSystem bookingSystem43 = new booking.BookingSystem((booking.Subject) parkingSpot40);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        bookingSystem43.update((booking.Subject) parkingSpot44);
        parkingSpot36.detach((booking.Observer) bookingSystem43);
        bookingSystem29.update((booking.Subject) parkingSpot36);
        booking.ParkingSensor parkingSensor50 = new booking.ParkingSensor((booking.Subject) parkingSpot36);
        booking.ParkingSensor parkingSensor51 = new booking.ParkingSensor((booking.Subject) parkingSpot36);
        booking.ParkingSensor parkingSensor52 = new booking.ParkingSensor((booking.Subject) parkingSpot36);
        parkingSpot4.attach((booking.Observer) parkingSensor52);
        java.lang.Class<?> wildcardClass54 = parkingSpot4.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        booking.UserType userType12 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand13 = new booking.BookCommand(bookingReceiver2, "hi!", "hi!", 100, userType12);
        bookCommand13.doAction();
        bookCommand13.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand13);
        booking.BookingReceiver bookingReceiver17 = new booking.BookingReceiver();
        java.lang.String str18 = bookingReceiver17.getAction();
        booking.UserType userType22 = null;
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver17, "hi!", "", 100, userType22);
        booking.UserType userType27 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand28 = new booking.BookCommand(bookingReceiver17, "hi!", "hi!", 100, userType27);
        booking.UserType userType32 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand33 = new booking.ExtendCommand(bookingReceiver17, "", "", (int) (short) 1, userType32);
        commandInvoker0.setCommand((booking.ICommand) extendCommand33);
        booking.BookingReceiver bookingReceiver35 = new booking.BookingReceiver();
        java.lang.String str36 = bookingReceiver35.getAction();
        booking.UserType userType40 = null;
        booking.ExtendCommand extendCommand41 = new booking.ExtendCommand(bookingReceiver35, "hi!", "", 100, userType40);
        booking.UserType userType45 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand46 = new booking.BookCommand(bookingReceiver35, "hi!", "hi!", 100, userType45);
        bookCommand46.doAction();
        bookCommand46.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand46);
        bookCommand46.doAction();
        bookCommand46.doAction();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + booking.UserType.FACULTY + "'", userType12.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + userType27 + "' != '" + booking.UserType.FACULTY + "'", userType27.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType32 + "' != '" + booking.UserType.FACULTY + "'", userType32.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + userType45 + "' != '" + booking.UserType.FACULTY + "'", userType45.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        java.lang.String str4 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver5 = null;
        booking.BookingReceiver bookingReceiver9 = new booking.BookingReceiver();
        booking.UserType userType13 = booking.UserType.FACULTY;
        bookingReceiver9.bookSpace("", "", 100, userType13);
        booking.BookCommand bookCommand15 = new booking.BookCommand(bookingReceiver5, "hi!", "", 0, userType13);
        double double16 = bookingReceiver0.getRate(userType13);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand21 = new booking.ExtendCommand(bookingReceiver0, "BOOK", "EXTEND", (int) (short) 10, userType20);
        extendCommand21.doAction();
        extendCommand21.doAction();
        extendCommand21.doAction();
        extendCommand21.doAction();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CANCEL" + "'", str4, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType13 + "' != '" + booking.UserType.FACULTY + "'", userType13.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 8.0d + "'", double16 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.UserType userType15 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (short) 1, userType15);
        booking.BookingReceiver bookingReceiver20 = new booking.BookingReceiver();
        java.lang.String str21 = bookingReceiver20.getAction();
        booking.UserType userType25 = null;
        booking.ExtendCommand extendCommand26 = new booking.ExtendCommand(bookingReceiver20, "hi!", "", 100, userType25);
        java.lang.String str27 = bookingReceiver20.getAction();
        booking.UserType userType31 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver20, "hi!", "hi!", (int) (byte) 0, userType31);
        booking.BookingReceiver bookingReceiver36 = new booking.BookingReceiver();
        java.lang.String str37 = bookingReceiver36.getAction();
        booking.UserType userType41 = null;
        booking.ExtendCommand extendCommand42 = new booking.ExtendCommand(bookingReceiver36, "hi!", "", 100, userType41);
        java.lang.String str43 = bookingReceiver36.getAction();
        booking.UserType userType47 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand48 = new booking.ExtendCommand(bookingReceiver36, "hi!", "hi!", (int) (byte) 0, userType47);
        booking.ExtendCommand extendCommand49 = new booking.ExtendCommand(bookingReceiver20, "CANCEL", "CANCEL", (int) (short) 1, userType47);
        booking.BookingReceiver bookingReceiver53 = new booking.BookingReceiver();
        java.lang.String str54 = bookingReceiver53.getAction();
        booking.UserType userType58 = null;
        booking.ExtendCommand extendCommand59 = new booking.ExtendCommand(bookingReceiver53, "hi!", "", 100, userType58);
        booking.UserType userType63 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand64 = new booking.BookCommand(bookingReceiver53, "hi!", "hi!", 100, userType63);
        booking.BookingReceiver bookingReceiver68 = new booking.BookingReceiver();
        booking.UserType userType72 = booking.UserType.FACULTY;
        bookingReceiver68.bookSpace("", "", 100, userType72);
        bookingReceiver53.extendBooking("", "", (int) 'a', userType72);
        booking.UserType userType75 = booking.UserType.NON_FACULTY;
        double double76 = bookingReceiver53.getRate(userType75);
        bookingReceiver20.extendBooking("hi!", "", (int) (byte) -1, userType75);
        booking.ExtendCommand extendCommand78 = new booking.ExtendCommand(bookingReceiver0, "BOOK", "CANCEL", 0, userType75);
        extendCommand78.doAction();
        extendCommand78.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.FACULTY + "'", userType15.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.NON_FACULTY + "'", userType31.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + userType47 + "' != '" + booking.UserType.NON_FACULTY + "'", userType47.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + userType63 + "' != '" + booking.UserType.FACULTY + "'", userType63.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.FACULTY + "'", userType72.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType75 + "' != '" + booking.UserType.NON_FACULTY + "'", userType75.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 10.0d + "'", double76 == 10.0d);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        boolean boolean9 = parkingSpot4.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSensor parkingSensor16 = new booking.ParkingSensor((booking.Subject) parkingSpot2);
        java.lang.String str17 = parkingSpot2.getLicensePlate();
        parkingSpot2.occupySpot("CANCEL");
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor21 = new booking.ParkingSensor((booking.Subject) parkingSpot20);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        booking.BookingSystem bookingSystem29 = new booking.BookingSystem((booking.Subject) parkingSpot26);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        bookingSystem29.update((booking.Subject) parkingSpot30);
        parkingSpot22.detach((booking.Observer) bookingSystem29);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        booking.BookingSystem bookingSystem42 = new booking.BookingSystem((booking.Subject) parkingSpot39);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        parkingSpot43.occupySpot("hi!");
        bookingSystem42.update((booking.Subject) parkingSpot43);
        parkingSpot35.detach((booking.Observer) bookingSystem42);
        parkingSpot22.detach((booking.Observer) bookingSystem42);
        parkingSpot22.occupySpot("CANCEL");
        parkingSensor21.update((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor53 = new booking.ParkingSensor((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        booking.BookingSystem bookingSystem57 = new booking.BookingSystem((booking.Subject) parkingSpot54);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        bookingSystem61.update((booking.Subject) parkingSpot62);
        parkingSpot54.detach((booking.Observer) bookingSystem61);
        parkingSensor53.update((booking.Subject) parkingSpot54);
        parkingSpot22.detach((booking.Observer) parkingSensor53);
        booking.ParkingSpot parkingSpot69 = new booking.ParkingSpot();
        parkingSpot69.occupySpot("hi!");
        booking.BookingSystem bookingSystem72 = new booking.BookingSystem((booking.Subject) parkingSpot69);
        booking.ParkingSpot parkingSpot73 = new booking.ParkingSpot();
        parkingSpot73.occupySpot("hi!");
        booking.BookingSystem bookingSystem76 = new booking.BookingSystem((booking.Subject) parkingSpot73);
        bookingSystem72.update((booking.Subject) parkingSpot73);
        booking.BookingSystem bookingSystem78 = new booking.BookingSystem((booking.Subject) parkingSpot73);
        parkingSpot22.detach((booking.Observer) bookingSystem78);
        parkingSpot2.detach((booking.Observer) bookingSystem78);
        booking.ParkingSpot parkingSpot81 = new booking.ParkingSpot();
        parkingSpot81.occupySpot("hi!");
        booking.BookingSystem bookingSystem84 = new booking.BookingSystem((booking.Subject) parkingSpot81);
        booking.ParkingSpot parkingSpot85 = new booking.ParkingSpot();
        parkingSpot85.occupySpot("hi!");
        booking.BookingSystem bookingSystem88 = new booking.BookingSystem((booking.Subject) parkingSpot85);
        booking.ParkingSpot parkingSpot89 = new booking.ParkingSpot();
        parkingSpot89.occupySpot("hi!");
        bookingSystem88.update((booking.Subject) parkingSpot89);
        parkingSpot81.detach((booking.Observer) bookingSystem88);
        parkingSpot2.detach((booking.Observer) bookingSystem88);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor11 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        bookingSystem9.update((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        booking.BookingSystem bookingSystem47 = new booking.BookingSystem((booking.Subject) parkingSpot44);
        booking.ParkingSpot parkingSpot48 = new booking.ParkingSpot();
        parkingSpot48.occupySpot("hi!");
        booking.BookingSystem bookingSystem51 = new booking.BookingSystem((booking.Subject) parkingSpot48);
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        bookingSystem51.update((booking.Subject) parkingSpot52);
        parkingSpot44.detach((booking.Observer) bookingSystem51);
        parkingSpot31.detach((booking.Observer) bookingSystem51);
        parkingSpot31.occupySpot("CANCEL");
        parkingSensor30.update((booking.Subject) parkingSpot31);
        parkingSensor14.update((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSensor14.update((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        bookingSystem71.update((booking.Subject) parkingSpot72);
        parkingSpot64.detach((booking.Observer) bookingSystem71);
        parkingSpot62.detach((booking.Observer) bookingSystem71);
        parkingSpot10.attach((booking.Observer) bookingSystem71);
        java.lang.String str79 = parkingSpot10.getLicensePlate();
        booking.ParkingSensor parkingSensor80 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        parkingSpot10.occupySpot("hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        bookingSystem3.update((booking.Subject) parkingSpot4);
        boolean boolean8 = parkingSpot4.isOccupied();
        booking.ParkingSpot parkingSpot9 = new booking.ParkingSpot();
        parkingSpot9.occupySpot("hi!");
        booking.BookingSystem bookingSystem12 = new booking.BookingSystem((booking.Subject) parkingSpot9);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        bookingSystem16.update((booking.Subject) parkingSpot17);
        parkingSpot9.detach((booking.Observer) bookingSystem16);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        booking.BookingSystem bookingSystem29 = new booking.BookingSystem((booking.Subject) parkingSpot26);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        bookingSystem29.update((booking.Subject) parkingSpot30);
        parkingSpot22.detach((booking.Observer) bookingSystem29);
        parkingSpot9.detach((booking.Observer) bookingSystem29);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        booking.BookingSystem bookingSystem39 = new booking.BookingSystem((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        booking.BookingSystem bookingSystem43 = new booking.BookingSystem((booking.Subject) parkingSpot40);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        bookingSystem43.update((booking.Subject) parkingSpot44);
        parkingSpot36.detach((booking.Observer) bookingSystem43);
        bookingSystem29.update((booking.Subject) parkingSpot36);
        booking.ParkingSensor parkingSensor50 = new booking.ParkingSensor((booking.Subject) parkingSpot36);
        booking.ParkingSensor parkingSensor51 = new booking.ParkingSensor((booking.Subject) parkingSpot36);
        booking.ParkingSensor parkingSensor52 = new booking.ParkingSensor((booking.Subject) parkingSpot36);
        parkingSpot4.attach((booking.Observer) parkingSensor52);
        booking.ParkingSensor parkingSensor54 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.ParkingSensor parkingSensor55 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        parkingSpot4.freeSpot();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = null;
        booking.BookingReceiver bookingReceiver5 = new booking.BookingReceiver();
        booking.UserType userType9 = booking.UserType.FACULTY;
        bookingReceiver5.bookSpace("", "", 100, userType9);
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver1, "hi!", "", 0, userType9);
        commandInvoker0.setCommand((booking.ICommand) bookCommand11);
        booking.BookingReceiver bookingReceiver13 = new booking.BookingReceiver();
        java.lang.String str14 = bookingReceiver13.getAction();
        booking.UserType userType18 = null;
        booking.ExtendCommand extendCommand19 = new booking.ExtendCommand(bookingReceiver13, "hi!", "", 100, userType18);
        booking.UserType userType23 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand24 = new booking.BookCommand(bookingReceiver13, "hi!", "hi!", 100, userType23);
        bookCommand24.doAction();
        bookCommand24.doAction();
        bookCommand24.doAction();
        bookCommand24.doAction();
        bookCommand24.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand24);
        booking.BookingReceiver bookingReceiver31 = new booking.BookingReceiver();
        java.lang.String str32 = bookingReceiver31.getAction();
        booking.UserType userType36 = null;
        booking.ExtendCommand extendCommand37 = new booking.ExtendCommand(bookingReceiver31, "hi!", "", 100, userType36);
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        booking.UserType userType51 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand52 = new booking.BookCommand(bookingReceiver41, "hi!", "hi!", 100, userType51);
        booking.BookingReceiver bookingReceiver56 = new booking.BookingReceiver();
        booking.UserType userType60 = booking.UserType.FACULTY;
        bookingReceiver56.bookSpace("", "", 100, userType60);
        bookingReceiver41.extendBooking("", "", (int) 'a', userType60);
        booking.ExtendCommand extendCommand63 = new booking.ExtendCommand(bookingReceiver31, "", "", 0, userType60);
        booking.BookingReceiver bookingReceiver64 = new booking.BookingReceiver();
        java.lang.String str65 = bookingReceiver64.getAction();
        booking.UserType userType69 = null;
        booking.ExtendCommand extendCommand70 = new booking.ExtendCommand(bookingReceiver64, "hi!", "", 100, userType69);
        java.lang.String str71 = bookingReceiver64.getAction();
        booking.UserType userType75 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand76 = new booking.ExtendCommand(bookingReceiver64, "hi!", "hi!", (int) (byte) 0, userType75);
        double double77 = bookingReceiver31.getRate(userType75);
        booking.UserType userType81 = null;
        booking.ExtendCommand extendCommand82 = new booking.ExtendCommand(bookingReceiver31, "BOOK", "CANCEL", (int) (short) 100, userType81);
        commandInvoker0.setCommand((booking.ICommand) extendCommand82);
        // The following exception was thrown during execution in test generation
        try {
            commandInvoker0.executeCommand();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.UserType.ordinal()\" because \"userType\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + userType9 + "' != '" + booking.UserType.FACULTY + "'", userType9.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + userType23 + "' != '" + booking.UserType.FACULTY + "'", userType23.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + userType51 + "' != '" + booking.UserType.FACULTY + "'", userType51.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + userType75 + "' != '" + booking.UserType.NON_FACULTY + "'", userType75.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 10.0d + "'", double77 == 10.0d);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor11 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        bookingSystem9.update((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        booking.ParkingSpot parkingSpot28 = new booking.ParkingSpot();
        parkingSpot28.occupySpot("hi!");
        booking.BookingSystem bookingSystem31 = new booking.BookingSystem((booking.Subject) parkingSpot28);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.BookingSystem bookingSystem35 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        bookingSystem35.update((booking.Subject) parkingSpot36);
        parkingSpot28.detach((booking.Observer) bookingSystem35);
        parkingSpot15.detach((booking.Observer) bookingSystem35);
        parkingSpot15.occupySpot("CANCEL");
        parkingSensor14.update((booking.Subject) parkingSpot15);
        bookingSystem9.update((booking.Subject) parkingSpot15);
        java.lang.Class<?> wildcardClass46 = parkingSpot15.getClass();
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSpot parkingSpot1 = new booking.ParkingSpot();
        parkingSpot1.occupySpot("hi!");
        booking.BookingSystem bookingSystem4 = new booking.BookingSystem((booking.Subject) parkingSpot1);
        booking.ParkingSpot parkingSpot5 = new booking.ParkingSpot();
        parkingSpot5.occupySpot("hi!");
        booking.BookingSystem bookingSystem8 = new booking.BookingSystem((booking.Subject) parkingSpot5);
        bookingSystem4.update((booking.Subject) parkingSpot5);
        booking.BookingSystem bookingSystem10 = new booking.BookingSystem((booking.Subject) parkingSpot5);
        parkingSpot0.detach((booking.Observer) bookingSystem10);
        parkingSpot0.occupySpot("BOOK");
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.CancelCommand cancelCommand14 = new booking.CancelCommand(bookingReceiver0, "", "BOOK");
        cancelCommand14.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = new booking.BookingReceiver();
        java.lang.String str2 = bookingReceiver1.getAction();
        booking.UserType userType6 = null;
        booking.ExtendCommand extendCommand7 = new booking.ExtendCommand(bookingReceiver1, "hi!", "", 100, userType6);
        booking.UserType userType11 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand12 = new booking.BookCommand(bookingReceiver1, "hi!", "hi!", 100, userType11);
        booking.UserType userType16 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver1, "", "", (int) (short) 1, userType16);
        commandInvoker0.setCommand((booking.ICommand) extendCommand17);
        booking.BookingReceiver bookingReceiver19 = new booking.BookingReceiver();
        java.lang.String str20 = bookingReceiver19.getAction();
        booking.UserType userType24 = null;
        booking.ExtendCommand extendCommand25 = new booking.ExtendCommand(bookingReceiver19, "hi!", "", 100, userType24);
        booking.BookingReceiver bookingReceiver29 = new booking.BookingReceiver();
        java.lang.String str30 = bookingReceiver29.getAction();
        booking.UserType userType34 = null;
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver29, "hi!", "", 100, userType34);
        booking.UserType userType39 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand40 = new booking.BookCommand(bookingReceiver29, "hi!", "hi!", 100, userType39);
        booking.BookingReceiver bookingReceiver44 = new booking.BookingReceiver();
        booking.UserType userType48 = booking.UserType.FACULTY;
        bookingReceiver44.bookSpace("", "", 100, userType48);
        bookingReceiver29.extendBooking("", "", (int) 'a', userType48);
        booking.ExtendCommand extendCommand51 = new booking.ExtendCommand(bookingReceiver19, "", "", 0, userType48);
        extendCommand51.doAction();
        commandInvoker0.setCommand((booking.ICommand) extendCommand51);
        extendCommand51.doAction();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.FACULTY + "'", userType11.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType16 + "' != '" + booking.UserType.FACULTY + "'", userType16.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.FACULTY + "'", userType39.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType48 + "' != '" + booking.UserType.FACULTY + "'", userType48.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot15.detach((booking.Observer) parkingSensor30);
        bookingSystem7.update((booking.Subject) parkingSpot15);
        java.lang.String str33 = parkingSpot15.getLicensePlate();
        boolean boolean34 = parkingSpot15.isOccupied();
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        java.lang.String str48 = bookingReceiver41.getAction();
        booking.UserType userType52 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver41, "hi!", "hi!", (int) (byte) 0, userType52);
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver37, "", "", (int) (byte) 100, userType52);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        booking.UserType userType68 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand69 = new booking.BookCommand(bookingReceiver58, "hi!", "hi!", 100, userType68);
        bookingReceiver37.bookSpace("hi!", "hi!", (int) (short) -1, userType68);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType68);
        booking.BookingReceiver bookingReceiver75 = new booking.BookingReceiver();
        java.lang.String str76 = bookingReceiver75.getAction();
        booking.UserType userType80 = null;
        booking.ExtendCommand extendCommand81 = new booking.ExtendCommand(bookingReceiver75, "hi!", "", 100, userType80);
        java.lang.String str82 = bookingReceiver75.getAction();
        booking.UserType userType86 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand87 = new booking.ExtendCommand(bookingReceiver75, "hi!", "hi!", (int) (byte) 0, userType86);
        booking.BookCommand bookCommand88 = new booking.BookCommand(bookingReceiver0, "", "", (int) (short) 1, userType86);
        bookCommand88.doAction();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + booking.UserType.NON_FACULTY + "'", userType52.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType68 + "' != '" + booking.UserType.FACULTY + "'", userType68.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + userType86 + "' != '" + booking.UserType.NON_FACULTY + "'", userType86.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = new booking.BookingReceiver();
        java.lang.String str2 = bookingReceiver1.getAction();
        booking.UserType userType6 = null;
        booking.ExtendCommand extendCommand7 = new booking.ExtendCommand(bookingReceiver1, "hi!", "", 100, userType6);
        booking.UserType userType11 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand12 = new booking.BookCommand(bookingReceiver1, "hi!", "hi!", 100, userType11);
        booking.UserType userType16 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver1, "", "", (int) (short) 1, userType16);
        commandInvoker0.setCommand((booking.ICommand) extendCommand17);
        booking.BookingReceiver bookingReceiver19 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver23 = new booking.BookingReceiver();
        java.lang.String str24 = bookingReceiver23.getAction();
        booking.UserType userType28 = null;
        booking.ExtendCommand extendCommand29 = new booking.ExtendCommand(bookingReceiver23, "hi!", "", 100, userType28);
        java.lang.String str30 = bookingReceiver23.getAction();
        booking.UserType userType34 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver23, "hi!", "hi!", (int) (byte) 0, userType34);
        booking.ExtendCommand extendCommand36 = new booking.ExtendCommand(bookingReceiver19, "", "", (int) (byte) 100, userType34);
        booking.BookingReceiver bookingReceiver40 = new booking.BookingReceiver();
        java.lang.String str41 = bookingReceiver40.getAction();
        booking.UserType userType45 = null;
        booking.ExtendCommand extendCommand46 = new booking.ExtendCommand(bookingReceiver40, "hi!", "", 100, userType45);
        booking.UserType userType50 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand51 = new booking.BookCommand(bookingReceiver40, "hi!", "hi!", 100, userType50);
        bookingReceiver19.bookSpace("hi!", "hi!", (int) (short) -1, userType50);
        booking.BookingReceiver bookingReceiver56 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver60 = new booking.BookingReceiver();
        java.lang.String str61 = bookingReceiver60.getAction();
        booking.UserType userType65 = null;
        booking.ExtendCommand extendCommand66 = new booking.ExtendCommand(bookingReceiver60, "hi!", "", 100, userType65);
        java.lang.String str67 = bookingReceiver60.getAction();
        booking.UserType userType71 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand72 = new booking.ExtendCommand(bookingReceiver60, "hi!", "hi!", (int) (byte) 0, userType71);
        booking.ExtendCommand extendCommand73 = new booking.ExtendCommand(bookingReceiver56, "", "", (int) (byte) 100, userType71);
        booking.BookingReceiver bookingReceiver77 = new booking.BookingReceiver();
        java.lang.String str78 = bookingReceiver77.getAction();
        booking.UserType userType82 = null;
        booking.ExtendCommand extendCommand83 = new booking.ExtendCommand(bookingReceiver77, "hi!", "", 100, userType82);
        booking.UserType userType87 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand88 = new booking.BookCommand(bookingReceiver77, "hi!", "hi!", 100, userType87);
        bookingReceiver56.bookSpace("hi!", "hi!", (int) (short) -1, userType87);
        booking.BookCommand bookCommand90 = new booking.BookCommand(bookingReceiver19, "hi!", "", 0, userType87);
        commandInvoker0.setCommand((booking.ICommand) bookCommand90);
        bookCommand90.doAction();
        java.lang.Class<?> wildcardClass93 = bookCommand90.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.FACULTY + "'", userType11.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType16 + "' != '" + booking.UserType.FACULTY + "'", userType16.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + userType34 + "' != '" + booking.UserType.NON_FACULTY + "'", userType34.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + userType50 + "' != '" + booking.UserType.FACULTY + "'", userType50.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + userType71 + "' != '" + booking.UserType.NON_FACULTY + "'", userType71.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + userType87 + "' != '" + booking.UserType.FACULTY + "'", userType87.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        java.lang.String str48 = bookingReceiver41.getAction();
        booking.UserType userType52 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver41, "hi!", "hi!", (int) (byte) 0, userType52);
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver37, "", "", (int) (byte) 100, userType52);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        booking.UserType userType68 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand69 = new booking.BookCommand(bookingReceiver58, "hi!", "hi!", 100, userType68);
        bookingReceiver37.bookSpace("hi!", "hi!", (int) (short) -1, userType68);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType68);
        double double72 = bookingReceiver0.getAmount();
        java.lang.String str73 = bookingReceiver0.getAction();
        double double74 = bookingReceiver0.getAmount();
        java.lang.Class<?> wildcardClass75 = bookingReceiver0.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + booking.UserType.NON_FACULTY + "'", userType52.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType68 + "' != '" + booking.UserType.FACULTY + "'", userType68.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-8.0d) + "'", double72 == (-8.0d));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "BOOK" + "'", str73, "BOOK");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-8.0d) + "'", double74 == (-8.0d));
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.BookingReceiver bookingReceiver12 = new booking.BookingReceiver();
        java.lang.String str13 = bookingReceiver12.getAction();
        booking.UserType userType17 = null;
        booking.ExtendCommand extendCommand18 = new booking.ExtendCommand(bookingReceiver12, "hi!", "", 100, userType17);
        booking.UserType userType22 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand23 = new booking.BookCommand(bookingReceiver12, "hi!", "hi!", 100, userType22);
        booking.BookingReceiver bookingReceiver27 = new booking.BookingReceiver();
        booking.UserType userType31 = booking.UserType.FACULTY;
        bookingReceiver27.bookSpace("", "", 100, userType31);
        bookingReceiver12.extendBooking("", "", (int) 'a', userType31);
        double double34 = bookingReceiver0.getRate(userType31);
        booking.BookingReceiver bookingReceiver38 = new booking.BookingReceiver();
        java.lang.String str39 = bookingReceiver38.getAction();
        booking.UserType userType43 = null;
        booking.ExtendCommand extendCommand44 = new booking.ExtendCommand(bookingReceiver38, "hi!", "", 100, userType43);
        java.lang.String str45 = bookingReceiver38.getAction();
        booking.UserType userType49 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand50 = new booking.ExtendCommand(bookingReceiver38, "hi!", "hi!", (int) (byte) 0, userType49);
        booking.BookingReceiver bookingReceiver54 = new booking.BookingReceiver();
        java.lang.String str55 = bookingReceiver54.getAction();
        booking.UserType userType59 = null;
        booking.ExtendCommand extendCommand60 = new booking.ExtendCommand(bookingReceiver54, "hi!", "", 100, userType59);
        java.lang.String str61 = bookingReceiver54.getAction();
        booking.UserType userType65 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand66 = new booking.ExtendCommand(bookingReceiver54, "hi!", "hi!", (int) (byte) 0, userType65);
        booking.ExtendCommand extendCommand67 = new booking.ExtendCommand(bookingReceiver38, "CANCEL", "CANCEL", (int) (short) 1, userType65);
        booking.BookCommand bookCommand68 = new booking.BookCommand(bookingReceiver0, "CANCEL", "hi!", (int) (byte) 1, userType65);
        java.lang.Class<?> wildcardClass69 = bookingReceiver0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + userType22 + "' != '" + booking.UserType.FACULTY + "'", userType22.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.0d + "'", double34 == 8.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + userType49 + "' != '" + booking.UserType.NON_FACULTY + "'", userType49.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + userType65 + "' != '" + booking.UserType.NON_FACULTY + "'", userType65.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        booking.UserType userType4 = booking.UserType.STUDENT;
        double double5 = bookingReceiver0.getRate(userType4);
        double double6 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("", "BOOK");
        bookingReceiver0.cancelBooking("CANCEL", "hi!");
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.STUDENT + "'", userType4.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 5.0d + "'", double5 == 5.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        bookingSystem3.update((booking.Subject) parkingSpot4);
        parkingSpot4.freeSpot();
        java.lang.String str9 = parkingSpot4.getLicensePlate();
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor11 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot12 = new booking.ParkingSpot();
        parkingSpot12.occupySpot("hi!");
        booking.BookingSystem bookingSystem15 = new booking.BookingSystem((booking.Subject) parkingSpot12);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        parkingSpot16.occupySpot("hi!");
        booking.BookingSystem bookingSystem19 = new booking.BookingSystem((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        parkingSpot20.occupySpot("hi!");
        bookingSystem19.update((booking.Subject) parkingSpot20);
        parkingSpot12.detach((booking.Observer) bookingSystem19);
        parkingSensor11.update((booking.Subject) parkingSpot12);
        booking.ParkingSensor parkingSensor26 = new booking.ParkingSensor((booking.Subject) parkingSpot12);
        parkingSpot4.detach((booking.Observer) parkingSensor26);
        parkingSpot4.freeSpot();
        parkingSpot4.occupySpot("CANCEL");
        parkingSpot4.freeSpot();
        booking.BookingSystem bookingSystem32 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        java.lang.Class<?> wildcardClass33 = parkingSpot4.getClass();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = new booking.BookingReceiver();
        java.lang.String str2 = bookingReceiver1.getAction();
        booking.UserType userType6 = null;
        booking.ExtendCommand extendCommand7 = new booking.ExtendCommand(bookingReceiver1, "hi!", "", 100, userType6);
        booking.UserType userType11 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand12 = new booking.BookCommand(bookingReceiver1, "hi!", "hi!", 100, userType11);
        booking.UserType userType16 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver1, "", "", (int) (short) 1, userType16);
        commandInvoker0.setCommand((booking.ICommand) extendCommand17);
        booking.BookingReceiver bookingReceiver19 = new booking.BookingReceiver();
        java.lang.String str20 = bookingReceiver19.getAction();
        booking.UserType userType24 = null;
        booking.ExtendCommand extendCommand25 = new booking.ExtendCommand(bookingReceiver19, "hi!", "", 100, userType24);
        booking.BookingReceiver bookingReceiver29 = new booking.BookingReceiver();
        java.lang.String str30 = bookingReceiver29.getAction();
        booking.UserType userType34 = null;
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver29, "hi!", "", 100, userType34);
        booking.UserType userType39 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand40 = new booking.BookCommand(bookingReceiver29, "hi!", "hi!", 100, userType39);
        booking.BookingReceiver bookingReceiver44 = new booking.BookingReceiver();
        booking.UserType userType48 = booking.UserType.FACULTY;
        bookingReceiver44.bookSpace("", "", 100, userType48);
        bookingReceiver29.extendBooking("", "", (int) 'a', userType48);
        booking.ExtendCommand extendCommand51 = new booking.ExtendCommand(bookingReceiver19, "", "", 0, userType48);
        extendCommand51.doAction();
        commandInvoker0.setCommand((booking.ICommand) extendCommand51);
        commandInvoker0.executeCommand();
        booking.CommandInvoker commandInvoker55 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver56 = null;
        booking.BookingReceiver bookingReceiver60 = new booking.BookingReceiver();
        booking.UserType userType64 = booking.UserType.FACULTY;
        bookingReceiver60.bookSpace("", "", 100, userType64);
        booking.BookCommand bookCommand66 = new booking.BookCommand(bookingReceiver56, "hi!", "", 0, userType64);
        commandInvoker55.setCommand((booking.ICommand) bookCommand66);
        booking.BookingReceiver bookingReceiver68 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver72 = new booking.BookingReceiver();
        java.lang.String str73 = bookingReceiver72.getAction();
        booking.UserType userType77 = null;
        booking.ExtendCommand extendCommand78 = new booking.ExtendCommand(bookingReceiver72, "hi!", "", 100, userType77);
        java.lang.String str79 = bookingReceiver72.getAction();
        booking.UserType userType83 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand84 = new booking.ExtendCommand(bookingReceiver72, "hi!", "hi!", (int) (byte) 0, userType83);
        booking.ExtendCommand extendCommand85 = new booking.ExtendCommand(bookingReceiver68, "", "", (int) (byte) 100, userType83);
        booking.CancelCommand cancelCommand88 = new booking.CancelCommand(bookingReceiver68, "hi!", "hi!");
        commandInvoker55.setCommand((booking.ICommand) cancelCommand88);
        cancelCommand88.doAction();
        cancelCommand88.doAction();
        cancelCommand88.doAction();
        commandInvoker0.setCommand((booking.ICommand) cancelCommand88);
        commandInvoker0.executeCommand();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.FACULTY + "'", userType11.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType16 + "' != '" + booking.UserType.FACULTY + "'", userType16.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.FACULTY + "'", userType39.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType48 + "' != '" + booking.UserType.FACULTY + "'", userType48.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType64 + "' != '" + booking.UserType.FACULTY + "'", userType64.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + userType83 + "' != '" + booking.UserType.NON_FACULTY + "'", userType83.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.CancelCommand cancelCommand20 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        booking.UserType userType24 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand25 = new booking.BookCommand(bookingReceiver0, "", "CANCEL", (int) (byte) 1, userType24);
        bookCommand25.doAction();
        bookCommand25.doAction();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + userType24 + "' != '" + booking.UserType.FACULTY + "'", userType24.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        bookingReceiver0.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver7 = new booking.BookingReceiver();
        booking.UserType userType11 = booking.UserType.FACULTY;
        bookingReceiver7.bookSpace("", "", 100, userType11);
        double double13 = bookingReceiver0.getRate(userType11);
        booking.UserType userType17 = booking.UserType.VISITOR;
        booking.ExtendCommand extendCommand18 = new booking.ExtendCommand(bookingReceiver0, "BOOK", "", (int) '#', userType17);
        booking.BookingReceiver bookingReceiver22 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver26 = new booking.BookingReceiver();
        java.lang.String str27 = bookingReceiver26.getAction();
        booking.UserType userType31 = null;
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver26, "hi!", "", 100, userType31);
        java.lang.String str33 = bookingReceiver26.getAction();
        booking.UserType userType37 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand38 = new booking.ExtendCommand(bookingReceiver26, "hi!", "hi!", (int) (byte) 0, userType37);
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver22, "", "", (int) (byte) 100, userType37);
        booking.BookCommand bookCommand40 = new booking.BookCommand(bookingReceiver0, "CANCEL", "EXTEND", (int) '#', userType37);
        java.lang.String str41 = bookingReceiver0.getAction();
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.FACULTY + "'", userType11.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 8.0d + "'", double13 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType17 + "' != '" + booking.UserType.VISITOR + "'", userType17.equals(booking.UserType.VISITOR));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + userType37 + "' != '" + booking.UserType.NON_FACULTY + "'", userType37.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "CANCEL" + "'", str41, "CANCEL");
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        java.lang.String str9 = bookingReceiver2.getAction();
        booking.UserType userType13 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand14 = new booking.ExtendCommand(bookingReceiver2, "hi!", "hi!", (int) (byte) 0, userType13);
        extendCommand14.doAction();
        commandInvoker0.setCommand((booking.ICommand) extendCommand14);
        booking.BookingReceiver bookingReceiver17 = new booking.BookingReceiver();
        java.lang.String str18 = bookingReceiver17.getAction();
        booking.UserType userType22 = null;
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver17, "hi!", "", 100, userType22);
        booking.UserType userType27 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand28 = new booking.BookCommand(bookingReceiver17, "hi!", "hi!", 100, userType27);
        bookCommand28.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand28);
        booking.BookingReceiver bookingReceiver31 = new booking.BookingReceiver();
        java.lang.String str32 = bookingReceiver31.getAction();
        booking.UserType userType36 = null;
        booking.ExtendCommand extendCommand37 = new booking.ExtendCommand(bookingReceiver31, "hi!", "", 100, userType36);
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        booking.UserType userType51 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand52 = new booking.BookCommand(bookingReceiver41, "hi!", "hi!", 100, userType51);
        booking.BookingReceiver bookingReceiver56 = new booking.BookingReceiver();
        booking.UserType userType60 = booking.UserType.FACULTY;
        bookingReceiver56.bookSpace("", "", 100, userType60);
        bookingReceiver41.extendBooking("", "", (int) 'a', userType60);
        booking.ExtendCommand extendCommand63 = new booking.ExtendCommand(bookingReceiver31, "", "", 0, userType60);
        commandInvoker0.setCommand((booking.ICommand) extendCommand63);
        extendCommand63.doAction();
        java.lang.Class<?> wildcardClass66 = extendCommand63.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + userType13 + "' != '" + booking.UserType.NON_FACULTY + "'", userType13.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + userType27 + "' != '" + booking.UserType.FACULTY + "'", userType27.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + userType51 + "' != '" + booking.UserType.FACULTY + "'", userType51.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        double double4 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("EXTEND", "hi!");
        booking.CancelCommand cancelCommand10 = new booking.CancelCommand(bookingReceiver0, "EXTEND", "EXTEND");
        booking.BookingReceiver bookingReceiver14 = new booking.BookingReceiver();
        bookingReceiver14.cancelBooking("hi!", "hi!");
        bookingReceiver14.cancelBooking("", "");
        booking.UserType userType21 = booking.UserType.STUDENT;
        double double22 = bookingReceiver14.getRate(userType21);
        booking.BookCommand bookCommand23 = new booking.BookCommand(bookingReceiver0, "EXTEND", "", (int) (byte) 0, userType21);
        booking.BookingReceiver bookingReceiver27 = new booking.BookingReceiver();
        java.lang.String str28 = bookingReceiver27.getAction();
        booking.UserType userType32 = null;
        booking.ExtendCommand extendCommand33 = new booking.ExtendCommand(bookingReceiver27, "hi!", "", 100, userType32);
        java.lang.String str34 = bookingReceiver27.getAction();
        double double35 = bookingReceiver27.getDeposit();
        java.lang.String str36 = bookingReceiver27.getAction();
        bookingReceiver27.cancelBooking("BOOK", "");
        booking.BookingReceiver bookingReceiver43 = new booking.BookingReceiver();
        java.lang.String str44 = bookingReceiver43.getAction();
        booking.UserType userType48 = null;
        booking.ExtendCommand extendCommand49 = new booking.ExtendCommand(bookingReceiver43, "hi!", "", 100, userType48);
        booking.UserType userType53 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand54 = new booking.BookCommand(bookingReceiver43, "hi!", "hi!", 100, userType53);
        booking.BookingReceiver bookingReceiver55 = new booking.BookingReceiver();
        java.lang.String str56 = bookingReceiver55.getAction();
        booking.UserType userType60 = null;
        booking.ExtendCommand extendCommand61 = new booking.ExtendCommand(bookingReceiver55, "hi!", "", 100, userType60);
        booking.UserType userType65 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand66 = new booking.BookCommand(bookingReceiver55, "hi!", "hi!", 100, userType65);
        booking.BookingReceiver bookingReceiver70 = new booking.BookingReceiver();
        booking.UserType userType74 = booking.UserType.FACULTY;
        bookingReceiver70.bookSpace("", "", 100, userType74);
        bookingReceiver55.extendBooking("", "", (int) 'a', userType74);
        double double77 = bookingReceiver43.getRate(userType74);
        booking.BookCommand bookCommand78 = new booking.BookCommand(bookingReceiver27, "BOOK", "BOOK", (int) (byte) 10, userType74);
        bookingReceiver0.extendBooking("hi!", "", 1, userType74);
        double double80 = bookingReceiver0.getAmount();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + userType21 + "' != '" + booking.UserType.STUDENT + "'", userType21.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + userType53 + "' != '" + booking.UserType.FACULTY + "'", userType53.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + userType65 + "' != '" + booking.UserType.FACULTY + "'", userType65.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType74 + "' != '" + booking.UserType.FACULTY + "'", userType74.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 8.0d + "'", double77 == 8.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 8.0d + "'", double80 == 8.0d);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        boolean boolean49 = parkingSpot18.isOccupied();
        booking.Observer observer50 = null;
        parkingSpot18.attach(observer50);
        // The following exception was thrown during execution in test generation
        try {
            parkingSpot18.freeSpot();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.Observer.update(booking.Subject)\" because \"obs\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor11 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot10.occupySpot("CANCEL");
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        bookingSystem18.update((booking.Subject) parkingSpot19);
        booking.BookingSystem bookingSystem24 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        parkingSpot10.attach((booking.Observer) bookingSystem24);
        booking.ParkingSensor parkingSensor26 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        booking.Subject subject27 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingSensor26.update(subject27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Object.equals(Object)\" because \"changedSubject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.BookingReceiver bookingReceiver12 = new booking.BookingReceiver();
        java.lang.String str13 = bookingReceiver12.getAction();
        booking.UserType userType17 = null;
        booking.ExtendCommand extendCommand18 = new booking.ExtendCommand(bookingReceiver12, "hi!", "", 100, userType17);
        booking.UserType userType22 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand23 = new booking.BookCommand(bookingReceiver12, "hi!", "hi!", 100, userType22);
        booking.BookingReceiver bookingReceiver27 = new booking.BookingReceiver();
        booking.UserType userType31 = booking.UserType.FACULTY;
        bookingReceiver27.bookSpace("", "", 100, userType31);
        bookingReceiver12.extendBooking("", "", (int) 'a', userType31);
        double double34 = bookingReceiver0.getRate(userType31);
        booking.UserType userType38 = booking.UserType.VISITOR;
        bookingReceiver0.extendBooking("", "hi!", (int) '#', userType38);
        java.lang.String str40 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("", "CANCEL");
        double double44 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver48 = new booking.BookingReceiver();
        java.lang.String str49 = bookingReceiver48.getAction();
        double double50 = bookingReceiver48.getDeposit();
        booking.BookingReceiver bookingReceiver54 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        java.lang.String str65 = bookingReceiver58.getAction();
        booking.UserType userType69 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand70 = new booking.ExtendCommand(bookingReceiver58, "hi!", "hi!", (int) (byte) 0, userType69);
        booking.ExtendCommand extendCommand71 = new booking.ExtendCommand(bookingReceiver54, "", "", (int) (byte) 100, userType69);
        booking.CancelCommand cancelCommand74 = new booking.CancelCommand(bookingReceiver54, "hi!", "hi!");
        booking.BookingReceiver bookingReceiver78 = new booking.BookingReceiver();
        java.lang.String str79 = bookingReceiver78.getAction();
        booking.UserType userType83 = null;
        booking.ExtendCommand extendCommand84 = new booking.ExtendCommand(bookingReceiver78, "hi!", "", 100, userType83);
        booking.UserType userType88 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand89 = new booking.BookCommand(bookingReceiver78, "hi!", "hi!", 100, userType88);
        booking.UserType userType93 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand94 = new booking.ExtendCommand(bookingReceiver78, "", "", (int) (short) 1, userType93);
        bookingReceiver54.bookSpace("CANCEL", "EXTEND", (int) (byte) 10, userType93);
        bookingReceiver48.extendBooking("CANCEL", "hi!", (-1), userType93);
        bookingReceiver0.bookSpace("EXTEND", "hi!", 0, userType93);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + userType22 + "' != '" + booking.UserType.FACULTY + "'", userType22.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.0d + "'", double34 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType38 + "' != '" + booking.UserType.VISITOR + "'", userType38.equals(booking.UserType.VISITOR));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "EXTEND" + "'", str40, "EXTEND");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + userType69 + "' != '" + booking.UserType.NON_FACULTY + "'", userType69.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + userType88 + "' != '" + booking.UserType.FACULTY + "'", userType88.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType93 + "' != '" + booking.UserType.FACULTY + "'", userType93.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        bookingReceiver0.cancelBooking("", "");
        booking.CancelCommand cancelCommand9 = new booking.CancelCommand(bookingReceiver0, "", "hi!");
        booking.BookingReceiver bookingReceiver13 = new booking.BookingReceiver();
        java.lang.String str14 = bookingReceiver13.getAction();
        booking.UserType userType18 = null;
        booking.ExtendCommand extendCommand19 = new booking.ExtendCommand(bookingReceiver13, "hi!", "", 100, userType18);
        booking.BookingReceiver bookingReceiver23 = new booking.BookingReceiver();
        java.lang.String str24 = bookingReceiver23.getAction();
        booking.UserType userType28 = null;
        booking.ExtendCommand extendCommand29 = new booking.ExtendCommand(bookingReceiver23, "hi!", "", 100, userType28);
        booking.UserType userType33 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand34 = new booking.BookCommand(bookingReceiver23, "hi!", "hi!", 100, userType33);
        booking.BookingReceiver bookingReceiver38 = new booking.BookingReceiver();
        booking.UserType userType42 = booking.UserType.FACULTY;
        bookingReceiver38.bookSpace("", "", 100, userType42);
        bookingReceiver23.extendBooking("", "", (int) 'a', userType42);
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver13, "", "", 0, userType42);
        booking.BookingReceiver bookingReceiver46 = new booking.BookingReceiver();
        java.lang.String str47 = bookingReceiver46.getAction();
        booking.UserType userType51 = null;
        booking.ExtendCommand extendCommand52 = new booking.ExtendCommand(bookingReceiver46, "hi!", "", 100, userType51);
        java.lang.String str53 = bookingReceiver46.getAction();
        booking.UserType userType57 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand58 = new booking.ExtendCommand(bookingReceiver46, "hi!", "hi!", (int) (byte) 0, userType57);
        double double59 = bookingReceiver13.getRate(userType57);
        booking.UserType userType63 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver13, "hi!", "CANCEL", (int) ' ', userType63);
        bookingReceiver0.bookSpace("hi!", "hi!", 10, userType63);
        double double66 = bookingReceiver0.getDeposit();
        booking.BookingReceiver bookingReceiver67 = new booking.BookingReceiver();
        java.lang.String str68 = bookingReceiver67.getAction();
        booking.UserType userType72 = null;
        booking.ExtendCommand extendCommand73 = new booking.ExtendCommand(bookingReceiver67, "hi!", "", 100, userType72);
        java.lang.String str74 = bookingReceiver67.getAction();
        booking.UserType userType78 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand79 = new booking.ExtendCommand(bookingReceiver67, "hi!", "hi!", (int) (byte) 0, userType78);
        double double80 = bookingReceiver0.getRate(userType78);
        double double81 = bookingReceiver0.getDeposit();
        java.lang.String str82 = bookingReceiver0.getAction();
        booking.UserType userType86 = null;
        // The following exception was thrown during execution in test generation
        try {
            bookingReceiver0.bookSpace("", "", (int) (short) 100, userType86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.UserType.ordinal()\" because \"userType\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + userType33 + "' != '" + booking.UserType.FACULTY + "'", userType33.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType42 + "' != '" + booking.UserType.FACULTY + "'", userType42.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + userType57 + "' != '" + booking.UserType.NON_FACULTY + "'", userType57.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + userType63 + "' != '" + booking.UserType.NON_FACULTY + "'", userType63.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + userType78 + "' != '" + booking.UserType.NON_FACULTY + "'", userType78.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 10.0d + "'", double80 == 10.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 10.0d + "'", double81 == 10.0d);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "BOOK" + "'", str82, "BOOK");
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        java.lang.String str4 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver5 = null;
        booking.BookingReceiver bookingReceiver9 = new booking.BookingReceiver();
        booking.UserType userType13 = booking.UserType.FACULTY;
        bookingReceiver9.bookSpace("", "", 100, userType13);
        booking.BookCommand bookCommand15 = new booking.BookCommand(bookingReceiver5, "hi!", "", 0, userType13);
        double double16 = bookingReceiver0.getRate(userType13);
        booking.BookingReceiver bookingReceiver20 = new booking.BookingReceiver();
        java.lang.String str21 = bookingReceiver20.getAction();
        booking.UserType userType25 = null;
        booking.ExtendCommand extendCommand26 = new booking.ExtendCommand(bookingReceiver20, "hi!", "", 100, userType25);
        java.lang.String str27 = bookingReceiver20.getAction();
        booking.UserType userType31 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver20, "hi!", "hi!", (int) (byte) 0, userType31);
        booking.BookingReceiver bookingReceiver36 = new booking.BookingReceiver();
        java.lang.String str37 = bookingReceiver36.getAction();
        booking.UserType userType41 = null;
        booking.ExtendCommand extendCommand42 = new booking.ExtendCommand(bookingReceiver36, "hi!", "", 100, userType41);
        booking.UserType userType46 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand47 = new booking.BookCommand(bookingReceiver36, "hi!", "hi!", 100, userType46);
        booking.BookingReceiver bookingReceiver51 = new booking.BookingReceiver();
        booking.UserType userType55 = booking.UserType.FACULTY;
        bookingReceiver51.bookSpace("", "", 100, userType55);
        bookingReceiver36.extendBooking("", "", (int) 'a', userType55);
        bookingReceiver20.bookSpace("EXTEND", "hi!", (int) (byte) 1, userType55);
        booking.BookingReceiver bookingReceiver62 = new booking.BookingReceiver();
        java.lang.String str63 = bookingReceiver62.getAction();
        booking.UserType userType67 = null;
        booking.ExtendCommand extendCommand68 = new booking.ExtendCommand(bookingReceiver62, "hi!", "", 100, userType67);
        booking.UserType userType72 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand73 = new booking.BookCommand(bookingReceiver62, "hi!", "hi!", 100, userType72);
        booking.BookingReceiver bookingReceiver74 = new booking.BookingReceiver();
        java.lang.String str75 = bookingReceiver74.getAction();
        booking.UserType userType79 = null;
        booking.ExtendCommand extendCommand80 = new booking.ExtendCommand(bookingReceiver74, "hi!", "", 100, userType79);
        booking.UserType userType84 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand85 = new booking.BookCommand(bookingReceiver74, "hi!", "hi!", 100, userType84);
        booking.BookingReceiver bookingReceiver89 = new booking.BookingReceiver();
        booking.UserType userType93 = booking.UserType.FACULTY;
        bookingReceiver89.bookSpace("", "", 100, userType93);
        bookingReceiver74.extendBooking("", "", (int) 'a', userType93);
        double double96 = bookingReceiver62.getRate(userType93);
        booking.BookCommand bookCommand97 = new booking.BookCommand(bookingReceiver20, "EXTEND", "CANCEL", 0, userType93);
        booking.BookCommand bookCommand98 = new booking.BookCommand(bookingReceiver0, "EXTEND", "hi!", (int) (byte) 0, userType93);
        java.lang.String str99 = bookingReceiver0.getAction();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CANCEL" + "'", str4, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType13 + "' != '" + booking.UserType.FACULTY + "'", userType13.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 8.0d + "'", double16 == 8.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.NON_FACULTY + "'", userType31.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + userType46 + "' != '" + booking.UserType.FACULTY + "'", userType46.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType55 + "' != '" + booking.UserType.FACULTY + "'", userType55.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.FACULTY + "'", userType72.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + userType84 + "' != '" + booking.UserType.FACULTY + "'", userType84.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType93 + "' != '" + booking.UserType.FACULTY + "'", userType93.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 8.0d + "'", double96 == 8.0d);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "CANCEL" + "'", str99, "CANCEL");
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot15.detach((booking.Observer) parkingSensor30);
        bookingSystem7.update((booking.Subject) parkingSpot15);
        parkingSpot15.occupySpot("BOOK");
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        booking.BookingSystem bookingSystem42 = new booking.BookingSystem((booking.Subject) parkingSpot39);
        bookingSystem38.update((booking.Subject) parkingSpot39);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        booking.BookingSystem bookingSystem47 = new booking.BookingSystem((booking.Subject) parkingSpot44);
        booking.ParkingSpot parkingSpot48 = new booking.ParkingSpot();
        parkingSpot48.occupySpot("hi!");
        booking.BookingSystem bookingSystem51 = new booking.BookingSystem((booking.Subject) parkingSpot48);
        bookingSystem47.update((booking.Subject) parkingSpot48);
        parkingSpot39.detach((booking.Observer) bookingSystem47);
        parkingSpot15.attach((booking.Observer) bookingSystem47);
        parkingSpot15.occupySpot("EXTEND");
        boolean boolean57 = parkingSpot15.isOccupied();
        java.lang.Class<?> wildcardClass58 = parkingSpot15.getClass();
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.BookingReceiver bookingReceiver50 = new booking.BookingReceiver();
        java.lang.String str51 = bookingReceiver50.getAction();
        booking.UserType userType55 = null;
        booking.ExtendCommand extendCommand56 = new booking.ExtendCommand(bookingReceiver50, "hi!", "", 100, userType55);
        booking.UserType userType60 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand61 = new booking.BookCommand(bookingReceiver50, "hi!", "hi!", 100, userType60);
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        booking.UserType userType69 = booking.UserType.FACULTY;
        bookingReceiver65.bookSpace("", "", 100, userType69);
        bookingReceiver50.extendBooking("", "", (int) 'a', userType69);
        booking.UserType userType72 = booking.UserType.NON_FACULTY;
        double double73 = bookingReceiver50.getRate(userType72);
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver0, "hi!", "BOOK", 1, userType72);
        double double75 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver76 = new booking.BookingReceiver();
        bookingReceiver76.cancelBooking("hi!", "hi!");
        booking.UserType userType80 = booking.UserType.STUDENT;
        double double81 = bookingReceiver76.getRate(userType80);
        booking.CancelCommand cancelCommand84 = new booking.CancelCommand(bookingReceiver76, "BOOK", "hi!");
        booking.BookingReceiver bookingReceiver88 = new booking.BookingReceiver();
        bookingReceiver88.cancelBooking("hi!", "hi!");
        bookingReceiver88.cancelBooking("", "");
        booking.UserType userType95 = booking.UserType.STUDENT;
        double double96 = bookingReceiver88.getRate(userType95);
        booking.BookCommand bookCommand97 = new booking.BookCommand(bookingReceiver76, "", "hi!", (int) '#', userType95);
        double double98 = bookingReceiver0.getRate(userType95);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType69 + "' != '" + booking.UserType.FACULTY + "'", userType69.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.NON_FACULTY + "'", userType72.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + userType80 + "' != '" + booking.UserType.STUDENT + "'", userType80.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 5.0d + "'", double81 == 5.0d);
        org.junit.Assert.assertTrue("'" + userType95 + "' != '" + booking.UserType.STUDENT + "'", userType95.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 5.0d + "'", double96 == 5.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 5.0d + "'", double98 == 5.0d);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSpot2.detach((booking.Observer) bookingSystem22);
        parkingSpot2.occupySpot("CANCEL");
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.BookingSystem bookingSystem35 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        booking.BookingSystem bookingSystem39 = new booking.BookingSystem((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        bookingSystem39.update((booking.Subject) parkingSpot40);
        parkingSpot32.detach((booking.Observer) bookingSystem39);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        bookingSystem52.update((booking.Subject) parkingSpot53);
        parkingSpot45.detach((booking.Observer) bookingSystem52);
        parkingSpot32.detach((booking.Observer) bookingSystem52);
        booking.ParkingSpot parkingSpot59 = new booking.ParkingSpot();
        parkingSpot59.occupySpot("hi!");
        booking.BookingSystem bookingSystem62 = new booking.BookingSystem((booking.Subject) parkingSpot59);
        booking.ParkingSpot parkingSpot63 = new booking.ParkingSpot();
        parkingSpot63.occupySpot("hi!");
        booking.BookingSystem bookingSystem66 = new booking.BookingSystem((booking.Subject) parkingSpot63);
        booking.ParkingSpot parkingSpot67 = new booking.ParkingSpot();
        parkingSpot67.occupySpot("hi!");
        bookingSystem66.update((booking.Subject) parkingSpot67);
        parkingSpot59.detach((booking.Observer) bookingSystem66);
        bookingSystem52.update((booking.Subject) parkingSpot59);
        parkingSpot2.attach((booking.Observer) bookingSystem52);
        parkingSpot2.occupySpot("EXTEND");
        booking.BookingSystem bookingSystem76 = new booking.BookingSystem((booking.Subject) parkingSpot2);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        java.lang.String str48 = bookingReceiver41.getAction();
        booking.UserType userType52 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver41, "hi!", "hi!", (int) (byte) 0, userType52);
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver37, "", "", (int) (byte) 100, userType52);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        booking.UserType userType68 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand69 = new booking.BookCommand(bookingReceiver58, "hi!", "hi!", 100, userType68);
        bookingReceiver37.bookSpace("hi!", "hi!", (int) (short) -1, userType68);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType68);
        booking.BookingReceiver bookingReceiver72 = new booking.BookingReceiver();
        bookingReceiver72.cancelBooking("hi!", "hi!");
        bookingReceiver72.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver79 = new booking.BookingReceiver();
        booking.UserType userType83 = booking.UserType.FACULTY;
        bookingReceiver79.bookSpace("", "", 100, userType83);
        double double85 = bookingReceiver72.getRate(userType83);
        booking.BookingReceiver bookingReceiver89 = new booking.BookingReceiver();
        bookingReceiver89.cancelBooking("hi!", "hi!");
        booking.UserType userType93 = booking.UserType.STUDENT;
        double double94 = bookingReceiver89.getRate(userType93);
        booking.BookCommand bookCommand95 = new booking.BookCommand(bookingReceiver72, "hi!", "CANCEL", (int) (short) 10, userType93);
        double double96 = bookingReceiver0.getRate(userType93);
        booking.CancelCommand cancelCommand99 = new booking.CancelCommand(bookingReceiver0, "EXTEND", "CANCEL");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + booking.UserType.NON_FACULTY + "'", userType52.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType68 + "' != '" + booking.UserType.FACULTY + "'", userType68.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType83 + "' != '" + booking.UserType.FACULTY + "'", userType83.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 8.0d + "'", double85 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType93 + "' != '" + booking.UserType.STUDENT + "'", userType93.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 5.0d + "'", double94 == 5.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 5.0d + "'", double96 == 5.0d);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.UserType userType15 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (short) 1, userType15);
        extendCommand16.doAction();
        java.lang.Class<?> wildcardClass18 = extendCommand16.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.FACULTY + "'", userType15.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = null;
        booking.BookingReceiver bookingReceiver5 = new booking.BookingReceiver();
        booking.UserType userType9 = booking.UserType.FACULTY;
        bookingReceiver5.bookSpace("", "", 100, userType9);
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver1, "hi!", "", 0, userType9);
        commandInvoker0.setCommand((booking.ICommand) bookCommand11);
        booking.BookingReceiver bookingReceiver13 = new booking.BookingReceiver();
        java.lang.String str14 = bookingReceiver13.getAction();
        booking.UserType userType18 = null;
        booking.ExtendCommand extendCommand19 = new booking.ExtendCommand(bookingReceiver13, "hi!", "", 100, userType18);
        booking.UserType userType23 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand24 = new booking.BookCommand(bookingReceiver13, "hi!", "hi!", 100, userType23);
        bookCommand24.doAction();
        bookCommand24.doAction();
        bookCommand24.doAction();
        bookCommand24.doAction();
        bookCommand24.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand24);
        bookCommand24.doAction();
        bookCommand24.doAction();
        bookCommand24.doAction();
        org.junit.Assert.assertTrue("'" + userType9 + "' != '" + booking.UserType.FACULTY + "'", userType9.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + userType23 + "' != '" + booking.UserType.FACULTY + "'", userType23.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.UserType userType50 = null;
        booking.ExtendCommand extendCommand51 = new booking.ExtendCommand(bookingReceiver0, "BOOK", "CANCEL", (int) (short) 100, userType50);
        // The following exception was thrown during execution in test generation
        try {
            extendCommand51.doAction();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.UserType.ordinal()\" because \"userType\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.BookingReceiver bookingReceiver50 = new booking.BookingReceiver();
        java.lang.String str51 = bookingReceiver50.getAction();
        booking.UserType userType55 = null;
        booking.ExtendCommand extendCommand56 = new booking.ExtendCommand(bookingReceiver50, "hi!", "", 100, userType55);
        booking.UserType userType60 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand61 = new booking.BookCommand(bookingReceiver50, "hi!", "hi!", 100, userType60);
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        booking.UserType userType69 = booking.UserType.FACULTY;
        bookingReceiver65.bookSpace("", "", 100, userType69);
        bookingReceiver50.extendBooking("", "", (int) 'a', userType69);
        booking.UserType userType72 = booking.UserType.NON_FACULTY;
        double double73 = bookingReceiver50.getRate(userType72);
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver0, "hi!", "BOOK", 1, userType72);
        java.lang.String str75 = bookingReceiver0.getAction();
        java.lang.String str76 = bookingReceiver0.getAction();
        java.lang.String str77 = bookingReceiver0.getAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType69 + "' != '" + booking.UserType.FACULTY + "'", userType69.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.NON_FACULTY + "'", userType72.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        booking.BookingSystem bookingSystem54 = new booking.BookingSystem((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot55);
        booking.ParkingSpot parkingSpot59 = new booking.ParkingSpot();
        parkingSpot59.occupySpot("hi!");
        bookingSystem58.update((booking.Subject) parkingSpot59);
        parkingSpot51.detach((booking.Observer) bookingSystem58);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        bookingSystem71.update((booking.Subject) parkingSpot72);
        parkingSpot64.detach((booking.Observer) bookingSystem71);
        parkingSpot51.detach((booking.Observer) bookingSystem71);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        parkingSpot78.occupySpot("hi!");
        booking.BookingSystem bookingSystem81 = new booking.BookingSystem((booking.Subject) parkingSpot78);
        booking.ParkingSpot parkingSpot82 = new booking.ParkingSpot();
        parkingSpot82.occupySpot("hi!");
        booking.BookingSystem bookingSystem85 = new booking.BookingSystem((booking.Subject) parkingSpot82);
        booking.ParkingSpot parkingSpot86 = new booking.ParkingSpot();
        parkingSpot86.occupySpot("hi!");
        bookingSystem85.update((booking.Subject) parkingSpot86);
        parkingSpot78.detach((booking.Observer) bookingSystem85);
        bookingSystem71.update((booking.Subject) parkingSpot78);
        booking.ParkingSensor parkingSensor92 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        parkingSensor1.update((booking.Subject) parkingSpot78);
        java.lang.Class<?> wildcardClass94 = parkingSpot78.getClass();
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot15.detach((booking.Observer) parkingSensor30);
        bookingSystem7.update((booking.Subject) parkingSpot15);
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        bookingSystem37.update((booking.Subject) parkingSpot38);
        parkingSpot38.freeSpot();
        java.lang.String str43 = parkingSpot38.getLicensePlate();
        parkingSensor33.update((booking.Subject) parkingSpot38);
        boolean boolean45 = parkingSpot38.isOccupied();
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        booking.UserType userType12 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand13 = new booking.BookCommand(bookingReceiver2, "hi!", "hi!", 100, userType12);
        bookCommand13.doAction();
        bookCommand13.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand13);
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver19 = new booking.BookingReceiver();
        java.lang.String str20 = bookingReceiver19.getAction();
        booking.UserType userType24 = null;
        booking.ExtendCommand extendCommand25 = new booking.ExtendCommand(bookingReceiver19, "hi!", "", 100, userType24);
        booking.BookingReceiver bookingReceiver29 = new booking.BookingReceiver();
        java.lang.String str30 = bookingReceiver29.getAction();
        booking.UserType userType34 = null;
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver29, "hi!", "", 100, userType34);
        booking.UserType userType39 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand40 = new booking.BookCommand(bookingReceiver29, "hi!", "hi!", 100, userType39);
        booking.BookingReceiver bookingReceiver44 = new booking.BookingReceiver();
        booking.UserType userType48 = booking.UserType.FACULTY;
        bookingReceiver44.bookSpace("", "", 100, userType48);
        bookingReceiver29.extendBooking("", "", (int) 'a', userType48);
        booking.ExtendCommand extendCommand51 = new booking.ExtendCommand(bookingReceiver19, "", "", 0, userType48);
        extendCommand51.doAction();
        commandInvoker0.setCommand((booking.ICommand) extendCommand51);
        commandInvoker0.executeCommand();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + booking.UserType.FACULTY + "'", userType12.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.FACULTY + "'", userType39.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType48 + "' != '" + booking.UserType.FACULTY + "'", userType48.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver5 = new booking.BookingReceiver();
        bookingReceiver5.cancelBooking("hi!", "hi!");
        java.lang.String str9 = bookingReceiver5.getAction();
        booking.BookingReceiver bookingReceiver10 = null;
        booking.BookingReceiver bookingReceiver14 = new booking.BookingReceiver();
        booking.UserType userType18 = booking.UserType.FACULTY;
        bookingReceiver14.bookSpace("", "", 100, userType18);
        booking.BookCommand bookCommand20 = new booking.BookCommand(bookingReceiver10, "hi!", "", 0, userType18);
        double double21 = bookingReceiver5.getRate(userType18);
        booking.UserType userType25 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand26 = new booking.ExtendCommand(bookingReceiver5, "BOOK", "EXTEND", (int) (short) 10, userType25);
        booking.BookCommand bookCommand27 = new booking.BookCommand(bookingReceiver0, "CANCEL", "hi!", (int) ' ', userType25);
        java.lang.Class<?> wildcardClass28 = bookCommand27.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CANCEL" + "'", str9, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType18 + "' != '" + booking.UserType.FACULTY + "'", userType18.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 8.0d + "'", double21 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType25 + "' != '" + booking.UserType.FACULTY + "'", userType25.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.CancelCommand cancelCommand49 = new booking.CancelCommand(bookingReceiver0, "BOOK", "BOOK");
        cancelCommand49.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSpot parkingSpot1 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor2 = new booking.ParkingSensor((booking.Subject) parkingSpot1);
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        parkingSpot3.occupySpot("hi!");
        booking.BookingSystem bookingSystem6 = new booking.BookingSystem((booking.Subject) parkingSpot3);
        booking.ParkingSpot parkingSpot7 = new booking.ParkingSpot();
        parkingSpot7.occupySpot("hi!");
        booking.BookingSystem bookingSystem10 = new booking.BookingSystem((booking.Subject) parkingSpot7);
        booking.ParkingSpot parkingSpot11 = new booking.ParkingSpot();
        parkingSpot11.occupySpot("hi!");
        bookingSystem10.update((booking.Subject) parkingSpot11);
        parkingSpot3.detach((booking.Observer) bookingSystem10);
        parkingSensor2.update((booking.Subject) parkingSpot3);
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot3);
        parkingSpot0.detach((booking.Observer) parkingSensor17);
        booking.ParkingSensor parkingSensor19 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.Subject subject20 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingSensor19.update(subject20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Object.equals(Object)\" because \"changedSubject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        parkingSpot0.freeSpot();
        java.lang.String str3 = parkingSpot0.getLicensePlate();
        booking.ParkingSensor parkingSensor4 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        java.lang.Class<?> wildcardClass5 = parkingSpot0.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.CancelCommand cancelCommand20 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        cancelCommand20.doAction();
        cancelCommand20.doAction();
        cancelCommand20.doAction();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        double double4 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("EXTEND", "hi!");
        java.lang.Class<?> wildcardClass8 = bookingReceiver0.getClass();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor41 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor42 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        parkingSpot43.occupySpot("hi!");
        booking.BookingSystem bookingSystem46 = new booking.BookingSystem((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot47 = new booking.ParkingSpot();
        parkingSpot47.occupySpot("hi!");
        booking.BookingSystem bookingSystem50 = new booking.BookingSystem((booking.Subject) parkingSpot47);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        bookingSystem50.update((booking.Subject) parkingSpot51);
        parkingSpot43.detach((booking.Observer) bookingSystem50);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor57 = new booking.ParkingSensor((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        booking.BookingSystem bookingSystem65 = new booking.BookingSystem((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        bookingSystem65.update((booking.Subject) parkingSpot66);
        parkingSpot58.detach((booking.Observer) bookingSystem65);
        parkingSensor57.update((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor73 = new booking.ParkingSensor((booking.Subject) parkingSpot72);
        parkingSpot58.detach((booking.Observer) parkingSensor73);
        bookingSystem50.update((booking.Subject) parkingSpot58);
        parkingSpot58.freeSpot();
        parkingSensor42.update((booking.Subject) parkingSpot58);
        booking.BookingSystem bookingSystem78 = new booking.BookingSystem((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot79 = new booking.ParkingSpot();
        parkingSpot79.occupySpot("hi!");
        booking.BookingSystem bookingSystem82 = new booking.BookingSystem((booking.Subject) parkingSpot79);
        booking.ParkingSpot parkingSpot83 = new booking.ParkingSpot();
        parkingSpot83.occupySpot("hi!");
        booking.BookingSystem bookingSystem86 = new booking.BookingSystem((booking.Subject) parkingSpot83);
        booking.ParkingSpot parkingSpot87 = new booking.ParkingSpot();
        parkingSpot87.occupySpot("hi!");
        bookingSystem86.update((booking.Subject) parkingSpot87);
        parkingSpot79.detach((booking.Observer) bookingSystem86);
        boolean boolean92 = parkingSpot79.isOccupied();
        booking.ParkingSensor parkingSensor93 = new booking.ParkingSensor((booking.Subject) parkingSpot79);
        booking.ParkingSensor parkingSensor94 = new booking.ParkingSensor((booking.Subject) parkingSpot79);
        bookingSystem78.update((booking.Subject) parkingSpot79);
        booking.Subject subject96 = null;
        // The following exception was thrown during execution in test generation
        try {
            bookingSystem78.update(subject96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Object.equals(Object)\" because \"changedSubject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot15.detach((booking.Observer) parkingSensor30);
        bookingSystem7.update((booking.Subject) parkingSpot15);
        parkingSpot15.occupySpot("BOOK");
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        booking.BookingSystem bookingSystem42 = new booking.BookingSystem((booking.Subject) parkingSpot39);
        bookingSystem38.update((booking.Subject) parkingSpot39);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        booking.BookingSystem bookingSystem47 = new booking.BookingSystem((booking.Subject) parkingSpot44);
        booking.ParkingSpot parkingSpot48 = new booking.ParkingSpot();
        parkingSpot48.occupySpot("hi!");
        booking.BookingSystem bookingSystem51 = new booking.BookingSystem((booking.Subject) parkingSpot48);
        bookingSystem47.update((booking.Subject) parkingSpot48);
        parkingSpot39.detach((booking.Observer) bookingSystem47);
        parkingSpot15.attach((booking.Observer) bookingSystem47);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot55);
        bookingSystem47.update((booking.Subject) parkingSpot55);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        booking.BookingSystem bookingSystem63 = new booking.BookingSystem((booking.Subject) parkingSpot60);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        bookingSystem63.update((booking.Subject) parkingSpot64);
        java.lang.String str69 = parkingSpot64.getLicensePlate();
        booking.ParkingSensor parkingSensor70 = new booking.ParkingSensor((booking.Subject) parkingSpot64);
        java.lang.String str71 = parkingSpot64.getLicensePlate();
        bookingSystem47.update((booking.Subject) parkingSpot64);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        booking.UserType userType4 = booking.UserType.STUDENT;
        double double5 = bookingReceiver0.getRate(userType4);
        double double6 = bookingReceiver0.getDeposit();
        java.lang.String str7 = bookingReceiver0.getAction();
        java.lang.Class<?> wildcardClass8 = bookingReceiver0.getClass();
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.STUDENT + "'", userType4.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 5.0d + "'", double5 == 5.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CANCEL" + "'", str7, "CANCEL");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        java.lang.String str4 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver5 = null;
        booking.BookingReceiver bookingReceiver9 = new booking.BookingReceiver();
        booking.UserType userType13 = booking.UserType.FACULTY;
        bookingReceiver9.bookSpace("", "", 100, userType13);
        booking.BookCommand bookCommand15 = new booking.BookCommand(bookingReceiver5, "hi!", "", 0, userType13);
        double double16 = bookingReceiver0.getRate(userType13);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand21 = new booking.ExtendCommand(bookingReceiver0, "BOOK", "EXTEND", (int) (short) 10, userType20);
        booking.BookingReceiver bookingReceiver22 = new booking.BookingReceiver();
        java.lang.String str23 = bookingReceiver22.getAction();
        booking.UserType userType27 = null;
        booking.ExtendCommand extendCommand28 = new booking.ExtendCommand(bookingReceiver22, "hi!", "", 100, userType27);
        java.lang.String str29 = bookingReceiver22.getAction();
        double double30 = bookingReceiver22.getDeposit();
        booking.BookingReceiver bookingReceiver34 = new booking.BookingReceiver();
        bookingReceiver34.cancelBooking("hi!", "hi!");
        double double38 = bookingReceiver34.getAmount();
        bookingReceiver34.cancelBooking("EXTEND", "hi!");
        booking.BookingReceiver bookingReceiver42 = new booking.BookingReceiver();
        java.lang.String str43 = bookingReceiver42.getAction();
        booking.UserType userType47 = null;
        booking.ExtendCommand extendCommand48 = new booking.ExtendCommand(bookingReceiver42, "hi!", "", 100, userType47);
        booking.BookingReceiver bookingReceiver52 = new booking.BookingReceiver();
        java.lang.String str53 = bookingReceiver52.getAction();
        booking.UserType userType57 = null;
        booking.ExtendCommand extendCommand58 = new booking.ExtendCommand(bookingReceiver52, "hi!", "", 100, userType57);
        booking.UserType userType62 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand63 = new booking.BookCommand(bookingReceiver52, "hi!", "hi!", 100, userType62);
        booking.BookingReceiver bookingReceiver67 = new booking.BookingReceiver();
        booking.UserType userType71 = booking.UserType.FACULTY;
        bookingReceiver67.bookSpace("", "", 100, userType71);
        bookingReceiver52.extendBooking("", "", (int) 'a', userType71);
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver42, "", "", 0, userType71);
        booking.BookingReceiver bookingReceiver75 = new booking.BookingReceiver();
        java.lang.String str76 = bookingReceiver75.getAction();
        booking.UserType userType80 = null;
        booking.ExtendCommand extendCommand81 = new booking.ExtendCommand(bookingReceiver75, "hi!", "", 100, userType80);
        java.lang.String str82 = bookingReceiver75.getAction();
        booking.UserType userType86 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand87 = new booking.ExtendCommand(bookingReceiver75, "hi!", "hi!", (int) (byte) 0, userType86);
        double double88 = bookingReceiver42.getRate(userType86);
        double double89 = bookingReceiver34.getRate(userType86);
        booking.BookCommand bookCommand90 = new booking.BookCommand(bookingReceiver22, "hi!", "EXTEND", 100, userType86);
        double double91 = bookingReceiver0.getRate(userType86);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CANCEL" + "'", str4, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType13 + "' != '" + booking.UserType.FACULTY + "'", userType13.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 8.0d + "'", double16 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + userType62 + "' != '" + booking.UserType.FACULTY + "'", userType62.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType71 + "' != '" + booking.UserType.FACULTY + "'", userType71.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + userType86 + "' != '" + booking.UserType.NON_FACULTY + "'", userType86.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 10.0d + "'", double88 == 10.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 10.0d + "'", double89 == 10.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.BookingReceiver bookingReceiver15 = new booking.BookingReceiver();
        booking.UserType userType19 = booking.UserType.FACULTY;
        bookingReceiver15.bookSpace("", "", 100, userType19);
        bookingReceiver0.extendBooking("", "", (int) 'a', userType19);
        booking.UserType userType22 = booking.UserType.NON_FACULTY;
        double double23 = bookingReceiver0.getRate(userType22);
        java.lang.String str24 = bookingReceiver0.getAction();
        java.lang.Class<?> wildcardClass25 = bookingReceiver0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType19 + "' != '" + booking.UserType.FACULTY + "'", userType19.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType22 + "' != '" + booking.UserType.NON_FACULTY + "'", userType22.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "EXTEND" + "'", str24, "EXTEND");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        booking.UserType userType4 = booking.UserType.STUDENT;
        double double5 = bookingReceiver0.getRate(userType4);
        double double6 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("", "BOOK");
        booking.CancelCommand cancelCommand12 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        booking.CancelCommand cancelCommand15 = new booking.CancelCommand(bookingReceiver0, "CANCEL", "BOOK");
        cancelCommand15.doAction();
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.STUDENT + "'", userType4.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 5.0d + "'", double5 == 5.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = new booking.BookingReceiver();
        java.lang.String str2 = bookingReceiver1.getAction();
        booking.UserType userType6 = null;
        booking.ExtendCommand extendCommand7 = new booking.ExtendCommand(bookingReceiver1, "hi!", "", 100, userType6);
        booking.UserType userType11 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand12 = new booking.BookCommand(bookingReceiver1, "hi!", "hi!", 100, userType11);
        booking.UserType userType16 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver1, "", "", (int) (short) 1, userType16);
        commandInvoker0.setCommand((booking.ICommand) extendCommand17);
        booking.BookingReceiver bookingReceiver19 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver23 = new booking.BookingReceiver();
        java.lang.String str24 = bookingReceiver23.getAction();
        booking.UserType userType28 = null;
        booking.ExtendCommand extendCommand29 = new booking.ExtendCommand(bookingReceiver23, "hi!", "", 100, userType28);
        java.lang.String str30 = bookingReceiver23.getAction();
        booking.UserType userType34 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver23, "hi!", "hi!", (int) (byte) 0, userType34);
        booking.ExtendCommand extendCommand36 = new booking.ExtendCommand(bookingReceiver19, "", "", (int) (byte) 100, userType34);
        booking.BookingReceiver bookingReceiver40 = new booking.BookingReceiver();
        java.lang.String str41 = bookingReceiver40.getAction();
        booking.UserType userType45 = null;
        booking.ExtendCommand extendCommand46 = new booking.ExtendCommand(bookingReceiver40, "hi!", "", 100, userType45);
        booking.UserType userType50 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand51 = new booking.BookCommand(bookingReceiver40, "hi!", "hi!", 100, userType50);
        bookingReceiver19.bookSpace("hi!", "hi!", (int) (short) -1, userType50);
        booking.BookingReceiver bookingReceiver56 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver60 = new booking.BookingReceiver();
        java.lang.String str61 = bookingReceiver60.getAction();
        booking.UserType userType65 = null;
        booking.ExtendCommand extendCommand66 = new booking.ExtendCommand(bookingReceiver60, "hi!", "", 100, userType65);
        java.lang.String str67 = bookingReceiver60.getAction();
        booking.UserType userType71 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand72 = new booking.ExtendCommand(bookingReceiver60, "hi!", "hi!", (int) (byte) 0, userType71);
        booking.ExtendCommand extendCommand73 = new booking.ExtendCommand(bookingReceiver56, "", "", (int) (byte) 100, userType71);
        booking.BookingReceiver bookingReceiver77 = new booking.BookingReceiver();
        java.lang.String str78 = bookingReceiver77.getAction();
        booking.UserType userType82 = null;
        booking.ExtendCommand extendCommand83 = new booking.ExtendCommand(bookingReceiver77, "hi!", "", 100, userType82);
        booking.UserType userType87 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand88 = new booking.BookCommand(bookingReceiver77, "hi!", "hi!", 100, userType87);
        bookingReceiver56.bookSpace("hi!", "hi!", (int) (short) -1, userType87);
        booking.BookCommand bookCommand90 = new booking.BookCommand(bookingReceiver19, "hi!", "", 0, userType87);
        commandInvoker0.setCommand((booking.ICommand) bookCommand90);
        bookCommand90.doAction();
        bookCommand90.doAction();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.FACULTY + "'", userType11.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType16 + "' != '" + booking.UserType.FACULTY + "'", userType16.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + userType34 + "' != '" + booking.UserType.NON_FACULTY + "'", userType34.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + userType50 + "' != '" + booking.UserType.FACULTY + "'", userType50.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + userType71 + "' != '" + booking.UserType.NON_FACULTY + "'", userType71.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + userType87 + "' != '" + booking.UserType.FACULTY + "'", userType87.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        booking.UserType userType12 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand13 = new booking.BookCommand(bookingReceiver2, "hi!", "hi!", 100, userType12);
        bookCommand13.doAction();
        bookCommand13.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand13);
        booking.BookingReceiver bookingReceiver17 = new booking.BookingReceiver();
        java.lang.String str18 = bookingReceiver17.getAction();
        booking.UserType userType22 = null;
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver17, "hi!", "", 100, userType22);
        booking.UserType userType27 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand28 = new booking.BookCommand(bookingReceiver17, "hi!", "hi!", 100, userType27);
        booking.BookingReceiver bookingReceiver29 = new booking.BookingReceiver();
        java.lang.String str30 = bookingReceiver29.getAction();
        booking.UserType userType34 = null;
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver29, "hi!", "", 100, userType34);
        booking.UserType userType39 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand40 = new booking.BookCommand(bookingReceiver29, "hi!", "hi!", 100, userType39);
        booking.BookingReceiver bookingReceiver44 = new booking.BookingReceiver();
        booking.UserType userType48 = booking.UserType.FACULTY;
        bookingReceiver44.bookSpace("", "", 100, userType48);
        bookingReceiver29.extendBooking("", "", (int) 'a', userType48);
        double double51 = bookingReceiver17.getRate(userType48);
        booking.UserType userType55 = booking.UserType.VISITOR;
        bookingReceiver17.extendBooking("", "hi!", (int) '#', userType55);
        java.lang.String str57 = bookingReceiver17.getAction();
        booking.BookingReceiver bookingReceiver61 = new booking.BookingReceiver();
        bookingReceiver61.cancelBooking("hi!", "hi!");
        bookingReceiver61.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver68 = new booking.BookingReceiver();
        booking.UserType userType72 = booking.UserType.FACULTY;
        bookingReceiver68.bookSpace("", "", 100, userType72);
        double double74 = bookingReceiver61.getRate(userType72);
        booking.UserType userType78 = booking.UserType.VISITOR;
        booking.ExtendCommand extendCommand79 = new booking.ExtendCommand(bookingReceiver61, "BOOK", "", (int) '#', userType78);
        booking.ExtendCommand extendCommand80 = new booking.ExtendCommand(bookingReceiver17, "", "CANCEL", (int) 'a', userType78);
        commandInvoker0.setCommand((booking.ICommand) extendCommand80);
        commandInvoker0.executeCommand();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + booking.UserType.FACULTY + "'", userType12.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + userType27 + "' != '" + booking.UserType.FACULTY + "'", userType27.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.FACULTY + "'", userType39.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType48 + "' != '" + booking.UserType.FACULTY + "'", userType48.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 8.0d + "'", double51 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType55 + "' != '" + booking.UserType.VISITOR + "'", userType55.equals(booking.UserType.VISITOR));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "EXTEND" + "'", str57, "EXTEND");
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.FACULTY + "'", userType72.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 8.0d + "'", double74 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType78 + "' != '" + booking.UserType.VISITOR + "'", userType78.equals(booking.UserType.VISITOR));
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSensor parkingSensor10 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        parkingSpot4.freeSpot();
        java.lang.String str13 = parkingSpot4.getLicensePlate();
        booking.BookingSystem bookingSystem14 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem15 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        double double2 = bookingReceiver0.getDeposit();
        java.lang.String str3 = bookingReceiver0.getAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        double double4 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("EXTEND", "hi!");
        java.lang.String str8 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver12 = new booking.BookingReceiver();
        bookingReceiver12.cancelBooking("hi!", "hi!");
        java.lang.String str16 = bookingReceiver12.getAction();
        booking.BookingReceiver bookingReceiver17 = null;
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        booking.UserType userType25 = booking.UserType.FACULTY;
        bookingReceiver21.bookSpace("", "", 100, userType25);
        booking.BookCommand bookCommand27 = new booking.BookCommand(bookingReceiver17, "hi!", "", 0, userType25);
        double double28 = bookingReceiver12.getRate(userType25);
        java.lang.String str29 = bookingReceiver12.getAction();
        booking.BookingReceiver bookingReceiver30 = new booking.BookingReceiver();
        java.lang.String str31 = bookingReceiver30.getAction();
        booking.UserType userType35 = null;
        booking.ExtendCommand extendCommand36 = new booking.ExtendCommand(bookingReceiver30, "hi!", "", 100, userType35);
        java.lang.String str37 = bookingReceiver30.getAction();
        booking.UserType userType41 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand42 = new booking.ExtendCommand(bookingReceiver30, "hi!", "hi!", (int) (byte) 0, userType41);
        booking.BookingReceiver bookingReceiver46 = new booking.BookingReceiver();
        java.lang.String str47 = bookingReceiver46.getAction();
        booking.UserType userType51 = null;
        booking.ExtendCommand extendCommand52 = new booking.ExtendCommand(bookingReceiver46, "hi!", "", 100, userType51);
        booking.UserType userType56 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand57 = new booking.BookCommand(bookingReceiver46, "hi!", "hi!", 100, userType56);
        booking.BookingReceiver bookingReceiver61 = new booking.BookingReceiver();
        booking.UserType userType65 = booking.UserType.FACULTY;
        bookingReceiver61.bookSpace("", "", 100, userType65);
        bookingReceiver46.extendBooking("", "", (int) 'a', userType65);
        bookingReceiver30.bookSpace("EXTEND", "hi!", (int) (byte) 1, userType65);
        double double69 = bookingReceiver12.getRate(userType65);
        bookingReceiver0.extendBooking("hi!", "CANCEL", 100, userType65);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CANCEL" + "'", str8, "CANCEL");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CANCEL" + "'", str16, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType25 + "' != '" + booking.UserType.FACULTY + "'", userType25.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 8.0d + "'", double28 == 8.0d);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CANCEL" + "'", str29, "CANCEL");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + userType41 + "' != '" + booking.UserType.NON_FACULTY + "'", userType41.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + userType56 + "' != '" + booking.UserType.FACULTY + "'", userType56.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType65 + "' != '" + booking.UserType.FACULTY + "'", userType65.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 8.0d + "'", double69 == 8.0d);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.BookingReceiver bookingReceiver50 = new booking.BookingReceiver();
        java.lang.String str51 = bookingReceiver50.getAction();
        booking.UserType userType55 = null;
        booking.ExtendCommand extendCommand56 = new booking.ExtendCommand(bookingReceiver50, "hi!", "", 100, userType55);
        booking.UserType userType60 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand61 = new booking.BookCommand(bookingReceiver50, "hi!", "hi!", 100, userType60);
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        booking.UserType userType69 = booking.UserType.FACULTY;
        bookingReceiver65.bookSpace("", "", 100, userType69);
        bookingReceiver50.extendBooking("", "", (int) 'a', userType69);
        booking.UserType userType72 = booking.UserType.NON_FACULTY;
        double double73 = bookingReceiver50.getRate(userType72);
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver0, "hi!", "BOOK", 1, userType72);
        java.lang.String str75 = bookingReceiver0.getAction();
        java.lang.String str76 = bookingReceiver0.getAction();
        double double77 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType69 + "' != '" + booking.UserType.FACULTY + "'", userType69.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.NON_FACULTY + "'", userType72.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        booking.UserType userType12 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand13 = new booking.BookCommand(bookingReceiver2, "hi!", "hi!", 100, userType12);
        bookCommand13.doAction();
        bookCommand13.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand13);
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver19 = new booking.BookingReceiver();
        java.lang.String str20 = bookingReceiver19.getAction();
        booking.UserType userType24 = null;
        booking.ExtendCommand extendCommand25 = new booking.ExtendCommand(bookingReceiver19, "hi!", "", 100, userType24);
        booking.BookingReceiver bookingReceiver29 = new booking.BookingReceiver();
        java.lang.String str30 = bookingReceiver29.getAction();
        booking.UserType userType34 = null;
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver29, "hi!", "", 100, userType34);
        booking.UserType userType39 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand40 = new booking.BookCommand(bookingReceiver29, "hi!", "hi!", 100, userType39);
        booking.BookingReceiver bookingReceiver44 = new booking.BookingReceiver();
        booking.UserType userType48 = booking.UserType.FACULTY;
        bookingReceiver44.bookSpace("", "", 100, userType48);
        bookingReceiver29.extendBooking("", "", (int) 'a', userType48);
        booking.ExtendCommand extendCommand51 = new booking.ExtendCommand(bookingReceiver19, "", "", 0, userType48);
        extendCommand51.doAction();
        commandInvoker0.setCommand((booking.ICommand) extendCommand51);
        booking.CommandInvoker commandInvoker54 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver55 = null;
        booking.BookingReceiver bookingReceiver59 = new booking.BookingReceiver();
        booking.UserType userType63 = booking.UserType.FACULTY;
        bookingReceiver59.bookSpace("", "", 100, userType63);
        booking.BookCommand bookCommand65 = new booking.BookCommand(bookingReceiver55, "hi!", "", 0, userType63);
        commandInvoker54.setCommand((booking.ICommand) bookCommand65);
        commandInvoker0.setCommand((booking.ICommand) bookCommand65);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + booking.UserType.FACULTY + "'", userType12.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.FACULTY + "'", userType39.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType48 + "' != '" + booking.UserType.FACULTY + "'", userType48.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType63 + "' != '" + booking.UserType.FACULTY + "'", userType63.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        parkingSensor17.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        booking.BookingSystem bookingSystem41 = new booking.BookingSystem((booking.Subject) parkingSpot38);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        bookingSystem41.update((booking.Subject) parkingSpot42);
        parkingSpot34.detach((booking.Observer) bookingSystem41);
        parkingSensor33.update((booking.Subject) parkingSpot34);
        parkingSpot18.detach((booking.Observer) parkingSensor33);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.Subject subject50 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingSensor1.update(subject50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Object.equals(Object)\" because \"changedSubject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot15.detach((booking.Observer) parkingSensor30);
        bookingSystem7.update((booking.Subject) parkingSpot15);
        booking.BookingSystem bookingSystem33 = new booking.BookingSystem((booking.Subject) parkingSpot15);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        java.lang.String str4 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver5 = null;
        booking.BookingReceiver bookingReceiver9 = new booking.BookingReceiver();
        booking.UserType userType13 = booking.UserType.FACULTY;
        bookingReceiver9.bookSpace("", "", 100, userType13);
        booking.BookCommand bookCommand15 = new booking.BookCommand(bookingReceiver5, "hi!", "", 0, userType13);
        double double16 = bookingReceiver0.getRate(userType13);
        java.lang.Class<?> wildcardClass17 = bookingReceiver0.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CANCEL" + "'", str4, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType13 + "' != '" + booking.UserType.FACULTY + "'", userType13.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 8.0d + "'", double16 == 8.0d);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        bookingReceiver0.cancelBooking("", "");
        booking.CancelCommand cancelCommand9 = new booking.CancelCommand(bookingReceiver0, "", "hi!");
        cancelCommand9.doAction();
        cancelCommand9.doAction();
        cancelCommand9.doAction();
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        booking.UserType userType4 = booking.UserType.STUDENT;
        double double5 = bookingReceiver0.getRate(userType4);
        booking.CancelCommand cancelCommand8 = new booking.CancelCommand(bookingReceiver0, "BOOK", "hi!");
        booking.BookingReceiver bookingReceiver12 = new booking.BookingReceiver();
        bookingReceiver12.cancelBooking("hi!", "hi!");
        bookingReceiver12.cancelBooking("", "");
        booking.UserType userType19 = booking.UserType.STUDENT;
        double double20 = bookingReceiver12.getRate(userType19);
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver0, "", "hi!", (int) '#', userType19);
        java.lang.String str22 = bookingReceiver0.getAction();
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.STUDENT + "'", userType4.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 5.0d + "'", double5 == 5.0d);
        org.junit.Assert.assertTrue("'" + userType19 + "' != '" + booking.UserType.STUDENT + "'", userType19.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5.0d + "'", double20 == 5.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CANCEL" + "'", str22, "CANCEL");
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor41 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        booking.BookingSystem bookingSystem45 = new booking.BookingSystem((booking.Subject) parkingSpot42);
        booking.ParkingSpot parkingSpot46 = new booking.ParkingSpot();
        parkingSpot46.occupySpot("hi!");
        booking.BookingSystem bookingSystem49 = new booking.BookingSystem((booking.Subject) parkingSpot46);
        booking.ParkingSpot parkingSpot50 = new booking.ParkingSpot();
        parkingSpot50.occupySpot("hi!");
        bookingSystem49.update((booking.Subject) parkingSpot50);
        parkingSpot42.detach((booking.Observer) bookingSystem49);
        boolean boolean55 = parkingSpot42.isOccupied();
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        booking.BookingSystem bookingSystem59 = new booking.BookingSystem((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        booking.BookingSystem bookingSystem63 = new booking.BookingSystem((booking.Subject) parkingSpot60);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        bookingSystem63.update((booking.Subject) parkingSpot64);
        parkingSpot56.detach((booking.Observer) bookingSystem63);
        booking.ParkingSpot parkingSpot69 = new booking.ParkingSpot();
        parkingSpot69.occupySpot("hi!");
        booking.BookingSystem bookingSystem72 = new booking.BookingSystem((booking.Subject) parkingSpot69);
        booking.ParkingSpot parkingSpot73 = new booking.ParkingSpot();
        parkingSpot73.occupySpot("hi!");
        booking.BookingSystem bookingSystem76 = new booking.BookingSystem((booking.Subject) parkingSpot73);
        booking.ParkingSpot parkingSpot77 = new booking.ParkingSpot();
        parkingSpot77.occupySpot("hi!");
        bookingSystem76.update((booking.Subject) parkingSpot77);
        parkingSpot69.detach((booking.Observer) bookingSystem76);
        booking.ParkingSpot parkingSpot82 = new booking.ParkingSpot();
        parkingSpot82.occupySpot("hi!");
        booking.BookingSystem bookingSystem85 = new booking.BookingSystem((booking.Subject) parkingSpot82);
        booking.ParkingSpot parkingSpot86 = new booking.ParkingSpot();
        parkingSpot86.occupySpot("hi!");
        booking.BookingSystem bookingSystem89 = new booking.BookingSystem((booking.Subject) parkingSpot86);
        booking.ParkingSpot parkingSpot90 = new booking.ParkingSpot();
        parkingSpot90.occupySpot("hi!");
        bookingSystem89.update((booking.Subject) parkingSpot90);
        parkingSpot82.detach((booking.Observer) bookingSystem89);
        parkingSpot69.detach((booking.Observer) bookingSystem89);
        bookingSystem63.update((booking.Subject) parkingSpot69);
        parkingSpot42.detach((booking.Observer) bookingSystem63);
        parkingSensor41.update((booking.Subject) parkingSpot42);
        java.lang.Class<?> wildcardClass99 = parkingSensor41.getClass();
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSpot2.detach((booking.Observer) bookingSystem22);
        parkingSpot2.occupySpot("CANCEL");
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        booking.BookingSystem bookingSystem41 = new booking.BookingSystem((booking.Subject) parkingSpot38);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        bookingSystem41.update((booking.Subject) parkingSpot42);
        parkingSpot34.detach((booking.Observer) bookingSystem41);
        parkingSensor33.update((booking.Subject) parkingSpot34);
        parkingSpot2.detach((booking.Observer) parkingSensor33);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        booking.BookingSystem bookingSystem56 = new booking.BookingSystem((booking.Subject) parkingSpot53);
        booking.ParkingSpot parkingSpot57 = new booking.ParkingSpot();
        parkingSpot57.occupySpot("hi!");
        bookingSystem56.update((booking.Subject) parkingSpot57);
        parkingSpot49.detach((booking.Observer) bookingSystem56);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor63 = new booking.ParkingSensor((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        bookingSystem71.update((booking.Subject) parkingSpot72);
        parkingSpot64.detach((booking.Observer) bookingSystem71);
        parkingSensor63.update((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor79 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        parkingSpot64.detach((booking.Observer) parkingSensor79);
        bookingSystem56.update((booking.Subject) parkingSpot64);
        parkingSensor33.update((booking.Subject) parkingSpot64);
        booking.ParkingSensor parkingSensor83 = new booking.ParkingSensor((booking.Subject) parkingSpot64);
        java.lang.String str84 = parkingSpot64.getLicensePlate();
        parkingSpot64.freeSpot();
        parkingSpot64.freeSpot();
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = new booking.BookingReceiver();
        java.lang.String str2 = bookingReceiver1.getAction();
        booking.UserType userType6 = null;
        booking.ExtendCommand extendCommand7 = new booking.ExtendCommand(bookingReceiver1, "hi!", "", 100, userType6);
        booking.UserType userType11 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand12 = new booking.BookCommand(bookingReceiver1, "hi!", "hi!", 100, userType11);
        booking.UserType userType16 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver1, "", "", (int) (short) 1, userType16);
        commandInvoker0.setCommand((booking.ICommand) extendCommand17);
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.FACULTY + "'", userType11.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType16 + "' != '" + booking.UserType.FACULTY + "'", userType16.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        booking.UserType userType4 = booking.UserType.STUDENT;
        double double5 = bookingReceiver0.getRate(userType4);
        booking.CancelCommand cancelCommand8 = new booking.CancelCommand(bookingReceiver0, "BOOK", "hi!");
        booking.BookingReceiver bookingReceiver12 = new booking.BookingReceiver();
        bookingReceiver12.cancelBooking("hi!", "hi!");
        bookingReceiver12.cancelBooking("", "");
        booking.UserType userType19 = booking.UserType.STUDENT;
        double double20 = bookingReceiver12.getRate(userType19);
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver0, "", "hi!", (int) '#', userType19);
        double double22 = bookingReceiver0.getAmount();
        booking.UserType userType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double24 = bookingReceiver0.getRate(userType23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.UserType.ordinal()\" because \"userType\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.STUDENT + "'", userType4.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 5.0d + "'", double5 == 5.0d);
        org.junit.Assert.assertTrue("'" + userType19 + "' != '" + booking.UserType.STUDENT + "'", userType19.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5.0d + "'", double20 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        double double2 = bookingReceiver0.getDeposit();
        booking.BookingReceiver bookingReceiver6 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        java.lang.String str17 = bookingReceiver10.getAction();
        booking.UserType userType21 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand22 = new booking.ExtendCommand(bookingReceiver10, "hi!", "hi!", (int) (byte) 0, userType21);
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver6, "", "", (int) (byte) 100, userType21);
        booking.CancelCommand cancelCommand26 = new booking.CancelCommand(bookingReceiver6, "hi!", "hi!");
        booking.BookingReceiver bookingReceiver30 = new booking.BookingReceiver();
        java.lang.String str31 = bookingReceiver30.getAction();
        booking.UserType userType35 = null;
        booking.ExtendCommand extendCommand36 = new booking.ExtendCommand(bookingReceiver30, "hi!", "", 100, userType35);
        booking.UserType userType40 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand41 = new booking.BookCommand(bookingReceiver30, "hi!", "hi!", 100, userType40);
        booking.UserType userType45 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand46 = new booking.ExtendCommand(bookingReceiver30, "", "", (int) (short) 1, userType45);
        bookingReceiver6.bookSpace("CANCEL", "EXTEND", (int) (byte) 10, userType45);
        bookingReceiver0.extendBooking("CANCEL", "hi!", (-1), userType45);
        java.lang.String str49 = bookingReceiver0.getAction();
        double double50 = bookingReceiver0.getAmount();
        double double51 = bookingReceiver0.getAmount();
        java.lang.String str52 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("BOOK", "EXTEND");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + userType21 + "' != '" + booking.UserType.NON_FACULTY + "'", userType21.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + userType40 + "' != '" + booking.UserType.FACULTY + "'", userType40.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType45 + "' != '" + booking.UserType.FACULTY + "'", userType45.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "EXTEND" + "'", str49, "EXTEND");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-8.0d) + "'", double50 == (-8.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-8.0d) + "'", double51 == (-8.0d));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "EXTEND" + "'", str52, "EXTEND");
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.BookingReceiver bookingReceiver50 = new booking.BookingReceiver();
        java.lang.String str51 = bookingReceiver50.getAction();
        booking.UserType userType55 = null;
        booking.ExtendCommand extendCommand56 = new booking.ExtendCommand(bookingReceiver50, "hi!", "", 100, userType55);
        booking.UserType userType60 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand61 = new booking.BookCommand(bookingReceiver50, "hi!", "hi!", 100, userType60);
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        booking.UserType userType69 = booking.UserType.FACULTY;
        bookingReceiver65.bookSpace("", "", 100, userType69);
        bookingReceiver50.extendBooking("", "", (int) 'a', userType69);
        booking.UserType userType72 = booking.UserType.NON_FACULTY;
        double double73 = bookingReceiver50.getRate(userType72);
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver0, "hi!", "BOOK", 1, userType72);
        booking.CancelCommand cancelCommand77 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        bookingReceiver0.cancelBooking("BOOK", "CANCEL");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType69 + "' != '" + booking.UserType.FACULTY + "'", userType69.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.NON_FACULTY + "'", userType72.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        double double8 = bookingReceiver0.getDeposit();
        java.lang.String str9 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("BOOK", "");
        booking.BookingReceiver bookingReceiver16 = new booking.BookingReceiver();
        java.lang.String str17 = bookingReceiver16.getAction();
        booking.UserType userType21 = null;
        booking.ExtendCommand extendCommand22 = new booking.ExtendCommand(bookingReceiver16, "hi!", "", 100, userType21);
        booking.UserType userType26 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand27 = new booking.BookCommand(bookingReceiver16, "hi!", "hi!", 100, userType26);
        booking.BookingReceiver bookingReceiver28 = new booking.BookingReceiver();
        java.lang.String str29 = bookingReceiver28.getAction();
        booking.UserType userType33 = null;
        booking.ExtendCommand extendCommand34 = new booking.ExtendCommand(bookingReceiver28, "hi!", "", 100, userType33);
        booking.UserType userType38 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand39 = new booking.BookCommand(bookingReceiver28, "hi!", "hi!", 100, userType38);
        booking.BookingReceiver bookingReceiver43 = new booking.BookingReceiver();
        booking.UserType userType47 = booking.UserType.FACULTY;
        bookingReceiver43.bookSpace("", "", 100, userType47);
        bookingReceiver28.extendBooking("", "", (int) 'a', userType47);
        double double50 = bookingReceiver16.getRate(userType47);
        booking.BookCommand bookCommand51 = new booking.BookCommand(bookingReceiver0, "BOOK", "BOOK", (int) (byte) 10, userType47);
        bookCommand51.doAction();
        bookCommand51.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + userType26 + "' != '" + booking.UserType.FACULTY + "'", userType26.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + userType38 + "' != '" + booking.UserType.FACULTY + "'", userType38.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType47 + "' != '" + booking.UserType.FACULTY + "'", userType47.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.0d + "'", double50 == 8.0d);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("BOOK", "CANCEL");
        booking.BookingReceiver bookingReceiver14 = new booking.BookingReceiver();
        java.lang.String str15 = bookingReceiver14.getAction();
        booking.UserType userType19 = null;
        booking.ExtendCommand extendCommand20 = new booking.ExtendCommand(bookingReceiver14, "hi!", "", 100, userType19);
        booking.UserType userType24 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand25 = new booking.BookCommand(bookingReceiver14, "hi!", "hi!", 100, userType24);
        booking.BookingReceiver bookingReceiver26 = new booking.BookingReceiver();
        java.lang.String str27 = bookingReceiver26.getAction();
        booking.UserType userType31 = null;
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver26, "hi!", "", 100, userType31);
        booking.UserType userType36 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand37 = new booking.BookCommand(bookingReceiver26, "hi!", "hi!", 100, userType36);
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        booking.UserType userType45 = booking.UserType.FACULTY;
        bookingReceiver41.bookSpace("", "", 100, userType45);
        bookingReceiver26.extendBooking("", "", (int) 'a', userType45);
        double double48 = bookingReceiver14.getRate(userType45);
        booking.ExtendCommand extendCommand49 = new booking.ExtendCommand(bookingReceiver0, "BOOK", "", 100, userType45);
        double double50 = bookingReceiver0.getAmount();
        java.lang.String str51 = bookingReceiver0.getAction();
        booking.UserType userType55 = null;
        // The following exception was thrown during execution in test generation
        try {
            bookingReceiver0.bookSpace("hi!", "", (int) (short) 0, userType55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.UserType.ordinal()\" because \"userType\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + userType24 + "' != '" + booking.UserType.FACULTY + "'", userType24.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + userType36 + "' != '" + booking.UserType.FACULTY + "'", userType36.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType45 + "' != '" + booking.UserType.FACULTY + "'", userType45.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 8.0d + "'", double48 == 8.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "CANCEL" + "'", str51, "CANCEL");
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSensor parkingSensor10 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot12 = new booking.ParkingSpot();
        parkingSpot12.occupySpot("hi!");
        booking.BookingSystem bookingSystem15 = new booking.BookingSystem((booking.Subject) parkingSpot12);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        parkingSpot16.occupySpot("hi!");
        booking.BookingSystem bookingSystem19 = new booking.BookingSystem((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        parkingSpot20.occupySpot("hi!");
        bookingSystem19.update((booking.Subject) parkingSpot20);
        parkingSpot12.detach((booking.Observer) bookingSystem19);
        booking.ParkingSpot parkingSpot25 = new booking.ParkingSpot();
        parkingSpot25.occupySpot("hi!");
        booking.BookingSystem bookingSystem28 = new booking.BookingSystem((booking.Subject) parkingSpot25);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        parkingSpot29.occupySpot("hi!");
        booking.BookingSystem bookingSystem32 = new booking.BookingSystem((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        bookingSystem32.update((booking.Subject) parkingSpot33);
        parkingSpot25.detach((booking.Observer) bookingSystem32);
        parkingSpot12.detach((booking.Observer) bookingSystem32);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor40 = new booking.ParkingSensor((booking.Subject) parkingSpot39);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.occupySpot("hi!");
        booking.BookingSystem bookingSystem44 = new booking.BookingSystem((booking.Subject) parkingSpot41);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        bookingSystem48.update((booking.Subject) parkingSpot49);
        parkingSpot41.detach((booking.Observer) bookingSystem48);
        parkingSensor40.update((booking.Subject) parkingSpot41);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor56 = new booking.ParkingSensor((booking.Subject) parkingSpot55);
        booking.ParkingSpot parkingSpot57 = new booking.ParkingSpot();
        parkingSpot57.occupySpot("hi!");
        booking.BookingSystem bookingSystem60 = new booking.BookingSystem((booking.Subject) parkingSpot57);
        booking.ParkingSpot parkingSpot61 = new booking.ParkingSpot();
        parkingSpot61.occupySpot("hi!");
        booking.BookingSystem bookingSystem64 = new booking.BookingSystem((booking.Subject) parkingSpot61);
        booking.ParkingSpot parkingSpot65 = new booking.ParkingSpot();
        parkingSpot65.occupySpot("hi!");
        bookingSystem64.update((booking.Subject) parkingSpot65);
        parkingSpot57.detach((booking.Observer) bookingSystem64);
        parkingSensor56.update((booking.Subject) parkingSpot57);
        parkingSpot41.detach((booking.Observer) parkingSensor56);
        parkingSpot12.detach((booking.Observer) parkingSensor56);
        parkingSpot4.attach((booking.Observer) parkingSensor56);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor41 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor42 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        parkingSpot43.occupySpot("hi!");
        booking.BookingSystem bookingSystem46 = new booking.BookingSystem((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot47 = new booking.ParkingSpot();
        parkingSpot47.occupySpot("hi!");
        booking.BookingSystem bookingSystem50 = new booking.BookingSystem((booking.Subject) parkingSpot47);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        bookingSystem50.update((booking.Subject) parkingSpot51);
        parkingSpot43.detach((booking.Observer) bookingSystem50);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor57 = new booking.ParkingSensor((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        booking.BookingSystem bookingSystem65 = new booking.BookingSystem((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        bookingSystem65.update((booking.Subject) parkingSpot66);
        parkingSpot58.detach((booking.Observer) bookingSystem65);
        parkingSensor57.update((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor73 = new booking.ParkingSensor((booking.Subject) parkingSpot72);
        parkingSpot58.detach((booking.Observer) parkingSensor73);
        bookingSystem50.update((booking.Subject) parkingSpot58);
        parkingSpot58.freeSpot();
        parkingSensor42.update((booking.Subject) parkingSpot58);
        booking.ParkingSensor parkingSensor78 = new booking.ParkingSensor((booking.Subject) parkingSpot58);
        booking.BookingSystem bookingSystem79 = new booking.BookingSystem((booking.Subject) parkingSpot58);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        boolean boolean51 = parkingSpot49.isOccupied();
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        booking.BookingSystem bookingSystem59 = new booking.BookingSystem((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        bookingSystem59.update((booking.Subject) parkingSpot60);
        parkingSpot52.detach((booking.Observer) bookingSystem59);
        booking.ParkingSpot parkingSpot65 = new booking.ParkingSpot();
        parkingSpot65.occupySpot("hi!");
        booking.BookingSystem bookingSystem68 = new booking.BookingSystem((booking.Subject) parkingSpot65);
        booking.ParkingSpot parkingSpot69 = new booking.ParkingSpot();
        parkingSpot69.occupySpot("hi!");
        booking.BookingSystem bookingSystem72 = new booking.BookingSystem((booking.Subject) parkingSpot69);
        booking.ParkingSpot parkingSpot73 = new booking.ParkingSpot();
        parkingSpot73.occupySpot("hi!");
        bookingSystem72.update((booking.Subject) parkingSpot73);
        parkingSpot65.detach((booking.Observer) bookingSystem72);
        parkingSpot52.detach((booking.Observer) bookingSystem72);
        booking.ParkingSpot parkingSpot79 = new booking.ParkingSpot();
        parkingSpot79.occupySpot("hi!");
        booking.BookingSystem bookingSystem82 = new booking.BookingSystem((booking.Subject) parkingSpot79);
        booking.ParkingSpot parkingSpot83 = new booking.ParkingSpot();
        parkingSpot83.occupySpot("hi!");
        booking.BookingSystem bookingSystem86 = new booking.BookingSystem((booking.Subject) parkingSpot83);
        booking.ParkingSpot parkingSpot87 = new booking.ParkingSpot();
        parkingSpot87.occupySpot("hi!");
        bookingSystem86.update((booking.Subject) parkingSpot87);
        parkingSpot79.detach((booking.Observer) bookingSystem86);
        bookingSystem72.update((booking.Subject) parkingSpot79);
        booking.ParkingSensor parkingSensor93 = new booking.ParkingSensor((booking.Subject) parkingSpot79);
        parkingSpot49.detach((booking.Observer) parkingSensor93);
        booking.BookingSystem bookingSystem95 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSensor parkingSensor96 = new booking.ParkingSensor((booking.Subject) parkingSpot49);
        // The following exception was thrown during execution in test generation
        try {
            parkingSpot49.occupySpot("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: License plate must not be null or empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        boolean boolean41 = parkingSpot27.isOccupied();
        booking.ParkingSensor parkingSensor42 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        parkingSpot27.occupySpot("CANCEL");
        boolean boolean45 = parkingSpot27.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.UserType userType4 = booking.UserType.FACULTY;
        bookingReceiver0.bookSpace("", "", 100, userType4);
        bookingReceiver0.cancelBooking("", "CANCEL");
        booking.BookingReceiver bookingReceiver9 = new booking.BookingReceiver();
        java.lang.String str10 = bookingReceiver9.getAction();
        booking.UserType userType14 = null;
        booking.ExtendCommand extendCommand15 = new booking.ExtendCommand(bookingReceiver9, "hi!", "", 100, userType14);
        double double16 = bookingReceiver9.getDeposit();
        java.lang.String str17 = bookingReceiver9.getAction();
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.BookingReceiver bookingReceiver31 = new booking.BookingReceiver();
        java.lang.String str32 = bookingReceiver31.getAction();
        booking.UserType userType36 = null;
        booking.ExtendCommand extendCommand37 = new booking.ExtendCommand(bookingReceiver31, "hi!", "", 100, userType36);
        booking.UserType userType41 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand42 = new booking.BookCommand(bookingReceiver31, "hi!", "hi!", 100, userType41);
        booking.BookingReceiver bookingReceiver46 = new booking.BookingReceiver();
        booking.UserType userType50 = booking.UserType.FACULTY;
        bookingReceiver46.bookSpace("", "", 100, userType50);
        bookingReceiver31.extendBooking("", "", (int) 'a', userType50);
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver21, "", "", 0, userType50);
        booking.BookingReceiver bookingReceiver54 = new booking.BookingReceiver();
        java.lang.String str55 = bookingReceiver54.getAction();
        booking.UserType userType59 = null;
        booking.ExtendCommand extendCommand60 = new booking.ExtendCommand(bookingReceiver54, "hi!", "", 100, userType59);
        java.lang.String str61 = bookingReceiver54.getAction();
        booking.UserType userType65 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand66 = new booking.ExtendCommand(bookingReceiver54, "hi!", "hi!", (int) (byte) 0, userType65);
        double double67 = bookingReceiver21.getRate(userType65);
        bookingReceiver9.extendBooking("hi!", "", (int) (short) -1, userType65);
        double double69 = bookingReceiver0.getRate(userType65);
        java.lang.String str70 = bookingReceiver0.getAction();
        booking.UserType userType71 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double72 = bookingReceiver0.getRate(userType71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.UserType.ordinal()\" because \"userType\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.FACULTY + "'", userType4.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + userType41 + "' != '" + booking.UserType.FACULTY + "'", userType41.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType50 + "' != '" + booking.UserType.FACULTY + "'", userType50.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + userType65 + "' != '" + booking.UserType.NON_FACULTY + "'", userType65.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 10.0d + "'", double69 == 10.0d);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "CANCEL" + "'", str70, "CANCEL");
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        booking.UserType userType12 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand13 = new booking.BookCommand(bookingReceiver2, "hi!", "hi!", 100, userType12);
        bookCommand13.doAction();
        bookCommand13.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand13);
        booking.BookingReceiver bookingReceiver17 = new booking.BookingReceiver();
        java.lang.String str18 = bookingReceiver17.getAction();
        booking.UserType userType22 = null;
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver17, "hi!", "", 100, userType22);
        booking.UserType userType27 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand28 = new booking.BookCommand(bookingReceiver17, "hi!", "hi!", 100, userType27);
        booking.BookingReceiver bookingReceiver29 = new booking.BookingReceiver();
        java.lang.String str30 = bookingReceiver29.getAction();
        booking.UserType userType34 = null;
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver29, "hi!", "", 100, userType34);
        booking.UserType userType39 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand40 = new booking.BookCommand(bookingReceiver29, "hi!", "hi!", 100, userType39);
        booking.BookingReceiver bookingReceiver44 = new booking.BookingReceiver();
        booking.UserType userType48 = booking.UserType.FACULTY;
        bookingReceiver44.bookSpace("", "", 100, userType48);
        bookingReceiver29.extendBooking("", "", (int) 'a', userType48);
        double double51 = bookingReceiver17.getRate(userType48);
        booking.UserType userType55 = booking.UserType.VISITOR;
        bookingReceiver17.extendBooking("", "hi!", (int) '#', userType55);
        java.lang.String str57 = bookingReceiver17.getAction();
        booking.BookingReceiver bookingReceiver61 = new booking.BookingReceiver();
        bookingReceiver61.cancelBooking("hi!", "hi!");
        bookingReceiver61.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver68 = new booking.BookingReceiver();
        booking.UserType userType72 = booking.UserType.FACULTY;
        bookingReceiver68.bookSpace("", "", 100, userType72);
        double double74 = bookingReceiver61.getRate(userType72);
        booking.UserType userType78 = booking.UserType.VISITOR;
        booking.ExtendCommand extendCommand79 = new booking.ExtendCommand(bookingReceiver61, "BOOK", "", (int) '#', userType78);
        booking.ExtendCommand extendCommand80 = new booking.ExtendCommand(bookingReceiver17, "", "CANCEL", (int) 'a', userType78);
        commandInvoker0.setCommand((booking.ICommand) extendCommand80);
        extendCommand80.doAction();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + booking.UserType.FACULTY + "'", userType12.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + userType27 + "' != '" + booking.UserType.FACULTY + "'", userType27.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.FACULTY + "'", userType39.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType48 + "' != '" + booking.UserType.FACULTY + "'", userType48.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 8.0d + "'", double51 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType55 + "' != '" + booking.UserType.VISITOR + "'", userType55.equals(booking.UserType.VISITOR));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "EXTEND" + "'", str57, "EXTEND");
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.FACULTY + "'", userType72.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 8.0d + "'", double74 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType78 + "' != '" + booking.UserType.VISITOR + "'", userType78.equals(booking.UserType.VISITOR));
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        booking.CancelCommand cancelCommand15 = new booking.CancelCommand(bookingReceiver0, "hi!", "BOOK");
        java.lang.Class<?> wildcardClass16 = bookingReceiver0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        parkingSpot2.detach((booking.Observer) parkingSensor17);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        booking.BookingSystem bookingSystem26 = new booking.BookingSystem((booking.Subject) parkingSpot23);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        bookingSystem26.update((booking.Subject) parkingSpot27);
        parkingSpot19.detach((booking.Observer) bookingSystem26);
        boolean boolean32 = parkingSpot19.isOccupied();
        parkingSpot19.occupySpot("EXTEND");
        parkingSpot19.freeSpot();
        parkingSensor17.update((booking.Subject) parkingSpot19);
        java.lang.Class<?> wildcardClass37 = parkingSensor17.getClass();
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        parkingSpot4.occupySpot("CANCEL");
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem14 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem15 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        parkingSpot16.occupySpot("hi!");
        booking.BookingSystem bookingSystem19 = new booking.BookingSystem((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        parkingSpot20.occupySpot("hi!");
        bookingSystem19.update((booking.Subject) parkingSpot20);
        boolean boolean24 = parkingSpot20.isOccupied();
        booking.ParkingSpot parkingSpot25 = new booking.ParkingSpot();
        parkingSpot25.occupySpot("hi!");
        booking.BookingSystem bookingSystem28 = new booking.BookingSystem((booking.Subject) parkingSpot25);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        parkingSpot29.occupySpot("hi!");
        booking.BookingSystem bookingSystem32 = new booking.BookingSystem((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        bookingSystem32.update((booking.Subject) parkingSpot33);
        parkingSpot25.detach((booking.Observer) bookingSystem32);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        booking.BookingSystem bookingSystem41 = new booking.BookingSystem((booking.Subject) parkingSpot38);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        booking.BookingSystem bookingSystem45 = new booking.BookingSystem((booking.Subject) parkingSpot42);
        booking.ParkingSpot parkingSpot46 = new booking.ParkingSpot();
        parkingSpot46.occupySpot("hi!");
        bookingSystem45.update((booking.Subject) parkingSpot46);
        parkingSpot38.detach((booking.Observer) bookingSystem45);
        parkingSpot25.detach((booking.Observer) bookingSystem45);
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        booking.BookingSystem bookingSystem59 = new booking.BookingSystem((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        bookingSystem59.update((booking.Subject) parkingSpot60);
        parkingSpot52.detach((booking.Observer) bookingSystem59);
        bookingSystem45.update((booking.Subject) parkingSpot52);
        booking.ParkingSensor parkingSensor66 = new booking.ParkingSensor((booking.Subject) parkingSpot52);
        booking.ParkingSensor parkingSensor67 = new booking.ParkingSensor((booking.Subject) parkingSpot52);
        booking.ParkingSensor parkingSensor68 = new booking.ParkingSensor((booking.Subject) parkingSpot52);
        parkingSpot20.attach((booking.Observer) parkingSensor68);
        parkingSpot4.detach((booking.Observer) parkingSensor68);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSensor parkingSensor13 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        parkingSpot0.freeSpot();
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        parkingSensor17.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        booking.BookingSystem bookingSystem41 = new booking.BookingSystem((booking.Subject) parkingSpot38);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        bookingSystem41.update((booking.Subject) parkingSpot42);
        parkingSpot34.detach((booking.Observer) bookingSystem41);
        parkingSensor33.update((booking.Subject) parkingSpot34);
        parkingSpot18.detach((booking.Observer) parkingSensor33);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor50 = new booking.ParkingSensor((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        booking.BookingSystem bookingSystem54 = new booking.BookingSystem((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot55);
        booking.ParkingSpot parkingSpot59 = new booking.ParkingSpot();
        parkingSpot59.occupySpot("hi!");
        bookingSystem58.update((booking.Subject) parkingSpot59);
        parkingSpot51.detach((booking.Observer) bookingSystem58);
        parkingSensor50.update((booking.Subject) parkingSpot51);
        booking.ParkingSensor parkingSensor65 = new booking.ParkingSensor((booking.Subject) parkingSpot51);
        parkingSpot18.attach((booking.Observer) parkingSensor65);
        parkingSpot18.occupySpot("BOOK");
        parkingSpot18.occupySpot("hi!");
        parkingSensor1.update((booking.Subject) parkingSpot18);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        bookingSystem3.update((booking.Subject) parkingSpot4);
        parkingSpot4.freeSpot();
        java.lang.String str9 = parkingSpot4.getLicensePlate();
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor11 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot12 = new booking.ParkingSpot();
        parkingSpot12.occupySpot("hi!");
        booking.BookingSystem bookingSystem15 = new booking.BookingSystem((booking.Subject) parkingSpot12);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        parkingSpot16.occupySpot("hi!");
        booking.BookingSystem bookingSystem19 = new booking.BookingSystem((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        parkingSpot20.occupySpot("hi!");
        bookingSystem19.update((booking.Subject) parkingSpot20);
        parkingSpot12.detach((booking.Observer) bookingSystem19);
        parkingSensor11.update((booking.Subject) parkingSpot12);
        booking.ParkingSensor parkingSensor26 = new booking.ParkingSensor((booking.Subject) parkingSpot12);
        parkingSpot4.detach((booking.Observer) parkingSensor26);
        parkingSpot4.occupySpot("hi!");
        java.lang.String str30 = parkingSpot4.getLicensePlate();
        booking.ParkingSensor parkingSensor31 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        parkingSpot4.freeSpot();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        booking.BookingSystem bookingSystem29 = new booking.BookingSystem((booking.Subject) parkingSpot26);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        booking.BookingSystem bookingSystem33 = new booking.BookingSystem((booking.Subject) parkingSpot30);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        bookingSystem33.update((booking.Subject) parkingSpot34);
        parkingSpot26.detach((booking.Observer) bookingSystem33);
        parkingSpot13.detach((booking.Observer) bookingSystem33);
        bookingSystem7.update((booking.Subject) parkingSpot13);
        java.lang.Class<?> wildcardClass41 = parkingSpot13.getClass();
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor28 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        parkingSpot29.occupySpot("hi!");
        booking.BookingSystem bookingSystem32 = new booking.BookingSystem((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        booking.BookingSystem bookingSystem36 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        bookingSystem36.update((booking.Subject) parkingSpot37);
        parkingSpot29.detach((booking.Observer) bookingSystem36);
        parkingSensor28.update((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor44 = new booking.ParkingSensor((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        bookingSystem52.update((booking.Subject) parkingSpot53);
        parkingSpot45.detach((booking.Observer) bookingSystem52);
        parkingSensor44.update((booking.Subject) parkingSpot45);
        parkingSpot29.detach((booking.Observer) parkingSensor44);
        parkingSpot0.detach((booking.Observer) parkingSensor44);
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        java.lang.String str62 = parkingSpot0.getLicensePlate();
        java.lang.String str63 = parkingSpot0.getLicensePlate();
        boolean boolean64 = parkingSpot0.isOccupied();
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.BookingReceiver bookingReceiver50 = new booking.BookingReceiver();
        java.lang.String str51 = bookingReceiver50.getAction();
        booking.UserType userType55 = null;
        booking.ExtendCommand extendCommand56 = new booking.ExtendCommand(bookingReceiver50, "hi!", "", 100, userType55);
        booking.UserType userType60 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand61 = new booking.BookCommand(bookingReceiver50, "hi!", "hi!", 100, userType60);
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        booking.UserType userType69 = booking.UserType.FACULTY;
        bookingReceiver65.bookSpace("", "", 100, userType69);
        bookingReceiver50.extendBooking("", "", (int) 'a', userType69);
        booking.UserType userType72 = booking.UserType.NON_FACULTY;
        double double73 = bookingReceiver50.getRate(userType72);
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver0, "hi!", "BOOK", 1, userType72);
        double double75 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver79 = new booking.BookingReceiver();
        bookingReceiver79.cancelBooking("hi!", "hi!");
        java.lang.String str83 = bookingReceiver79.getAction();
        booking.BookingReceiver bookingReceiver84 = null;
        booking.BookingReceiver bookingReceiver88 = new booking.BookingReceiver();
        booking.UserType userType92 = booking.UserType.FACULTY;
        bookingReceiver88.bookSpace("", "", 100, userType92);
        booking.BookCommand bookCommand94 = new booking.BookCommand(bookingReceiver84, "hi!", "", 0, userType92);
        double double95 = bookingReceiver79.getRate(userType92);
        bookingReceiver0.extendBooking("EXTEND", "EXTEND", (-1), userType92);
        bookingReceiver0.cancelBooking("", "BOOK");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType69 + "' != '" + booking.UserType.FACULTY + "'", userType69.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.NON_FACULTY + "'", userType72.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "CANCEL" + "'", str83, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType92 + "' != '" + booking.UserType.FACULTY + "'", userType92.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 8.0d + "'", double95 == 8.0d);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot15.detach((booking.Observer) parkingSensor30);
        bookingSystem7.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        booking.BookingSystem bookingSystem36 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        booking.BookingSystem bookingSystem40 = new booking.BookingSystem((booking.Subject) parkingSpot37);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.occupySpot("hi!");
        bookingSystem40.update((booking.Subject) parkingSpot41);
        parkingSpot33.detach((booking.Observer) bookingSystem40);
        booking.ParkingSpot parkingSpot46 = new booking.ParkingSpot();
        parkingSpot46.occupySpot("hi!");
        booking.BookingSystem bookingSystem49 = new booking.BookingSystem((booking.Subject) parkingSpot46);
        booking.ParkingSpot parkingSpot50 = new booking.ParkingSpot();
        parkingSpot50.occupySpot("hi!");
        booking.BookingSystem bookingSystem53 = new booking.BookingSystem((booking.Subject) parkingSpot50);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        bookingSystem53.update((booking.Subject) parkingSpot54);
        parkingSpot46.detach((booking.Observer) bookingSystem53);
        parkingSpot33.detach((booking.Observer) bookingSystem53);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor61 = new booking.ParkingSensor((booking.Subject) parkingSpot60);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        booking.BookingSystem bookingSystem65 = new booking.BookingSystem((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        booking.BookingSystem bookingSystem69 = new booking.BookingSystem((booking.Subject) parkingSpot66);
        booking.ParkingSpot parkingSpot70 = new booking.ParkingSpot();
        parkingSpot70.occupySpot("hi!");
        bookingSystem69.update((booking.Subject) parkingSpot70);
        parkingSpot62.detach((booking.Observer) bookingSystem69);
        parkingSensor61.update((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot76 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor77 = new booking.ParkingSensor((booking.Subject) parkingSpot76);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        parkingSpot78.occupySpot("hi!");
        booking.BookingSystem bookingSystem81 = new booking.BookingSystem((booking.Subject) parkingSpot78);
        booking.ParkingSpot parkingSpot82 = new booking.ParkingSpot();
        parkingSpot82.occupySpot("hi!");
        booking.BookingSystem bookingSystem85 = new booking.BookingSystem((booking.Subject) parkingSpot82);
        booking.ParkingSpot parkingSpot86 = new booking.ParkingSpot();
        parkingSpot86.occupySpot("hi!");
        bookingSystem85.update((booking.Subject) parkingSpot86);
        parkingSpot78.detach((booking.Observer) bookingSystem85);
        parkingSensor77.update((booking.Subject) parkingSpot78);
        parkingSpot62.detach((booking.Observer) parkingSensor77);
        parkingSpot33.detach((booking.Observer) parkingSensor77);
        booking.BookingSystem bookingSystem94 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        parkingSpot15.attach((booking.Observer) bookingSystem94);
        booking.BookingSystem bookingSystem96 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        parkingSpot15.occupySpot("hi!");
        booking.ParkingSensor parkingSensor99 = new booking.ParkingSensor((booking.Subject) parkingSpot15);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        booking.UserType userType4 = booking.UserType.STUDENT;
        double double5 = bookingReceiver0.getRate(userType4);
        booking.CancelCommand cancelCommand8 = new booking.CancelCommand(bookingReceiver0, "BOOK", "hi!");
        booking.BookingReceiver bookingReceiver12 = new booking.BookingReceiver();
        bookingReceiver12.cancelBooking("hi!", "hi!");
        bookingReceiver12.cancelBooking("", "");
        booking.UserType userType19 = booking.UserType.STUDENT;
        double double20 = bookingReceiver12.getRate(userType19);
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver0, "", "hi!", (int) '#', userType19);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        bookingReceiver25.cancelBooking("hi!", "hi!");
        java.lang.String str29 = bookingReceiver25.getAction();
        booking.BookingReceiver bookingReceiver30 = null;
        booking.BookingReceiver bookingReceiver34 = new booking.BookingReceiver();
        booking.UserType userType38 = booking.UserType.FACULTY;
        bookingReceiver34.bookSpace("", "", 100, userType38);
        booking.BookCommand bookCommand40 = new booking.BookCommand(bookingReceiver30, "hi!", "", 0, userType38);
        double double41 = bookingReceiver25.getRate(userType38);
        bookingReceiver0.extendBooking("hi!", "CANCEL", (int) (short) 1, userType38);
        booking.BookingReceiver bookingReceiver43 = new booking.BookingReceiver();
        java.lang.String str44 = bookingReceiver43.getAction();
        booking.UserType userType48 = null;
        booking.ExtendCommand extendCommand49 = new booking.ExtendCommand(bookingReceiver43, "hi!", "", 100, userType48);
        booking.BookingReceiver bookingReceiver53 = new booking.BookingReceiver();
        java.lang.String str54 = bookingReceiver53.getAction();
        booking.UserType userType58 = null;
        booking.ExtendCommand extendCommand59 = new booking.ExtendCommand(bookingReceiver53, "hi!", "", 100, userType58);
        booking.UserType userType63 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand64 = new booking.BookCommand(bookingReceiver53, "hi!", "hi!", 100, userType63);
        booking.BookingReceiver bookingReceiver68 = new booking.BookingReceiver();
        booking.UserType userType72 = booking.UserType.FACULTY;
        bookingReceiver68.bookSpace("", "", 100, userType72);
        bookingReceiver53.extendBooking("", "", (int) 'a', userType72);
        bookingReceiver43.extendBooking("hi!", "", 0, userType72);
        double double76 = bookingReceiver0.getRate(userType72);
        java.lang.String str77 = bookingReceiver0.getAction();
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.STUDENT + "'", userType4.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 5.0d + "'", double5 == 5.0d);
        org.junit.Assert.assertTrue("'" + userType19 + "' != '" + booking.UserType.STUDENT + "'", userType19.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5.0d + "'", double20 == 5.0d);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CANCEL" + "'", str29, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType38 + "' != '" + booking.UserType.FACULTY + "'", userType38.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 8.0d + "'", double41 == 8.0d);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + userType63 + "' != '" + booking.UserType.FACULTY + "'", userType63.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.FACULTY + "'", userType72.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 8.0d + "'", double76 == 8.0d);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "EXTEND" + "'", str77, "EXTEND");
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        booking.UserType userType12 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand13 = new booking.BookCommand(bookingReceiver2, "hi!", "hi!", 100, userType12);
        bookCommand13.doAction();
        bookCommand13.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand13);
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
        booking.CommandInvoker commandInvoker19 = new booking.CommandInvoker();
        commandInvoker19.executeCommand();
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        java.lang.String str28 = bookingReceiver21.getAction();
        booking.UserType userType32 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand33 = new booking.ExtendCommand(bookingReceiver21, "hi!", "hi!", (int) (byte) 0, userType32);
        extendCommand33.doAction();
        commandInvoker19.setCommand((booking.ICommand) extendCommand33);
        commandInvoker19.executeCommand();
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        java.lang.String str38 = bookingReceiver37.getAction();
        booking.UserType userType42 = null;
        booking.ExtendCommand extendCommand43 = new booking.ExtendCommand(bookingReceiver37, "hi!", "", 100, userType42);
        booking.UserType userType47 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand48 = new booking.BookCommand(bookingReceiver37, "hi!", "hi!", 100, userType47);
        booking.BookingReceiver bookingReceiver52 = new booking.BookingReceiver();
        booking.UserType userType56 = booking.UserType.FACULTY;
        bookingReceiver52.bookSpace("", "", 100, userType56);
        bookingReceiver37.extendBooking("", "", (int) 'a', userType56);
        booking.CancelCommand cancelCommand61 = new booking.CancelCommand(bookingReceiver37, "BOOK", "CANCEL");
        commandInvoker19.setCommand((booking.ICommand) cancelCommand61);
        commandInvoker0.setCommand((booking.ICommand) cancelCommand61);
        cancelCommand61.doAction();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + booking.UserType.FACULTY + "'", userType12.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + userType32 + "' != '" + booking.UserType.NON_FACULTY + "'", userType32.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + userType47 + "' != '" + booking.UserType.FACULTY + "'", userType47.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType56 + "' != '" + booking.UserType.FACULTY + "'", userType56.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        java.lang.String str9 = bookingReceiver2.getAction();
        booking.UserType userType13 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand14 = new booking.ExtendCommand(bookingReceiver2, "hi!", "hi!", (int) (byte) 0, userType13);
        extendCommand14.doAction();
        commandInvoker0.setCommand((booking.ICommand) extendCommand14);
        booking.BookingReceiver bookingReceiver17 = new booking.BookingReceiver();
        java.lang.String str18 = bookingReceiver17.getAction();
        booking.UserType userType22 = null;
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver17, "hi!", "", 100, userType22);
        booking.UserType userType27 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand28 = new booking.BookCommand(bookingReceiver17, "hi!", "hi!", 100, userType27);
        bookCommand28.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand28);
        commandInvoker0.executeCommand();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + userType13 + "' != '" + booking.UserType.NON_FACULTY + "'", userType13.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + userType27 + "' != '" + booking.UserType.FACULTY + "'", userType27.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.CancelCommand cancelCommand49 = new booking.CancelCommand(bookingReceiver0, "BOOK", "BOOK");
        double double50 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.freeSpot();
        boolean boolean2 = parkingSpot0.isOccupied();
        booking.ParkingSensor parkingSensor3 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot8);
        booking.ParkingSpot parkingSpot12 = new booking.ParkingSpot();
        parkingSpot12.occupySpot("hi!");
        bookingSystem11.update((booking.Subject) parkingSpot12);
        parkingSpot4.detach((booking.Observer) bookingSystem11);
        boolean boolean17 = parkingSpot4.isOccupied();
        booking.ParkingSensor parkingSensor18 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.ParkingSensor parkingSensor19 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        parkingSensor3.update((booking.Subject) parkingSpot4);
        java.lang.Class<?> wildcardClass21 = parkingSensor3.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.Subject subject17 = null;
        // The following exception was thrown during execution in test generation
        try {
            bookingSystem16.update(subject17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Object.equals(Object)\" because \"changedSubject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        boolean boolean41 = parkingSpot27.isOccupied();
        booking.ParkingSensor parkingSensor42 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        parkingSpot43.freeSpot();
        boolean boolean45 = parkingSpot43.isOccupied();
        parkingSpot43.freeSpot();
        parkingSensor42.update((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot48 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor49 = new booking.ParkingSensor((booking.Subject) parkingSpot48);
        booking.ParkingSpot parkingSpot50 = new booking.ParkingSpot();
        parkingSpot50.occupySpot("hi!");
        booking.BookingSystem bookingSystem53 = new booking.BookingSystem((booking.Subject) parkingSpot50);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        booking.BookingSystem bookingSystem57 = new booking.BookingSystem((booking.Subject) parkingSpot54);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        bookingSystem57.update((booking.Subject) parkingSpot58);
        parkingSpot50.detach((booking.Observer) bookingSystem57);
        parkingSensor49.update((booking.Subject) parkingSpot50);
        booking.BookingSystem bookingSystem64 = new booking.BookingSystem((booking.Subject) parkingSpot50);
        booking.ParkingSpot parkingSpot65 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor66 = new booking.ParkingSensor((booking.Subject) parkingSpot65);
        booking.ParkingSpot parkingSpot67 = new booking.ParkingSpot();
        parkingSpot67.occupySpot("hi!");
        booking.BookingSystem bookingSystem70 = new booking.BookingSystem((booking.Subject) parkingSpot67);
        booking.ParkingSpot parkingSpot71 = new booking.ParkingSpot();
        parkingSpot71.occupySpot("hi!");
        booking.BookingSystem bookingSystem74 = new booking.BookingSystem((booking.Subject) parkingSpot71);
        booking.ParkingSpot parkingSpot75 = new booking.ParkingSpot();
        parkingSpot75.occupySpot("hi!");
        bookingSystem74.update((booking.Subject) parkingSpot75);
        parkingSpot67.detach((booking.Observer) bookingSystem74);
        parkingSensor66.update((booking.Subject) parkingSpot67);
        booking.ParkingSensor parkingSensor81 = new booking.ParkingSensor((booking.Subject) parkingSpot67);
        booking.ParkingSensor parkingSensor82 = new booking.ParkingSensor((booking.Subject) parkingSpot67);
        bookingSystem64.update((booking.Subject) parkingSpot67);
        parkingSensor42.update((booking.Subject) parkingSpot67);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSpot2.detach((booking.Observer) parkingSensor17);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor34 = new booking.ParkingSensor((booking.Subject) parkingSpot33);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        booking.BookingSystem bookingSystem42 = new booking.BookingSystem((booking.Subject) parkingSpot39);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        parkingSpot43.occupySpot("hi!");
        bookingSystem42.update((booking.Subject) parkingSpot43);
        parkingSpot35.detach((booking.Observer) bookingSystem42);
        parkingSensor34.update((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor50 = new booking.ParkingSensor((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        booking.BookingSystem bookingSystem54 = new booking.BookingSystem((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot55);
        booking.ParkingSpot parkingSpot59 = new booking.ParkingSpot();
        parkingSpot59.occupySpot("hi!");
        bookingSystem58.update((booking.Subject) parkingSpot59);
        parkingSpot51.detach((booking.Observer) bookingSystem58);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        bookingSystem71.update((booking.Subject) parkingSpot72);
        parkingSpot64.detach((booking.Observer) bookingSystem71);
        parkingSpot51.detach((booking.Observer) bookingSystem71);
        parkingSpot51.occupySpot("CANCEL");
        parkingSensor50.update((booking.Subject) parkingSpot51);
        parkingSensor34.update((booking.Subject) parkingSpot51);
        boolean boolean82 = parkingSpot51.isOccupied();
        parkingSensor17.update((booking.Subject) parkingSpot51);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        parkingSpot0.freeSpot();
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor5 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        booking.BookingSystem bookingSystem13 = new booking.BookingSystem((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot14 = new booking.ParkingSpot();
        parkingSpot14.occupySpot("hi!");
        bookingSystem13.update((booking.Subject) parkingSpot14);
        parkingSpot6.detach((booking.Observer) bookingSystem13);
        parkingSensor5.update((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor21 = new booking.ParkingSensor((booking.Subject) parkingSpot20);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        booking.BookingSystem bookingSystem29 = new booking.BookingSystem((booking.Subject) parkingSpot26);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        bookingSystem29.update((booking.Subject) parkingSpot30);
        parkingSpot22.detach((booking.Observer) bookingSystem29);
        parkingSensor21.update((booking.Subject) parkingSpot22);
        parkingSpot6.detach((booking.Observer) parkingSensor21);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor38 = new booking.ParkingSensor((booking.Subject) parkingSpot37);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        booking.BookingSystem bookingSystem42 = new booking.BookingSystem((booking.Subject) parkingSpot39);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        parkingSpot43.occupySpot("hi!");
        booking.BookingSystem bookingSystem46 = new booking.BookingSystem((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot47 = new booking.ParkingSpot();
        parkingSpot47.occupySpot("hi!");
        bookingSystem46.update((booking.Subject) parkingSpot47);
        parkingSpot39.detach((booking.Observer) bookingSystem46);
        parkingSensor38.update((booking.Subject) parkingSpot39);
        booking.ParkingSensor parkingSensor53 = new booking.ParkingSensor((booking.Subject) parkingSpot39);
        parkingSpot6.attach((booking.Observer) parkingSensor53);
        parkingSpot3.attach((booking.Observer) parkingSensor53);
        parkingSpot0.attach((booking.Observer) parkingSensor53);
        booking.Subject subject57 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingSensor53.update(subject57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Object.equals(Object)\" because \"changedSubject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        booking.BookingReceiver bookingReceiver0 = null;
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        booking.UserType userType8 = booking.UserType.FACULTY;
        bookingReceiver4.bookSpace("", "", 100, userType8);
        booking.BookCommand bookCommand10 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType8);
        // The following exception was thrown during execution in test generation
        try {
            bookCommand10.doAction();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.BookingReceiver.bookSpace(String, String, int, booking.UserType)\" because \"this.receiver\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + userType8 + "' != '" + booking.UserType.FACULTY + "'", userType8.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        parkingSpot0.freeSpot();
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor5 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        booking.BookingSystem bookingSystem13 = new booking.BookingSystem((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot14 = new booking.ParkingSpot();
        parkingSpot14.occupySpot("hi!");
        bookingSystem13.update((booking.Subject) parkingSpot14);
        parkingSpot6.detach((booking.Observer) bookingSystem13);
        parkingSensor5.update((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor21 = new booking.ParkingSensor((booking.Subject) parkingSpot20);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        booking.BookingSystem bookingSystem29 = new booking.BookingSystem((booking.Subject) parkingSpot26);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        bookingSystem29.update((booking.Subject) parkingSpot30);
        parkingSpot22.detach((booking.Observer) bookingSystem29);
        parkingSensor21.update((booking.Subject) parkingSpot22);
        parkingSpot6.detach((booking.Observer) parkingSensor21);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor38 = new booking.ParkingSensor((booking.Subject) parkingSpot37);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        booking.BookingSystem bookingSystem42 = new booking.BookingSystem((booking.Subject) parkingSpot39);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        parkingSpot43.occupySpot("hi!");
        booking.BookingSystem bookingSystem46 = new booking.BookingSystem((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot47 = new booking.ParkingSpot();
        parkingSpot47.occupySpot("hi!");
        bookingSystem46.update((booking.Subject) parkingSpot47);
        parkingSpot39.detach((booking.Observer) bookingSystem46);
        parkingSensor38.update((booking.Subject) parkingSpot39);
        booking.ParkingSensor parkingSensor53 = new booking.ParkingSensor((booking.Subject) parkingSpot39);
        parkingSpot6.attach((booking.Observer) parkingSensor53);
        parkingSpot3.attach((booking.Observer) parkingSensor53);
        parkingSpot0.attach((booking.Observer) parkingSensor53);
        parkingSpot0.occupySpot("CANCEL");
        boolean boolean59 = parkingSpot0.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.BookingReceiver bookingReceiver12 = new booking.BookingReceiver();
        java.lang.String str13 = bookingReceiver12.getAction();
        booking.UserType userType17 = null;
        booking.ExtendCommand extendCommand18 = new booking.ExtendCommand(bookingReceiver12, "hi!", "", 100, userType17);
        booking.UserType userType22 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand23 = new booking.BookCommand(bookingReceiver12, "hi!", "hi!", 100, userType22);
        booking.BookingReceiver bookingReceiver27 = new booking.BookingReceiver();
        booking.UserType userType31 = booking.UserType.FACULTY;
        bookingReceiver27.bookSpace("", "", 100, userType31);
        bookingReceiver12.extendBooking("", "", (int) 'a', userType31);
        double double34 = bookingReceiver0.getRate(userType31);
        double double35 = bookingReceiver0.getDeposit();
        java.lang.Class<?> wildcardClass36 = bookingReceiver0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + userType22 + "' != '" + booking.UserType.FACULTY + "'", userType22.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.0d + "'", double34 == 8.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.BookingReceiver bookingReceiver50 = new booking.BookingReceiver();
        java.lang.String str51 = bookingReceiver50.getAction();
        booking.UserType userType55 = null;
        booking.ExtendCommand extendCommand56 = new booking.ExtendCommand(bookingReceiver50, "hi!", "", 100, userType55);
        booking.UserType userType60 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand61 = new booking.BookCommand(bookingReceiver50, "hi!", "hi!", 100, userType60);
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        booking.UserType userType69 = booking.UserType.FACULTY;
        bookingReceiver65.bookSpace("", "", 100, userType69);
        bookingReceiver50.extendBooking("", "", (int) 'a', userType69);
        booking.UserType userType72 = booking.UserType.NON_FACULTY;
        double double73 = bookingReceiver50.getRate(userType72);
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver0, "hi!", "BOOK", 1, userType72);
        double double75 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver79 = new booking.BookingReceiver();
        bookingReceiver79.cancelBooking("hi!", "hi!");
        java.lang.String str83 = bookingReceiver79.getAction();
        booking.BookingReceiver bookingReceiver84 = null;
        booking.BookingReceiver bookingReceiver88 = new booking.BookingReceiver();
        booking.UserType userType92 = booking.UserType.FACULTY;
        bookingReceiver88.bookSpace("", "", 100, userType92);
        booking.BookCommand bookCommand94 = new booking.BookCommand(bookingReceiver84, "hi!", "", 0, userType92);
        double double95 = bookingReceiver79.getRate(userType92);
        bookingReceiver0.extendBooking("EXTEND", "EXTEND", (-1), userType92);
        double double97 = bookingReceiver0.getDeposit();
        java.lang.String str98 = bookingReceiver0.getAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType69 + "' != '" + booking.UserType.FACULTY + "'", userType69.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.NON_FACULTY + "'", userType72.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "CANCEL" + "'", str83, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType92 + "' != '" + booking.UserType.FACULTY + "'", userType92.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 8.0d + "'", double95 == 8.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "EXTEND" + "'", str98, "EXTEND");
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor41 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor42 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor43 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem46 = new booking.BookingSystem((booking.Subject) parkingSpot27);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.CancelCommand cancelCommand20 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        booking.UserType userType24 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand25 = new booking.BookCommand(bookingReceiver0, "", "CANCEL", (int) (byte) 1, userType24);
        booking.CancelCommand cancelCommand28 = new booking.CancelCommand(bookingReceiver0, "BOOK", "");
        bookingReceiver0.cancelBooking("EXTEND", "EXTEND");
        java.lang.Class<?> wildcardClass32 = bookingReceiver0.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + userType24 + "' != '" + booking.UserType.FACULTY + "'", userType24.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSpot parkingSpot1 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor2 = new booking.ParkingSensor((booking.Subject) parkingSpot1);
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        parkingSpot3.occupySpot("hi!");
        booking.BookingSystem bookingSystem6 = new booking.BookingSystem((booking.Subject) parkingSpot3);
        booking.ParkingSpot parkingSpot7 = new booking.ParkingSpot();
        parkingSpot7.occupySpot("hi!");
        booking.BookingSystem bookingSystem10 = new booking.BookingSystem((booking.Subject) parkingSpot7);
        booking.ParkingSpot parkingSpot11 = new booking.ParkingSpot();
        parkingSpot11.occupySpot("hi!");
        bookingSystem10.update((booking.Subject) parkingSpot11);
        parkingSpot3.detach((booking.Observer) bookingSystem10);
        parkingSensor2.update((booking.Subject) parkingSpot3);
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot3);
        parkingSpot0.detach((booking.Observer) parkingSensor17);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        booking.BookingSystem bookingSystem26 = new booking.BookingSystem((booking.Subject) parkingSpot23);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        bookingSystem26.update((booking.Subject) parkingSpot27);
        parkingSpot19.detach((booking.Observer) bookingSystem26);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        booking.BookingSystem bookingSystem41 = new booking.BookingSystem((booking.Subject) parkingSpot38);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        bookingSystem41.update((booking.Subject) parkingSpot42);
        parkingSpot34.detach((booking.Observer) bookingSystem41);
        parkingSensor33.update((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot48 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor49 = new booking.ParkingSensor((booking.Subject) parkingSpot48);
        parkingSpot34.detach((booking.Observer) parkingSensor49);
        bookingSystem26.update((booking.Subject) parkingSpot34);
        parkingSpot34.occupySpot("BOOK");
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        booking.BookingSystem bookingSystem57 = new booking.BookingSystem((booking.Subject) parkingSpot54);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot58);
        bookingSystem57.update((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot63 = new booking.ParkingSpot();
        parkingSpot63.occupySpot("hi!");
        booking.BookingSystem bookingSystem66 = new booking.BookingSystem((booking.Subject) parkingSpot63);
        booking.ParkingSpot parkingSpot67 = new booking.ParkingSpot();
        parkingSpot67.occupySpot("hi!");
        booking.BookingSystem bookingSystem70 = new booking.BookingSystem((booking.Subject) parkingSpot67);
        bookingSystem66.update((booking.Subject) parkingSpot67);
        parkingSpot58.detach((booking.Observer) bookingSystem66);
        parkingSpot34.attach((booking.Observer) bookingSystem66);
        booking.ParkingSpot parkingSpot74 = new booking.ParkingSpot();
        parkingSpot74.occupySpot("hi!");
        booking.BookingSystem bookingSystem77 = new booking.BookingSystem((booking.Subject) parkingSpot74);
        bookingSystem66.update((booking.Subject) parkingSpot74);
        parkingSpot74.freeSpot();
        parkingSensor17.update((booking.Subject) parkingSpot74);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.BookingReceiver bookingReceiver12 = new booking.BookingReceiver();
        java.lang.String str13 = bookingReceiver12.getAction();
        booking.UserType userType17 = null;
        booking.ExtendCommand extendCommand18 = new booking.ExtendCommand(bookingReceiver12, "hi!", "", 100, userType17);
        booking.UserType userType22 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand23 = new booking.BookCommand(bookingReceiver12, "hi!", "hi!", 100, userType22);
        booking.BookingReceiver bookingReceiver27 = new booking.BookingReceiver();
        booking.UserType userType31 = booking.UserType.FACULTY;
        bookingReceiver27.bookSpace("", "", 100, userType31);
        bookingReceiver12.extendBooking("", "", (int) 'a', userType31);
        double double34 = bookingReceiver0.getRate(userType31);
        booking.UserType userType38 = booking.UserType.VISITOR;
        bookingReceiver0.extendBooking("", "hi!", (int) '#', userType38);
        java.lang.String str40 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver44 = new booking.BookingReceiver();
        bookingReceiver44.cancelBooking("hi!", "hi!");
        bookingReceiver44.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver51 = new booking.BookingReceiver();
        booking.UserType userType55 = booking.UserType.FACULTY;
        bookingReceiver51.bookSpace("", "", 100, userType55);
        double double57 = bookingReceiver44.getRate(userType55);
        booking.UserType userType61 = booking.UserType.VISITOR;
        booking.ExtendCommand extendCommand62 = new booking.ExtendCommand(bookingReceiver44, "BOOK", "", (int) '#', userType61);
        booking.ExtendCommand extendCommand63 = new booking.ExtendCommand(bookingReceiver0, "", "CANCEL", (int) 'a', userType61);
        extendCommand63.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + userType22 + "' != '" + booking.UserType.FACULTY + "'", userType22.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.0d + "'", double34 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType38 + "' != '" + booking.UserType.VISITOR + "'", userType38.equals(booking.UserType.VISITOR));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "EXTEND" + "'", str40, "EXTEND");
        org.junit.Assert.assertTrue("'" + userType55 + "' != '" + booking.UserType.FACULTY + "'", userType55.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 8.0d + "'", double57 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType61 + "' != '" + booking.UserType.VISITOR + "'", userType61.equals(booking.UserType.VISITOR));
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor11 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot10.occupySpot("BOOK");
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        java.lang.String str34 = bookingReceiver0.getAction();
        double double35 = bookingReceiver0.getDeposit();
        double double36 = bookingReceiver0.getAmount();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "BOOK" + "'", str34, "BOOK");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 8.0d + "'", double35 == 8.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-8.0d) + "'", double36 == (-8.0d));
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        java.lang.String str9 = bookingReceiver2.getAction();
        booking.UserType userType13 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand14 = new booking.ExtendCommand(bookingReceiver2, "hi!", "hi!", (int) (byte) 0, userType13);
        extendCommand14.doAction();
        commandInvoker0.setCommand((booking.ICommand) extendCommand14);
        booking.BookingReceiver bookingReceiver17 = new booking.BookingReceiver();
        java.lang.String str18 = bookingReceiver17.getAction();
        booking.UserType userType22 = null;
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver17, "hi!", "", 100, userType22);
        booking.UserType userType27 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand28 = new booking.BookCommand(bookingReceiver17, "hi!", "hi!", 100, userType27);
        bookCommand28.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand28);
        booking.BookingReceiver bookingReceiver31 = new booking.BookingReceiver();
        java.lang.String str32 = bookingReceiver31.getAction();
        booking.UserType userType36 = null;
        booking.ExtendCommand extendCommand37 = new booking.ExtendCommand(bookingReceiver31, "hi!", "", 100, userType36);
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        booking.UserType userType51 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand52 = new booking.BookCommand(bookingReceiver41, "hi!", "hi!", 100, userType51);
        booking.BookingReceiver bookingReceiver56 = new booking.BookingReceiver();
        booking.UserType userType60 = booking.UserType.FACULTY;
        bookingReceiver56.bookSpace("", "", 100, userType60);
        bookingReceiver41.extendBooking("", "", (int) 'a', userType60);
        booking.ExtendCommand extendCommand63 = new booking.ExtendCommand(bookingReceiver31, "", "", 0, userType60);
        commandInvoker0.setCommand((booking.ICommand) extendCommand63);
        commandInvoker0.executeCommand();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + userType13 + "' != '" + booking.UserType.NON_FACULTY + "'", userType13.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + userType27 + "' != '" + booking.UserType.FACULTY + "'", userType27.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + userType51 + "' != '" + booking.UserType.FACULTY + "'", userType51.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        booking.UserType userType12 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand13 = new booking.BookCommand(bookingReceiver2, "hi!", "hi!", 100, userType12);
        bookCommand13.doAction();
        bookCommand13.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand13);
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
        booking.CommandInvoker commandInvoker19 = new booking.CommandInvoker();
        commandInvoker19.executeCommand();
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookCommand32.doAction();
        bookCommand32.doAction();
        commandInvoker19.setCommand((booking.ICommand) bookCommand32);
        commandInvoker19.executeCommand();
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        java.lang.String str38 = bookingReceiver37.getAction();
        booking.UserType userType42 = null;
        booking.ExtendCommand extendCommand43 = new booking.ExtendCommand(bookingReceiver37, "hi!", "", 100, userType42);
        booking.UserType userType47 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand48 = new booking.BookCommand(bookingReceiver37, "hi!", "hi!", 100, userType47);
        bookCommand48.doAction();
        bookCommand48.doAction();
        bookCommand48.doAction();
        bookCommand48.doAction();
        commandInvoker19.setCommand((booking.ICommand) bookCommand48);
        bookCommand48.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand48);
        commandInvoker0.executeCommand();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + booking.UserType.FACULTY + "'", userType12.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + userType47 + "' != '" + booking.UserType.FACULTY + "'", userType47.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        double double13 = bookingReceiver0.getAmount();
        java.lang.String str14 = bookingReceiver0.getAction();
        double double15 = bookingReceiver0.getDeposit();
        double double16 = bookingReceiver0.getDeposit();
        booking.BookingReceiver bookingReceiver20 = new booking.BookingReceiver();
        bookingReceiver20.cancelBooking("hi!", "hi!");
        java.lang.String str24 = bookingReceiver20.getAction();
        booking.BookingReceiver bookingReceiver25 = null;
        booking.BookingReceiver bookingReceiver29 = new booking.BookingReceiver();
        booking.UserType userType33 = booking.UserType.FACULTY;
        bookingReceiver29.bookSpace("", "", 100, userType33);
        booking.BookCommand bookCommand35 = new booking.BookCommand(bookingReceiver25, "hi!", "", 0, userType33);
        double double36 = bookingReceiver20.getRate(userType33);
        booking.UserType userType40 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand41 = new booking.ExtendCommand(bookingReceiver20, "BOOK", "EXTEND", (int) (short) 10, userType40);
        booking.BookCommand bookCommand42 = new booking.BookCommand(bookingReceiver0, "EXTEND", "hi!", (int) 'a', userType40);
        bookCommand42.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CANCEL" + "'", str24, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType33 + "' != '" + booking.UserType.FACULTY + "'", userType33.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 8.0d + "'", double36 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType40 + "' != '" + booking.UserType.FACULTY + "'", userType40.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        booking.UserType userType12 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand13 = new booking.BookCommand(bookingReceiver2, "hi!", "hi!", 100, userType12);
        bookCommand13.doAction();
        bookCommand13.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand13);
        booking.BookingReceiver bookingReceiver17 = new booking.BookingReceiver();
        java.lang.String str18 = bookingReceiver17.getAction();
        booking.UserType userType22 = null;
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver17, "hi!", "", 100, userType22);
        booking.UserType userType27 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand28 = new booking.BookCommand(bookingReceiver17, "hi!", "hi!", 100, userType27);
        booking.UserType userType32 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand33 = new booking.ExtendCommand(bookingReceiver17, "", "", (int) (short) 1, userType32);
        commandInvoker0.setCommand((booking.ICommand) extendCommand33);
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + booking.UserType.FACULTY + "'", userType12.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + userType27 + "' != '" + booking.UserType.FACULTY + "'", userType27.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType32 + "' != '" + booking.UserType.FACULTY + "'", userType32.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        booking.BookingReceiver bookingReceiver0 = null;
        booking.CancelCommand cancelCommand3 = new booking.CancelCommand(bookingReceiver0, "EXTEND", "EXTEND");
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("", "");
        double double11 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.BookingReceiver bookingReceiver12 = new booking.BookingReceiver();
        java.lang.String str13 = bookingReceiver12.getAction();
        booking.UserType userType17 = null;
        booking.ExtendCommand extendCommand18 = new booking.ExtendCommand(bookingReceiver12, "hi!", "", 100, userType17);
        booking.UserType userType22 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand23 = new booking.BookCommand(bookingReceiver12, "hi!", "hi!", 100, userType22);
        booking.BookingReceiver bookingReceiver27 = new booking.BookingReceiver();
        booking.UserType userType31 = booking.UserType.FACULTY;
        bookingReceiver27.bookSpace("", "", 100, userType31);
        bookingReceiver12.extendBooking("", "", (int) 'a', userType31);
        double double34 = bookingReceiver0.getRate(userType31);
        booking.CancelCommand cancelCommand37 = new booking.CancelCommand(bookingReceiver0, "hi!", "EXTEND");
        java.lang.String str38 = bookingReceiver0.getAction();
        java.lang.String str39 = bookingReceiver0.getAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + userType22 + "' != '" + booking.UserType.FACULTY + "'", userType22.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.0d + "'", double34 == 8.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSpot2.detach((booking.Observer) parkingSensor17);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor34 = new booking.ParkingSensor((booking.Subject) parkingSpot33);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        booking.BookingSystem bookingSystem42 = new booking.BookingSystem((booking.Subject) parkingSpot39);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        parkingSpot43.occupySpot("hi!");
        bookingSystem42.update((booking.Subject) parkingSpot43);
        parkingSpot35.detach((booking.Observer) bookingSystem42);
        parkingSensor34.update((booking.Subject) parkingSpot35);
        booking.ParkingSensor parkingSensor49 = new booking.ParkingSensor((booking.Subject) parkingSpot35);
        parkingSpot2.attach((booking.Observer) parkingSensor49);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor52 = new booking.ParkingSensor((booking.Subject) parkingSpot51);
        parkingSensor49.update((booking.Subject) parkingSpot51);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        java.lang.String str18 = bookingReceiver0.getAction();
        double double19 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver23 = new booking.BookingReceiver();
        java.lang.String str24 = bookingReceiver23.getAction();
        booking.UserType userType28 = null;
        booking.ExtendCommand extendCommand29 = new booking.ExtendCommand(bookingReceiver23, "hi!", "", 100, userType28);
        booking.UserType userType33 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand34 = new booking.BookCommand(bookingReceiver23, "hi!", "hi!", 100, userType33);
        booking.BookingReceiver bookingReceiver38 = new booking.BookingReceiver();
        booking.UserType userType42 = booking.UserType.FACULTY;
        bookingReceiver38.bookSpace("", "", 100, userType42);
        bookingReceiver23.extendBooking("", "", (int) 'a', userType42);
        booking.UserType userType45 = booking.UserType.NON_FACULTY;
        double double46 = bookingReceiver23.getRate(userType45);
        bookingReceiver23.cancelBooking("BOOK", "hi!");
        java.lang.String str50 = bookingReceiver23.getAction();
        double double51 = bookingReceiver23.getDeposit();
        booking.BookingReceiver bookingReceiver55 = new booking.BookingReceiver();
        java.lang.String str56 = bookingReceiver55.getAction();
        double double57 = bookingReceiver55.getDeposit();
        booking.BookingReceiver bookingReceiver61 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        java.lang.String str66 = bookingReceiver65.getAction();
        booking.UserType userType70 = null;
        booking.ExtendCommand extendCommand71 = new booking.ExtendCommand(bookingReceiver65, "hi!", "", 100, userType70);
        java.lang.String str72 = bookingReceiver65.getAction();
        booking.UserType userType76 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand77 = new booking.ExtendCommand(bookingReceiver65, "hi!", "hi!", (int) (byte) 0, userType76);
        booking.ExtendCommand extendCommand78 = new booking.ExtendCommand(bookingReceiver61, "", "", (int) (byte) 100, userType76);
        booking.BookingReceiver bookingReceiver82 = new booking.BookingReceiver();
        java.lang.String str83 = bookingReceiver82.getAction();
        booking.UserType userType87 = null;
        booking.ExtendCommand extendCommand88 = new booking.ExtendCommand(bookingReceiver82, "hi!", "", 100, userType87);
        booking.UserType userType92 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand93 = new booking.BookCommand(bookingReceiver82, "hi!", "hi!", 100, userType92);
        bookingReceiver61.bookSpace("hi!", "hi!", (int) (short) -1, userType92);
        booking.ExtendCommand extendCommand95 = new booking.ExtendCommand(bookingReceiver55, "EXTEND", "BOOK", (int) (byte) -1, userType92);
        booking.ExtendCommand extendCommand96 = new booking.ExtendCommand(bookingReceiver23, "CANCEL", "", 0, userType92);
        bookingReceiver0.bookSpace("BOOK", "", (int) '4', userType92);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + userType33 + "' != '" + booking.UserType.FACULTY + "'", userType33.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType42 + "' != '" + booking.UserType.FACULTY + "'", userType42.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType45 + "' != '" + booking.UserType.NON_FACULTY + "'", userType45.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CANCEL" + "'", str50, "CANCEL");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + userType76 + "' != '" + booking.UserType.NON_FACULTY + "'", userType76.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + userType92 + "' != '" + booking.UserType.FACULTY + "'", userType92.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        parkingSpot3.occupySpot("hi!");
        booking.BookingSystem bookingSystem6 = new booking.BookingSystem((booking.Subject) parkingSpot3);
        booking.ParkingSpot parkingSpot7 = new booking.ParkingSpot();
        parkingSpot7.occupySpot("hi!");
        booking.BookingSystem bookingSystem10 = new booking.BookingSystem((booking.Subject) parkingSpot7);
        booking.ParkingSpot parkingSpot11 = new booking.ParkingSpot();
        parkingSpot11.occupySpot("hi!");
        bookingSystem10.update((booking.Subject) parkingSpot11);
        parkingSpot3.detach((booking.Observer) bookingSystem10);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        parkingSpot16.occupySpot("hi!");
        booking.BookingSystem bookingSystem19 = new booking.BookingSystem((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        parkingSpot20.occupySpot("hi!");
        booking.BookingSystem bookingSystem23 = new booking.BookingSystem((booking.Subject) parkingSpot20);
        booking.ParkingSpot parkingSpot24 = new booking.ParkingSpot();
        parkingSpot24.occupySpot("hi!");
        bookingSystem23.update((booking.Subject) parkingSpot24);
        parkingSpot16.detach((booking.Observer) bookingSystem23);
        parkingSpot3.detach((booking.Observer) bookingSystem23);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        booking.BookingSystem bookingSystem33 = new booking.BookingSystem((booking.Subject) parkingSpot30);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        bookingSystem37.update((booking.Subject) parkingSpot38);
        parkingSpot30.detach((booking.Observer) bookingSystem37);
        bookingSystem23.update((booking.Subject) parkingSpot30);
        parkingSpot0.attach((booking.Observer) bookingSystem23);
        booking.BookingSystem bookingSystem45 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.Subject subject46 = null;
        // The following exception was thrown during execution in test generation
        try {
            bookingSystem45.update(subject46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Object.equals(Object)\" because \"changedSubject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        booking.BookingSystem bookingSystem54 = new booking.BookingSystem((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot55);
        booking.ParkingSpot parkingSpot59 = new booking.ParkingSpot();
        parkingSpot59.occupySpot("hi!");
        bookingSystem58.update((booking.Subject) parkingSpot59);
        parkingSpot51.detach((booking.Observer) bookingSystem58);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        bookingSystem71.update((booking.Subject) parkingSpot72);
        parkingSpot64.detach((booking.Observer) bookingSystem71);
        parkingSpot51.detach((booking.Observer) bookingSystem71);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        parkingSpot78.occupySpot("hi!");
        booking.BookingSystem bookingSystem81 = new booking.BookingSystem((booking.Subject) parkingSpot78);
        booking.ParkingSpot parkingSpot82 = new booking.ParkingSpot();
        parkingSpot82.occupySpot("hi!");
        booking.BookingSystem bookingSystem85 = new booking.BookingSystem((booking.Subject) parkingSpot82);
        booking.ParkingSpot parkingSpot86 = new booking.ParkingSpot();
        parkingSpot86.occupySpot("hi!");
        bookingSystem85.update((booking.Subject) parkingSpot86);
        parkingSpot78.detach((booking.Observer) bookingSystem85);
        bookingSystem71.update((booking.Subject) parkingSpot78);
        booking.ParkingSensor parkingSensor92 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        parkingSensor1.update((booking.Subject) parkingSpot78);
        booking.Observer observer94 = null;
        parkingSpot78.detach(observer94);
        boolean boolean96 = parkingSpot78.isOccupied();
        java.lang.String str97 = parkingSpot78.getLicensePlate();
        parkingSpot78.occupySpot("");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "hi!" + "'", str97, "hi!");
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.occupySpot("hi!");
        booking.BookingSystem bookingSystem44 = new booking.BookingSystem((booking.Subject) parkingSpot41);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        bookingSystem48.update((booking.Subject) parkingSpot49);
        parkingSpot41.detach((booking.Observer) bookingSystem48);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        booking.BookingSystem bookingSystem57 = new booking.BookingSystem((booking.Subject) parkingSpot54);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        bookingSystem61.update((booking.Subject) parkingSpot62);
        parkingSpot54.detach((booking.Observer) bookingSystem61);
        parkingSpot41.detach((booking.Observer) bookingSystem61);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        booking.BookingSystem bookingSystem75 = new booking.BookingSystem((booking.Subject) parkingSpot72);
        booking.ParkingSpot parkingSpot76 = new booking.ParkingSpot();
        parkingSpot76.occupySpot("hi!");
        bookingSystem75.update((booking.Subject) parkingSpot76);
        parkingSpot68.detach((booking.Observer) bookingSystem75);
        bookingSystem61.update((booking.Subject) parkingSpot68);
        bookingSystem20.update((booking.Subject) parkingSpot68);
        parkingSpot68.occupySpot("hi!");
        boolean boolean85 = parkingSpot68.isOccupied();
        parkingSpot68.occupySpot("");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        parkingSpot0.freeSpot();
        java.lang.String str3 = parkingSpot0.getLicensePlate();
        // The following exception was thrown during execution in test generation
        try {
            parkingSpot0.occupySpot("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: License plate must not be null or empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        java.lang.String str48 = bookingReceiver41.getAction();
        booking.UserType userType52 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver41, "hi!", "hi!", (int) (byte) 0, userType52);
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver37, "", "", (int) (byte) 100, userType52);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        booking.UserType userType68 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand69 = new booking.BookCommand(bookingReceiver58, "hi!", "hi!", 100, userType68);
        bookingReceiver37.bookSpace("hi!", "hi!", (int) (short) -1, userType68);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType68);
        booking.BookingReceiver bookingReceiver72 = new booking.BookingReceiver();
        bookingReceiver72.cancelBooking("hi!", "hi!");
        bookingReceiver72.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver79 = new booking.BookingReceiver();
        booking.UserType userType83 = booking.UserType.FACULTY;
        bookingReceiver79.bookSpace("", "", 100, userType83);
        double double85 = bookingReceiver72.getRate(userType83);
        booking.BookingReceiver bookingReceiver89 = new booking.BookingReceiver();
        bookingReceiver89.cancelBooking("hi!", "hi!");
        booking.UserType userType93 = booking.UserType.STUDENT;
        double double94 = bookingReceiver89.getRate(userType93);
        booking.BookCommand bookCommand95 = new booking.BookCommand(bookingReceiver72, "hi!", "CANCEL", (int) (short) 10, userType93);
        double double96 = bookingReceiver0.getRate(userType93);
        double double97 = bookingReceiver0.getDeposit();
        double double98 = bookingReceiver0.getAmount();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + booking.UserType.NON_FACULTY + "'", userType52.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType68 + "' != '" + booking.UserType.FACULTY + "'", userType68.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType83 + "' != '" + booking.UserType.FACULTY + "'", userType83.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 8.0d + "'", double85 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType93 + "' != '" + booking.UserType.STUDENT + "'", userType93.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 5.0d + "'", double94 == 5.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 5.0d + "'", double96 == 5.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 8.0d + "'", double97 == 8.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + (-8.0d) + "'", double98 == (-8.0d));
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        double double2 = bookingReceiver0.getDeposit();
        booking.BookingReceiver bookingReceiver6 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        java.lang.String str17 = bookingReceiver10.getAction();
        booking.UserType userType21 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand22 = new booking.ExtendCommand(bookingReceiver10, "hi!", "hi!", (int) (byte) 0, userType21);
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver6, "", "", (int) (byte) 100, userType21);
        booking.CancelCommand cancelCommand26 = new booking.CancelCommand(bookingReceiver6, "hi!", "hi!");
        booking.BookingReceiver bookingReceiver30 = new booking.BookingReceiver();
        java.lang.String str31 = bookingReceiver30.getAction();
        booking.UserType userType35 = null;
        booking.ExtendCommand extendCommand36 = new booking.ExtendCommand(bookingReceiver30, "hi!", "", 100, userType35);
        booking.UserType userType40 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand41 = new booking.BookCommand(bookingReceiver30, "hi!", "hi!", 100, userType40);
        booking.UserType userType45 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand46 = new booking.ExtendCommand(bookingReceiver30, "", "", (int) (short) 1, userType45);
        bookingReceiver6.bookSpace("CANCEL", "EXTEND", (int) (byte) 10, userType45);
        bookingReceiver0.extendBooking("CANCEL", "hi!", (-1), userType45);
        java.lang.String str49 = bookingReceiver0.getAction();
        double double50 = bookingReceiver0.getAmount();
        double double51 = bookingReceiver0.getAmount();
        double double52 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + userType21 + "' != '" + booking.UserType.NON_FACULTY + "'", userType21.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + userType40 + "' != '" + booking.UserType.FACULTY + "'", userType40.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType45 + "' != '" + booking.UserType.FACULTY + "'", userType45.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "EXTEND" + "'", str49, "EXTEND");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-8.0d) + "'", double50 == (-8.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-8.0d) + "'", double51 == (-8.0d));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = null;
        booking.BookingReceiver bookingReceiver5 = new booking.BookingReceiver();
        booking.UserType userType9 = booking.UserType.FACULTY;
        bookingReceiver5.bookSpace("", "", 100, userType9);
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver1, "hi!", "", 0, userType9);
        commandInvoker0.setCommand((booking.ICommand) bookCommand11);
        booking.BookingReceiver bookingReceiver13 = new booking.BookingReceiver();
        java.lang.String str14 = bookingReceiver13.getAction();
        booking.UserType userType18 = null;
        booking.ExtendCommand extendCommand19 = new booking.ExtendCommand(bookingReceiver13, "hi!", "", 100, userType18);
        booking.UserType userType23 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand24 = new booking.BookCommand(bookingReceiver13, "hi!", "hi!", 100, userType23);
        bookCommand24.doAction();
        bookCommand24.doAction();
        bookCommand24.doAction();
        bookCommand24.doAction();
        bookCommand24.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand24);
        bookCommand24.doAction();
        bookCommand24.doAction();
        bookCommand24.doAction();
        org.junit.Assert.assertTrue("'" + userType9 + "' != '" + booking.UserType.FACULTY + "'", userType9.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + userType23 + "' != '" + booking.UserType.FACULTY + "'", userType23.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        bookCommand11.doAction();
        bookCommand11.doAction();
        bookCommand11.doAction();
        bookCommand11.doAction();
        bookCommand11.doAction();
        bookCommand11.doAction();
        bookCommand11.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor28 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        parkingSpot29.occupySpot("hi!");
        booking.BookingSystem bookingSystem32 = new booking.BookingSystem((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        booking.BookingSystem bookingSystem36 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        bookingSystem36.update((booking.Subject) parkingSpot37);
        parkingSpot29.detach((booking.Observer) bookingSystem36);
        parkingSensor28.update((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor44 = new booking.ParkingSensor((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        bookingSystem52.update((booking.Subject) parkingSpot53);
        parkingSpot45.detach((booking.Observer) bookingSystem52);
        parkingSensor44.update((booking.Subject) parkingSpot45);
        parkingSpot29.detach((booking.Observer) parkingSensor44);
        parkingSpot0.detach((booking.Observer) parkingSensor44);
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        java.lang.String str62 = parkingSpot0.getLicensePlate();
        java.lang.String str63 = parkingSpot0.getLicensePlate();
        booking.BookingSystem bookingSystem64 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        bookCommand11.doAction();
        bookCommand11.doAction();
        bookCommand11.doAction();
        bookCommand11.doAction();
        bookCommand11.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        booking.UserType userType4 = booking.UserType.STUDENT;
        double double5 = bookingReceiver0.getRate(userType4);
        double double6 = bookingReceiver0.getDeposit();
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver11 = new booking.BookingReceiver();
        java.lang.String str12 = bookingReceiver11.getAction();
        booking.BookingReceiver bookingReceiver16 = new booking.BookingReceiver();
        bookingReceiver16.cancelBooking("hi!", "hi!");
        java.lang.String str20 = bookingReceiver16.getAction();
        booking.BookingReceiver bookingReceiver21 = null;
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        booking.BookCommand bookCommand31 = new booking.BookCommand(bookingReceiver21, "hi!", "", 0, userType29);
        double double32 = bookingReceiver16.getRate(userType29);
        booking.UserType userType36 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand37 = new booking.ExtendCommand(bookingReceiver16, "BOOK", "EXTEND", (int) (short) 10, userType36);
        booking.BookCommand bookCommand38 = new booking.BookCommand(bookingReceiver11, "CANCEL", "hi!", (int) ' ', userType36);
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) '#', userType36);
        double double40 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.STUDENT + "'", userType4.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 5.0d + "'", double5 == 5.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CANCEL" + "'", str7, "CANCEL");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "CANCEL" + "'", str20, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 8.0d + "'", double32 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType36 + "' != '" + booking.UserType.FACULTY + "'", userType36.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        double double8 = bookingReceiver0.getDeposit();
        java.lang.String str9 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("BOOK", "");
        double double13 = bookingReceiver0.getAmount();
        double double14 = bookingReceiver0.getAmount();
        booking.UserType userType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            bookingReceiver0.extendBooking("hi!", "BOOK", (int) (short) 0, userType18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.UserType.ordinal()\" because \"userType\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        java.lang.String str34 = bookingReceiver0.getAction();
        java.lang.String str35 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver39 = new booking.BookingReceiver();
        java.lang.String str40 = bookingReceiver39.getAction();
        booking.UserType userType44 = null;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver39, "hi!", "", 100, userType44);
        java.lang.String str46 = bookingReceiver39.getAction();
        double double47 = bookingReceiver39.getDeposit();
        java.lang.String str48 = bookingReceiver39.getAction();
        bookingReceiver39.cancelBooking("", "CANCEL");
        booking.BookingReceiver bookingReceiver55 = null;
        booking.BookingReceiver bookingReceiver59 = new booking.BookingReceiver();
        bookingReceiver59.cancelBooking("hi!", "hi!");
        booking.UserType userType63 = booking.UserType.STUDENT;
        double double64 = bookingReceiver59.getRate(userType63);
        booking.BookCommand bookCommand65 = new booking.BookCommand(bookingReceiver55, "BOOK", "hi!", 0, userType63);
        booking.BookCommand bookCommand66 = new booking.BookCommand(bookingReceiver39, "CANCEL", "BOOK", (int) (short) 0, userType63);
        booking.BookCommand bookCommand67 = new booking.BookCommand(bookingReceiver0, "EXTEND", "BOOK", (int) (byte) 10, userType63);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "BOOK" + "'", str34, "BOOK");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "BOOK" + "'", str35, "BOOK");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType63 + "' != '" + booking.UserType.STUDENT + "'", userType63.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 5.0d + "'", double64 == 5.0d);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.BookingReceiver bookingReceiver15 = new booking.BookingReceiver();
        booking.UserType userType19 = booking.UserType.FACULTY;
        bookingReceiver15.bookSpace("", "", 100, userType19);
        bookingReceiver0.extendBooking("", "", (int) 'a', userType19);
        double double22 = bookingReceiver0.getAmount();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType19 + "' != '" + booking.UserType.FACULTY + "'", userType19.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 776.0d + "'", double22 == 776.0d);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor11 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        bookingSystem9.update((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        booking.ParkingSpot parkingSpot28 = new booking.ParkingSpot();
        parkingSpot28.occupySpot("hi!");
        booking.BookingSystem bookingSystem31 = new booking.BookingSystem((booking.Subject) parkingSpot28);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.BookingSystem bookingSystem35 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        bookingSystem35.update((booking.Subject) parkingSpot36);
        parkingSpot28.detach((booking.Observer) bookingSystem35);
        parkingSpot15.detach((booking.Observer) bookingSystem35);
        parkingSpot15.occupySpot("CANCEL");
        parkingSensor14.update((booking.Subject) parkingSpot15);
        bookingSystem9.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot46 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor47 = new booking.ParkingSensor((booking.Subject) parkingSpot46);
        booking.ParkingSpot parkingSpot48 = new booking.ParkingSpot();
        parkingSpot48.occupySpot("hi!");
        booking.BookingSystem bookingSystem51 = new booking.BookingSystem((booking.Subject) parkingSpot48);
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        bookingSystem55.update((booking.Subject) parkingSpot56);
        parkingSpot48.detach((booking.Observer) bookingSystem55);
        parkingSensor47.update((booking.Subject) parkingSpot48);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor63 = new booking.ParkingSensor((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        bookingSystem71.update((booking.Subject) parkingSpot72);
        parkingSpot64.detach((booking.Observer) bookingSystem71);
        parkingSensor63.update((booking.Subject) parkingSpot64);
        parkingSpot48.detach((booking.Observer) parkingSensor63);
        parkingSpot48.freeSpot();
        booking.BookingSystem bookingSystem80 = new booking.BookingSystem((booking.Subject) parkingSpot48);
        bookingSystem9.update((booking.Subject) parkingSpot48);
        java.lang.String str82 = parkingSpot48.getLicensePlate();
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.CancelCommand cancelCommand20 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        booking.BookingReceiver bookingReceiver24 = new booking.BookingReceiver();
        java.lang.String str25 = bookingReceiver24.getAction();
        booking.UserType userType29 = null;
        booking.ExtendCommand extendCommand30 = new booking.ExtendCommand(bookingReceiver24, "hi!", "", 100, userType29);
        booking.UserType userType34 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand35 = new booking.BookCommand(bookingReceiver24, "hi!", "hi!", 100, userType34);
        booking.UserType userType39 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand40 = new booking.ExtendCommand(bookingReceiver24, "", "", (int) (short) 1, userType39);
        bookingReceiver0.bookSpace("CANCEL", "EXTEND", (int) (byte) 10, userType39);
        booking.BookingReceiver bookingReceiver45 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver49 = new booking.BookingReceiver();
        java.lang.String str50 = bookingReceiver49.getAction();
        booking.UserType userType54 = null;
        booking.ExtendCommand extendCommand55 = new booking.ExtendCommand(bookingReceiver49, "hi!", "", 100, userType54);
        java.lang.String str56 = bookingReceiver49.getAction();
        booking.UserType userType60 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand61 = new booking.ExtendCommand(bookingReceiver49, "hi!", "hi!", (int) (byte) 0, userType60);
        booking.ExtendCommand extendCommand62 = new booking.ExtendCommand(bookingReceiver45, "", "", (int) (byte) 100, userType60);
        booking.BookingReceiver bookingReceiver66 = new booking.BookingReceiver();
        java.lang.String str67 = bookingReceiver66.getAction();
        booking.UserType userType71 = null;
        booking.ExtendCommand extendCommand72 = new booking.ExtendCommand(bookingReceiver66, "hi!", "", 100, userType71);
        booking.UserType userType76 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand77 = new booking.BookCommand(bookingReceiver66, "hi!", "hi!", 100, userType76);
        bookingReceiver45.bookSpace("hi!", "hi!", (int) (short) -1, userType76);
        bookingReceiver0.bookSpace("EXTEND", "hi!", (int) (byte) -1, userType76);
        double double80 = bookingReceiver0.getDeposit();
        double double81 = bookingReceiver0.getAmount();
        booking.CancelCommand cancelCommand84 = new booking.CancelCommand(bookingReceiver0, "EXTEND", "");
        java.lang.Class<?> wildcardClass85 = cancelCommand84.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + userType34 + "' != '" + booking.UserType.FACULTY + "'", userType34.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.FACULTY + "'", userType39.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.NON_FACULTY + "'", userType60.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + userType76 + "' != '" + booking.UserType.FACULTY + "'", userType76.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 8.0d + "'", double80 == 8.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-8.0d) + "'", double81 == (-8.0d));
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        double double12 = bookingReceiver0.getAmount();
        double double13 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver17 = new booking.BookingReceiver();
        java.lang.String str18 = bookingReceiver17.getAction();
        booking.UserType userType22 = null;
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver17, "hi!", "", 100, userType22);
        java.lang.String str24 = bookingReceiver17.getAction();
        booking.UserType userType28 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand29 = new booking.ExtendCommand(bookingReceiver17, "hi!", "hi!", (int) (byte) 0, userType28);
        double double30 = bookingReceiver17.getAmount();
        java.lang.String str31 = bookingReceiver17.getAction();
        double double32 = bookingReceiver17.getDeposit();
        double double33 = bookingReceiver17.getDeposit();
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        bookingReceiver37.cancelBooking("hi!", "hi!");
        java.lang.String str41 = bookingReceiver37.getAction();
        booking.BookingReceiver bookingReceiver42 = null;
        booking.BookingReceiver bookingReceiver46 = new booking.BookingReceiver();
        booking.UserType userType50 = booking.UserType.FACULTY;
        bookingReceiver46.bookSpace("", "", 100, userType50);
        booking.BookCommand bookCommand52 = new booking.BookCommand(bookingReceiver42, "hi!", "", 0, userType50);
        double double53 = bookingReceiver37.getRate(userType50);
        booking.UserType userType57 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand58 = new booking.ExtendCommand(bookingReceiver37, "BOOK", "EXTEND", (int) (short) 10, userType57);
        booking.BookCommand bookCommand59 = new booking.BookCommand(bookingReceiver17, "EXTEND", "hi!", (int) 'a', userType57);
        bookingReceiver0.extendBooking("BOOK", "CANCEL", (int) '4', userType57);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + userType28 + "' != '" + booking.UserType.NON_FACULTY + "'", userType28.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "CANCEL" + "'", str41, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType50 + "' != '" + booking.UserType.FACULTY + "'", userType50.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 8.0d + "'", double53 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType57 + "' != '" + booking.UserType.FACULTY + "'", userType57.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.UserType userType15 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (short) 1, userType15);
        booking.BookingReceiver bookingReceiver20 = new booking.BookingReceiver();
        java.lang.String str21 = bookingReceiver20.getAction();
        booking.UserType userType25 = null;
        booking.ExtendCommand extendCommand26 = new booking.ExtendCommand(bookingReceiver20, "hi!", "", 100, userType25);
        java.lang.String str27 = bookingReceiver20.getAction();
        booking.UserType userType31 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver20, "hi!", "hi!", (int) (byte) 0, userType31);
        booking.BookingReceiver bookingReceiver36 = new booking.BookingReceiver();
        java.lang.String str37 = bookingReceiver36.getAction();
        booking.UserType userType41 = null;
        booking.ExtendCommand extendCommand42 = new booking.ExtendCommand(bookingReceiver36, "hi!", "", 100, userType41);
        java.lang.String str43 = bookingReceiver36.getAction();
        booking.UserType userType47 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand48 = new booking.ExtendCommand(bookingReceiver36, "hi!", "hi!", (int) (byte) 0, userType47);
        booking.ExtendCommand extendCommand49 = new booking.ExtendCommand(bookingReceiver20, "CANCEL", "CANCEL", (int) (short) 1, userType47);
        booking.BookingReceiver bookingReceiver53 = new booking.BookingReceiver();
        java.lang.String str54 = bookingReceiver53.getAction();
        booking.UserType userType58 = null;
        booking.ExtendCommand extendCommand59 = new booking.ExtendCommand(bookingReceiver53, "hi!", "", 100, userType58);
        booking.UserType userType63 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand64 = new booking.BookCommand(bookingReceiver53, "hi!", "hi!", 100, userType63);
        booking.BookingReceiver bookingReceiver68 = new booking.BookingReceiver();
        booking.UserType userType72 = booking.UserType.FACULTY;
        bookingReceiver68.bookSpace("", "", 100, userType72);
        bookingReceiver53.extendBooking("", "", (int) 'a', userType72);
        booking.UserType userType75 = booking.UserType.NON_FACULTY;
        double double76 = bookingReceiver53.getRate(userType75);
        bookingReceiver20.extendBooking("hi!", "", (int) (byte) -1, userType75);
        booking.ExtendCommand extendCommand78 = new booking.ExtendCommand(bookingReceiver0, "BOOK", "CANCEL", 0, userType75);
        extendCommand78.doAction();
        extendCommand78.doAction();
        extendCommand78.doAction();
        extendCommand78.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.FACULTY + "'", userType15.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.NON_FACULTY + "'", userType31.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + userType47 + "' != '" + booking.UserType.NON_FACULTY + "'", userType47.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + userType63 + "' != '" + booking.UserType.FACULTY + "'", userType63.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.FACULTY + "'", userType72.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType75 + "' != '" + booking.UserType.NON_FACULTY + "'", userType75.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 10.0d + "'", double76 == 10.0d);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        double double8 = bookingReceiver0.getDeposit();
        booking.BookingReceiver bookingReceiver12 = new booking.BookingReceiver();
        java.lang.String str13 = bookingReceiver12.getAction();
        booking.UserType userType17 = null;
        booking.ExtendCommand extendCommand18 = new booking.ExtendCommand(bookingReceiver12, "hi!", "", 100, userType17);
        double double19 = bookingReceiver12.getDeposit();
        java.lang.String str20 = bookingReceiver12.getAction();
        booking.BookingReceiver bookingReceiver24 = new booking.BookingReceiver();
        java.lang.String str25 = bookingReceiver24.getAction();
        booking.UserType userType29 = null;
        booking.ExtendCommand extendCommand30 = new booking.ExtendCommand(bookingReceiver24, "hi!", "", 100, userType29);
        booking.UserType userType34 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand35 = new booking.BookCommand(bookingReceiver24, "hi!", "hi!", 100, userType34);
        booking.BookingReceiver bookingReceiver36 = new booking.BookingReceiver();
        java.lang.String str37 = bookingReceiver36.getAction();
        booking.UserType userType41 = null;
        booking.ExtendCommand extendCommand42 = new booking.ExtendCommand(bookingReceiver36, "hi!", "", 100, userType41);
        booking.UserType userType46 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand47 = new booking.BookCommand(bookingReceiver36, "hi!", "hi!", 100, userType46);
        booking.BookingReceiver bookingReceiver51 = new booking.BookingReceiver();
        booking.UserType userType55 = booking.UserType.FACULTY;
        bookingReceiver51.bookSpace("", "", 100, userType55);
        bookingReceiver36.extendBooking("", "", (int) 'a', userType55);
        double double58 = bookingReceiver24.getRate(userType55);
        booking.BookingReceiver bookingReceiver62 = new booking.BookingReceiver();
        java.lang.String str63 = bookingReceiver62.getAction();
        booking.UserType userType67 = null;
        booking.ExtendCommand extendCommand68 = new booking.ExtendCommand(bookingReceiver62, "hi!", "", 100, userType67);
        java.lang.String str69 = bookingReceiver62.getAction();
        booking.UserType userType73 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver62, "hi!", "hi!", (int) (byte) 0, userType73);
        booking.BookingReceiver bookingReceiver78 = new booking.BookingReceiver();
        java.lang.String str79 = bookingReceiver78.getAction();
        booking.UserType userType83 = null;
        booking.ExtendCommand extendCommand84 = new booking.ExtendCommand(bookingReceiver78, "hi!", "", 100, userType83);
        java.lang.String str85 = bookingReceiver78.getAction();
        booking.UserType userType89 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand90 = new booking.ExtendCommand(bookingReceiver78, "hi!", "hi!", (int) (byte) 0, userType89);
        booking.ExtendCommand extendCommand91 = new booking.ExtendCommand(bookingReceiver62, "CANCEL", "CANCEL", (int) (short) 1, userType89);
        booking.BookCommand bookCommand92 = new booking.BookCommand(bookingReceiver24, "CANCEL", "hi!", (int) (byte) 1, userType89);
        booking.BookCommand bookCommand93 = new booking.BookCommand(bookingReceiver12, "CANCEL", "BOOK", (int) (byte) 10, userType89);
        booking.ExtendCommand extendCommand94 = new booking.ExtendCommand(bookingReceiver0, "BOOK", "hi!", (int) (short) 0, userType89);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + userType34 + "' != '" + booking.UserType.FACULTY + "'", userType34.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + userType46 + "' != '" + booking.UserType.FACULTY + "'", userType46.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType55 + "' != '" + booking.UserType.FACULTY + "'", userType55.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 8.0d + "'", double58 == 8.0d);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + userType73 + "' != '" + booking.UserType.NON_FACULTY + "'", userType73.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + userType89 + "' != '" + booking.UserType.NON_FACULTY + "'", userType89.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor41 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.Observer observer42 = null;
        parkingSpot27.detach(observer42);
        java.lang.String str44 = parkingSpot27.getLicensePlate();
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.UserType userType4 = booking.UserType.FACULTY;
        bookingReceiver0.bookSpace("", "", 100, userType4);
        bookingReceiver0.cancelBooking("", "CANCEL");
        booking.CancelCommand cancelCommand11 = new booking.CancelCommand(bookingReceiver0, "CANCEL", "");
        booking.BookingReceiver bookingReceiver15 = new booking.BookingReceiver();
        bookingReceiver15.cancelBooking("hi!", "hi!");
        double double19 = bookingReceiver15.getAmount();
        booking.BookingReceiver bookingReceiver23 = new booking.BookingReceiver();
        java.lang.String str24 = bookingReceiver23.getAction();
        booking.UserType userType28 = null;
        booking.ExtendCommand extendCommand29 = new booking.ExtendCommand(bookingReceiver23, "hi!", "", 100, userType28);
        java.lang.String str30 = bookingReceiver23.getAction();
        booking.UserType userType34 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver23, "hi!", "hi!", (int) (byte) 0, userType34);
        booking.BookingReceiver bookingReceiver39 = new booking.BookingReceiver();
        java.lang.String str40 = bookingReceiver39.getAction();
        booking.UserType userType44 = null;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver39, "hi!", "", 100, userType44);
        booking.UserType userType49 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand50 = new booking.BookCommand(bookingReceiver39, "hi!", "hi!", 100, userType49);
        booking.BookingReceiver bookingReceiver54 = new booking.BookingReceiver();
        booking.UserType userType58 = booking.UserType.FACULTY;
        bookingReceiver54.bookSpace("", "", 100, userType58);
        bookingReceiver39.extendBooking("", "", (int) 'a', userType58);
        bookingReceiver23.bookSpace("EXTEND", "hi!", (int) (byte) 1, userType58);
        bookingReceiver15.extendBooking("hi!", "hi!", (int) (byte) 10, userType58);
        booking.BookCommand bookCommand63 = new booking.BookCommand(bookingReceiver0, "EXTEND", "EXTEND", (int) 'a', userType58);
        java.lang.Class<?> wildcardClass64 = bookingReceiver0.getClass();
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.FACULTY + "'", userType4.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + userType34 + "' != '" + booking.UserType.NON_FACULTY + "'", userType34.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType49 + "' != '" + booking.UserType.FACULTY + "'", userType49.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType58 + "' != '" + booking.UserType.FACULTY + "'", userType58.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        parkingSpot3.occupySpot("hi!");
        booking.BookingSystem bookingSystem6 = new booking.BookingSystem((booking.Subject) parkingSpot3);
        booking.ParkingSpot parkingSpot7 = new booking.ParkingSpot();
        parkingSpot7.occupySpot("hi!");
        booking.BookingSystem bookingSystem10 = new booking.BookingSystem((booking.Subject) parkingSpot7);
        booking.ParkingSpot parkingSpot11 = new booking.ParkingSpot();
        parkingSpot11.occupySpot("hi!");
        bookingSystem10.update((booking.Subject) parkingSpot11);
        parkingSpot3.detach((booking.Observer) bookingSystem10);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        parkingSpot16.occupySpot("hi!");
        booking.BookingSystem bookingSystem19 = new booking.BookingSystem((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        parkingSpot20.occupySpot("hi!");
        booking.BookingSystem bookingSystem23 = new booking.BookingSystem((booking.Subject) parkingSpot20);
        booking.ParkingSpot parkingSpot24 = new booking.ParkingSpot();
        parkingSpot24.occupySpot("hi!");
        bookingSystem23.update((booking.Subject) parkingSpot24);
        parkingSpot16.detach((booking.Observer) bookingSystem23);
        parkingSpot3.detach((booking.Observer) bookingSystem23);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        booking.BookingSystem bookingSystem33 = new booking.BookingSystem((booking.Subject) parkingSpot30);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        bookingSystem37.update((booking.Subject) parkingSpot38);
        parkingSpot30.detach((booking.Observer) bookingSystem37);
        bookingSystem23.update((booking.Subject) parkingSpot30);
        parkingSpot0.attach((booking.Observer) bookingSystem23);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor46 = new booking.ParkingSensor((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot47 = new booking.ParkingSpot();
        parkingSpot47.occupySpot("hi!");
        booking.BookingSystem bookingSystem50 = new booking.BookingSystem((booking.Subject) parkingSpot47);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        booking.BookingSystem bookingSystem54 = new booking.BookingSystem((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        bookingSystem54.update((booking.Subject) parkingSpot55);
        parkingSpot47.detach((booking.Observer) bookingSystem54);
        parkingSensor46.update((booking.Subject) parkingSpot47);
        booking.ParkingSpot parkingSpot61 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor62 = new booking.ParkingSensor((booking.Subject) parkingSpot61);
        booking.ParkingSpot parkingSpot63 = new booking.ParkingSpot();
        parkingSpot63.occupySpot("hi!");
        booking.BookingSystem bookingSystem66 = new booking.BookingSystem((booking.Subject) parkingSpot63);
        booking.ParkingSpot parkingSpot67 = new booking.ParkingSpot();
        parkingSpot67.occupySpot("hi!");
        booking.BookingSystem bookingSystem70 = new booking.BookingSystem((booking.Subject) parkingSpot67);
        booking.ParkingSpot parkingSpot71 = new booking.ParkingSpot();
        parkingSpot71.occupySpot("hi!");
        bookingSystem70.update((booking.Subject) parkingSpot71);
        parkingSpot63.detach((booking.Observer) bookingSystem70);
        booking.ParkingSpot parkingSpot76 = new booking.ParkingSpot();
        parkingSpot76.occupySpot("hi!");
        booking.BookingSystem bookingSystem79 = new booking.BookingSystem((booking.Subject) parkingSpot76);
        booking.ParkingSpot parkingSpot80 = new booking.ParkingSpot();
        parkingSpot80.occupySpot("hi!");
        booking.BookingSystem bookingSystem83 = new booking.BookingSystem((booking.Subject) parkingSpot80);
        booking.ParkingSpot parkingSpot84 = new booking.ParkingSpot();
        parkingSpot84.occupySpot("hi!");
        bookingSystem83.update((booking.Subject) parkingSpot84);
        parkingSpot76.detach((booking.Observer) bookingSystem83);
        parkingSpot63.detach((booking.Observer) bookingSystem83);
        parkingSpot63.occupySpot("CANCEL");
        parkingSensor62.update((booking.Subject) parkingSpot63);
        parkingSensor46.update((booking.Subject) parkingSpot63);
        booking.ParkingSensor parkingSensor94 = new booking.ParkingSensor((booking.Subject) parkingSpot63);
        bookingSystem23.update((booking.Subject) parkingSpot63);
        boolean boolean96 = parkingSpot63.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver36 = new booking.BookingReceiver();
        bookingReceiver36.cancelBooking("hi!", "hi!");
        bookingReceiver36.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver43 = new booking.BookingReceiver();
        booking.UserType userType47 = booking.UserType.FACULTY;
        bookingReceiver43.bookSpace("", "", 100, userType47);
        double double49 = bookingReceiver36.getRate(userType47);
        booking.BookingReceiver bookingReceiver53 = new booking.BookingReceiver();
        bookingReceiver53.cancelBooking("hi!", "hi!");
        booking.UserType userType57 = booking.UserType.STUDENT;
        double double58 = bookingReceiver53.getRate(userType57);
        booking.BookCommand bookCommand59 = new booking.BookCommand(bookingReceiver36, "hi!", "CANCEL", (int) (short) 10, userType57);
        booking.BookCommand bookCommand60 = new booking.BookCommand(bookingReceiver0, "EXTEND", "EXTEND", (int) '4', userType57);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType47 + "' != '" + booking.UserType.FACULTY + "'", userType47.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 8.0d + "'", double49 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType57 + "' != '" + booking.UserType.STUDENT + "'", userType57.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 5.0d + "'", double58 == 5.0d);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        bookingReceiver0.cancelBooking("", "");
        booking.UserType userType7 = booking.UserType.STUDENT;
        double double8 = bookingReceiver0.getRate(userType7);
        booking.BookingReceiver bookingReceiver12 = new booking.BookingReceiver();
        bookingReceiver12.cancelBooking("hi!", "hi!");
        bookingReceiver12.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver19 = new booking.BookingReceiver();
        booking.UserType userType23 = booking.UserType.FACULTY;
        bookingReceiver19.bookSpace("", "", 100, userType23);
        double double25 = bookingReceiver12.getRate(userType23);
        booking.BookingReceiver bookingReceiver29 = new booking.BookingReceiver();
        java.lang.String str30 = bookingReceiver29.getAction();
        booking.UserType userType34 = null;
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver29, "hi!", "", 100, userType34);
        java.lang.String str36 = bookingReceiver29.getAction();
        booking.UserType userType40 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand41 = new booking.ExtendCommand(bookingReceiver29, "hi!", "hi!", (int) (byte) 0, userType40);
        booking.BookingReceiver bookingReceiver45 = new booking.BookingReceiver();
        java.lang.String str46 = bookingReceiver45.getAction();
        booking.UserType userType50 = null;
        booking.ExtendCommand extendCommand51 = new booking.ExtendCommand(bookingReceiver45, "hi!", "", 100, userType50);
        java.lang.String str52 = bookingReceiver45.getAction();
        booking.UserType userType56 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand57 = new booking.ExtendCommand(bookingReceiver45, "hi!", "hi!", (int) (byte) 0, userType56);
        booking.ExtendCommand extendCommand58 = new booking.ExtendCommand(bookingReceiver29, "CANCEL", "CANCEL", (int) (short) 1, userType56);
        booking.BookingReceiver bookingReceiver62 = new booking.BookingReceiver();
        java.lang.String str63 = bookingReceiver62.getAction();
        booking.UserType userType67 = null;
        booking.ExtendCommand extendCommand68 = new booking.ExtendCommand(bookingReceiver62, "hi!", "", 100, userType67);
        booking.UserType userType72 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand73 = new booking.BookCommand(bookingReceiver62, "hi!", "hi!", 100, userType72);
        booking.BookingReceiver bookingReceiver77 = new booking.BookingReceiver();
        booking.UserType userType81 = booking.UserType.FACULTY;
        bookingReceiver77.bookSpace("", "", 100, userType81);
        bookingReceiver62.extendBooking("", "", (int) 'a', userType81);
        booking.UserType userType84 = booking.UserType.NON_FACULTY;
        double double85 = bookingReceiver62.getRate(userType84);
        bookingReceiver29.extendBooking("hi!", "", (int) (byte) -1, userType84);
        bookingReceiver12.extendBooking("", "", 100, userType84);
        bookingReceiver0.extendBooking("CANCEL", "EXTEND", (int) (short) 100, userType84);
        java.lang.Class<?> wildcardClass89 = userType84.getClass();
        org.junit.Assert.assertTrue("'" + userType7 + "' != '" + booking.UserType.STUDENT + "'", userType7.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + userType23 + "' != '" + booking.UserType.FACULTY + "'", userType23.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 8.0d + "'", double25 == 8.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + userType40 + "' != '" + booking.UserType.NON_FACULTY + "'", userType40.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + userType56 + "' != '" + booking.UserType.NON_FACULTY + "'", userType56.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.FACULTY + "'", userType72.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType81 + "' != '" + booking.UserType.FACULTY + "'", userType81.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType84 + "' != '" + booking.UserType.NON_FACULTY + "'", userType84.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 10.0d + "'", double85 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = new booking.BookingReceiver();
        java.lang.String str2 = bookingReceiver1.getAction();
        booking.UserType userType6 = null;
        booking.ExtendCommand extendCommand7 = new booking.ExtendCommand(bookingReceiver1, "hi!", "", 100, userType6);
        booking.UserType userType11 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand12 = new booking.BookCommand(bookingReceiver1, "hi!", "hi!", 100, userType11);
        booking.UserType userType16 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver1, "", "", (int) (short) 1, userType16);
        commandInvoker0.setCommand((booking.ICommand) extendCommand17);
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver20 = new booking.BookingReceiver();
        java.lang.String str21 = bookingReceiver20.getAction();
        booking.UserType userType25 = null;
        booking.ExtendCommand extendCommand26 = new booking.ExtendCommand(bookingReceiver20, "hi!", "", 100, userType25);
        java.lang.String str27 = bookingReceiver20.getAction();
        booking.UserType userType31 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver20, "hi!", "hi!", (int) (byte) 0, userType31);
        double double33 = bookingReceiver20.getAmount();
        java.lang.String str34 = bookingReceiver20.getAction();
        double double35 = bookingReceiver20.getDeposit();
        double double36 = bookingReceiver20.getDeposit();
        booking.BookingReceiver bookingReceiver40 = new booking.BookingReceiver();
        bookingReceiver40.cancelBooking("hi!", "hi!");
        java.lang.String str44 = bookingReceiver40.getAction();
        booking.BookingReceiver bookingReceiver45 = null;
        booking.BookingReceiver bookingReceiver49 = new booking.BookingReceiver();
        booking.UserType userType53 = booking.UserType.FACULTY;
        bookingReceiver49.bookSpace("", "", 100, userType53);
        booking.BookCommand bookCommand55 = new booking.BookCommand(bookingReceiver45, "hi!", "", 0, userType53);
        double double56 = bookingReceiver40.getRate(userType53);
        booking.UserType userType60 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand61 = new booking.ExtendCommand(bookingReceiver40, "BOOK", "EXTEND", (int) (short) 10, userType60);
        booking.BookCommand bookCommand62 = new booking.BookCommand(bookingReceiver20, "EXTEND", "hi!", (int) 'a', userType60);
        commandInvoker0.setCommand((booking.ICommand) bookCommand62);
        booking.BookingReceiver bookingReceiver64 = new booking.BookingReceiver();
        bookingReceiver64.cancelBooking("hi!", "hi!");
        double double68 = bookingReceiver64.getAmount();
        bookingReceiver64.cancelBooking("EXTEND", "hi!");
        booking.CancelCommand cancelCommand74 = new booking.CancelCommand(bookingReceiver64, "EXTEND", "EXTEND");
        booking.BookingReceiver bookingReceiver78 = new booking.BookingReceiver();
        bookingReceiver78.cancelBooking("hi!", "hi!");
        bookingReceiver78.cancelBooking("", "");
        booking.UserType userType85 = booking.UserType.STUDENT;
        double double86 = bookingReceiver78.getRate(userType85);
        booking.BookCommand bookCommand87 = new booking.BookCommand(bookingReceiver64, "EXTEND", "", (int) (byte) 0, userType85);
        bookCommand87.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand87);
        bookCommand87.doAction();
        bookCommand87.doAction();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.FACULTY + "'", userType11.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType16 + "' != '" + booking.UserType.FACULTY + "'", userType16.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.NON_FACULTY + "'", userType31.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CANCEL" + "'", str44, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType53 + "' != '" + booking.UserType.FACULTY + "'", userType53.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 8.0d + "'", double56 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + userType85 + "' != '" + booking.UserType.STUDENT + "'", userType85.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 5.0d + "'", double86 == 5.0d);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        parkingSpot2.detach((booking.Observer) parkingSensor17);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        booking.BookingSystem bookingSystem26 = new booking.BookingSystem((booking.Subject) parkingSpot23);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        bookingSystem26.update((booking.Subject) parkingSpot27);
        parkingSpot19.detach((booking.Observer) bookingSystem26);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.BookingSystem bookingSystem35 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        booking.BookingSystem bookingSystem39 = new booking.BookingSystem((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        bookingSystem39.update((booking.Subject) parkingSpot40);
        parkingSpot32.detach((booking.Observer) bookingSystem39);
        parkingSpot19.detach((booking.Observer) bookingSystem39);
        booking.ParkingSpot parkingSpot46 = new booking.ParkingSpot();
        parkingSpot46.occupySpot("hi!");
        booking.BookingSystem bookingSystem49 = new booking.BookingSystem((booking.Subject) parkingSpot46);
        booking.ParkingSpot parkingSpot50 = new booking.ParkingSpot();
        parkingSpot50.occupySpot("hi!");
        booking.BookingSystem bookingSystem53 = new booking.BookingSystem((booking.Subject) parkingSpot50);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        bookingSystem53.update((booking.Subject) parkingSpot54);
        parkingSpot46.detach((booking.Observer) bookingSystem53);
        bookingSystem39.update((booking.Subject) parkingSpot46);
        booking.ParkingSensor parkingSensor60 = new booking.ParkingSensor((booking.Subject) parkingSpot46);
        booking.ParkingSensor parkingSensor61 = new booking.ParkingSensor((booking.Subject) parkingSpot46);
        booking.ParkingSensor parkingSensor62 = new booking.ParkingSensor((booking.Subject) parkingSpot46);
        parkingSensor17.update((booking.Subject) parkingSpot46);
        booking.BookingSystem bookingSystem64 = new booking.BookingSystem((booking.Subject) parkingSpot46);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        double double2 = bookingReceiver0.getDeposit();
        booking.BookingReceiver bookingReceiver6 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        java.lang.String str17 = bookingReceiver10.getAction();
        booking.UserType userType21 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand22 = new booking.ExtendCommand(bookingReceiver10, "hi!", "hi!", (int) (byte) 0, userType21);
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver6, "", "", (int) (byte) 100, userType21);
        booking.CancelCommand cancelCommand26 = new booking.CancelCommand(bookingReceiver6, "hi!", "hi!");
        booking.BookingReceiver bookingReceiver30 = new booking.BookingReceiver();
        java.lang.String str31 = bookingReceiver30.getAction();
        booking.UserType userType35 = null;
        booking.ExtendCommand extendCommand36 = new booking.ExtendCommand(bookingReceiver30, "hi!", "", 100, userType35);
        booking.UserType userType40 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand41 = new booking.BookCommand(bookingReceiver30, "hi!", "hi!", 100, userType40);
        booking.UserType userType45 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand46 = new booking.ExtendCommand(bookingReceiver30, "", "", (int) (short) 1, userType45);
        bookingReceiver6.bookSpace("CANCEL", "EXTEND", (int) (byte) 10, userType45);
        bookingReceiver0.extendBooking("CANCEL", "hi!", (-1), userType45);
        java.lang.String str49 = bookingReceiver0.getAction();
        double double50 = bookingReceiver0.getAmount();
        double double51 = bookingReceiver0.getAmount();
        double double52 = bookingReceiver0.getAmount();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + userType21 + "' != '" + booking.UserType.NON_FACULTY + "'", userType21.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + userType40 + "' != '" + booking.UserType.FACULTY + "'", userType40.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType45 + "' != '" + booking.UserType.FACULTY + "'", userType45.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "EXTEND" + "'", str49, "EXTEND");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-8.0d) + "'", double50 == (-8.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-8.0d) + "'", double51 == (-8.0d));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-8.0d) + "'", double52 == (-8.0d));
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        double double4 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("EXTEND", "hi!");
        java.lang.String str8 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver9 = null;
        booking.BookingReceiver bookingReceiver13 = new booking.BookingReceiver();
        bookingReceiver13.cancelBooking("hi!", "hi!");
        bookingReceiver13.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver20 = new booking.BookingReceiver();
        booking.UserType userType24 = booking.UserType.FACULTY;
        bookingReceiver20.bookSpace("", "", 100, userType24);
        double double26 = bookingReceiver13.getRate(userType24);
        java.lang.String str27 = bookingReceiver13.getAction();
        booking.BookingReceiver bookingReceiver31 = new booking.BookingReceiver();
        java.lang.String str32 = bookingReceiver31.getAction();
        booking.UserType userType36 = null;
        booking.ExtendCommand extendCommand37 = new booking.ExtendCommand(bookingReceiver31, "hi!", "", 100, userType36);
        java.lang.String str38 = bookingReceiver31.getAction();
        booking.UserType userType42 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand43 = new booking.ExtendCommand(bookingReceiver31, "hi!", "hi!", (int) (byte) 0, userType42);
        double double44 = bookingReceiver31.getAmount();
        java.lang.String str45 = bookingReceiver31.getAction();
        double double46 = bookingReceiver31.getDeposit();
        double double47 = bookingReceiver31.getDeposit();
        booking.BookingReceiver bookingReceiver51 = new booking.BookingReceiver();
        bookingReceiver51.cancelBooking("hi!", "hi!");
        java.lang.String str55 = bookingReceiver51.getAction();
        booking.BookingReceiver bookingReceiver56 = null;
        booking.BookingReceiver bookingReceiver60 = new booking.BookingReceiver();
        booking.UserType userType64 = booking.UserType.FACULTY;
        bookingReceiver60.bookSpace("", "", 100, userType64);
        booking.BookCommand bookCommand66 = new booking.BookCommand(bookingReceiver56, "hi!", "", 0, userType64);
        double double67 = bookingReceiver51.getRate(userType64);
        booking.UserType userType71 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand72 = new booking.ExtendCommand(bookingReceiver51, "BOOK", "EXTEND", (int) (short) 10, userType71);
        booking.BookCommand bookCommand73 = new booking.BookCommand(bookingReceiver31, "EXTEND", "hi!", (int) 'a', userType71);
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver13, "", "", 1, userType71);
        booking.BookCommand bookCommand75 = new booking.BookCommand(bookingReceiver9, "CANCEL", "BOOK", (int) (short) 0, userType71);
        double double76 = bookingReceiver0.getRate(userType71);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CANCEL" + "'", str8, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType24 + "' != '" + booking.UserType.FACULTY + "'", userType24.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 8.0d + "'", double26 == 8.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "CANCEL" + "'", str27, "CANCEL");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + userType42 + "' != '" + booking.UserType.NON_FACULTY + "'", userType42.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "CANCEL" + "'", str55, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType64 + "' != '" + booking.UserType.FACULTY + "'", userType64.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 8.0d + "'", double67 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType71 + "' != '" + booking.UserType.FACULTY + "'", userType71.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 8.0d + "'", double76 == 8.0d);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        double double4 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver8 = new booking.BookingReceiver();
        java.lang.String str9 = bookingReceiver8.getAction();
        booking.UserType userType13 = null;
        booking.ExtendCommand extendCommand14 = new booking.ExtendCommand(bookingReceiver8, "hi!", "", 100, userType13);
        java.lang.String str15 = bookingReceiver8.getAction();
        booking.UserType userType19 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand20 = new booking.ExtendCommand(bookingReceiver8, "hi!", "hi!", (int) (byte) 0, userType19);
        booking.BookingReceiver bookingReceiver24 = new booking.BookingReceiver();
        java.lang.String str25 = bookingReceiver24.getAction();
        booking.UserType userType29 = null;
        booking.ExtendCommand extendCommand30 = new booking.ExtendCommand(bookingReceiver24, "hi!", "", 100, userType29);
        booking.UserType userType34 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand35 = new booking.BookCommand(bookingReceiver24, "hi!", "hi!", 100, userType34);
        booking.BookingReceiver bookingReceiver39 = new booking.BookingReceiver();
        booking.UserType userType43 = booking.UserType.FACULTY;
        bookingReceiver39.bookSpace("", "", 100, userType43);
        bookingReceiver24.extendBooking("", "", (int) 'a', userType43);
        bookingReceiver8.bookSpace("EXTEND", "hi!", (int) (byte) 1, userType43);
        bookingReceiver0.extendBooking("hi!", "hi!", (int) (byte) 10, userType43);
        java.lang.String str48 = bookingReceiver0.getAction();
        double double49 = bookingReceiver0.getAmount();
        java.lang.String str50 = bookingReceiver0.getAction();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + userType19 + "' != '" + booking.UserType.NON_FACULTY + "'", userType19.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + userType34 + "' != '" + booking.UserType.FACULTY + "'", userType34.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType43 + "' != '" + booking.UserType.FACULTY + "'", userType43.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "EXTEND" + "'", str48, "EXTEND");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 80.0d + "'", double49 == 80.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "EXTEND" + "'", str50, "EXTEND");
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        double double2 = bookingReceiver0.getDeposit();
        booking.BookingReceiver bookingReceiver6 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        java.lang.String str17 = bookingReceiver10.getAction();
        booking.UserType userType21 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand22 = new booking.ExtendCommand(bookingReceiver10, "hi!", "hi!", (int) (byte) 0, userType21);
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver6, "", "", (int) (byte) 100, userType21);
        booking.CancelCommand cancelCommand26 = new booking.CancelCommand(bookingReceiver6, "hi!", "hi!");
        booking.BookingReceiver bookingReceiver30 = new booking.BookingReceiver();
        java.lang.String str31 = bookingReceiver30.getAction();
        booking.UserType userType35 = null;
        booking.ExtendCommand extendCommand36 = new booking.ExtendCommand(bookingReceiver30, "hi!", "", 100, userType35);
        booking.UserType userType40 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand41 = new booking.BookCommand(bookingReceiver30, "hi!", "hi!", 100, userType40);
        booking.UserType userType45 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand46 = new booking.ExtendCommand(bookingReceiver30, "", "", (int) (short) 1, userType45);
        bookingReceiver6.bookSpace("CANCEL", "EXTEND", (int) (byte) 10, userType45);
        bookingReceiver0.extendBooking("CANCEL", "hi!", (-1), userType45);
        bookingReceiver0.cancelBooking("CANCEL", "EXTEND");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + userType21 + "' != '" + booking.UserType.NON_FACULTY + "'", userType21.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + userType40 + "' != '" + booking.UserType.FACULTY + "'", userType40.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType45 + "' != '" + booking.UserType.FACULTY + "'", userType45.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.CancelCommand cancelCommand20 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        cancelCommand20.doAction();
        cancelCommand20.doAction();
        cancelCommand20.doAction();
        cancelCommand20.doAction();
        cancelCommand20.doAction();
        cancelCommand20.doAction();
        cancelCommand20.doAction();
        cancelCommand20.doAction();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
        booking.CommandInvoker commandInvoker3 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        booking.UserType userType14 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand15 = new booking.BookCommand(bookingReceiver4, "hi!", "hi!", 100, userType14);
        booking.UserType userType19 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand20 = new booking.ExtendCommand(bookingReceiver4, "", "", (int) (short) 1, userType19);
        commandInvoker3.setCommand((booking.ICommand) extendCommand20);
        booking.BookingReceiver bookingReceiver22 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver26 = new booking.BookingReceiver();
        java.lang.String str27 = bookingReceiver26.getAction();
        booking.UserType userType31 = null;
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver26, "hi!", "", 100, userType31);
        java.lang.String str33 = bookingReceiver26.getAction();
        booking.UserType userType37 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand38 = new booking.ExtendCommand(bookingReceiver26, "hi!", "hi!", (int) (byte) 0, userType37);
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver22, "", "", (int) (byte) 100, userType37);
        booking.BookingReceiver bookingReceiver43 = new booking.BookingReceiver();
        java.lang.String str44 = bookingReceiver43.getAction();
        booking.UserType userType48 = null;
        booking.ExtendCommand extendCommand49 = new booking.ExtendCommand(bookingReceiver43, "hi!", "", 100, userType48);
        booking.UserType userType53 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand54 = new booking.BookCommand(bookingReceiver43, "hi!", "hi!", 100, userType53);
        bookingReceiver22.bookSpace("hi!", "hi!", (int) (short) -1, userType53);
        booking.BookingReceiver bookingReceiver59 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver63 = new booking.BookingReceiver();
        java.lang.String str64 = bookingReceiver63.getAction();
        booking.UserType userType68 = null;
        booking.ExtendCommand extendCommand69 = new booking.ExtendCommand(bookingReceiver63, "hi!", "", 100, userType68);
        java.lang.String str70 = bookingReceiver63.getAction();
        booking.UserType userType74 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand75 = new booking.ExtendCommand(bookingReceiver63, "hi!", "hi!", (int) (byte) 0, userType74);
        booking.ExtendCommand extendCommand76 = new booking.ExtendCommand(bookingReceiver59, "", "", (int) (byte) 100, userType74);
        booking.BookingReceiver bookingReceiver80 = new booking.BookingReceiver();
        java.lang.String str81 = bookingReceiver80.getAction();
        booking.UserType userType85 = null;
        booking.ExtendCommand extendCommand86 = new booking.ExtendCommand(bookingReceiver80, "hi!", "", 100, userType85);
        booking.UserType userType90 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand91 = new booking.BookCommand(bookingReceiver80, "hi!", "hi!", 100, userType90);
        bookingReceiver59.bookSpace("hi!", "hi!", (int) (short) -1, userType90);
        booking.BookCommand bookCommand93 = new booking.BookCommand(bookingReceiver22, "hi!", "", 0, userType90);
        commandInvoker3.setCommand((booking.ICommand) bookCommand93);
        commandInvoker0.setCommand((booking.ICommand) bookCommand93);
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + userType14 + "' != '" + booking.UserType.FACULTY + "'", userType14.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType19 + "' != '" + booking.UserType.FACULTY + "'", userType19.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + userType37 + "' != '" + booking.UserType.NON_FACULTY + "'", userType37.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + userType53 + "' != '" + booking.UserType.FACULTY + "'", userType53.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + userType74 + "' != '" + booking.UserType.NON_FACULTY + "'", userType74.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + userType90 + "' != '" + booking.UserType.FACULTY + "'", userType90.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver5 = new booking.BookingReceiver();
        bookingReceiver5.cancelBooking("hi!", "hi!");
        java.lang.String str9 = bookingReceiver5.getAction();
        booking.BookingReceiver bookingReceiver10 = null;
        booking.BookingReceiver bookingReceiver14 = new booking.BookingReceiver();
        booking.UserType userType18 = booking.UserType.FACULTY;
        bookingReceiver14.bookSpace("", "", 100, userType18);
        booking.BookCommand bookCommand20 = new booking.BookCommand(bookingReceiver10, "hi!", "", 0, userType18);
        double double21 = bookingReceiver5.getRate(userType18);
        booking.UserType userType25 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand26 = new booking.ExtendCommand(bookingReceiver5, "BOOK", "EXTEND", (int) (short) 10, userType25);
        booking.BookCommand bookCommand27 = new booking.BookCommand(bookingReceiver0, "CANCEL", "hi!", (int) ' ', userType25);
        booking.BookingReceiver bookingReceiver28 = new booking.BookingReceiver();
        bookingReceiver28.cancelBooking("hi!", "hi!");
        java.lang.String str32 = bookingReceiver28.getAction();
        booking.BookingReceiver bookingReceiver33 = null;
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.UserType userType41 = booking.UserType.FACULTY;
        bookingReceiver37.bookSpace("", "", 100, userType41);
        booking.BookCommand bookCommand43 = new booking.BookCommand(bookingReceiver33, "hi!", "", 0, userType41);
        double double44 = bookingReceiver28.getRate(userType41);
        double double45 = bookingReceiver0.getRate(userType41);
        bookingReceiver0.cancelBooking("hi!", "CANCEL");
        booking.CancelCommand cancelCommand51 = new booking.CancelCommand(bookingReceiver0, "EXTEND", "hi!");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CANCEL" + "'", str9, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType18 + "' != '" + booking.UserType.FACULTY + "'", userType18.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 8.0d + "'", double21 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType25 + "' != '" + booking.UserType.FACULTY + "'", userType25.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "CANCEL" + "'", str32, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType41 + "' != '" + booking.UserType.FACULTY + "'", userType41.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 8.0d + "'", double44 == 8.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 8.0d + "'", double45 == 8.0d);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.BookingReceiver bookingReceiver50 = new booking.BookingReceiver();
        java.lang.String str51 = bookingReceiver50.getAction();
        booking.UserType userType55 = null;
        booking.ExtendCommand extendCommand56 = new booking.ExtendCommand(bookingReceiver50, "hi!", "", 100, userType55);
        booking.UserType userType60 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand61 = new booking.BookCommand(bookingReceiver50, "hi!", "hi!", 100, userType60);
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        booking.UserType userType69 = booking.UserType.FACULTY;
        bookingReceiver65.bookSpace("", "", 100, userType69);
        bookingReceiver50.extendBooking("", "", (int) 'a', userType69);
        booking.UserType userType72 = booking.UserType.NON_FACULTY;
        double double73 = bookingReceiver50.getRate(userType72);
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver0, "hi!", "BOOK", 1, userType72);
        double double75 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver79 = new booking.BookingReceiver();
        bookingReceiver79.cancelBooking("hi!", "hi!");
        java.lang.String str83 = bookingReceiver79.getAction();
        booking.BookingReceiver bookingReceiver84 = null;
        booking.BookingReceiver bookingReceiver88 = new booking.BookingReceiver();
        booking.UserType userType92 = booking.UserType.FACULTY;
        bookingReceiver88.bookSpace("", "", 100, userType92);
        booking.BookCommand bookCommand94 = new booking.BookCommand(bookingReceiver84, "hi!", "", 0, userType92);
        double double95 = bookingReceiver79.getRate(userType92);
        bookingReceiver0.extendBooking("EXTEND", "EXTEND", (-1), userType92);
        double double97 = bookingReceiver0.getDeposit();
        java.lang.Class<?> wildcardClass98 = bookingReceiver0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType69 + "' != '" + booking.UserType.FACULTY + "'", userType69.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.NON_FACULTY + "'", userType72.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "CANCEL" + "'", str83, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType92 + "' != '" + booking.UserType.FACULTY + "'", userType92.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 8.0d + "'", double95 == 8.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        double double13 = bookingReceiver0.getAmount();
        java.lang.String str14 = bookingReceiver0.getAction();
        double double15 = bookingReceiver0.getDeposit();
        double double16 = bookingReceiver0.getDeposit();
        booking.CancelCommand cancelCommand19 = new booking.CancelCommand(bookingReceiver0, "", "BOOK");
        double double20 = bookingReceiver0.getDeposit();
        double double21 = bookingReceiver0.getAmount();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver5 = new booking.BookingReceiver();
        bookingReceiver5.cancelBooking("hi!", "hi!");
        java.lang.String str9 = bookingReceiver5.getAction();
        booking.BookingReceiver bookingReceiver10 = null;
        booking.BookingReceiver bookingReceiver14 = new booking.BookingReceiver();
        booking.UserType userType18 = booking.UserType.FACULTY;
        bookingReceiver14.bookSpace("", "", 100, userType18);
        booking.BookCommand bookCommand20 = new booking.BookCommand(bookingReceiver10, "hi!", "", 0, userType18);
        double double21 = bookingReceiver5.getRate(userType18);
        booking.UserType userType25 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand26 = new booking.ExtendCommand(bookingReceiver5, "BOOK", "EXTEND", (int) (short) 10, userType25);
        booking.BookCommand bookCommand27 = new booking.BookCommand(bookingReceiver0, "CANCEL", "hi!", (int) ' ', userType25);
        bookCommand27.doAction();
        bookCommand27.doAction();
        bookCommand27.doAction();
        bookCommand27.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CANCEL" + "'", str9, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType18 + "' != '" + booking.UserType.FACULTY + "'", userType18.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 8.0d + "'", double21 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType25 + "' != '" + booking.UserType.FACULTY + "'", userType25.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        parkingSpot0.freeSpot();
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor5 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        booking.BookingSystem bookingSystem13 = new booking.BookingSystem((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot14 = new booking.ParkingSpot();
        parkingSpot14.occupySpot("hi!");
        bookingSystem13.update((booking.Subject) parkingSpot14);
        parkingSpot6.detach((booking.Observer) bookingSystem13);
        parkingSensor5.update((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor21 = new booking.ParkingSensor((booking.Subject) parkingSpot20);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        booking.BookingSystem bookingSystem29 = new booking.BookingSystem((booking.Subject) parkingSpot26);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        bookingSystem29.update((booking.Subject) parkingSpot30);
        parkingSpot22.detach((booking.Observer) bookingSystem29);
        parkingSensor21.update((booking.Subject) parkingSpot22);
        parkingSpot6.detach((booking.Observer) parkingSensor21);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor38 = new booking.ParkingSensor((booking.Subject) parkingSpot37);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        booking.BookingSystem bookingSystem42 = new booking.BookingSystem((booking.Subject) parkingSpot39);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        parkingSpot43.occupySpot("hi!");
        booking.BookingSystem bookingSystem46 = new booking.BookingSystem((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot47 = new booking.ParkingSpot();
        parkingSpot47.occupySpot("hi!");
        bookingSystem46.update((booking.Subject) parkingSpot47);
        parkingSpot39.detach((booking.Observer) bookingSystem46);
        parkingSensor38.update((booking.Subject) parkingSpot39);
        booking.ParkingSensor parkingSensor53 = new booking.ParkingSensor((booking.Subject) parkingSpot39);
        parkingSpot6.attach((booking.Observer) parkingSensor53);
        parkingSpot3.attach((booking.Observer) parkingSensor53);
        parkingSpot0.attach((booking.Observer) parkingSensor53);
        booking.ParkingSensor parkingSensor57 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSensor parkingSensor58 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.Subject subject59 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingSensor58.update(subject59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Object.equals(Object)\" because \"changedSubject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        double double2 = bookingReceiver0.getDeposit();
        booking.BookingReceiver bookingReceiver6 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        java.lang.String str17 = bookingReceiver10.getAction();
        booking.UserType userType21 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand22 = new booking.ExtendCommand(bookingReceiver10, "hi!", "hi!", (int) (byte) 0, userType21);
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver6, "", "", (int) (byte) 100, userType21);
        booking.CancelCommand cancelCommand26 = new booking.CancelCommand(bookingReceiver6, "hi!", "hi!");
        booking.BookingReceiver bookingReceiver30 = new booking.BookingReceiver();
        java.lang.String str31 = bookingReceiver30.getAction();
        booking.UserType userType35 = null;
        booking.ExtendCommand extendCommand36 = new booking.ExtendCommand(bookingReceiver30, "hi!", "", 100, userType35);
        booking.UserType userType40 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand41 = new booking.BookCommand(bookingReceiver30, "hi!", "hi!", 100, userType40);
        booking.UserType userType45 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand46 = new booking.ExtendCommand(bookingReceiver30, "", "", (int) (short) 1, userType45);
        bookingReceiver6.bookSpace("CANCEL", "EXTEND", (int) (byte) 10, userType45);
        bookingReceiver0.extendBooking("CANCEL", "hi!", (-1), userType45);
        booking.BookingReceiver bookingReceiver52 = new booking.BookingReceiver();
        bookingReceiver52.cancelBooking("hi!", "hi!");
        bookingReceiver52.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver59 = new booking.BookingReceiver();
        booking.UserType userType63 = booking.UserType.FACULTY;
        bookingReceiver59.bookSpace("", "", 100, userType63);
        double double65 = bookingReceiver52.getRate(userType63);
        booking.BookCommand bookCommand66 = new booking.BookCommand(bookingReceiver0, "", "BOOK", (int) ' ', userType63);
        java.lang.Class<?> wildcardClass67 = bookCommand66.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + userType21 + "' != '" + booking.UserType.NON_FACULTY + "'", userType21.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + userType40 + "' != '" + booking.UserType.FACULTY + "'", userType40.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType45 + "' != '" + booking.UserType.FACULTY + "'", userType45.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType63 + "' != '" + booking.UserType.FACULTY + "'", userType63.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 8.0d + "'", double65 == 8.0d);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSpot2.detach((booking.Observer) bookingSystem22);
        parkingSpot2.occupySpot("CANCEL");
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.freeSpot();
        boolean boolean34 = parkingSpot32.isOccupied();
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        booking.BookingSystem bookingSystem42 = new booking.BookingSystem((booking.Subject) parkingSpot39);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        parkingSpot43.occupySpot("hi!");
        bookingSystem42.update((booking.Subject) parkingSpot43);
        parkingSpot35.detach((booking.Observer) bookingSystem42);
        booking.ParkingSpot parkingSpot48 = new booking.ParkingSpot();
        parkingSpot48.occupySpot("hi!");
        booking.BookingSystem bookingSystem51 = new booking.BookingSystem((booking.Subject) parkingSpot48);
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        bookingSystem55.update((booking.Subject) parkingSpot56);
        parkingSpot48.detach((booking.Observer) bookingSystem55);
        parkingSpot35.detach((booking.Observer) bookingSystem55);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        booking.BookingSystem bookingSystem65 = new booking.BookingSystem((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        booking.BookingSystem bookingSystem69 = new booking.BookingSystem((booking.Subject) parkingSpot66);
        booking.ParkingSpot parkingSpot70 = new booking.ParkingSpot();
        parkingSpot70.occupySpot("hi!");
        bookingSystem69.update((booking.Subject) parkingSpot70);
        parkingSpot62.detach((booking.Observer) bookingSystem69);
        bookingSystem55.update((booking.Subject) parkingSpot62);
        booking.ParkingSensor parkingSensor76 = new booking.ParkingSensor((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot77 = new booking.ParkingSpot();
        parkingSensor76.update((booking.Subject) parkingSpot77);
        parkingSpot32.detach((booking.Observer) parkingSensor76);
        boolean boolean80 = parkingSpot32.isOccupied();
        parkingSensor1.update((booking.Subject) parkingSpot32);
        booking.ParkingSensor parkingSensor82 = new booking.ParkingSensor((booking.Subject) parkingSpot32);
        booking.BookingSystem bookingSystem83 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        boolean boolean84 = parkingSpot32.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.UserType userType4 = booking.UserType.FACULTY;
        bookingReceiver0.bookSpace("", "", 100, userType4);
        bookingReceiver0.cancelBooking("", "CANCEL");
        booking.BookingReceiver bookingReceiver9 = new booking.BookingReceiver();
        java.lang.String str10 = bookingReceiver9.getAction();
        booking.UserType userType14 = null;
        booking.ExtendCommand extendCommand15 = new booking.ExtendCommand(bookingReceiver9, "hi!", "", 100, userType14);
        double double16 = bookingReceiver9.getDeposit();
        java.lang.String str17 = bookingReceiver9.getAction();
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.BookingReceiver bookingReceiver31 = new booking.BookingReceiver();
        java.lang.String str32 = bookingReceiver31.getAction();
        booking.UserType userType36 = null;
        booking.ExtendCommand extendCommand37 = new booking.ExtendCommand(bookingReceiver31, "hi!", "", 100, userType36);
        booking.UserType userType41 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand42 = new booking.BookCommand(bookingReceiver31, "hi!", "hi!", 100, userType41);
        booking.BookingReceiver bookingReceiver46 = new booking.BookingReceiver();
        booking.UserType userType50 = booking.UserType.FACULTY;
        bookingReceiver46.bookSpace("", "", 100, userType50);
        bookingReceiver31.extendBooking("", "", (int) 'a', userType50);
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver21, "", "", 0, userType50);
        booking.BookingReceiver bookingReceiver54 = new booking.BookingReceiver();
        java.lang.String str55 = bookingReceiver54.getAction();
        booking.UserType userType59 = null;
        booking.ExtendCommand extendCommand60 = new booking.ExtendCommand(bookingReceiver54, "hi!", "", 100, userType59);
        java.lang.String str61 = bookingReceiver54.getAction();
        booking.UserType userType65 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand66 = new booking.ExtendCommand(bookingReceiver54, "hi!", "hi!", (int) (byte) 0, userType65);
        double double67 = bookingReceiver21.getRate(userType65);
        bookingReceiver9.extendBooking("hi!", "", (int) (short) -1, userType65);
        double double69 = bookingReceiver0.getRate(userType65);
        java.lang.String str70 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("CANCEL", "");
        booking.UserType userType77 = booking.UserType.STUDENT;
        bookingReceiver0.bookSpace("EXTEND", "", 0, userType77);
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.FACULTY + "'", userType4.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + userType41 + "' != '" + booking.UserType.FACULTY + "'", userType41.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType50 + "' != '" + booking.UserType.FACULTY + "'", userType50.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + userType65 + "' != '" + booking.UserType.NON_FACULTY + "'", userType65.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 10.0d + "'", double69 == 10.0d);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "CANCEL" + "'", str70, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType77 + "' != '" + booking.UserType.STUDENT + "'", userType77.equals(booking.UserType.STUDENT));
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSensor parkingSensor10 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSensor parkingSensor12 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        java.lang.String str13 = parkingSpot4.getLicensePlate();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        java.lang.String str48 = bookingReceiver41.getAction();
        booking.UserType userType52 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver41, "hi!", "hi!", (int) (byte) 0, userType52);
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver37, "", "", (int) (byte) 100, userType52);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        booking.UserType userType68 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand69 = new booking.BookCommand(bookingReceiver58, "hi!", "hi!", 100, userType68);
        bookingReceiver37.bookSpace("hi!", "hi!", (int) (short) -1, userType68);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType68);
        double double72 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("", "");
        double double76 = bookingReceiver0.getDeposit();
        java.lang.String str77 = bookingReceiver0.getAction();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + booking.UserType.NON_FACULTY + "'", userType52.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType68 + "' != '" + booking.UserType.FACULTY + "'", userType68.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-8.0d) + "'", double72 == (-8.0d));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 8.0d + "'", double76 == 8.0d);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "CANCEL" + "'", str77, "CANCEL");
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        parkingSpot3.occupySpot("hi!");
        booking.BookingSystem bookingSystem6 = new booking.BookingSystem((booking.Subject) parkingSpot3);
        booking.ParkingSpot parkingSpot7 = new booking.ParkingSpot();
        parkingSpot7.occupySpot("hi!");
        booking.BookingSystem bookingSystem10 = new booking.BookingSystem((booking.Subject) parkingSpot7);
        booking.ParkingSpot parkingSpot11 = new booking.ParkingSpot();
        parkingSpot11.occupySpot("hi!");
        bookingSystem10.update((booking.Subject) parkingSpot11);
        parkingSpot3.detach((booking.Observer) bookingSystem10);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        parkingSensor17.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot32);
        parkingSpot18.detach((booking.Observer) parkingSensor33);
        bookingSystem10.update((booking.Subject) parkingSpot18);
        parkingSpot18.occupySpot("BOOK");
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        booking.BookingSystem bookingSystem41 = new booking.BookingSystem((booking.Subject) parkingSpot38);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        booking.BookingSystem bookingSystem45 = new booking.BookingSystem((booking.Subject) parkingSpot42);
        bookingSystem41.update((booking.Subject) parkingSpot42);
        booking.ParkingSpot parkingSpot47 = new booking.ParkingSpot();
        parkingSpot47.occupySpot("hi!");
        booking.BookingSystem bookingSystem50 = new booking.BookingSystem((booking.Subject) parkingSpot47);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        booking.BookingSystem bookingSystem54 = new booking.BookingSystem((booking.Subject) parkingSpot51);
        bookingSystem50.update((booking.Subject) parkingSpot51);
        parkingSpot42.detach((booking.Observer) bookingSystem50);
        parkingSpot18.attach((booking.Observer) bookingSystem50);
        parkingSpot0.detach((booking.Observer) bookingSystem50);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor11 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        bookingSystem9.update((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor27 = new booking.ParkingSensor((booking.Subject) parkingSpot26);
        booking.ParkingSpot parkingSpot28 = new booking.ParkingSpot();
        parkingSpot28.occupySpot("hi!");
        booking.BookingSystem bookingSystem31 = new booking.BookingSystem((booking.Subject) parkingSpot28);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.BookingSystem bookingSystem35 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        bookingSystem35.update((booking.Subject) parkingSpot36);
        parkingSpot28.detach((booking.Observer) bookingSystem35);
        parkingSensor27.update((booking.Subject) parkingSpot28);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor43 = new booking.ParkingSensor((booking.Subject) parkingSpot42);
        parkingSpot28.detach((booking.Observer) parkingSensor43);
        bookingSystem20.update((booking.Subject) parkingSpot28);
        booking.ParkingSensor parkingSensor46 = new booking.ParkingSensor((booking.Subject) parkingSpot28);
        parkingSpot10.detach((booking.Observer) parkingSensor46);
        booking.Subject subject48 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingSensor46.update(subject48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Object.equals(Object)\" because \"changedSubject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        java.lang.String str48 = bookingReceiver41.getAction();
        booking.UserType userType52 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver41, "hi!", "hi!", (int) (byte) 0, userType52);
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver37, "", "", (int) (byte) 100, userType52);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        booking.UserType userType68 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand69 = new booking.BookCommand(bookingReceiver58, "hi!", "hi!", 100, userType68);
        bookingReceiver37.bookSpace("hi!", "hi!", (int) (short) -1, userType68);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType68);
        booking.BookingReceiver bookingReceiver75 = new booking.BookingReceiver();
        java.lang.String str76 = bookingReceiver75.getAction();
        booking.UserType userType80 = null;
        booking.ExtendCommand extendCommand81 = new booking.ExtendCommand(bookingReceiver75, "hi!", "", 100, userType80);
        java.lang.String str82 = bookingReceiver75.getAction();
        booking.UserType userType86 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand87 = new booking.ExtendCommand(bookingReceiver75, "hi!", "hi!", (int) (byte) 0, userType86);
        booking.BookCommand bookCommand88 = new booking.BookCommand(bookingReceiver0, "", "", (int) (short) 1, userType86);
        double double89 = bookingReceiver0.getDeposit();
        booking.UserType userType93 = booking.UserType.NON_FACULTY;
        bookingReceiver0.bookSpace("hi!", "", 1, userType93);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + booking.UserType.NON_FACULTY + "'", userType52.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType68 + "' != '" + booking.UserType.FACULTY + "'", userType68.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + userType86 + "' != '" + booking.UserType.NON_FACULTY + "'", userType86.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 8.0d + "'", double89 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType93 + "' != '" + booking.UserType.NON_FACULTY + "'", userType93.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        bookingReceiver0.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver7 = new booking.BookingReceiver();
        booking.UserType userType11 = booking.UserType.FACULTY;
        bookingReceiver7.bookSpace("", "", 100, userType11);
        double double13 = bookingReceiver0.getRate(userType11);
        booking.UserType userType17 = booking.UserType.VISITOR;
        booking.ExtendCommand extendCommand18 = new booking.ExtendCommand(bookingReceiver0, "BOOK", "", (int) '#', userType17);
        booking.BookingReceiver bookingReceiver22 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver26 = new booking.BookingReceiver();
        java.lang.String str27 = bookingReceiver26.getAction();
        booking.UserType userType31 = null;
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver26, "hi!", "", 100, userType31);
        java.lang.String str33 = bookingReceiver26.getAction();
        booking.UserType userType37 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand38 = new booking.ExtendCommand(bookingReceiver26, "hi!", "hi!", (int) (byte) 0, userType37);
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver22, "", "", (int) (byte) 100, userType37);
        booking.BookCommand bookCommand40 = new booking.BookCommand(bookingReceiver0, "CANCEL", "EXTEND", (int) '#', userType37);
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        bookingReceiver41.cancelBooking("hi!", "hi!");
        java.lang.String str45 = bookingReceiver41.getAction();
        booking.BookingReceiver bookingReceiver46 = null;
        booking.BookingReceiver bookingReceiver50 = new booking.BookingReceiver();
        booking.UserType userType54 = booking.UserType.FACULTY;
        bookingReceiver50.bookSpace("", "", 100, userType54);
        booking.BookCommand bookCommand56 = new booking.BookCommand(bookingReceiver46, "hi!", "", 0, userType54);
        double double57 = bookingReceiver41.getRate(userType54);
        booking.UserType userType61 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand62 = new booking.ExtendCommand(bookingReceiver41, "BOOK", "EXTEND", (int) (short) 10, userType61);
        double double63 = bookingReceiver0.getRate(userType61);
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.FACULTY + "'", userType11.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 8.0d + "'", double13 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType17 + "' != '" + booking.UserType.VISITOR + "'", userType17.equals(booking.UserType.VISITOR));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + userType37 + "' != '" + booking.UserType.NON_FACULTY + "'", userType37.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "CANCEL" + "'", str45, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType54 + "' != '" + booking.UserType.FACULTY + "'", userType54.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 8.0d + "'", double57 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType61 + "' != '" + booking.UserType.FACULTY + "'", userType61.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 8.0d + "'", double63 == 8.0d);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        double double8 = bookingReceiver0.getDeposit();
        java.lang.String str9 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("BOOK", "");
        booking.BookingReceiver bookingReceiver16 = new booking.BookingReceiver();
        java.lang.String str17 = bookingReceiver16.getAction();
        booking.UserType userType21 = null;
        booking.ExtendCommand extendCommand22 = new booking.ExtendCommand(bookingReceiver16, "hi!", "", 100, userType21);
        booking.UserType userType26 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand27 = new booking.BookCommand(bookingReceiver16, "hi!", "hi!", 100, userType26);
        booking.BookingReceiver bookingReceiver28 = new booking.BookingReceiver();
        java.lang.String str29 = bookingReceiver28.getAction();
        booking.UserType userType33 = null;
        booking.ExtendCommand extendCommand34 = new booking.ExtendCommand(bookingReceiver28, "hi!", "", 100, userType33);
        booking.UserType userType38 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand39 = new booking.BookCommand(bookingReceiver28, "hi!", "hi!", 100, userType38);
        booking.BookingReceiver bookingReceiver43 = new booking.BookingReceiver();
        booking.UserType userType47 = booking.UserType.FACULTY;
        bookingReceiver43.bookSpace("", "", 100, userType47);
        bookingReceiver28.extendBooking("", "", (int) 'a', userType47);
        double double50 = bookingReceiver16.getRate(userType47);
        booking.BookCommand bookCommand51 = new booking.BookCommand(bookingReceiver0, "BOOK", "BOOK", (int) (byte) 10, userType47);
        booking.BookingReceiver bookingReceiver55 = new booking.BookingReceiver();
        java.lang.String str56 = bookingReceiver55.getAction();
        booking.UserType userType60 = null;
        booking.ExtendCommand extendCommand61 = new booking.ExtendCommand(bookingReceiver55, "hi!", "", 100, userType60);
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        java.lang.String str66 = bookingReceiver65.getAction();
        booking.UserType userType70 = null;
        booking.ExtendCommand extendCommand71 = new booking.ExtendCommand(bookingReceiver65, "hi!", "", 100, userType70);
        booking.UserType userType75 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand76 = new booking.BookCommand(bookingReceiver65, "hi!", "hi!", 100, userType75);
        booking.BookingReceiver bookingReceiver80 = new booking.BookingReceiver();
        booking.UserType userType84 = booking.UserType.FACULTY;
        bookingReceiver80.bookSpace("", "", 100, userType84);
        bookingReceiver65.extendBooking("", "", (int) 'a', userType84);
        bookingReceiver55.extendBooking("hi!", "", 0, userType84);
        booking.ExtendCommand extendCommand88 = new booking.ExtendCommand(bookingReceiver0, "BOOK", "", (int) (byte) 1, userType84);
        bookingReceiver0.cancelBooking("", "BOOK");
        booking.CancelCommand cancelCommand94 = new booking.CancelCommand(bookingReceiver0, "", "CANCEL");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + userType26 + "' != '" + booking.UserType.FACULTY + "'", userType26.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + userType38 + "' != '" + booking.UserType.FACULTY + "'", userType38.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType47 + "' != '" + booking.UserType.FACULTY + "'", userType47.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.0d + "'", double50 == 8.0d);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + userType75 + "' != '" + booking.UserType.FACULTY + "'", userType75.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType84 + "' != '" + booking.UserType.FACULTY + "'", userType84.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        double double13 = bookingReceiver0.getAmount();
        java.lang.String str14 = bookingReceiver0.getAction();
        double double15 = bookingReceiver0.getDeposit();
        double double16 = bookingReceiver0.getDeposit();
        booking.CancelCommand cancelCommand19 = new booking.CancelCommand(bookingReceiver0, "", "BOOK");
        booking.CancelCommand cancelCommand22 = new booking.CancelCommand(bookingReceiver0, "BOOK", "hi!");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        bookingSystem3.update((booking.Subject) parkingSpot4);
        boolean boolean8 = parkingSpot4.isOccupied();
        booking.ParkingSensor parkingSensor9 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        booking.BookingSystem bookingSystem13 = new booking.BookingSystem((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot14 = new booking.ParkingSpot();
        parkingSpot14.occupySpot("hi!");
        booking.BookingSystem bookingSystem17 = new booking.BookingSystem((booking.Subject) parkingSpot14);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        bookingSystem17.update((booking.Subject) parkingSpot18);
        parkingSpot10.detach((booking.Observer) bookingSystem17);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        booking.BookingSystem bookingSystem26 = new booking.BookingSystem((booking.Subject) parkingSpot23);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        bookingSystem30.update((booking.Subject) parkingSpot31);
        parkingSpot23.detach((booking.Observer) bookingSystem30);
        parkingSpot10.detach((booking.Observer) bookingSystem30);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        booking.BookingSystem bookingSystem40 = new booking.BookingSystem((booking.Subject) parkingSpot37);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.occupySpot("hi!");
        booking.BookingSystem bookingSystem44 = new booking.BookingSystem((booking.Subject) parkingSpot41);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        bookingSystem44.update((booking.Subject) parkingSpot45);
        parkingSpot37.detach((booking.Observer) bookingSystem44);
        bookingSystem30.update((booking.Subject) parkingSpot37);
        boolean boolean51 = parkingSpot37.isOccupied();
        booking.ParkingSensor parkingSensor52 = new booking.ParkingSensor((booking.Subject) parkingSpot37);
        parkingSpot37.occupySpot("BOOK");
        parkingSensor9.update((booking.Subject) parkingSpot37);
        parkingSpot37.occupySpot("CANCEL");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        java.lang.String str33 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver40 = new booking.BookingReceiver();
        bookingReceiver40.cancelBooking("hi!", "hi!");
        bookingReceiver40.cancelBooking("", "");
        booking.UserType userType47 = booking.UserType.STUDENT;
        double double48 = bookingReceiver40.getRate(userType47);
        bookingReceiver40.cancelBooking("hi!", "");
        booking.BookingReceiver bookingReceiver52 = new booking.BookingReceiver();
        java.lang.String str53 = bookingReceiver52.getAction();
        booking.UserType userType57 = null;
        booking.ExtendCommand extendCommand58 = new booking.ExtendCommand(bookingReceiver52, "hi!", "", 100, userType57);
        java.lang.String str59 = bookingReceiver52.getAction();
        booking.UserType userType63 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver52, "hi!", "hi!", (int) (byte) 0, userType63);
        booking.CancelCommand cancelCommand67 = new booking.CancelCommand(bookingReceiver52, "hi!", "BOOK");
        bookingReceiver52.cancelBooking("CANCEL", "BOOK");
        double double71 = bookingReceiver52.getAmount();
        booking.BookingReceiver bookingReceiver72 = new booking.BookingReceiver();
        bookingReceiver72.cancelBooking("hi!", "hi!");
        bookingReceiver72.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver79 = new booking.BookingReceiver();
        booking.UserType userType83 = booking.UserType.FACULTY;
        bookingReceiver79.bookSpace("", "", 100, userType83);
        double double85 = bookingReceiver72.getRate(userType83);
        booking.UserType userType89 = booking.UserType.VISITOR;
        booking.ExtendCommand extendCommand90 = new booking.ExtendCommand(bookingReceiver72, "BOOK", "", (int) '#', userType89);
        double double91 = bookingReceiver52.getRate(userType89);
        double double92 = bookingReceiver40.getRate(userType89);
        bookingReceiver0.bookSpace("hi!", "BOOK", (int) '#', userType89);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + userType47 + "' != '" + booking.UserType.STUDENT + "'", userType47.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 5.0d + "'", double48 == 5.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType63 + "' != '" + booking.UserType.NON_FACULTY + "'", userType63.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + userType83 + "' != '" + booking.UserType.FACULTY + "'", userType83.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 8.0d + "'", double85 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType89 + "' != '" + booking.UserType.VISITOR + "'", userType89.equals(booking.UserType.VISITOR));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 15.0d + "'", double91 == 15.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 15.0d + "'", double92 == 15.0d);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        bookingReceiver0.cancelBooking("", "");
        booking.CancelCommand cancelCommand9 = new booking.CancelCommand(bookingReceiver0, "", "hi!");
        booking.BookingReceiver bookingReceiver13 = new booking.BookingReceiver();
        java.lang.String str14 = bookingReceiver13.getAction();
        booking.UserType userType18 = null;
        booking.ExtendCommand extendCommand19 = new booking.ExtendCommand(bookingReceiver13, "hi!", "", 100, userType18);
        booking.BookingReceiver bookingReceiver23 = new booking.BookingReceiver();
        java.lang.String str24 = bookingReceiver23.getAction();
        booking.UserType userType28 = null;
        booking.ExtendCommand extendCommand29 = new booking.ExtendCommand(bookingReceiver23, "hi!", "", 100, userType28);
        booking.UserType userType33 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand34 = new booking.BookCommand(bookingReceiver23, "hi!", "hi!", 100, userType33);
        booking.BookingReceiver bookingReceiver38 = new booking.BookingReceiver();
        booking.UserType userType42 = booking.UserType.FACULTY;
        bookingReceiver38.bookSpace("", "", 100, userType42);
        bookingReceiver23.extendBooking("", "", (int) 'a', userType42);
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver13, "", "", 0, userType42);
        booking.BookingReceiver bookingReceiver46 = new booking.BookingReceiver();
        java.lang.String str47 = bookingReceiver46.getAction();
        booking.UserType userType51 = null;
        booking.ExtendCommand extendCommand52 = new booking.ExtendCommand(bookingReceiver46, "hi!", "", 100, userType51);
        java.lang.String str53 = bookingReceiver46.getAction();
        booking.UserType userType57 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand58 = new booking.ExtendCommand(bookingReceiver46, "hi!", "hi!", (int) (byte) 0, userType57);
        double double59 = bookingReceiver13.getRate(userType57);
        booking.UserType userType63 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver13, "hi!", "CANCEL", (int) ' ', userType63);
        bookingReceiver0.bookSpace("hi!", "hi!", 10, userType63);
        double double66 = bookingReceiver0.getDeposit();
        booking.BookingReceiver bookingReceiver67 = new booking.BookingReceiver();
        java.lang.String str68 = bookingReceiver67.getAction();
        booking.UserType userType72 = null;
        booking.ExtendCommand extendCommand73 = new booking.ExtendCommand(bookingReceiver67, "hi!", "", 100, userType72);
        java.lang.String str74 = bookingReceiver67.getAction();
        booking.UserType userType78 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand79 = new booking.ExtendCommand(bookingReceiver67, "hi!", "hi!", (int) (byte) 0, userType78);
        double double80 = bookingReceiver0.getRate(userType78);
        booking.CancelCommand cancelCommand83 = new booking.CancelCommand(bookingReceiver0, "", "EXTEND");
        bookingReceiver0.cancelBooking("", "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + userType33 + "' != '" + booking.UserType.FACULTY + "'", userType33.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType42 + "' != '" + booking.UserType.FACULTY + "'", userType42.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + userType57 + "' != '" + booking.UserType.NON_FACULTY + "'", userType57.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + userType63 + "' != '" + booking.UserType.NON_FACULTY + "'", userType63.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + userType78 + "' != '" + booking.UserType.NON_FACULTY + "'", userType78.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 10.0d + "'", double80 == 10.0d);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        java.lang.String str48 = bookingReceiver41.getAction();
        booking.UserType userType52 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver41, "hi!", "hi!", (int) (byte) 0, userType52);
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver37, "", "", (int) (byte) 100, userType52);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        booking.UserType userType68 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand69 = new booking.BookCommand(bookingReceiver58, "hi!", "hi!", 100, userType68);
        bookingReceiver37.bookSpace("hi!", "hi!", (int) (short) -1, userType68);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType68);
        double double72 = bookingReceiver0.getAmount();
        java.lang.String str73 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + booking.UserType.NON_FACULTY + "'", userType52.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType68 + "' != '" + booking.UserType.FACULTY + "'", userType68.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-8.0d) + "'", double72 == (-8.0d));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "BOOK" + "'", str73, "BOOK");
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        boolean boolean13 = parkingSpot0.isOccupied();
        parkingSpot0.occupySpot("");
        parkingSpot0.freeSpot();
        parkingSpot0.freeSpot();
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        java.lang.String str34 = bookingReceiver0.getAction();
        booking.CancelCommand cancelCommand37 = new booking.CancelCommand(bookingReceiver0, "CANCEL", "BOOK");
        booking.BookingReceiver bookingReceiver38 = new booking.BookingReceiver();
        java.lang.String str39 = bookingReceiver38.getAction();
        booking.UserType userType43 = null;
        booking.ExtendCommand extendCommand44 = new booking.ExtendCommand(bookingReceiver38, "hi!", "", 100, userType43);
        booking.UserType userType48 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand49 = new booking.BookCommand(bookingReceiver38, "hi!", "hi!", 100, userType48);
        booking.BookingReceiver bookingReceiver50 = new booking.BookingReceiver();
        java.lang.String str51 = bookingReceiver50.getAction();
        booking.UserType userType55 = null;
        booking.ExtendCommand extendCommand56 = new booking.ExtendCommand(bookingReceiver50, "hi!", "", 100, userType55);
        booking.UserType userType60 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand61 = new booking.BookCommand(bookingReceiver50, "hi!", "hi!", 100, userType60);
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        booking.UserType userType69 = booking.UserType.FACULTY;
        bookingReceiver65.bookSpace("", "", 100, userType69);
        bookingReceiver50.extendBooking("", "", (int) 'a', userType69);
        double double72 = bookingReceiver38.getRate(userType69);
        booking.UserType userType73 = booking.UserType.VISITOR;
        double double74 = bookingReceiver38.getRate(userType73);
        double double75 = bookingReceiver0.getRate(userType73);
        booking.CancelCommand cancelCommand78 = new booking.CancelCommand(bookingReceiver0, "CANCEL", "BOOK");
        cancelCommand78.doAction();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "BOOK" + "'", str34, "BOOK");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + userType48 + "' != '" + booking.UserType.FACULTY + "'", userType48.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType69 + "' != '" + booking.UserType.FACULTY + "'", userType69.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 8.0d + "'", double72 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType73 + "' != '" + booking.UserType.VISITOR + "'", userType73.equals(booking.UserType.VISITOR));
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 15.0d + "'", double74 == 15.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 15.0d + "'", double75 == 15.0d);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot9 = new booking.ParkingSpot();
        parkingSpot9.occupySpot("hi!");
        booking.BookingSystem bookingSystem12 = new booking.BookingSystem((booking.Subject) parkingSpot9);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        bookingSystem12.update((booking.Subject) parkingSpot13);
        parkingSpot4.detach((booking.Observer) bookingSystem12);
        java.lang.Class<?> wildcardClass19 = bookingSystem12.getClass();
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        booking.CancelCommand cancelCommand15 = new booking.CancelCommand(bookingReceiver0, "hi!", "BOOK");
        bookingReceiver0.cancelBooking("CANCEL", "BOOK");
        double double19 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver20 = new booking.BookingReceiver();
        bookingReceiver20.cancelBooking("hi!", "hi!");
        bookingReceiver20.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver27 = new booking.BookingReceiver();
        booking.UserType userType31 = booking.UserType.FACULTY;
        bookingReceiver27.bookSpace("", "", 100, userType31);
        double double33 = bookingReceiver20.getRate(userType31);
        booking.UserType userType37 = booking.UserType.VISITOR;
        booking.ExtendCommand extendCommand38 = new booking.ExtendCommand(bookingReceiver20, "BOOK", "", (int) '#', userType37);
        double double39 = bookingReceiver0.getRate(userType37);
        double double40 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 8.0d + "'", double33 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType37 + "' != '" + booking.UserType.VISITOR + "'", userType37.equals(booking.UserType.VISITOR));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 15.0d + "'", double39 == 15.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot15.detach((booking.Observer) parkingSensor30);
        bookingSystem7.update((booking.Subject) parkingSpot15);
        parkingSpot15.occupySpot("BOOK");
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        booking.BookingSystem bookingSystem42 = new booking.BookingSystem((booking.Subject) parkingSpot39);
        bookingSystem38.update((booking.Subject) parkingSpot39);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        booking.BookingSystem bookingSystem47 = new booking.BookingSystem((booking.Subject) parkingSpot44);
        booking.ParkingSpot parkingSpot48 = new booking.ParkingSpot();
        parkingSpot48.occupySpot("hi!");
        booking.BookingSystem bookingSystem51 = new booking.BookingSystem((booking.Subject) parkingSpot48);
        bookingSystem47.update((booking.Subject) parkingSpot48);
        parkingSpot39.detach((booking.Observer) bookingSystem47);
        parkingSpot15.attach((booking.Observer) bookingSystem47);
        parkingSpot15.occupySpot("EXTEND");
        boolean boolean57 = parkingSpot15.isOccupied();
        boolean boolean58 = parkingSpot15.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        java.lang.Class<?> wildcardClass10 = parkingSpot4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSensor parkingSensor16 = new booking.ParkingSensor((booking.Subject) parkingSpot2);
        java.lang.String str17 = parkingSpot2.getLicensePlate();
        parkingSpot2.occupySpot("CANCEL");
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        parkingSpot20.occupySpot("hi!");
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        booking.BookingSystem bookingSystem26 = new booking.BookingSystem((booking.Subject) parkingSpot23);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        bookingSystem30.update((booking.Subject) parkingSpot31);
        parkingSpot23.detach((booking.Observer) bookingSystem30);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        booking.BookingSystem bookingSystem39 = new booking.BookingSystem((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        booking.BookingSystem bookingSystem43 = new booking.BookingSystem((booking.Subject) parkingSpot40);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        bookingSystem43.update((booking.Subject) parkingSpot44);
        parkingSpot36.detach((booking.Observer) bookingSystem43);
        parkingSpot23.detach((booking.Observer) bookingSystem43);
        booking.ParkingSpot parkingSpot50 = new booking.ParkingSpot();
        parkingSpot50.occupySpot("hi!");
        booking.BookingSystem bookingSystem53 = new booking.BookingSystem((booking.Subject) parkingSpot50);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        booking.BookingSystem bookingSystem57 = new booking.BookingSystem((booking.Subject) parkingSpot54);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        bookingSystem57.update((booking.Subject) parkingSpot58);
        parkingSpot50.detach((booking.Observer) bookingSystem57);
        bookingSystem43.update((booking.Subject) parkingSpot50);
        parkingSpot20.attach((booking.Observer) bookingSystem43);
        parkingSpot2.detach((booking.Observer) bookingSystem43);
        parkingSpot2.freeSpot();
        java.lang.String str67 = parkingSpot2.getLicensePlate();
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSpot parkingSpot1 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor2 = new booking.ParkingSensor((booking.Subject) parkingSpot1);
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        parkingSpot3.occupySpot("hi!");
        booking.BookingSystem bookingSystem6 = new booking.BookingSystem((booking.Subject) parkingSpot3);
        booking.ParkingSpot parkingSpot7 = new booking.ParkingSpot();
        parkingSpot7.occupySpot("hi!");
        booking.BookingSystem bookingSystem10 = new booking.BookingSystem((booking.Subject) parkingSpot7);
        booking.ParkingSpot parkingSpot11 = new booking.ParkingSpot();
        parkingSpot11.occupySpot("hi!");
        bookingSystem10.update((booking.Subject) parkingSpot11);
        parkingSpot3.detach((booking.Observer) bookingSystem10);
        parkingSensor2.update((booking.Subject) parkingSpot3);
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot3);
        parkingSpot0.detach((booking.Observer) parkingSensor17);
        booking.Subject subject19 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingSensor17.update(subject19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Object.equals(Object)\" because \"changedSubject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot15.detach((booking.Observer) parkingSensor30);
        bookingSystem7.update((booking.Subject) parkingSpot15);
        java.lang.String str33 = parkingSpot15.getLicensePlate();
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor35 = new booking.ParkingSensor((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        booking.BookingSystem bookingSystem39 = new booking.BookingSystem((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        booking.BookingSystem bookingSystem43 = new booking.BookingSystem((booking.Subject) parkingSpot40);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        bookingSystem43.update((booking.Subject) parkingSpot44);
        parkingSpot36.detach((booking.Observer) bookingSystem43);
        parkingSensor35.update((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot50 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor51 = new booking.ParkingSensor((booking.Subject) parkingSpot50);
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        booking.BookingSystem bookingSystem59 = new booking.BookingSystem((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        bookingSystem59.update((booking.Subject) parkingSpot60);
        parkingSpot52.detach((booking.Observer) bookingSystem59);
        booking.ParkingSpot parkingSpot65 = new booking.ParkingSpot();
        parkingSpot65.occupySpot("hi!");
        booking.BookingSystem bookingSystem68 = new booking.BookingSystem((booking.Subject) parkingSpot65);
        booking.ParkingSpot parkingSpot69 = new booking.ParkingSpot();
        parkingSpot69.occupySpot("hi!");
        booking.BookingSystem bookingSystem72 = new booking.BookingSystem((booking.Subject) parkingSpot69);
        booking.ParkingSpot parkingSpot73 = new booking.ParkingSpot();
        parkingSpot73.occupySpot("hi!");
        bookingSystem72.update((booking.Subject) parkingSpot73);
        parkingSpot65.detach((booking.Observer) bookingSystem72);
        parkingSpot52.detach((booking.Observer) bookingSystem72);
        parkingSpot52.occupySpot("CANCEL");
        parkingSensor51.update((booking.Subject) parkingSpot52);
        parkingSensor35.update((booking.Subject) parkingSpot52);
        booking.ParkingSensor parkingSensor83 = new booking.ParkingSensor((booking.Subject) parkingSpot52);
        parkingSpot15.attach((booking.Observer) parkingSensor83);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot15.detach((booking.Observer) parkingSensor30);
        bookingSystem7.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        booking.BookingSystem bookingSystem36 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        booking.BookingSystem bookingSystem40 = new booking.BookingSystem((booking.Subject) parkingSpot37);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.occupySpot("hi!");
        bookingSystem40.update((booking.Subject) parkingSpot41);
        parkingSpot33.detach((booking.Observer) bookingSystem40);
        booking.ParkingSpot parkingSpot46 = new booking.ParkingSpot();
        parkingSpot46.occupySpot("hi!");
        booking.BookingSystem bookingSystem49 = new booking.BookingSystem((booking.Subject) parkingSpot46);
        booking.ParkingSpot parkingSpot50 = new booking.ParkingSpot();
        parkingSpot50.occupySpot("hi!");
        booking.BookingSystem bookingSystem53 = new booking.BookingSystem((booking.Subject) parkingSpot50);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        bookingSystem53.update((booking.Subject) parkingSpot54);
        parkingSpot46.detach((booking.Observer) bookingSystem53);
        parkingSpot33.detach((booking.Observer) bookingSystem53);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor61 = new booking.ParkingSensor((booking.Subject) parkingSpot60);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        booking.BookingSystem bookingSystem65 = new booking.BookingSystem((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        booking.BookingSystem bookingSystem69 = new booking.BookingSystem((booking.Subject) parkingSpot66);
        booking.ParkingSpot parkingSpot70 = new booking.ParkingSpot();
        parkingSpot70.occupySpot("hi!");
        bookingSystem69.update((booking.Subject) parkingSpot70);
        parkingSpot62.detach((booking.Observer) bookingSystem69);
        parkingSensor61.update((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot76 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor77 = new booking.ParkingSensor((booking.Subject) parkingSpot76);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        parkingSpot78.occupySpot("hi!");
        booking.BookingSystem bookingSystem81 = new booking.BookingSystem((booking.Subject) parkingSpot78);
        booking.ParkingSpot parkingSpot82 = new booking.ParkingSpot();
        parkingSpot82.occupySpot("hi!");
        booking.BookingSystem bookingSystem85 = new booking.BookingSystem((booking.Subject) parkingSpot82);
        booking.ParkingSpot parkingSpot86 = new booking.ParkingSpot();
        parkingSpot86.occupySpot("hi!");
        bookingSystem85.update((booking.Subject) parkingSpot86);
        parkingSpot78.detach((booking.Observer) bookingSystem85);
        parkingSensor77.update((booking.Subject) parkingSpot78);
        parkingSpot62.detach((booking.Observer) parkingSensor77);
        parkingSpot33.detach((booking.Observer) parkingSensor77);
        booking.BookingSystem bookingSystem94 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        parkingSpot15.attach((booking.Observer) bookingSystem94);
        java.lang.String str96 = parkingSpot15.getLicensePlate();
        parkingSpot15.freeSpot();
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "hi!" + "'", str96, "hi!");
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        bookingSystem3.update((booking.Subject) parkingSpot4);
        boolean boolean8 = parkingSpot4.isOccupied();
        booking.ParkingSpot parkingSpot9 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor10 = new booking.ParkingSensor((booking.Subject) parkingSpot9);
        booking.ParkingSpot parkingSpot11 = new booking.ParkingSpot();
        parkingSpot11.occupySpot("hi!");
        booking.BookingSystem bookingSystem14 = new booking.BookingSystem((booking.Subject) parkingSpot11);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        bookingSystem18.update((booking.Subject) parkingSpot19);
        parkingSpot11.detach((booking.Observer) bookingSystem18);
        booking.ParkingSpot parkingSpot24 = new booking.ParkingSpot();
        parkingSpot24.occupySpot("hi!");
        booking.BookingSystem bookingSystem27 = new booking.BookingSystem((booking.Subject) parkingSpot24);
        booking.ParkingSpot parkingSpot28 = new booking.ParkingSpot();
        parkingSpot28.occupySpot("hi!");
        booking.BookingSystem bookingSystem31 = new booking.BookingSystem((booking.Subject) parkingSpot28);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        bookingSystem31.update((booking.Subject) parkingSpot32);
        parkingSpot24.detach((booking.Observer) bookingSystem31);
        parkingSpot11.detach((booking.Observer) bookingSystem31);
        parkingSpot11.occupySpot("CANCEL");
        parkingSensor10.update((booking.Subject) parkingSpot11);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.occupySpot("hi!");
        booking.BookingSystem bookingSystem44 = new booking.BookingSystem((booking.Subject) parkingSpot41);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        bookingSystem48.update((booking.Subject) parkingSpot49);
        parkingSpot41.detach((booking.Observer) bookingSystem48);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        booking.BookingSystem bookingSystem57 = new booking.BookingSystem((booking.Subject) parkingSpot54);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        bookingSystem61.update((booking.Subject) parkingSpot62);
        parkingSpot54.detach((booking.Observer) bookingSystem61);
        parkingSpot41.detach((booking.Observer) bookingSystem61);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        booking.BookingSystem bookingSystem75 = new booking.BookingSystem((booking.Subject) parkingSpot72);
        booking.ParkingSpot parkingSpot76 = new booking.ParkingSpot();
        parkingSpot76.occupySpot("hi!");
        bookingSystem75.update((booking.Subject) parkingSpot76);
        parkingSpot68.detach((booking.Observer) bookingSystem75);
        bookingSystem61.update((booking.Subject) parkingSpot68);
        parkingSpot11.attach((booking.Observer) bookingSystem61);
        parkingSpot4.attach((booking.Observer) bookingSystem61);
        java.lang.Class<?> wildcardClass84 = bookingSystem61.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = new booking.BookingReceiver();
        java.lang.String str2 = bookingReceiver1.getAction();
        booking.UserType userType6 = null;
        booking.ExtendCommand extendCommand7 = new booking.ExtendCommand(bookingReceiver1, "hi!", "", 100, userType6);
        booking.UserType userType11 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand12 = new booking.BookCommand(bookingReceiver1, "hi!", "hi!", 100, userType11);
        booking.UserType userType16 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver1, "", "", (int) (short) 1, userType16);
        commandInvoker0.setCommand((booking.ICommand) extendCommand17);
        booking.BookingReceiver bookingReceiver19 = new booking.BookingReceiver();
        java.lang.String str20 = bookingReceiver19.getAction();
        booking.UserType userType24 = null;
        booking.ExtendCommand extendCommand25 = new booking.ExtendCommand(bookingReceiver19, "hi!", "", 100, userType24);
        booking.BookingReceiver bookingReceiver29 = new booking.BookingReceiver();
        java.lang.String str30 = bookingReceiver29.getAction();
        booking.UserType userType34 = null;
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver29, "hi!", "", 100, userType34);
        booking.UserType userType39 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand40 = new booking.BookCommand(bookingReceiver29, "hi!", "hi!", 100, userType39);
        booking.BookingReceiver bookingReceiver44 = new booking.BookingReceiver();
        booking.UserType userType48 = booking.UserType.FACULTY;
        bookingReceiver44.bookSpace("", "", 100, userType48);
        bookingReceiver29.extendBooking("", "", (int) 'a', userType48);
        booking.ExtendCommand extendCommand51 = new booking.ExtendCommand(bookingReceiver19, "", "", 0, userType48);
        extendCommand51.doAction();
        commandInvoker0.setCommand((booking.ICommand) extendCommand51);
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.FACULTY + "'", userType11.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType16 + "' != '" + booking.UserType.FACULTY + "'", userType16.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.FACULTY + "'", userType39.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType48 + "' != '" + booking.UserType.FACULTY + "'", userType48.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.freeSpot();
        boolean boolean2 = parkingSpot0.isOccupied();
        parkingSpot0.freeSpot();
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot8);
        booking.ParkingSpot parkingSpot12 = new booking.ParkingSpot();
        parkingSpot12.occupySpot("hi!");
        bookingSystem11.update((booking.Subject) parkingSpot12);
        parkingSpot4.detach((booking.Observer) bookingSystem11);
        parkingSpot0.detach((booking.Observer) bookingSystem11);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        bookingSystem52.update((booking.Subject) parkingSpot53);
        parkingSpot45.detach((booking.Observer) bookingSystem52);
        bookingSystem38.update((booking.Subject) parkingSpot45);
        booking.ParkingSensor parkingSensor59 = new booking.ParkingSensor((booking.Subject) parkingSpot45);
        booking.ParkingSensor parkingSensor60 = new booking.ParkingSensor((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot61 = new booking.ParkingSpot();
        parkingSpot61.occupySpot("hi!");
        booking.BookingSystem bookingSystem64 = new booking.BookingSystem((booking.Subject) parkingSpot61);
        booking.ParkingSpot parkingSpot65 = new booking.ParkingSpot();
        parkingSpot65.occupySpot("hi!");
        booking.BookingSystem bookingSystem68 = new booking.BookingSystem((booking.Subject) parkingSpot65);
        booking.ParkingSpot parkingSpot69 = new booking.ParkingSpot();
        parkingSpot69.occupySpot("hi!");
        bookingSystem68.update((booking.Subject) parkingSpot69);
        parkingSpot61.detach((booking.Observer) bookingSystem68);
        booking.ParkingSpot parkingSpot74 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor75 = new booking.ParkingSensor((booking.Subject) parkingSpot74);
        booking.ParkingSpot parkingSpot76 = new booking.ParkingSpot();
        parkingSpot76.occupySpot("hi!");
        booking.BookingSystem bookingSystem79 = new booking.BookingSystem((booking.Subject) parkingSpot76);
        booking.ParkingSpot parkingSpot80 = new booking.ParkingSpot();
        parkingSpot80.occupySpot("hi!");
        booking.BookingSystem bookingSystem83 = new booking.BookingSystem((booking.Subject) parkingSpot80);
        booking.ParkingSpot parkingSpot84 = new booking.ParkingSpot();
        parkingSpot84.occupySpot("hi!");
        bookingSystem83.update((booking.Subject) parkingSpot84);
        parkingSpot76.detach((booking.Observer) bookingSystem83);
        parkingSensor75.update((booking.Subject) parkingSpot76);
        booking.ParkingSpot parkingSpot90 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor91 = new booking.ParkingSensor((booking.Subject) parkingSpot90);
        parkingSpot76.detach((booking.Observer) parkingSensor91);
        bookingSystem68.update((booking.Subject) parkingSpot76);
        parkingSpot76.freeSpot();
        parkingSensor60.update((booking.Subject) parkingSpot76);
        parkingSpot0.detach((booking.Observer) parkingSensor60);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        double double13 = bookingReceiver0.getAmount();
        double double14 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver18 = new booking.BookingReceiver();
        java.lang.String str19 = bookingReceiver18.getAction();
        booking.UserType userType23 = null;
        booking.ExtendCommand extendCommand24 = new booking.ExtendCommand(bookingReceiver18, "hi!", "", 100, userType23);
        booking.BookingReceiver bookingReceiver28 = new booking.BookingReceiver();
        bookingReceiver28.cancelBooking("hi!", "hi!");
        bookingReceiver28.cancelBooking("", "");
        booking.CancelCommand cancelCommand37 = new booking.CancelCommand(bookingReceiver28, "", "hi!");
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        booking.BookingReceiver bookingReceiver51 = new booking.BookingReceiver();
        java.lang.String str52 = bookingReceiver51.getAction();
        booking.UserType userType56 = null;
        booking.ExtendCommand extendCommand57 = new booking.ExtendCommand(bookingReceiver51, "hi!", "", 100, userType56);
        booking.UserType userType61 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand62 = new booking.BookCommand(bookingReceiver51, "hi!", "hi!", 100, userType61);
        booking.BookingReceiver bookingReceiver66 = new booking.BookingReceiver();
        booking.UserType userType70 = booking.UserType.FACULTY;
        bookingReceiver66.bookSpace("", "", 100, userType70);
        bookingReceiver51.extendBooking("", "", (int) 'a', userType70);
        booking.ExtendCommand extendCommand73 = new booking.ExtendCommand(bookingReceiver41, "", "", 0, userType70);
        booking.BookingReceiver bookingReceiver74 = new booking.BookingReceiver();
        java.lang.String str75 = bookingReceiver74.getAction();
        booking.UserType userType79 = null;
        booking.ExtendCommand extendCommand80 = new booking.ExtendCommand(bookingReceiver74, "hi!", "", 100, userType79);
        java.lang.String str81 = bookingReceiver74.getAction();
        booking.UserType userType85 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand86 = new booking.ExtendCommand(bookingReceiver74, "hi!", "hi!", (int) (byte) 0, userType85);
        double double87 = bookingReceiver41.getRate(userType85);
        booking.UserType userType91 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand92 = new booking.ExtendCommand(bookingReceiver41, "hi!", "CANCEL", (int) ' ', userType91);
        bookingReceiver28.bookSpace("hi!", "hi!", 10, userType91);
        bookingReceiver18.bookSpace("EXTEND", "EXTEND", (int) (byte) -1, userType91);
        bookingReceiver0.extendBooking("BOOK", "BOOK", 100, userType91);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + userType61 + "' != '" + booking.UserType.FACULTY + "'", userType61.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType70 + "' != '" + booking.UserType.FACULTY + "'", userType70.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + userType85 + "' != '" + booking.UserType.NON_FACULTY + "'", userType85.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 10.0d + "'", double87 == 10.0d);
        org.junit.Assert.assertTrue("'" + userType91 + "' != '" + booking.UserType.NON_FACULTY + "'", userType91.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSpot2.detach((booking.Observer) bookingSystem22);
        parkingSpot2.occupySpot("CANCEL");
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        booking.BookingSystem bookingSystem41 = new booking.BookingSystem((booking.Subject) parkingSpot38);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        bookingSystem41.update((booking.Subject) parkingSpot42);
        parkingSpot34.detach((booking.Observer) bookingSystem41);
        parkingSensor33.update((booking.Subject) parkingSpot34);
        parkingSpot2.detach((booking.Observer) parkingSensor33);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        booking.BookingSystem bookingSystem56 = new booking.BookingSystem((booking.Subject) parkingSpot53);
        bookingSystem52.update((booking.Subject) parkingSpot53);
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot53);
        booking.ParkingSpot parkingSpot59 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor60 = new booking.ParkingSensor((booking.Subject) parkingSpot59);
        bookingSystem58.update((booking.Subject) parkingSpot59);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        booking.BookingSystem bookingSystem65 = new booking.BookingSystem((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        booking.BookingSystem bookingSystem69 = new booking.BookingSystem((booking.Subject) parkingSpot66);
        booking.ParkingSpot parkingSpot70 = new booking.ParkingSpot();
        parkingSpot70.occupySpot("hi!");
        bookingSystem69.update((booking.Subject) parkingSpot70);
        parkingSpot62.detach((booking.Observer) bookingSystem69);
        booking.ParkingSpot parkingSpot75 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor76 = new booking.ParkingSensor((booking.Subject) parkingSpot75);
        booking.ParkingSpot parkingSpot77 = new booking.ParkingSpot();
        parkingSpot77.occupySpot("hi!");
        booking.BookingSystem bookingSystem80 = new booking.BookingSystem((booking.Subject) parkingSpot77);
        booking.ParkingSpot parkingSpot81 = new booking.ParkingSpot();
        parkingSpot81.occupySpot("hi!");
        booking.BookingSystem bookingSystem84 = new booking.BookingSystem((booking.Subject) parkingSpot81);
        booking.ParkingSpot parkingSpot85 = new booking.ParkingSpot();
        parkingSpot85.occupySpot("hi!");
        bookingSystem84.update((booking.Subject) parkingSpot85);
        parkingSpot77.detach((booking.Observer) bookingSystem84);
        parkingSensor76.update((booking.Subject) parkingSpot77);
        booking.ParkingSpot parkingSpot91 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor92 = new booking.ParkingSensor((booking.Subject) parkingSpot91);
        parkingSpot77.detach((booking.Observer) parkingSensor92);
        bookingSystem69.update((booking.Subject) parkingSpot77);
        booking.ParkingSensor parkingSensor95 = new booking.ParkingSensor((booking.Subject) parkingSpot77);
        parkingSpot59.detach((booking.Observer) parkingSensor95);
        parkingSensor33.update((booking.Subject) parkingSpot59);
        java.lang.String str98 = parkingSpot59.getLicensePlate();
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.BookingReceiver bookingReceiver50 = new booking.BookingReceiver();
        java.lang.String str51 = bookingReceiver50.getAction();
        booking.UserType userType55 = null;
        booking.ExtendCommand extendCommand56 = new booking.ExtendCommand(bookingReceiver50, "hi!", "", 100, userType55);
        booking.UserType userType60 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand61 = new booking.BookCommand(bookingReceiver50, "hi!", "hi!", 100, userType60);
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        booking.UserType userType69 = booking.UserType.FACULTY;
        bookingReceiver65.bookSpace("", "", 100, userType69);
        bookingReceiver50.extendBooking("", "", (int) 'a', userType69);
        booking.UserType userType72 = booking.UserType.NON_FACULTY;
        double double73 = bookingReceiver50.getRate(userType72);
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver0, "hi!", "BOOK", 1, userType72);
        java.lang.String str75 = bookingReceiver0.getAction();
        double double76 = bookingReceiver0.getDeposit();
        booking.BookingReceiver bookingReceiver80 = new booking.BookingReceiver();
        bookingReceiver80.cancelBooking("hi!", "hi!");
        bookingReceiver80.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver87 = new booking.BookingReceiver();
        booking.UserType userType91 = booking.UserType.FACULTY;
        bookingReceiver87.bookSpace("", "", 100, userType91);
        double double93 = bookingReceiver80.getRate(userType91);
        booking.UserType userType97 = booking.UserType.VISITOR;
        booking.ExtendCommand extendCommand98 = new booking.ExtendCommand(bookingReceiver80, "BOOK", "", (int) '#', userType97);
        bookingReceiver0.extendBooking("hi!", "hi!", 1, userType97);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType69 + "' != '" + booking.UserType.FACULTY + "'", userType69.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.NON_FACULTY + "'", userType72.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + userType91 + "' != '" + booking.UserType.FACULTY + "'", userType91.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 8.0d + "'", double93 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType97 + "' != '" + booking.UserType.VISITOR + "'", userType97.equals(booking.UserType.VISITOR));
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSensor parkingSensor10 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSensor parkingSensor12 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        java.lang.Class<?> wildcardClass13 = parkingSpot4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        parkingSpot0.occupySpot("hi!");
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem17 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        java.lang.String str18 = parkingSpot0.getLicensePlate();
        booking.BookingSystem bookingSystem19 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        booking.BookingSystem bookingSystem54 = new booking.BookingSystem((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot55);
        booking.ParkingSpot parkingSpot59 = new booking.ParkingSpot();
        parkingSpot59.occupySpot("hi!");
        bookingSystem58.update((booking.Subject) parkingSpot59);
        parkingSpot51.detach((booking.Observer) bookingSystem58);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        bookingSystem71.update((booking.Subject) parkingSpot72);
        parkingSpot64.detach((booking.Observer) bookingSystem71);
        parkingSpot51.detach((booking.Observer) bookingSystem71);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        parkingSpot78.occupySpot("hi!");
        booking.BookingSystem bookingSystem81 = new booking.BookingSystem((booking.Subject) parkingSpot78);
        booking.ParkingSpot parkingSpot82 = new booking.ParkingSpot();
        parkingSpot82.occupySpot("hi!");
        booking.BookingSystem bookingSystem85 = new booking.BookingSystem((booking.Subject) parkingSpot82);
        booking.ParkingSpot parkingSpot86 = new booking.ParkingSpot();
        parkingSpot86.occupySpot("hi!");
        bookingSystem85.update((booking.Subject) parkingSpot86);
        parkingSpot78.detach((booking.Observer) bookingSystem85);
        bookingSystem71.update((booking.Subject) parkingSpot78);
        booking.ParkingSensor parkingSensor92 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        parkingSensor1.update((booking.Subject) parkingSpot78);
        booking.BookingSystem bookingSystem94 = new booking.BookingSystem((booking.Subject) parkingSpot78);
        parkingSpot78.freeSpot();
        booking.BookingSystem bookingSystem96 = new booking.BookingSystem((booking.Subject) parkingSpot78);
        booking.ParkingSensor parkingSensor97 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        java.lang.String str98 = parkingSpot78.getLicensePlate();
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        java.lang.String str48 = bookingReceiver41.getAction();
        booking.UserType userType52 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver41, "hi!", "hi!", (int) (byte) 0, userType52);
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver37, "", "", (int) (byte) 100, userType52);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        booking.UserType userType68 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand69 = new booking.BookCommand(bookingReceiver58, "hi!", "hi!", 100, userType68);
        bookingReceiver37.bookSpace("hi!", "hi!", (int) (short) -1, userType68);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType68);
        double double72 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("", "");
        java.lang.String str76 = bookingReceiver0.getAction();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + booking.UserType.NON_FACULTY + "'", userType52.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType68 + "' != '" + booking.UserType.FACULTY + "'", userType68.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-8.0d) + "'", double72 == (-8.0d));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "CANCEL" + "'", str76, "CANCEL");
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.CancelCommand cancelCommand20 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        booking.BookingReceiver bookingReceiver24 = new booking.BookingReceiver();
        java.lang.String str25 = bookingReceiver24.getAction();
        booking.UserType userType29 = null;
        booking.ExtendCommand extendCommand30 = new booking.ExtendCommand(bookingReceiver24, "hi!", "", 100, userType29);
        booking.UserType userType34 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand35 = new booking.BookCommand(bookingReceiver24, "hi!", "hi!", 100, userType34);
        booking.UserType userType39 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand40 = new booking.ExtendCommand(bookingReceiver24, "", "", (int) (short) 1, userType39);
        bookingReceiver0.bookSpace("CANCEL", "EXTEND", (int) (byte) 10, userType39);
        booking.BookingReceiver bookingReceiver45 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver49 = new booking.BookingReceiver();
        java.lang.String str50 = bookingReceiver49.getAction();
        booking.UserType userType54 = null;
        booking.ExtendCommand extendCommand55 = new booking.ExtendCommand(bookingReceiver49, "hi!", "", 100, userType54);
        java.lang.String str56 = bookingReceiver49.getAction();
        booking.UserType userType60 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand61 = new booking.ExtendCommand(bookingReceiver49, "hi!", "hi!", (int) (byte) 0, userType60);
        booking.ExtendCommand extendCommand62 = new booking.ExtendCommand(bookingReceiver45, "", "", (int) (byte) 100, userType60);
        booking.BookingReceiver bookingReceiver66 = new booking.BookingReceiver();
        java.lang.String str67 = bookingReceiver66.getAction();
        booking.UserType userType71 = null;
        booking.ExtendCommand extendCommand72 = new booking.ExtendCommand(bookingReceiver66, "hi!", "", 100, userType71);
        booking.UserType userType76 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand77 = new booking.BookCommand(bookingReceiver66, "hi!", "hi!", 100, userType76);
        bookingReceiver45.bookSpace("hi!", "hi!", (int) (short) -1, userType76);
        bookingReceiver0.bookSpace("EXTEND", "hi!", (int) (byte) -1, userType76);
        bookingReceiver0.cancelBooking("BOOK", "EXTEND");
        double double83 = bookingReceiver0.getAmount();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + userType34 + "' != '" + booking.UserType.FACULTY + "'", userType34.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.FACULTY + "'", userType39.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.NON_FACULTY + "'", userType60.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + userType76 + "' != '" + booking.UserType.FACULTY + "'", userType76.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        boolean boolean41 = parkingSpot27.isOccupied();
        booking.ParkingSensor parkingSensor42 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        parkingSpot27.occupySpot("CANCEL");
        parkingSpot27.occupySpot("hi!");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSpot parkingSpot1 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor2 = new booking.ParkingSensor((booking.Subject) parkingSpot1);
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        parkingSpot3.occupySpot("hi!");
        booking.BookingSystem bookingSystem6 = new booking.BookingSystem((booking.Subject) parkingSpot3);
        booking.ParkingSpot parkingSpot7 = new booking.ParkingSpot();
        parkingSpot7.occupySpot("hi!");
        booking.BookingSystem bookingSystem10 = new booking.BookingSystem((booking.Subject) parkingSpot7);
        booking.ParkingSpot parkingSpot11 = new booking.ParkingSpot();
        parkingSpot11.occupySpot("hi!");
        bookingSystem10.update((booking.Subject) parkingSpot11);
        parkingSpot3.detach((booking.Observer) bookingSystem10);
        parkingSensor2.update((booking.Subject) parkingSpot3);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor18 = new booking.ParkingSensor((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        booking.BookingSystem bookingSystem26 = new booking.BookingSystem((booking.Subject) parkingSpot23);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        bookingSystem26.update((booking.Subject) parkingSpot27);
        parkingSpot19.detach((booking.Observer) bookingSystem26);
        parkingSensor18.update((booking.Subject) parkingSpot19);
        parkingSpot3.detach((booking.Observer) parkingSensor18);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor35 = new booking.ParkingSensor((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        booking.BookingSystem bookingSystem39 = new booking.BookingSystem((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        booking.BookingSystem bookingSystem43 = new booking.BookingSystem((booking.Subject) parkingSpot40);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        bookingSystem43.update((booking.Subject) parkingSpot44);
        parkingSpot36.detach((booking.Observer) bookingSystem43);
        parkingSensor35.update((booking.Subject) parkingSpot36);
        booking.ParkingSensor parkingSensor50 = new booking.ParkingSensor((booking.Subject) parkingSpot36);
        parkingSpot3.attach((booking.Observer) parkingSensor50);
        parkingSpot0.attach((booking.Observer) parkingSensor50);
        parkingSpot0.freeSpot();
        parkingSpot0.freeSpot();
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor41 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor42 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor43 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.BookingSystem bookingSystem44 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor46 = new booking.ParkingSensor((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot47 = new booking.ParkingSpot();
        parkingSpot47.occupySpot("hi!");
        booking.BookingSystem bookingSystem50 = new booking.BookingSystem((booking.Subject) parkingSpot47);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        booking.BookingSystem bookingSystem54 = new booking.BookingSystem((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        bookingSystem54.update((booking.Subject) parkingSpot55);
        parkingSpot47.detach((booking.Observer) bookingSystem54);
        parkingSensor46.update((booking.Subject) parkingSpot47);
        booking.ParkingSpot parkingSpot61 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor62 = new booking.ParkingSensor((booking.Subject) parkingSpot61);
        booking.ParkingSpot parkingSpot63 = new booking.ParkingSpot();
        parkingSpot63.occupySpot("hi!");
        booking.BookingSystem bookingSystem66 = new booking.BookingSystem((booking.Subject) parkingSpot63);
        booking.ParkingSpot parkingSpot67 = new booking.ParkingSpot();
        parkingSpot67.occupySpot("hi!");
        booking.BookingSystem bookingSystem70 = new booking.BookingSystem((booking.Subject) parkingSpot67);
        booking.ParkingSpot parkingSpot71 = new booking.ParkingSpot();
        parkingSpot71.occupySpot("hi!");
        bookingSystem70.update((booking.Subject) parkingSpot71);
        parkingSpot63.detach((booking.Observer) bookingSystem70);
        parkingSensor62.update((booking.Subject) parkingSpot63);
        parkingSpot47.detach((booking.Observer) parkingSensor62);
        parkingSpot47.freeSpot();
        bookingSystem44.update((booking.Subject) parkingSpot47);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.BookingReceiver bookingReceiver15 = new booking.BookingReceiver();
        booking.UserType userType19 = booking.UserType.FACULTY;
        bookingReceiver15.bookSpace("", "", 100, userType19);
        bookingReceiver0.extendBooking("", "", (int) 'a', userType19);
        booking.CancelCommand cancelCommand24 = new booking.CancelCommand(bookingReceiver0, "BOOK", "CANCEL");
        cancelCommand24.doAction();
        cancelCommand24.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType19 + "' != '" + booking.UserType.FACULTY + "'", userType19.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        boolean boolean51 = parkingSpot49.isOccupied();
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        booking.BookingSystem bookingSystem59 = new booking.BookingSystem((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        bookingSystem59.update((booking.Subject) parkingSpot60);
        parkingSpot52.detach((booking.Observer) bookingSystem59);
        boolean boolean65 = parkingSpot52.isOccupied();
        booking.ParkingSensor parkingSensor66 = new booking.ParkingSensor((booking.Subject) parkingSpot52);
        booking.ParkingSensor parkingSensor67 = new booking.ParkingSensor((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        booking.BookingSystem bookingSystem75 = new booking.BookingSystem((booking.Subject) parkingSpot72);
        bookingSystem71.update((booking.Subject) parkingSpot72);
        booking.BookingSystem bookingSystem77 = new booking.BookingSystem((booking.Subject) parkingSpot72);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor79 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        bookingSystem77.update((booking.Subject) parkingSpot78);
        parkingSpot78.occupySpot("CANCEL");
        booking.ParkingSpot parkingSpot83 = new booking.ParkingSpot();
        parkingSpot83.occupySpot("hi!");
        booking.BookingSystem bookingSystem86 = new booking.BookingSystem((booking.Subject) parkingSpot83);
        booking.ParkingSpot parkingSpot87 = new booking.ParkingSpot();
        parkingSpot87.occupySpot("hi!");
        booking.BookingSystem bookingSystem90 = new booking.BookingSystem((booking.Subject) parkingSpot87);
        bookingSystem86.update((booking.Subject) parkingSpot87);
        booking.BookingSystem bookingSystem92 = new booking.BookingSystem((booking.Subject) parkingSpot87);
        parkingSpot78.attach((booking.Observer) bookingSystem92);
        parkingSensor67.update((booking.Subject) parkingSpot78);
        parkingSpot49.attach((booking.Observer) parkingSensor67);
        boolean boolean96 = parkingSpot49.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("BOOK", "CANCEL");
        booking.UserType userType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            bookingReceiver0.bookSpace("EXTEND", "CANCEL", (int) (byte) -1, userType14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.UserType.ordinal()\" because \"userType\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        bookingReceiver0.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver14 = new booking.BookingReceiver();
        java.lang.String str15 = bookingReceiver14.getAction();
        booking.UserType userType19 = null;
        booking.ExtendCommand extendCommand20 = new booking.ExtendCommand(bookingReceiver14, "hi!", "", 100, userType19);
        java.lang.String str21 = bookingReceiver14.getAction();
        booking.UserType userType25 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand26 = new booking.ExtendCommand(bookingReceiver14, "hi!", "hi!", (int) (byte) 0, userType25);
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver10, "", "", (int) (byte) 100, userType25);
        booking.CancelCommand cancelCommand30 = new booking.CancelCommand(bookingReceiver10, "hi!", "hi!");
        double double31 = bookingReceiver10.getAmount();
        booking.BookingReceiver bookingReceiver35 = new booking.BookingReceiver();
        java.lang.String str36 = bookingReceiver35.getAction();
        booking.UserType userType40 = null;
        booking.ExtendCommand extendCommand41 = new booking.ExtendCommand(bookingReceiver35, "hi!", "", 100, userType40);
        java.lang.String str42 = bookingReceiver35.getAction();
        booking.UserType userType46 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver35, "hi!", "hi!", (int) (byte) 0, userType46);
        booking.BookingReceiver bookingReceiver51 = new booking.BookingReceiver();
        java.lang.String str52 = bookingReceiver51.getAction();
        booking.UserType userType56 = null;
        booking.ExtendCommand extendCommand57 = new booking.ExtendCommand(bookingReceiver51, "hi!", "", 100, userType56);
        java.lang.String str58 = bookingReceiver51.getAction();
        booking.UserType userType62 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand63 = new booking.ExtendCommand(bookingReceiver51, "hi!", "hi!", (int) (byte) 0, userType62);
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver35, "CANCEL", "CANCEL", (int) (short) 1, userType62);
        bookingReceiver10.bookSpace("EXTEND", "", (int) (byte) 100, userType62);
        booking.BookCommand bookCommand66 = new booking.BookCommand(bookingReceiver0, "CANCEL", "", (int) (short) 0, userType62);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + userType25 + "' != '" + booking.UserType.NON_FACULTY + "'", userType25.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + userType46 + "' != '" + booking.UserType.NON_FACULTY + "'", userType46.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + userType62 + "' != '" + booking.UserType.NON_FACULTY + "'", userType62.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot15.detach((booking.Observer) parkingSensor30);
        bookingSystem7.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        booking.BookingSystem bookingSystem36 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        booking.BookingSystem bookingSystem40 = new booking.BookingSystem((booking.Subject) parkingSpot37);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.occupySpot("hi!");
        bookingSystem40.update((booking.Subject) parkingSpot41);
        parkingSpot33.detach((booking.Observer) bookingSystem40);
        booking.ParkingSpot parkingSpot46 = new booking.ParkingSpot();
        parkingSpot46.occupySpot("hi!");
        booking.BookingSystem bookingSystem49 = new booking.BookingSystem((booking.Subject) parkingSpot46);
        booking.ParkingSpot parkingSpot50 = new booking.ParkingSpot();
        parkingSpot50.occupySpot("hi!");
        booking.BookingSystem bookingSystem53 = new booking.BookingSystem((booking.Subject) parkingSpot50);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        bookingSystem53.update((booking.Subject) parkingSpot54);
        parkingSpot46.detach((booking.Observer) bookingSystem53);
        parkingSpot33.detach((booking.Observer) bookingSystem53);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor61 = new booking.ParkingSensor((booking.Subject) parkingSpot60);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        booking.BookingSystem bookingSystem65 = new booking.BookingSystem((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        booking.BookingSystem bookingSystem69 = new booking.BookingSystem((booking.Subject) parkingSpot66);
        booking.ParkingSpot parkingSpot70 = new booking.ParkingSpot();
        parkingSpot70.occupySpot("hi!");
        bookingSystem69.update((booking.Subject) parkingSpot70);
        parkingSpot62.detach((booking.Observer) bookingSystem69);
        parkingSensor61.update((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot76 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor77 = new booking.ParkingSensor((booking.Subject) parkingSpot76);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        parkingSpot78.occupySpot("hi!");
        booking.BookingSystem bookingSystem81 = new booking.BookingSystem((booking.Subject) parkingSpot78);
        booking.ParkingSpot parkingSpot82 = new booking.ParkingSpot();
        parkingSpot82.occupySpot("hi!");
        booking.BookingSystem bookingSystem85 = new booking.BookingSystem((booking.Subject) parkingSpot82);
        booking.ParkingSpot parkingSpot86 = new booking.ParkingSpot();
        parkingSpot86.occupySpot("hi!");
        bookingSystem85.update((booking.Subject) parkingSpot86);
        parkingSpot78.detach((booking.Observer) bookingSystem85);
        parkingSensor77.update((booking.Subject) parkingSpot78);
        parkingSpot62.detach((booking.Observer) parkingSensor77);
        parkingSpot33.detach((booking.Observer) parkingSensor77);
        booking.BookingSystem bookingSystem94 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        parkingSpot15.attach((booking.Observer) bookingSystem94);
        booking.BookingSystem bookingSystem96 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        java.lang.String str97 = parkingSpot15.getLicensePlate();
        parkingSpot15.freeSpot();
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "hi!" + "'", str97, "hi!");
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        java.lang.String str4 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver5 = null;
        booking.BookingReceiver bookingReceiver9 = new booking.BookingReceiver();
        booking.UserType userType13 = booking.UserType.FACULTY;
        bookingReceiver9.bookSpace("", "", 100, userType13);
        booking.BookCommand bookCommand15 = new booking.BookCommand(bookingReceiver5, "hi!", "", 0, userType13);
        double double16 = bookingReceiver0.getRate(userType13);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand21 = new booking.ExtendCommand(bookingReceiver0, "BOOK", "EXTEND", (int) (short) 10, userType20);
        extendCommand21.doAction();
        extendCommand21.doAction();
        java.lang.Class<?> wildcardClass24 = extendCommand21.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CANCEL" + "'", str4, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType13 + "' != '" + booking.UserType.FACULTY + "'", userType13.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 8.0d + "'", double16 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        bookingSystem3.update((booking.Subject) parkingSpot4);
        boolean boolean8 = parkingSpot4.isOccupied();
        booking.ParkingSpot parkingSpot9 = new booking.ParkingSpot();
        parkingSpot9.occupySpot("hi!");
        booking.BookingSystem bookingSystem12 = new booking.BookingSystem((booking.Subject) parkingSpot9);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        bookingSystem16.update((booking.Subject) parkingSpot17);
        parkingSpot9.detach((booking.Observer) bookingSystem16);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        booking.BookingSystem bookingSystem29 = new booking.BookingSystem((booking.Subject) parkingSpot26);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        bookingSystem29.update((booking.Subject) parkingSpot30);
        parkingSpot22.detach((booking.Observer) bookingSystem29);
        parkingSpot9.detach((booking.Observer) bookingSystem29);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        booking.BookingSystem bookingSystem39 = new booking.BookingSystem((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        booking.BookingSystem bookingSystem43 = new booking.BookingSystem((booking.Subject) parkingSpot40);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        bookingSystem43.update((booking.Subject) parkingSpot44);
        parkingSpot36.detach((booking.Observer) bookingSystem43);
        bookingSystem29.update((booking.Subject) parkingSpot36);
        booking.ParkingSensor parkingSensor50 = new booking.ParkingSensor((booking.Subject) parkingSpot36);
        booking.ParkingSensor parkingSensor51 = new booking.ParkingSensor((booking.Subject) parkingSpot36);
        booking.ParkingSensor parkingSensor52 = new booking.ParkingSensor((booking.Subject) parkingSpot36);
        parkingSpot4.attach((booking.Observer) parkingSensor52);
        booking.ParkingSensor parkingSensor54 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        java.lang.String str55 = parkingSpot4.getLicensePlate();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        parkingSpot2.detach((booking.Observer) parkingSensor17);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        parkingSensor17.update((booking.Subject) parkingSpot19);
        parkingSpot19.occupySpot("BOOK");
        java.lang.String str26 = parkingSpot19.getLicensePlate();
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot15.detach((booking.Observer) parkingSensor30);
        bookingSystem7.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        booking.BookingSystem bookingSystem36 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        booking.BookingSystem bookingSystem40 = new booking.BookingSystem((booking.Subject) parkingSpot37);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.occupySpot("hi!");
        bookingSystem40.update((booking.Subject) parkingSpot41);
        parkingSpot33.detach((booking.Observer) bookingSystem40);
        booking.ParkingSpot parkingSpot46 = new booking.ParkingSpot();
        parkingSpot46.occupySpot("hi!");
        booking.BookingSystem bookingSystem49 = new booking.BookingSystem((booking.Subject) parkingSpot46);
        booking.ParkingSpot parkingSpot50 = new booking.ParkingSpot();
        parkingSpot50.occupySpot("hi!");
        booking.BookingSystem bookingSystem53 = new booking.BookingSystem((booking.Subject) parkingSpot50);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        bookingSystem53.update((booking.Subject) parkingSpot54);
        parkingSpot46.detach((booking.Observer) bookingSystem53);
        parkingSpot33.detach((booking.Observer) bookingSystem53);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor61 = new booking.ParkingSensor((booking.Subject) parkingSpot60);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        booking.BookingSystem bookingSystem65 = new booking.BookingSystem((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        booking.BookingSystem bookingSystem69 = new booking.BookingSystem((booking.Subject) parkingSpot66);
        booking.ParkingSpot parkingSpot70 = new booking.ParkingSpot();
        parkingSpot70.occupySpot("hi!");
        bookingSystem69.update((booking.Subject) parkingSpot70);
        parkingSpot62.detach((booking.Observer) bookingSystem69);
        parkingSensor61.update((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot76 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor77 = new booking.ParkingSensor((booking.Subject) parkingSpot76);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        parkingSpot78.occupySpot("hi!");
        booking.BookingSystem bookingSystem81 = new booking.BookingSystem((booking.Subject) parkingSpot78);
        booking.ParkingSpot parkingSpot82 = new booking.ParkingSpot();
        parkingSpot82.occupySpot("hi!");
        booking.BookingSystem bookingSystem85 = new booking.BookingSystem((booking.Subject) parkingSpot82);
        booking.ParkingSpot parkingSpot86 = new booking.ParkingSpot();
        parkingSpot86.occupySpot("hi!");
        bookingSystem85.update((booking.Subject) parkingSpot86);
        parkingSpot78.detach((booking.Observer) bookingSystem85);
        parkingSensor77.update((booking.Subject) parkingSpot78);
        parkingSpot62.detach((booking.Observer) parkingSensor77);
        parkingSpot33.detach((booking.Observer) parkingSensor77);
        booking.BookingSystem bookingSystem94 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        parkingSpot15.attach((booking.Observer) bookingSystem94);
        booking.BookingSystem bookingSystem96 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        parkingSpot15.freeSpot();
        booking.BookingSystem bookingSystem98 = new booking.BookingSystem((booking.Subject) parkingSpot15);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.BookingReceiver bookingReceiver15 = new booking.BookingReceiver();
        booking.UserType userType19 = booking.UserType.FACULTY;
        bookingReceiver15.bookSpace("", "", 100, userType19);
        bookingReceiver0.extendBooking("", "", (int) 'a', userType19);
        booking.UserType userType22 = booking.UserType.NON_FACULTY;
        double double23 = bookingReceiver0.getRate(userType22);
        booking.CancelCommand cancelCommand26 = new booking.CancelCommand(bookingReceiver0, "EXTEND", "BOOK");
        bookingReceiver0.cancelBooking("BOOK", "hi!");
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        bookingReceiver33.cancelBooking("BOOK", "CANCEL");
        booking.BookingReceiver bookingReceiver47 = new booking.BookingReceiver();
        java.lang.String str48 = bookingReceiver47.getAction();
        booking.UserType userType52 = null;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver47, "hi!", "", 100, userType52);
        booking.UserType userType57 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand58 = new booking.BookCommand(bookingReceiver47, "hi!", "hi!", 100, userType57);
        booking.BookingReceiver bookingReceiver59 = new booking.BookingReceiver();
        java.lang.String str60 = bookingReceiver59.getAction();
        booking.UserType userType64 = null;
        booking.ExtendCommand extendCommand65 = new booking.ExtendCommand(bookingReceiver59, "hi!", "", 100, userType64);
        booking.UserType userType69 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand70 = new booking.BookCommand(bookingReceiver59, "hi!", "hi!", 100, userType69);
        booking.BookingReceiver bookingReceiver74 = new booking.BookingReceiver();
        booking.UserType userType78 = booking.UserType.FACULTY;
        bookingReceiver74.bookSpace("", "", 100, userType78);
        bookingReceiver59.extendBooking("", "", (int) 'a', userType78);
        double double81 = bookingReceiver47.getRate(userType78);
        booking.ExtendCommand extendCommand82 = new booking.ExtendCommand(bookingReceiver33, "BOOK", "", 100, userType78);
        bookingReceiver0.extendBooking("", "", (int) '#', userType78);
        java.lang.Class<?> wildcardClass84 = userType78.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType19 + "' != '" + booking.UserType.FACULTY + "'", userType19.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType22 + "' != '" + booking.UserType.NON_FACULTY + "'", userType22.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType57 + "' != '" + booking.UserType.FACULTY + "'", userType57.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + userType69 + "' != '" + booking.UserType.FACULTY + "'", userType69.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType78 + "' != '" + booking.UserType.FACULTY + "'", userType78.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 8.0d + "'", double81 == 8.0d);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        boolean boolean51 = parkingSpot49.isOccupied();
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        booking.BookingSystem bookingSystem59 = new booking.BookingSystem((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        bookingSystem59.update((booking.Subject) parkingSpot60);
        parkingSpot52.detach((booking.Observer) bookingSystem59);
        booking.ParkingSpot parkingSpot65 = new booking.ParkingSpot();
        parkingSpot65.occupySpot("hi!");
        booking.BookingSystem bookingSystem68 = new booking.BookingSystem((booking.Subject) parkingSpot65);
        booking.ParkingSpot parkingSpot69 = new booking.ParkingSpot();
        parkingSpot69.occupySpot("hi!");
        booking.BookingSystem bookingSystem72 = new booking.BookingSystem((booking.Subject) parkingSpot69);
        booking.ParkingSpot parkingSpot73 = new booking.ParkingSpot();
        parkingSpot73.occupySpot("hi!");
        bookingSystem72.update((booking.Subject) parkingSpot73);
        parkingSpot65.detach((booking.Observer) bookingSystem72);
        parkingSpot52.detach((booking.Observer) bookingSystem72);
        booking.ParkingSpot parkingSpot79 = new booking.ParkingSpot();
        parkingSpot79.occupySpot("hi!");
        booking.BookingSystem bookingSystem82 = new booking.BookingSystem((booking.Subject) parkingSpot79);
        booking.ParkingSpot parkingSpot83 = new booking.ParkingSpot();
        parkingSpot83.occupySpot("hi!");
        booking.BookingSystem bookingSystem86 = new booking.BookingSystem((booking.Subject) parkingSpot83);
        booking.ParkingSpot parkingSpot87 = new booking.ParkingSpot();
        parkingSpot87.occupySpot("hi!");
        bookingSystem86.update((booking.Subject) parkingSpot87);
        parkingSpot79.detach((booking.Observer) bookingSystem86);
        bookingSystem72.update((booking.Subject) parkingSpot79);
        booking.ParkingSensor parkingSensor93 = new booking.ParkingSensor((booking.Subject) parkingSpot79);
        parkingSpot49.detach((booking.Observer) parkingSensor93);
        booking.BookingSystem bookingSystem95 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSensor parkingSensor96 = new booking.ParkingSensor((booking.Subject) parkingSpot49);
        booking.ParkingSensor parkingSensor97 = new booking.ParkingSensor((booking.Subject) parkingSpot49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        double double8 = bookingReceiver0.getAmount();
        double double9 = bookingReceiver0.getDeposit();
        double double10 = bookingReceiver0.getAmount();
        double double11 = bookingReceiver0.getAmount();
        java.lang.Class<?> wildcardClass12 = bookingReceiver0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        booking.UserType userType12 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand13 = new booking.BookCommand(bookingReceiver2, "hi!", "hi!", 100, userType12);
        bookCommand13.doAction();
        bookCommand13.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand13);
        java.lang.Class<?> wildcardClass17 = commandInvoker0.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + booking.UserType.FACULTY + "'", userType12.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        booking.UserType userType12 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand13 = new booking.BookCommand(bookingReceiver2, "hi!", "hi!", 100, userType12);
        booking.BookingReceiver bookingReceiver17 = new booking.BookingReceiver();
        booking.UserType userType21 = booking.UserType.FACULTY;
        bookingReceiver17.bookSpace("", "", 100, userType21);
        bookingReceiver2.extendBooking("", "", (int) 'a', userType21);
        booking.UserType userType24 = booking.UserType.NON_FACULTY;
        double double25 = bookingReceiver2.getRate(userType24);
        bookingReceiver2.cancelBooking("BOOK", "hi!");
        java.lang.String str29 = bookingReceiver2.getAction();
        booking.CancelCommand cancelCommand32 = new booking.CancelCommand(bookingReceiver2, "BOOK", "EXTEND");
        commandInvoker0.setCommand((booking.ICommand) cancelCommand32);
        cancelCommand32.doAction();
        cancelCommand32.doAction();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + booking.UserType.FACULTY + "'", userType12.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType21 + "' != '" + booking.UserType.FACULTY + "'", userType21.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType24 + "' != '" + booking.UserType.NON_FACULTY + "'", userType24.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CANCEL" + "'", str29, "CANCEL");
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        double double4 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("EXTEND", "hi!");
        java.lang.String str8 = bookingReceiver0.getAction();
        double double9 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver13 = new booking.BookingReceiver();
        java.lang.String str14 = bookingReceiver13.getAction();
        booking.UserType userType18 = null;
        booking.ExtendCommand extendCommand19 = new booking.ExtendCommand(bookingReceiver13, "hi!", "", 100, userType18);
        booking.UserType userType23 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand24 = new booking.BookCommand(bookingReceiver13, "hi!", "hi!", 100, userType23);
        booking.BookingReceiver bookingReceiver28 = new booking.BookingReceiver();
        booking.UserType userType32 = booking.UserType.FACULTY;
        bookingReceiver28.bookSpace("", "", 100, userType32);
        bookingReceiver13.extendBooking("", "", (int) 'a', userType32);
        booking.UserType userType35 = booking.UserType.NON_FACULTY;
        double double36 = bookingReceiver13.getRate(userType35);
        bookingReceiver13.cancelBooking("BOOK", "hi!");
        java.lang.String str40 = bookingReceiver13.getAction();
        double double41 = bookingReceiver13.getDeposit();
        booking.BookingReceiver bookingReceiver45 = new booking.BookingReceiver();
        java.lang.String str46 = bookingReceiver45.getAction();
        double double47 = bookingReceiver45.getDeposit();
        booking.BookingReceiver bookingReceiver51 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver55 = new booking.BookingReceiver();
        java.lang.String str56 = bookingReceiver55.getAction();
        booking.UserType userType60 = null;
        booking.ExtendCommand extendCommand61 = new booking.ExtendCommand(bookingReceiver55, "hi!", "", 100, userType60);
        java.lang.String str62 = bookingReceiver55.getAction();
        booking.UserType userType66 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand67 = new booking.ExtendCommand(bookingReceiver55, "hi!", "hi!", (int) (byte) 0, userType66);
        booking.ExtendCommand extendCommand68 = new booking.ExtendCommand(bookingReceiver51, "", "", (int) (byte) 100, userType66);
        booking.BookingReceiver bookingReceiver72 = new booking.BookingReceiver();
        java.lang.String str73 = bookingReceiver72.getAction();
        booking.UserType userType77 = null;
        booking.ExtendCommand extendCommand78 = new booking.ExtendCommand(bookingReceiver72, "hi!", "", 100, userType77);
        booking.UserType userType82 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand83 = new booking.BookCommand(bookingReceiver72, "hi!", "hi!", 100, userType82);
        bookingReceiver51.bookSpace("hi!", "hi!", (int) (short) -1, userType82);
        booking.ExtendCommand extendCommand85 = new booking.ExtendCommand(bookingReceiver45, "EXTEND", "BOOK", (int) (byte) -1, userType82);
        booking.ExtendCommand extendCommand86 = new booking.ExtendCommand(bookingReceiver13, "CANCEL", "", 0, userType82);
        bookingReceiver0.extendBooking("BOOK", "EXTEND", 100, userType82);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CANCEL" + "'", str8, "CANCEL");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + userType23 + "' != '" + booking.UserType.FACULTY + "'", userType23.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType32 + "' != '" + booking.UserType.FACULTY + "'", userType32.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType35 + "' != '" + booking.UserType.NON_FACULTY + "'", userType35.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CANCEL" + "'", str40, "CANCEL");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + userType66 + "' != '" + booking.UserType.NON_FACULTY + "'", userType66.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + userType82 + "' != '" + booking.UserType.FACULTY + "'", userType82.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor28 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        parkingSpot29.occupySpot("hi!");
        booking.BookingSystem bookingSystem32 = new booking.BookingSystem((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        booking.BookingSystem bookingSystem36 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        bookingSystem36.update((booking.Subject) parkingSpot37);
        parkingSpot29.detach((booking.Observer) bookingSystem36);
        parkingSensor28.update((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor44 = new booking.ParkingSensor((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        bookingSystem52.update((booking.Subject) parkingSpot53);
        parkingSpot45.detach((booking.Observer) bookingSystem52);
        parkingSensor44.update((booking.Subject) parkingSpot45);
        parkingSpot29.detach((booking.Observer) parkingSensor44);
        parkingSpot0.detach((booking.Observer) parkingSensor44);
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        parkingSpot0.freeSpot();
        booking.BookingSystem bookingSystem63 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSensor parkingSensor64 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        parkingSpot0.occupySpot("hi!");
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.BookingReceiver bookingReceiver50 = new booking.BookingReceiver();
        java.lang.String str51 = bookingReceiver50.getAction();
        booking.UserType userType55 = null;
        booking.ExtendCommand extendCommand56 = new booking.ExtendCommand(bookingReceiver50, "hi!", "", 100, userType55);
        booking.UserType userType60 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand61 = new booking.BookCommand(bookingReceiver50, "hi!", "hi!", 100, userType60);
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        booking.UserType userType69 = booking.UserType.FACULTY;
        bookingReceiver65.bookSpace("", "", 100, userType69);
        bookingReceiver50.extendBooking("", "", (int) 'a', userType69);
        booking.UserType userType72 = booking.UserType.NON_FACULTY;
        double double73 = bookingReceiver50.getRate(userType72);
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver0, "hi!", "BOOK", 1, userType72);
        java.lang.String str75 = bookingReceiver0.getAction();
        booking.CancelCommand cancelCommand78 = new booking.CancelCommand(bookingReceiver0, "hi!", "CANCEL");
        booking.CancelCommand cancelCommand81 = new booking.CancelCommand(bookingReceiver0, "hi!", "CANCEL");
        double double82 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType69 + "' != '" + booking.UserType.FACULTY + "'", userType69.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.NON_FACULTY + "'", userType72.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.BookingReceiver bookingReceiver15 = new booking.BookingReceiver();
        booking.UserType userType19 = booking.UserType.FACULTY;
        bookingReceiver15.bookSpace("", "", 100, userType19);
        bookingReceiver0.extendBooking("", "", (int) 'a', userType19);
        booking.UserType userType22 = booking.UserType.NON_FACULTY;
        double double23 = bookingReceiver0.getRate(userType22);
        booking.CancelCommand cancelCommand26 = new booking.CancelCommand(bookingReceiver0, "EXTEND", "BOOK");
        booking.CancelCommand cancelCommand29 = new booking.CancelCommand(bookingReceiver0, "BOOK", "");
        double double30 = bookingReceiver0.getDeposit();
        bookingReceiver0.cancelBooking("EXTEND", "hi!");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType19 + "' != '" + booking.UserType.FACULTY + "'", userType19.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType22 + "' != '" + booking.UserType.NON_FACULTY + "'", userType22.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        java.lang.String str1 = parkingSpot0.getLicensePlate();
        parkingSpot0.freeSpot();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        double double12 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver16 = new booking.BookingReceiver();
        java.lang.String str17 = bookingReceiver16.getAction();
        booking.UserType userType21 = null;
        booking.ExtendCommand extendCommand22 = new booking.ExtendCommand(bookingReceiver16, "hi!", "", 100, userType21);
        booking.UserType userType26 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand27 = new booking.BookCommand(bookingReceiver16, "hi!", "hi!", 100, userType26);
        booking.BookingReceiver bookingReceiver31 = new booking.BookingReceiver();
        booking.UserType userType35 = booking.UserType.FACULTY;
        bookingReceiver31.bookSpace("", "", 100, userType35);
        bookingReceiver16.extendBooking("", "", (int) 'a', userType35);
        bookingReceiver0.extendBooking("CANCEL", "hi!", (int) (short) 10, userType35);
        double double39 = bookingReceiver0.getDeposit();
        booking.BookingReceiver bookingReceiver43 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver47 = new booking.BookingReceiver();
        java.lang.String str48 = bookingReceiver47.getAction();
        booking.UserType userType52 = null;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver47, "hi!", "", 100, userType52);
        java.lang.String str54 = bookingReceiver47.getAction();
        booking.UserType userType58 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand59 = new booking.ExtendCommand(bookingReceiver47, "hi!", "hi!", (int) (byte) 0, userType58);
        booking.ExtendCommand extendCommand60 = new booking.ExtendCommand(bookingReceiver43, "", "", (int) (byte) 100, userType58);
        booking.BookingReceiver bookingReceiver64 = new booking.BookingReceiver();
        java.lang.String str65 = bookingReceiver64.getAction();
        booking.UserType userType69 = null;
        booking.ExtendCommand extendCommand70 = new booking.ExtendCommand(bookingReceiver64, "hi!", "", 100, userType69);
        booking.UserType userType74 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand75 = new booking.BookCommand(bookingReceiver64, "hi!", "hi!", 100, userType74);
        bookingReceiver43.bookSpace("hi!", "hi!", (int) (short) -1, userType74);
        booking.BookCommand bookCommand77 = new booking.BookCommand(bookingReceiver0, "", "", 1, userType74);
        bookCommand77.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + userType26 + "' != '" + booking.UserType.FACULTY + "'", userType26.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType35 + "' != '" + booking.UserType.FACULTY + "'", userType35.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + userType58 + "' != '" + booking.UserType.NON_FACULTY + "'", userType58.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + userType74 + "' != '" + booking.UserType.FACULTY + "'", userType74.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.BookingReceiver bookingReceiver50 = new booking.BookingReceiver();
        java.lang.String str51 = bookingReceiver50.getAction();
        booking.UserType userType55 = null;
        booking.ExtendCommand extendCommand56 = new booking.ExtendCommand(bookingReceiver50, "hi!", "", 100, userType55);
        booking.UserType userType60 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand61 = new booking.BookCommand(bookingReceiver50, "hi!", "hi!", 100, userType60);
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        booking.UserType userType69 = booking.UserType.FACULTY;
        bookingReceiver65.bookSpace("", "", 100, userType69);
        bookingReceiver50.extendBooking("", "", (int) 'a', userType69);
        booking.UserType userType72 = booking.UserType.NON_FACULTY;
        double double73 = bookingReceiver50.getRate(userType72);
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver0, "hi!", "BOOK", 1, userType72);
        java.lang.String str75 = bookingReceiver0.getAction();
        booking.CancelCommand cancelCommand78 = new booking.CancelCommand(bookingReceiver0, "hi!", "CANCEL");
        double double79 = bookingReceiver0.getDeposit();
        double double80 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType69 + "' != '" + booking.UserType.FACULTY + "'", userType69.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.NON_FACULTY + "'", userType72.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        java.lang.String str48 = bookingReceiver41.getAction();
        booking.UserType userType52 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver41, "hi!", "hi!", (int) (byte) 0, userType52);
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver37, "", "", (int) (byte) 100, userType52);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        booking.UserType userType68 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand69 = new booking.BookCommand(bookingReceiver58, "hi!", "hi!", 100, userType68);
        bookingReceiver37.bookSpace("hi!", "hi!", (int) (short) -1, userType68);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType68);
        booking.CancelCommand cancelCommand74 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        java.lang.Class<?> wildcardClass75 = cancelCommand74.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + booking.UserType.NON_FACULTY + "'", userType52.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType68 + "' != '" + booking.UserType.FACULTY + "'", userType68.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSpot2.detach((booking.Observer) bookingSystem22);
        parkingSpot2.occupySpot("CANCEL");
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.freeSpot();
        boolean boolean34 = parkingSpot32.isOccupied();
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        booking.BookingSystem bookingSystem42 = new booking.BookingSystem((booking.Subject) parkingSpot39);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        parkingSpot43.occupySpot("hi!");
        bookingSystem42.update((booking.Subject) parkingSpot43);
        parkingSpot35.detach((booking.Observer) bookingSystem42);
        booking.ParkingSpot parkingSpot48 = new booking.ParkingSpot();
        parkingSpot48.occupySpot("hi!");
        booking.BookingSystem bookingSystem51 = new booking.BookingSystem((booking.Subject) parkingSpot48);
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        bookingSystem55.update((booking.Subject) parkingSpot56);
        parkingSpot48.detach((booking.Observer) bookingSystem55);
        parkingSpot35.detach((booking.Observer) bookingSystem55);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        booking.BookingSystem bookingSystem65 = new booking.BookingSystem((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        booking.BookingSystem bookingSystem69 = new booking.BookingSystem((booking.Subject) parkingSpot66);
        booking.ParkingSpot parkingSpot70 = new booking.ParkingSpot();
        parkingSpot70.occupySpot("hi!");
        bookingSystem69.update((booking.Subject) parkingSpot70);
        parkingSpot62.detach((booking.Observer) bookingSystem69);
        bookingSystem55.update((booking.Subject) parkingSpot62);
        booking.ParkingSensor parkingSensor76 = new booking.ParkingSensor((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot77 = new booking.ParkingSpot();
        parkingSensor76.update((booking.Subject) parkingSpot77);
        parkingSpot32.detach((booking.Observer) parkingSensor76);
        boolean boolean80 = parkingSpot32.isOccupied();
        parkingSensor1.update((booking.Subject) parkingSpot32);
        java.lang.String str82 = parkingSpot32.getLicensePlate();
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        java.lang.String str34 = bookingReceiver0.getAction();
        java.lang.String str35 = bookingReceiver0.getAction();
        booking.CancelCommand cancelCommand38 = new booking.CancelCommand(bookingReceiver0, "EXTEND", "CANCEL");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "BOOK" + "'", str34, "BOOK");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "BOOK" + "'", str35, "BOOK");
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.UserType userType4 = booking.UserType.FACULTY;
        bookingReceiver0.bookSpace("", "", 100, userType4);
        bookingReceiver0.cancelBooking("", "CANCEL");
        booking.BookingReceiver bookingReceiver9 = new booking.BookingReceiver();
        java.lang.String str10 = bookingReceiver9.getAction();
        booking.UserType userType14 = null;
        booking.ExtendCommand extendCommand15 = new booking.ExtendCommand(bookingReceiver9, "hi!", "", 100, userType14);
        double double16 = bookingReceiver9.getDeposit();
        java.lang.String str17 = bookingReceiver9.getAction();
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.BookingReceiver bookingReceiver31 = new booking.BookingReceiver();
        java.lang.String str32 = bookingReceiver31.getAction();
        booking.UserType userType36 = null;
        booking.ExtendCommand extendCommand37 = new booking.ExtendCommand(bookingReceiver31, "hi!", "", 100, userType36);
        booking.UserType userType41 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand42 = new booking.BookCommand(bookingReceiver31, "hi!", "hi!", 100, userType41);
        booking.BookingReceiver bookingReceiver46 = new booking.BookingReceiver();
        booking.UserType userType50 = booking.UserType.FACULTY;
        bookingReceiver46.bookSpace("", "", 100, userType50);
        bookingReceiver31.extendBooking("", "", (int) 'a', userType50);
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver21, "", "", 0, userType50);
        booking.BookingReceiver bookingReceiver54 = new booking.BookingReceiver();
        java.lang.String str55 = bookingReceiver54.getAction();
        booking.UserType userType59 = null;
        booking.ExtendCommand extendCommand60 = new booking.ExtendCommand(bookingReceiver54, "hi!", "", 100, userType59);
        java.lang.String str61 = bookingReceiver54.getAction();
        booking.UserType userType65 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand66 = new booking.ExtendCommand(bookingReceiver54, "hi!", "hi!", (int) (byte) 0, userType65);
        double double67 = bookingReceiver21.getRate(userType65);
        bookingReceiver9.extendBooking("hi!", "", (int) (short) -1, userType65);
        double double69 = bookingReceiver0.getRate(userType65);
        java.lang.String str70 = bookingReceiver0.getAction();
        java.lang.String str71 = bookingReceiver0.getAction();
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.FACULTY + "'", userType4.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + userType41 + "' != '" + booking.UserType.FACULTY + "'", userType41.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType50 + "' != '" + booking.UserType.FACULTY + "'", userType50.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + userType65 + "' != '" + booking.UserType.NON_FACULTY + "'", userType65.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 10.0d + "'", double69 == 10.0d);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "CANCEL" + "'", str70, "CANCEL");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "CANCEL" + "'", str71, "CANCEL");
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver11 = new booking.BookingReceiver();
        bookingReceiver11.cancelBooking("hi!", "hi!");
        bookingReceiver11.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver18 = new booking.BookingReceiver();
        booking.UserType userType22 = booking.UserType.FACULTY;
        bookingReceiver18.bookSpace("", "", 100, userType22);
        double double24 = bookingReceiver11.getRate(userType22);
        booking.BookingReceiver bookingReceiver28 = new booking.BookingReceiver();
        bookingReceiver28.cancelBooking("hi!", "hi!");
        booking.UserType userType32 = booking.UserType.STUDENT;
        double double33 = bookingReceiver28.getRate(userType32);
        booking.BookCommand bookCommand34 = new booking.BookCommand(bookingReceiver11, "hi!", "CANCEL", (int) (short) 10, userType32);
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver0, "BOOK", "EXTEND", (int) '4', userType32);
        extendCommand35.doAction();
        extendCommand35.doAction();
        extendCommand35.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType22 + "' != '" + booking.UserType.FACULTY + "'", userType22.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 8.0d + "'", double24 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType32 + "' != '" + booking.UserType.STUDENT + "'", userType32.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5.0d + "'", double33 == 5.0d);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        java.lang.String str48 = bookingReceiver41.getAction();
        booking.UserType userType52 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver41, "hi!", "hi!", (int) (byte) 0, userType52);
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver37, "", "", (int) (byte) 100, userType52);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        booking.UserType userType68 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand69 = new booking.BookCommand(bookingReceiver58, "hi!", "hi!", 100, userType68);
        bookingReceiver37.bookSpace("hi!", "hi!", (int) (short) -1, userType68);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType68);
        booking.BookingReceiver bookingReceiver75 = new booking.BookingReceiver();
        java.lang.String str76 = bookingReceiver75.getAction();
        booking.UserType userType80 = null;
        booking.ExtendCommand extendCommand81 = new booking.ExtendCommand(bookingReceiver75, "hi!", "", 100, userType80);
        java.lang.String str82 = bookingReceiver75.getAction();
        booking.UserType userType86 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand87 = new booking.ExtendCommand(bookingReceiver75, "hi!", "hi!", (int) (byte) 0, userType86);
        booking.BookCommand bookCommand88 = new booking.BookCommand(bookingReceiver0, "", "", (int) (short) 1, userType86);
        booking.CancelCommand cancelCommand91 = new booking.CancelCommand(bookingReceiver0, "CANCEL", "EXTEND");
        cancelCommand91.doAction();
        cancelCommand91.doAction();
        cancelCommand91.doAction();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + booking.UserType.NON_FACULTY + "'", userType52.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType68 + "' != '" + booking.UserType.FACULTY + "'", userType68.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + userType86 + "' != '" + booking.UserType.NON_FACULTY + "'", userType86.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot15.detach((booking.Observer) parkingSensor30);
        bookingSystem7.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        booking.BookingSystem bookingSystem36 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        booking.BookingSystem bookingSystem40 = new booking.BookingSystem((booking.Subject) parkingSpot37);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.occupySpot("hi!");
        bookingSystem40.update((booking.Subject) parkingSpot41);
        parkingSpot33.detach((booking.Observer) bookingSystem40);
        booking.ParkingSpot parkingSpot46 = new booking.ParkingSpot();
        parkingSpot46.occupySpot("hi!");
        booking.BookingSystem bookingSystem49 = new booking.BookingSystem((booking.Subject) parkingSpot46);
        booking.ParkingSpot parkingSpot50 = new booking.ParkingSpot();
        parkingSpot50.occupySpot("hi!");
        booking.BookingSystem bookingSystem53 = new booking.BookingSystem((booking.Subject) parkingSpot50);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        bookingSystem53.update((booking.Subject) parkingSpot54);
        parkingSpot46.detach((booking.Observer) bookingSystem53);
        parkingSpot33.detach((booking.Observer) bookingSystem53);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        booking.BookingSystem bookingSystem63 = new booking.BookingSystem((booking.Subject) parkingSpot60);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        bookingSystem67.update((booking.Subject) parkingSpot68);
        parkingSpot60.detach((booking.Observer) bookingSystem67);
        bookingSystem53.update((booking.Subject) parkingSpot60);
        booking.ParkingSensor parkingSensor74 = new booking.ParkingSensor((booking.Subject) parkingSpot60);
        booking.ParkingSpot parkingSpot75 = new booking.ParkingSpot();
        parkingSensor74.update((booking.Subject) parkingSpot75);
        parkingSpot15.detach((booking.Observer) parkingSensor74);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        booking.BookingReceiver bookingReceiver0 = null;
        booking.CancelCommand cancelCommand3 = new booking.CancelCommand(bookingReceiver0, "CANCEL", "BOOK");
        // The following exception was thrown during execution in test generation
        try {
            cancelCommand3.doAction();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.BookingReceiver.cancelBooking(String, String)\" because \"this.receiver\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = new booking.BookingReceiver();
        java.lang.String str2 = bookingReceiver1.getAction();
        booking.UserType userType6 = null;
        booking.ExtendCommand extendCommand7 = new booking.ExtendCommand(bookingReceiver1, "hi!", "", 100, userType6);
        booking.UserType userType11 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand12 = new booking.BookCommand(bookingReceiver1, "hi!", "hi!", 100, userType11);
        booking.UserType userType16 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver1, "", "", (int) (short) 1, userType16);
        commandInvoker0.setCommand((booking.ICommand) extendCommand17);
        extendCommand17.doAction();
        extendCommand17.doAction();
        extendCommand17.doAction();
        extendCommand17.doAction();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.FACULTY + "'", userType11.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType16 + "' != '" + booking.UserType.FACULTY + "'", userType16.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        parkingSpot0.freeSpot();
        parkingSpot0.freeSpot();
        // The following exception was thrown during execution in test generation
        try {
            parkingSpot0.occupySpot("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: License plate must not be null or empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.UserType userType50 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand51 = new booking.ExtendCommand(bookingReceiver0, "hi!", "CANCEL", (int) ' ', userType50);
        double double52 = bookingReceiver0.getDeposit();
        booking.UserType userType56 = null;
        booking.BookCommand bookCommand57 = new booking.BookCommand(bookingReceiver0, "hi!", "", (int) 'a', userType56);
        double double58 = bookingReceiver0.getDeposit();
        booking.BookingReceiver bookingReceiver62 = new booking.BookingReceiver();
        bookingReceiver62.cancelBooking("hi!", "hi!");
        double double66 = bookingReceiver62.getAmount();
        bookingReceiver62.cancelBooking("EXTEND", "hi!");
        java.lang.String str70 = bookingReceiver62.getAction();
        booking.BookingReceiver bookingReceiver74 = new booking.BookingReceiver();
        bookingReceiver74.cancelBooking("hi!", "hi!");
        booking.UserType userType78 = booking.UserType.STUDENT;
        double double79 = bookingReceiver74.getRate(userType78);
        booking.CancelCommand cancelCommand82 = new booking.CancelCommand(bookingReceiver74, "BOOK", "hi!");
        booking.BookingReceiver bookingReceiver86 = new booking.BookingReceiver();
        bookingReceiver86.cancelBooking("hi!", "hi!");
        bookingReceiver86.cancelBooking("", "");
        booking.UserType userType93 = booking.UserType.STUDENT;
        double double94 = bookingReceiver86.getRate(userType93);
        booking.BookCommand bookCommand95 = new booking.BookCommand(bookingReceiver74, "", "hi!", (int) '#', userType93);
        bookingReceiver62.bookSpace("", "hi!", (int) 'a', userType93);
        booking.ExtendCommand extendCommand97 = new booking.ExtendCommand(bookingReceiver0, "", "EXTEND", (int) (short) 10, userType93);
        extendCommand97.doAction();
        extendCommand97.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + userType50 + "' != '" + booking.UserType.NON_FACULTY + "'", userType50.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "CANCEL" + "'", str70, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType78 + "' != '" + booking.UserType.STUDENT + "'", userType78.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 5.0d + "'", double79 == 5.0d);
        org.junit.Assert.assertTrue("'" + userType93 + "' != '" + booking.UserType.STUDENT + "'", userType93.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 5.0d + "'", double94 == 5.0d);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot15.detach((booking.Observer) parkingSensor30);
        bookingSystem7.update((booking.Subject) parkingSpot15);
        parkingSpot15.occupySpot("BOOK");
        booking.ParkingSensor parkingSensor35 = new booking.ParkingSensor((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor37 = new booking.ParkingSensor((booking.Subject) parkingSpot36);
        parkingSpot36.freeSpot();
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor41 = new booking.ParkingSensor((booking.Subject) parkingSpot40);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        booking.BookingSystem bookingSystem45 = new booking.BookingSystem((booking.Subject) parkingSpot42);
        booking.ParkingSpot parkingSpot46 = new booking.ParkingSpot();
        parkingSpot46.occupySpot("hi!");
        booking.BookingSystem bookingSystem49 = new booking.BookingSystem((booking.Subject) parkingSpot46);
        booking.ParkingSpot parkingSpot50 = new booking.ParkingSpot();
        parkingSpot50.occupySpot("hi!");
        bookingSystem49.update((booking.Subject) parkingSpot50);
        parkingSpot42.detach((booking.Observer) bookingSystem49);
        parkingSensor41.update((booking.Subject) parkingSpot42);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor57 = new booking.ParkingSensor((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        booking.BookingSystem bookingSystem65 = new booking.BookingSystem((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        bookingSystem65.update((booking.Subject) parkingSpot66);
        parkingSpot58.detach((booking.Observer) bookingSystem65);
        parkingSensor57.update((booking.Subject) parkingSpot58);
        parkingSpot42.detach((booking.Observer) parkingSensor57);
        booking.ParkingSpot parkingSpot73 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor74 = new booking.ParkingSensor((booking.Subject) parkingSpot73);
        booking.ParkingSpot parkingSpot75 = new booking.ParkingSpot();
        parkingSpot75.occupySpot("hi!");
        booking.BookingSystem bookingSystem78 = new booking.BookingSystem((booking.Subject) parkingSpot75);
        booking.ParkingSpot parkingSpot79 = new booking.ParkingSpot();
        parkingSpot79.occupySpot("hi!");
        booking.BookingSystem bookingSystem82 = new booking.BookingSystem((booking.Subject) parkingSpot79);
        booking.ParkingSpot parkingSpot83 = new booking.ParkingSpot();
        parkingSpot83.occupySpot("hi!");
        bookingSystem82.update((booking.Subject) parkingSpot83);
        parkingSpot75.detach((booking.Observer) bookingSystem82);
        parkingSensor74.update((booking.Subject) parkingSpot75);
        booking.ParkingSensor parkingSensor89 = new booking.ParkingSensor((booking.Subject) parkingSpot75);
        parkingSpot42.attach((booking.Observer) parkingSensor89);
        parkingSpot39.attach((booking.Observer) parkingSensor89);
        parkingSpot36.attach((booking.Observer) parkingSensor89);
        parkingSpot36.occupySpot("CANCEL");
        parkingSensor35.update((booking.Subject) parkingSpot36);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.CancelCommand cancelCommand20 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        booking.BookingReceiver bookingReceiver24 = new booking.BookingReceiver();
        java.lang.String str25 = bookingReceiver24.getAction();
        booking.UserType userType29 = null;
        booking.ExtendCommand extendCommand30 = new booking.ExtendCommand(bookingReceiver24, "hi!", "", 100, userType29);
        booking.UserType userType34 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand35 = new booking.BookCommand(bookingReceiver24, "hi!", "hi!", 100, userType34);
        booking.UserType userType39 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand40 = new booking.ExtendCommand(bookingReceiver24, "", "", (int) (short) 1, userType39);
        bookingReceiver0.bookSpace("CANCEL", "EXTEND", (int) (byte) 10, userType39);
        booking.BookingReceiver bookingReceiver45 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver49 = new booking.BookingReceiver();
        java.lang.String str50 = bookingReceiver49.getAction();
        booking.UserType userType54 = null;
        booking.ExtendCommand extendCommand55 = new booking.ExtendCommand(bookingReceiver49, "hi!", "", 100, userType54);
        java.lang.String str56 = bookingReceiver49.getAction();
        booking.UserType userType60 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand61 = new booking.ExtendCommand(bookingReceiver49, "hi!", "hi!", (int) (byte) 0, userType60);
        booking.ExtendCommand extendCommand62 = new booking.ExtendCommand(bookingReceiver45, "", "", (int) (byte) 100, userType60);
        booking.BookingReceiver bookingReceiver66 = new booking.BookingReceiver();
        java.lang.String str67 = bookingReceiver66.getAction();
        booking.UserType userType71 = null;
        booking.ExtendCommand extendCommand72 = new booking.ExtendCommand(bookingReceiver66, "hi!", "", 100, userType71);
        booking.UserType userType76 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand77 = new booking.BookCommand(bookingReceiver66, "hi!", "hi!", 100, userType76);
        bookingReceiver45.bookSpace("hi!", "hi!", (int) (short) -1, userType76);
        bookingReceiver0.bookSpace("EXTEND", "hi!", (int) (byte) -1, userType76);
        double double80 = bookingReceiver0.getDeposit();
        double double81 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("hi!", "CANCEL");
        double double85 = bookingReceiver0.getAmount();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + userType34 + "' != '" + booking.UserType.FACULTY + "'", userType34.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.FACULTY + "'", userType39.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.NON_FACULTY + "'", userType60.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + userType76 + "' != '" + booking.UserType.FACULTY + "'", userType76.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 8.0d + "'", double80 == 8.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-8.0d) + "'", double81 == (-8.0d));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot15.detach((booking.Observer) parkingSensor30);
        bookingSystem7.update((booking.Subject) parkingSpot15);
        parkingSpot15.occupySpot("BOOK");
        java.lang.String str35 = parkingSpot15.getLicensePlate();
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor11 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        bookingSystem9.update((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        booking.ParkingSpot parkingSpot28 = new booking.ParkingSpot();
        parkingSpot28.occupySpot("hi!");
        booking.BookingSystem bookingSystem31 = new booking.BookingSystem((booking.Subject) parkingSpot28);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.BookingSystem bookingSystem35 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        bookingSystem35.update((booking.Subject) parkingSpot36);
        parkingSpot28.detach((booking.Observer) bookingSystem35);
        parkingSpot15.detach((booking.Observer) bookingSystem35);
        parkingSpot15.occupySpot("CANCEL");
        parkingSensor14.update((booking.Subject) parkingSpot15);
        bookingSystem9.update((booking.Subject) parkingSpot15);
        boolean boolean46 = parkingSpot15.isOccupied();
        parkingSpot15.occupySpot("CANCEL");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        parkingSpot49.freeSpot();
        parkingSpot49.freeSpot();
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        java.lang.String str48 = bookingReceiver41.getAction();
        booking.UserType userType52 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver41, "hi!", "hi!", (int) (byte) 0, userType52);
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver37, "", "", (int) (byte) 100, userType52);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        booking.UserType userType68 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand69 = new booking.BookCommand(bookingReceiver58, "hi!", "hi!", 100, userType68);
        bookingReceiver37.bookSpace("hi!", "hi!", (int) (short) -1, userType68);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType68);
        double double72 = bookingReceiver0.getAmount();
        double double73 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + booking.UserType.NON_FACULTY + "'", userType52.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType68 + "' != '" + booking.UserType.FACULTY + "'", userType68.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-8.0d) + "'", double72 == (-8.0d));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 8.0d + "'", double73 == 8.0d);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSpot2.detach((booking.Observer) bookingSystem22);
        parkingSpot2.occupySpot("CANCEL");
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        booking.BookingSystem bookingSystem41 = new booking.BookingSystem((booking.Subject) parkingSpot38);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        bookingSystem41.update((booking.Subject) parkingSpot42);
        parkingSpot34.detach((booking.Observer) bookingSystem41);
        parkingSensor33.update((booking.Subject) parkingSpot34);
        parkingSpot2.detach((booking.Observer) parkingSensor33);
        booking.ParkingSensor parkingSensor49 = new booking.ParkingSensor((booking.Subject) parkingSpot2);
        parkingSpot2.occupySpot("");
        java.lang.Class<?> wildcardClass52 = parkingSpot2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSensor parkingSensor2 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot8);
        booking.ParkingSpot parkingSpot12 = new booking.ParkingSpot();
        parkingSpot12.occupySpot("hi!");
        bookingSystem11.update((booking.Subject) parkingSpot12);
        parkingSpot4.detach((booking.Observer) bookingSystem11);
        parkingSpot4.occupySpot("hi!");
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        java.lang.String str21 = parkingSpot4.getLicensePlate();
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        double double4 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver8 = new booking.BookingReceiver();
        java.lang.String str9 = bookingReceiver8.getAction();
        booking.UserType userType13 = null;
        booking.ExtendCommand extendCommand14 = new booking.ExtendCommand(bookingReceiver8, "hi!", "", 100, userType13);
        java.lang.String str15 = bookingReceiver8.getAction();
        booking.UserType userType19 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand20 = new booking.ExtendCommand(bookingReceiver8, "hi!", "hi!", (int) (byte) 0, userType19);
        booking.BookingReceiver bookingReceiver24 = new booking.BookingReceiver();
        java.lang.String str25 = bookingReceiver24.getAction();
        booking.UserType userType29 = null;
        booking.ExtendCommand extendCommand30 = new booking.ExtendCommand(bookingReceiver24, "hi!", "", 100, userType29);
        booking.UserType userType34 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand35 = new booking.BookCommand(bookingReceiver24, "hi!", "hi!", 100, userType34);
        booking.BookingReceiver bookingReceiver39 = new booking.BookingReceiver();
        booking.UserType userType43 = booking.UserType.FACULTY;
        bookingReceiver39.bookSpace("", "", 100, userType43);
        bookingReceiver24.extendBooking("", "", (int) 'a', userType43);
        bookingReceiver8.bookSpace("EXTEND", "hi!", (int) (byte) 1, userType43);
        bookingReceiver0.extendBooking("hi!", "hi!", (int) (byte) 10, userType43);
        double double48 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver52 = new booking.BookingReceiver();
        java.lang.String str53 = bookingReceiver52.getAction();
        booking.UserType userType57 = null;
        booking.ExtendCommand extendCommand58 = new booking.ExtendCommand(bookingReceiver52, "hi!", "", 100, userType57);
        booking.UserType userType62 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand63 = new booking.BookCommand(bookingReceiver52, "hi!", "hi!", 100, userType62);
        booking.BookingReceiver bookingReceiver67 = new booking.BookingReceiver();
        booking.UserType userType71 = booking.UserType.FACULTY;
        bookingReceiver67.bookSpace("", "", 100, userType71);
        bookingReceiver52.extendBooking("", "", (int) 'a', userType71);
        booking.UserType userType74 = booking.UserType.NON_FACULTY;
        double double75 = bookingReceiver52.getRate(userType74);
        bookingReceiver52.cancelBooking("BOOK", "hi!");
        booking.BookingReceiver bookingReceiver82 = null;
        booking.BookingReceiver bookingReceiver86 = new booking.BookingReceiver();
        bookingReceiver86.cancelBooking("hi!", "hi!");
        booking.UserType userType90 = booking.UserType.STUDENT;
        double double91 = bookingReceiver86.getRate(userType90);
        booking.BookCommand bookCommand92 = new booking.BookCommand(bookingReceiver82, "BOOK", "hi!", 0, userType90);
        bookingReceiver52.bookSpace("EXTEND", "BOOK", (int) (short) -1, userType90);
        booking.ExtendCommand extendCommand94 = new booking.ExtendCommand(bookingReceiver0, "EXTEND", "", (int) (byte) 1, userType90);
        java.lang.Class<?> wildcardClass95 = userType90.getClass();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + userType19 + "' != '" + booking.UserType.NON_FACULTY + "'", userType19.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + userType34 + "' != '" + booking.UserType.FACULTY + "'", userType34.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType43 + "' != '" + booking.UserType.FACULTY + "'", userType43.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 80.0d + "'", double48 == 80.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + userType62 + "' != '" + booking.UserType.FACULTY + "'", userType62.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType71 + "' != '" + booking.UserType.FACULTY + "'", userType71.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType74 + "' != '" + booking.UserType.NON_FACULTY + "'", userType74.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 10.0d + "'", double75 == 10.0d);
        org.junit.Assert.assertTrue("'" + userType90 + "' != '" + booking.UserType.STUDENT + "'", userType90.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 5.0d + "'", double91 == 5.0d);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        booking.BookingReceiver bookingReceiver16 = new booking.BookingReceiver();
        java.lang.String str17 = bookingReceiver16.getAction();
        booking.UserType userType21 = null;
        booking.ExtendCommand extendCommand22 = new booking.ExtendCommand(bookingReceiver16, "hi!", "", 100, userType21);
        java.lang.String str23 = bookingReceiver16.getAction();
        booking.UserType userType27 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand28 = new booking.ExtendCommand(bookingReceiver16, "hi!", "hi!", (int) (byte) 0, userType27);
        booking.ExtendCommand extendCommand29 = new booking.ExtendCommand(bookingReceiver0, "CANCEL", "CANCEL", (int) (short) 1, userType27);
        extendCommand29.doAction();
        extendCommand29.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + userType27 + "' != '" + booking.UserType.NON_FACULTY + "'", userType27.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.CancelCommand cancelCommand20 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        booking.BookingReceiver bookingReceiver24 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver28 = new booking.BookingReceiver();
        java.lang.String str29 = bookingReceiver28.getAction();
        booking.UserType userType33 = null;
        booking.ExtendCommand extendCommand34 = new booking.ExtendCommand(bookingReceiver28, "hi!", "", 100, userType33);
        java.lang.String str35 = bookingReceiver28.getAction();
        booking.UserType userType39 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand40 = new booking.ExtendCommand(bookingReceiver28, "hi!", "hi!", (int) (byte) 0, userType39);
        booking.ExtendCommand extendCommand41 = new booking.ExtendCommand(bookingReceiver24, "", "", (int) (byte) 100, userType39);
        booking.CancelCommand cancelCommand44 = new booking.CancelCommand(bookingReceiver24, "hi!", "hi!");
        booking.BookingReceiver bookingReceiver48 = new booking.BookingReceiver();
        java.lang.String str49 = bookingReceiver48.getAction();
        booking.UserType userType53 = null;
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver48, "hi!", "", 100, userType53);
        booking.UserType userType58 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand59 = new booking.BookCommand(bookingReceiver48, "hi!", "hi!", 100, userType58);
        booking.UserType userType63 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver48, "", "", (int) (short) 1, userType63);
        bookingReceiver24.bookSpace("CANCEL", "EXTEND", (int) (byte) 10, userType63);
        booking.ExtendCommand extendCommand66 = new booking.ExtendCommand(bookingReceiver0, "EXTEND", "", (int) ' ', userType63);
        double double67 = bookingReceiver0.getAmount();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.NON_FACULTY + "'", userType39.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + userType58 + "' != '" + booking.UserType.FACULTY + "'", userType58.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType63 + "' != '" + booking.UserType.FACULTY + "'", userType63.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        booking.BookingReceiver bookingReceiver0 = null;
        booking.CancelCommand cancelCommand3 = new booking.CancelCommand(bookingReceiver0, "EXTEND", "CANCEL");
        // The following exception was thrown during execution in test generation
        try {
            cancelCommand3.doAction();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.BookingReceiver.cancelBooking(String, String)\" because \"this.receiver\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor28 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        parkingSpot29.occupySpot("hi!");
        booking.BookingSystem bookingSystem32 = new booking.BookingSystem((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        booking.BookingSystem bookingSystem36 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        bookingSystem36.update((booking.Subject) parkingSpot37);
        parkingSpot29.detach((booking.Observer) bookingSystem36);
        parkingSensor28.update((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor44 = new booking.ParkingSensor((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        bookingSystem52.update((booking.Subject) parkingSpot53);
        parkingSpot45.detach((booking.Observer) bookingSystem52);
        parkingSensor44.update((booking.Subject) parkingSpot45);
        parkingSpot29.detach((booking.Observer) parkingSensor44);
        parkingSpot0.detach((booking.Observer) parkingSensor44);
        parkingSpot0.occupySpot("hi!");
        parkingSpot0.freeSpot();
        parkingSpot0.occupySpot("hi!");
        parkingSpot0.occupySpot("hi!");
        java.lang.String str68 = parkingSpot0.getLicensePlate();
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        booking.CancelCommand cancelCommand15 = new booking.CancelCommand(bookingReceiver0, "hi!", "BOOK");
        booking.BookingReceiver bookingReceiver19 = new booking.BookingReceiver();
        java.lang.String str20 = bookingReceiver19.getAction();
        booking.UserType userType24 = null;
        booking.ExtendCommand extendCommand25 = new booking.ExtendCommand(bookingReceiver19, "hi!", "", 100, userType24);
        double double26 = bookingReceiver19.getDeposit();
        java.lang.String str27 = bookingReceiver19.getAction();
        booking.BookingReceiver bookingReceiver31 = new booking.BookingReceiver();
        java.lang.String str32 = bookingReceiver31.getAction();
        booking.UserType userType36 = null;
        booking.ExtendCommand extendCommand37 = new booking.ExtendCommand(bookingReceiver31, "hi!", "", 100, userType36);
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        booking.UserType userType51 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand52 = new booking.BookCommand(bookingReceiver41, "hi!", "hi!", 100, userType51);
        booking.BookingReceiver bookingReceiver56 = new booking.BookingReceiver();
        booking.UserType userType60 = booking.UserType.FACULTY;
        bookingReceiver56.bookSpace("", "", 100, userType60);
        bookingReceiver41.extendBooking("", "", (int) 'a', userType60);
        booking.ExtendCommand extendCommand63 = new booking.ExtendCommand(bookingReceiver31, "", "", 0, userType60);
        booking.BookingReceiver bookingReceiver64 = new booking.BookingReceiver();
        java.lang.String str65 = bookingReceiver64.getAction();
        booking.UserType userType69 = null;
        booking.ExtendCommand extendCommand70 = new booking.ExtendCommand(bookingReceiver64, "hi!", "", 100, userType69);
        java.lang.String str71 = bookingReceiver64.getAction();
        booking.UserType userType75 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand76 = new booking.ExtendCommand(bookingReceiver64, "hi!", "hi!", (int) (byte) 0, userType75);
        double double77 = bookingReceiver31.getRate(userType75);
        bookingReceiver19.extendBooking("hi!", "", (int) (short) -1, userType75);
        booking.BookCommand bookCommand79 = new booking.BookCommand(bookingReceiver0, "hi!", "EXTEND", (int) '4', userType75);
        bookCommand79.doAction();
        bookCommand79.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + userType51 + "' != '" + booking.UserType.FACULTY + "'", userType51.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + userType75 + "' != '" + booking.UserType.NON_FACULTY + "'", userType75.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 10.0d + "'", double77 == 10.0d);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        double double4 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("EXTEND", "hi!");
        booking.CancelCommand cancelCommand10 = new booking.CancelCommand(bookingReceiver0, "EXTEND", "EXTEND");
        booking.BookingReceiver bookingReceiver14 = new booking.BookingReceiver();
        bookingReceiver14.cancelBooking("hi!", "hi!");
        bookingReceiver14.cancelBooking("", "");
        booking.UserType userType21 = booking.UserType.STUDENT;
        double double22 = bookingReceiver14.getRate(userType21);
        booking.BookCommand bookCommand23 = new booking.BookCommand(bookingReceiver0, "EXTEND", "", (int) (byte) 0, userType21);
        booking.BookingReceiver bookingReceiver27 = new booking.BookingReceiver();
        java.lang.String str28 = bookingReceiver27.getAction();
        booking.UserType userType32 = null;
        booking.ExtendCommand extendCommand33 = new booking.ExtendCommand(bookingReceiver27, "hi!", "", 100, userType32);
        java.lang.String str34 = bookingReceiver27.getAction();
        double double35 = bookingReceiver27.getDeposit();
        java.lang.String str36 = bookingReceiver27.getAction();
        bookingReceiver27.cancelBooking("BOOK", "");
        booking.BookingReceiver bookingReceiver43 = new booking.BookingReceiver();
        java.lang.String str44 = bookingReceiver43.getAction();
        booking.UserType userType48 = null;
        booking.ExtendCommand extendCommand49 = new booking.ExtendCommand(bookingReceiver43, "hi!", "", 100, userType48);
        booking.UserType userType53 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand54 = new booking.BookCommand(bookingReceiver43, "hi!", "hi!", 100, userType53);
        booking.BookingReceiver bookingReceiver55 = new booking.BookingReceiver();
        java.lang.String str56 = bookingReceiver55.getAction();
        booking.UserType userType60 = null;
        booking.ExtendCommand extendCommand61 = new booking.ExtendCommand(bookingReceiver55, "hi!", "", 100, userType60);
        booking.UserType userType65 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand66 = new booking.BookCommand(bookingReceiver55, "hi!", "hi!", 100, userType65);
        booking.BookingReceiver bookingReceiver70 = new booking.BookingReceiver();
        booking.UserType userType74 = booking.UserType.FACULTY;
        bookingReceiver70.bookSpace("", "", 100, userType74);
        bookingReceiver55.extendBooking("", "", (int) 'a', userType74);
        double double77 = bookingReceiver43.getRate(userType74);
        booking.BookCommand bookCommand78 = new booking.BookCommand(bookingReceiver27, "BOOK", "BOOK", (int) (byte) 10, userType74);
        bookingReceiver0.extendBooking("hi!", "", 1, userType74);
        double double80 = bookingReceiver0.getDeposit();
        double double81 = bookingReceiver0.getAmount();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + userType21 + "' != '" + booking.UserType.STUDENT + "'", userType21.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + userType53 + "' != '" + booking.UserType.FACULTY + "'", userType53.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + userType65 + "' != '" + booking.UserType.FACULTY + "'", userType65.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType74 + "' != '" + booking.UserType.FACULTY + "'", userType74.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 8.0d + "'", double77 == 8.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 8.0d + "'", double81 == 8.0d);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.CancelCommand cancelCommand20 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        booking.BookingReceiver bookingReceiver24 = new booking.BookingReceiver();
        java.lang.String str25 = bookingReceiver24.getAction();
        booking.UserType userType29 = null;
        booking.ExtendCommand extendCommand30 = new booking.ExtendCommand(bookingReceiver24, "hi!", "", 100, userType29);
        booking.UserType userType34 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand35 = new booking.BookCommand(bookingReceiver24, "hi!", "hi!", 100, userType34);
        booking.UserType userType39 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand40 = new booking.ExtendCommand(bookingReceiver24, "", "", (int) (short) 1, userType39);
        bookingReceiver0.bookSpace("CANCEL", "EXTEND", (int) (byte) 10, userType39);
        booking.BookingReceiver bookingReceiver45 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver49 = new booking.BookingReceiver();
        java.lang.String str50 = bookingReceiver49.getAction();
        booking.UserType userType54 = null;
        booking.ExtendCommand extendCommand55 = new booking.ExtendCommand(bookingReceiver49, "hi!", "", 100, userType54);
        java.lang.String str56 = bookingReceiver49.getAction();
        booking.UserType userType60 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand61 = new booking.ExtendCommand(bookingReceiver49, "hi!", "hi!", (int) (byte) 0, userType60);
        booking.ExtendCommand extendCommand62 = new booking.ExtendCommand(bookingReceiver45, "", "", (int) (byte) 100, userType60);
        booking.BookingReceiver bookingReceiver66 = new booking.BookingReceiver();
        java.lang.String str67 = bookingReceiver66.getAction();
        booking.UserType userType71 = null;
        booking.ExtendCommand extendCommand72 = new booking.ExtendCommand(bookingReceiver66, "hi!", "", 100, userType71);
        booking.UserType userType76 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand77 = new booking.BookCommand(bookingReceiver66, "hi!", "hi!", 100, userType76);
        bookingReceiver45.bookSpace("hi!", "hi!", (int) (short) -1, userType76);
        bookingReceiver0.bookSpace("EXTEND", "hi!", (int) (byte) -1, userType76);
        double double80 = bookingReceiver0.getDeposit();
        double double81 = bookingReceiver0.getAmount();
        booking.CancelCommand cancelCommand84 = new booking.CancelCommand(bookingReceiver0, "hi!", "BOOK");
        bookingReceiver0.cancelBooking("", "BOOK");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + userType34 + "' != '" + booking.UserType.FACULTY + "'", userType34.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.FACULTY + "'", userType39.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.NON_FACULTY + "'", userType60.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + userType76 + "' != '" + booking.UserType.FACULTY + "'", userType76.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 8.0d + "'", double80 == 8.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-8.0d) + "'", double81 == (-8.0d));
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        double double12 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver16 = new booking.BookingReceiver();
        java.lang.String str17 = bookingReceiver16.getAction();
        booking.UserType userType21 = null;
        booking.ExtendCommand extendCommand22 = new booking.ExtendCommand(bookingReceiver16, "hi!", "", 100, userType21);
        booking.UserType userType26 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand27 = new booking.BookCommand(bookingReceiver16, "hi!", "hi!", 100, userType26);
        booking.BookingReceiver bookingReceiver31 = new booking.BookingReceiver();
        booking.UserType userType35 = booking.UserType.FACULTY;
        bookingReceiver31.bookSpace("", "", 100, userType35);
        bookingReceiver16.extendBooking("", "", (int) 'a', userType35);
        bookingReceiver0.extendBooking("CANCEL", "hi!", (int) (short) 10, userType35);
        java.lang.String str39 = bookingReceiver0.getAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + userType26 + "' != '" + booking.UserType.FACULTY + "'", userType26.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType35 + "' != '" + booking.UserType.FACULTY + "'", userType35.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "EXTEND" + "'", str39, "EXTEND");
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        parkingSpot4.occupySpot("CANCEL");
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        parkingSpot4.occupySpot("BOOK");
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        boolean boolean28 = parkingSpot15.isOccupied();
        java.lang.String str29 = parkingSpot15.getLicensePlate();
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor31 = new booking.ParkingSensor((booking.Subject) parkingSpot30);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.BookingSystem bookingSystem35 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        booking.BookingSystem bookingSystem39 = new booking.BookingSystem((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        bookingSystem39.update((booking.Subject) parkingSpot40);
        parkingSpot32.detach((booking.Observer) bookingSystem39);
        parkingSensor31.update((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot46 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor47 = new booking.ParkingSensor((booking.Subject) parkingSpot46);
        booking.ParkingSpot parkingSpot48 = new booking.ParkingSpot();
        parkingSpot48.occupySpot("hi!");
        booking.BookingSystem bookingSystem51 = new booking.BookingSystem((booking.Subject) parkingSpot48);
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        bookingSystem55.update((booking.Subject) parkingSpot56);
        parkingSpot48.detach((booking.Observer) bookingSystem55);
        booking.ParkingSpot parkingSpot61 = new booking.ParkingSpot();
        parkingSpot61.occupySpot("hi!");
        booking.BookingSystem bookingSystem64 = new booking.BookingSystem((booking.Subject) parkingSpot61);
        booking.ParkingSpot parkingSpot65 = new booking.ParkingSpot();
        parkingSpot65.occupySpot("hi!");
        booking.BookingSystem bookingSystem68 = new booking.BookingSystem((booking.Subject) parkingSpot65);
        booking.ParkingSpot parkingSpot69 = new booking.ParkingSpot();
        parkingSpot69.occupySpot("hi!");
        bookingSystem68.update((booking.Subject) parkingSpot69);
        parkingSpot61.detach((booking.Observer) bookingSystem68);
        parkingSpot48.detach((booking.Observer) bookingSystem68);
        parkingSpot48.occupySpot("CANCEL");
        parkingSensor47.update((booking.Subject) parkingSpot48);
        parkingSensor31.update((booking.Subject) parkingSpot48);
        booking.ParkingSpot parkingSpot79 = new booking.ParkingSpot();
        parkingSensor31.update((booking.Subject) parkingSpot79);
        parkingSpot15.attach((booking.Observer) parkingSensor31);
        boolean boolean82 = parkingSpot15.isOccupied();
        parkingSensor14.update((booking.Subject) parkingSpot15);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.BookingReceiver bookingReceiver50 = new booking.BookingReceiver();
        java.lang.String str51 = bookingReceiver50.getAction();
        booking.UserType userType55 = null;
        booking.ExtendCommand extendCommand56 = new booking.ExtendCommand(bookingReceiver50, "hi!", "", 100, userType55);
        booking.UserType userType60 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand61 = new booking.BookCommand(bookingReceiver50, "hi!", "hi!", 100, userType60);
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        booking.UserType userType69 = booking.UserType.FACULTY;
        bookingReceiver65.bookSpace("", "", 100, userType69);
        bookingReceiver50.extendBooking("", "", (int) 'a', userType69);
        booking.UserType userType72 = booking.UserType.NON_FACULTY;
        double double73 = bookingReceiver50.getRate(userType72);
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver0, "hi!", "BOOK", 1, userType72);
        java.lang.String str75 = bookingReceiver0.getAction();
        booking.CancelCommand cancelCommand78 = new booking.CancelCommand(bookingReceiver0, "hi!", "CANCEL");
        booking.CancelCommand cancelCommand81 = new booking.CancelCommand(bookingReceiver0, "BOOK", "CANCEL");
        double double82 = bookingReceiver0.getDeposit();
        double double83 = bookingReceiver0.getAmount();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType69 + "' != '" + booking.UserType.FACULTY + "'", userType69.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.NON_FACULTY + "'", userType72.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor28 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        parkingSpot29.occupySpot("hi!");
        booking.BookingSystem bookingSystem32 = new booking.BookingSystem((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        booking.BookingSystem bookingSystem36 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        bookingSystem36.update((booking.Subject) parkingSpot37);
        parkingSpot29.detach((booking.Observer) bookingSystem36);
        parkingSensor28.update((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor44 = new booking.ParkingSensor((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        bookingSystem52.update((booking.Subject) parkingSpot53);
        parkingSpot45.detach((booking.Observer) bookingSystem52);
        parkingSensor44.update((booking.Subject) parkingSpot45);
        parkingSpot29.detach((booking.Observer) parkingSensor44);
        parkingSpot0.detach((booking.Observer) parkingSensor44);
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem63 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        java.lang.String str64 = parkingSpot0.getLicensePlate();
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSensor parkingSensor10 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        boolean boolean12 = parkingSpot4.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.BookingReceiver bookingReceiver15 = new booking.BookingReceiver();
        booking.UserType userType19 = booking.UserType.FACULTY;
        bookingReceiver15.bookSpace("", "", 100, userType19);
        bookingReceiver0.extendBooking("", "", (int) 'a', userType19);
        booking.UserType userType22 = booking.UserType.NON_FACULTY;
        double double23 = bookingReceiver0.getRate(userType22);
        bookingReceiver0.cancelBooking("BOOK", "hi!");
        booking.BookingReceiver bookingReceiver30 = null;
        booking.BookingReceiver bookingReceiver34 = new booking.BookingReceiver();
        bookingReceiver34.cancelBooking("hi!", "hi!");
        booking.UserType userType38 = booking.UserType.STUDENT;
        double double39 = bookingReceiver34.getRate(userType38);
        booking.BookCommand bookCommand40 = new booking.BookCommand(bookingReceiver30, "BOOK", "hi!", 0, userType38);
        bookingReceiver0.bookSpace("EXTEND", "BOOK", (int) (short) -1, userType38);
        bookingReceiver0.cancelBooking("hi!", "BOOK");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType19 + "' != '" + booking.UserType.FACULTY + "'", userType19.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType22 + "' != '" + booking.UserType.NON_FACULTY + "'", userType22.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + userType38 + "' != '" + booking.UserType.STUDENT + "'", userType38.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 5.0d + "'", double39 == 5.0d);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        java.lang.Class<?> wildcardClass1 = parkingSpot0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSpot2.detach((booking.Observer) bookingSystem22);
        parkingSpot2.occupySpot("CANCEL");
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        booking.BookingSystem bookingSystem41 = new booking.BookingSystem((booking.Subject) parkingSpot38);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        bookingSystem41.update((booking.Subject) parkingSpot42);
        parkingSpot34.detach((booking.Observer) bookingSystem41);
        parkingSensor33.update((booking.Subject) parkingSpot34);
        parkingSpot2.detach((booking.Observer) parkingSensor33);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        booking.BookingSystem bookingSystem56 = new booking.BookingSystem((booking.Subject) parkingSpot53);
        booking.ParkingSpot parkingSpot57 = new booking.ParkingSpot();
        parkingSpot57.occupySpot("hi!");
        bookingSystem56.update((booking.Subject) parkingSpot57);
        parkingSpot49.detach((booking.Observer) bookingSystem56);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor63 = new booking.ParkingSensor((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        bookingSystem71.update((booking.Subject) parkingSpot72);
        parkingSpot64.detach((booking.Observer) bookingSystem71);
        parkingSensor63.update((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor79 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        parkingSpot64.detach((booking.Observer) parkingSensor79);
        bookingSystem56.update((booking.Subject) parkingSpot64);
        parkingSensor33.update((booking.Subject) parkingSpot64);
        booking.ParkingSensor parkingSensor83 = new booking.ParkingSensor((booking.Subject) parkingSpot64);
        booking.BookingSystem bookingSystem84 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        parkingSpot64.occupySpot("EXTEND");
        boolean boolean87 = parkingSpot64.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = new booking.BookingReceiver();
        java.lang.String str2 = bookingReceiver1.getAction();
        booking.UserType userType6 = null;
        booking.ExtendCommand extendCommand7 = new booking.ExtendCommand(bookingReceiver1, "hi!", "", 100, userType6);
        booking.UserType userType11 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand12 = new booking.BookCommand(bookingReceiver1, "hi!", "hi!", 100, userType11);
        booking.UserType userType16 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver1, "", "", (int) (short) 1, userType16);
        commandInvoker0.setCommand((booking.ICommand) extendCommand17);
        booking.BookingReceiver bookingReceiver19 = new booking.BookingReceiver();
        java.lang.String str20 = bookingReceiver19.getAction();
        booking.UserType userType24 = null;
        booking.ExtendCommand extendCommand25 = new booking.ExtendCommand(bookingReceiver19, "hi!", "", 100, userType24);
        booking.BookingReceiver bookingReceiver29 = new booking.BookingReceiver();
        java.lang.String str30 = bookingReceiver29.getAction();
        booking.UserType userType34 = null;
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver29, "hi!", "", 100, userType34);
        booking.UserType userType39 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand40 = new booking.BookCommand(bookingReceiver29, "hi!", "hi!", 100, userType39);
        booking.BookingReceiver bookingReceiver44 = new booking.BookingReceiver();
        booking.UserType userType48 = booking.UserType.FACULTY;
        bookingReceiver44.bookSpace("", "", 100, userType48);
        bookingReceiver29.extendBooking("", "", (int) 'a', userType48);
        booking.ExtendCommand extendCommand51 = new booking.ExtendCommand(bookingReceiver19, "", "", 0, userType48);
        extendCommand51.doAction();
        commandInvoker0.setCommand((booking.ICommand) extendCommand51);
        commandInvoker0.executeCommand();
        booking.CommandInvoker commandInvoker55 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver56 = null;
        booking.BookingReceiver bookingReceiver60 = new booking.BookingReceiver();
        booking.UserType userType64 = booking.UserType.FACULTY;
        bookingReceiver60.bookSpace("", "", 100, userType64);
        booking.BookCommand bookCommand66 = new booking.BookCommand(bookingReceiver56, "hi!", "", 0, userType64);
        commandInvoker55.setCommand((booking.ICommand) bookCommand66);
        booking.BookingReceiver bookingReceiver68 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver72 = new booking.BookingReceiver();
        java.lang.String str73 = bookingReceiver72.getAction();
        booking.UserType userType77 = null;
        booking.ExtendCommand extendCommand78 = new booking.ExtendCommand(bookingReceiver72, "hi!", "", 100, userType77);
        java.lang.String str79 = bookingReceiver72.getAction();
        booking.UserType userType83 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand84 = new booking.ExtendCommand(bookingReceiver72, "hi!", "hi!", (int) (byte) 0, userType83);
        booking.ExtendCommand extendCommand85 = new booking.ExtendCommand(bookingReceiver68, "", "", (int) (byte) 100, userType83);
        booking.CancelCommand cancelCommand88 = new booking.CancelCommand(bookingReceiver68, "hi!", "hi!");
        commandInvoker55.setCommand((booking.ICommand) cancelCommand88);
        cancelCommand88.doAction();
        cancelCommand88.doAction();
        cancelCommand88.doAction();
        commandInvoker0.setCommand((booking.ICommand) cancelCommand88);
        cancelCommand88.doAction();
        java.lang.Class<?> wildcardClass95 = cancelCommand88.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.FACULTY + "'", userType11.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType16 + "' != '" + booking.UserType.FACULTY + "'", userType16.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.FACULTY + "'", userType39.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType48 + "' != '" + booking.UserType.FACULTY + "'", userType48.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType64 + "' != '" + booking.UserType.FACULTY + "'", userType64.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + userType83 + "' != '" + booking.UserType.NON_FACULTY + "'", userType83.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        bookingSystem3.update((booking.Subject) parkingSpot4);
        boolean boolean8 = parkingSpot4.isOccupied();
        parkingSpot4.freeSpot();
        java.lang.Class<?> wildcardClass10 = parkingSpot4.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        parkingSpot0.freeSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        java.lang.Class<?> wildcardClass15 = parkingSensor14.getClass();
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot9 = new booking.ParkingSpot();
        parkingSpot9.occupySpot("hi!");
        booking.BookingSystem bookingSystem12 = new booking.BookingSystem((booking.Subject) parkingSpot9);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        bookingSystem12.update((booking.Subject) parkingSpot13);
        parkingSpot4.detach((booking.Observer) bookingSystem12);
        boolean boolean19 = parkingSpot4.isOccupied();
        parkingSpot4.occupySpot("hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        java.lang.String str41 = parkingSpot27.getLicensePlate();
        booking.ParkingSensor parkingSensor42 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        parkingSpot27.occupySpot("hi!");
        booking.Observer observer45 = null;
        parkingSpot27.attach(observer45);
        parkingSpot27.occupySpot("BOOK");
        // The following exception was thrown during execution in test generation
        try {
            parkingSpot27.freeSpot();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.Observer.update(booking.Subject)\" because \"obs\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        parkingSpot4.occupySpot("CANCEL");
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem12 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem13 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        boolean boolean15 = parkingSpot4.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        booking.BookingSystem bookingSystem54 = new booking.BookingSystem((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot55);
        booking.ParkingSpot parkingSpot59 = new booking.ParkingSpot();
        parkingSpot59.occupySpot("hi!");
        bookingSystem58.update((booking.Subject) parkingSpot59);
        parkingSpot51.detach((booking.Observer) bookingSystem58);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        bookingSystem71.update((booking.Subject) parkingSpot72);
        parkingSpot64.detach((booking.Observer) bookingSystem71);
        parkingSpot51.detach((booking.Observer) bookingSystem71);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        parkingSpot78.occupySpot("hi!");
        booking.BookingSystem bookingSystem81 = new booking.BookingSystem((booking.Subject) parkingSpot78);
        booking.ParkingSpot parkingSpot82 = new booking.ParkingSpot();
        parkingSpot82.occupySpot("hi!");
        booking.BookingSystem bookingSystem85 = new booking.BookingSystem((booking.Subject) parkingSpot82);
        booking.ParkingSpot parkingSpot86 = new booking.ParkingSpot();
        parkingSpot86.occupySpot("hi!");
        bookingSystem85.update((booking.Subject) parkingSpot86);
        parkingSpot78.detach((booking.Observer) bookingSystem85);
        bookingSystem71.update((booking.Subject) parkingSpot78);
        booking.ParkingSensor parkingSensor92 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        parkingSensor1.update((booking.Subject) parkingSpot78);
        parkingSpot78.occupySpot("hi!");
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSpot2.detach((booking.Observer) bookingSystem22);
        parkingSpot2.occupySpot("CANCEL");
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        booking.BookingSystem bookingSystem41 = new booking.BookingSystem((booking.Subject) parkingSpot38);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        bookingSystem41.update((booking.Subject) parkingSpot42);
        parkingSpot34.detach((booking.Observer) bookingSystem41);
        parkingSensor33.update((booking.Subject) parkingSpot34);
        parkingSpot2.detach((booking.Observer) parkingSensor33);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        booking.BookingSystem bookingSystem56 = new booking.BookingSystem((booking.Subject) parkingSpot53);
        booking.ParkingSpot parkingSpot57 = new booking.ParkingSpot();
        parkingSpot57.occupySpot("hi!");
        bookingSystem56.update((booking.Subject) parkingSpot57);
        parkingSpot49.detach((booking.Observer) bookingSystem56);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor63 = new booking.ParkingSensor((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        bookingSystem71.update((booking.Subject) parkingSpot72);
        parkingSpot64.detach((booking.Observer) bookingSystem71);
        parkingSensor63.update((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor79 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        parkingSpot64.detach((booking.Observer) parkingSensor79);
        bookingSystem56.update((booking.Subject) parkingSpot64);
        parkingSensor33.update((booking.Subject) parkingSpot64);
        booking.ParkingSensor parkingSensor83 = new booking.ParkingSensor((booking.Subject) parkingSpot64);
        java.lang.String str84 = parkingSpot64.getLicensePlate();
        java.lang.String str85 = parkingSpot64.getLicensePlate();
        booking.BookingSystem bookingSystem86 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.Subject subject87 = null;
        // The following exception was thrown during execution in test generation
        try {
            bookingSystem86.update(subject87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Object.equals(Object)\" because \"changedSubject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        boolean boolean13 = parkingSpot0.isOccupied();
        booking.BookingSystem bookingSystem14 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSpot15.occupySpot("hi!");
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem32 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        parkingSpot0.detach((booking.Observer) bookingSystem32);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSpot2.detach((booking.Observer) bookingSystem22);
        parkingSpot2.occupySpot("CANCEL");
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        booking.BookingSystem bookingSystem41 = new booking.BookingSystem((booking.Subject) parkingSpot38);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        bookingSystem41.update((booking.Subject) parkingSpot42);
        parkingSpot34.detach((booking.Observer) bookingSystem41);
        parkingSensor33.update((booking.Subject) parkingSpot34);
        parkingSpot2.detach((booking.Observer) parkingSensor33);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        booking.BookingSystem bookingSystem56 = new booking.BookingSystem((booking.Subject) parkingSpot53);
        booking.ParkingSpot parkingSpot57 = new booking.ParkingSpot();
        parkingSpot57.occupySpot("hi!");
        bookingSystem56.update((booking.Subject) parkingSpot57);
        parkingSpot49.detach((booking.Observer) bookingSystem56);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor63 = new booking.ParkingSensor((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        bookingSystem71.update((booking.Subject) parkingSpot72);
        parkingSpot64.detach((booking.Observer) bookingSystem71);
        parkingSensor63.update((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor79 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        parkingSpot64.detach((booking.Observer) parkingSensor79);
        bookingSystem56.update((booking.Subject) parkingSpot64);
        parkingSensor33.update((booking.Subject) parkingSpot64);
        booking.ParkingSensor parkingSensor83 = new booking.ParkingSensor((booking.Subject) parkingSpot64);
        java.lang.String str84 = parkingSpot64.getLicensePlate();
        java.lang.String str85 = parkingSpot64.getLicensePlate();
        parkingSpot64.occupySpot("");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        booking.UserType userType12 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand13 = new booking.BookCommand(bookingReceiver2, "hi!", "hi!", 100, userType12);
        bookCommand13.doAction();
        bookCommand13.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand13);
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
        booking.CommandInvoker commandInvoker19 = new booking.CommandInvoker();
        commandInvoker19.executeCommand();
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        java.lang.String str28 = bookingReceiver21.getAction();
        booking.UserType userType32 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand33 = new booking.ExtendCommand(bookingReceiver21, "hi!", "hi!", (int) (byte) 0, userType32);
        extendCommand33.doAction();
        commandInvoker19.setCommand((booking.ICommand) extendCommand33);
        commandInvoker19.executeCommand();
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        java.lang.String str38 = bookingReceiver37.getAction();
        booking.UserType userType42 = null;
        booking.ExtendCommand extendCommand43 = new booking.ExtendCommand(bookingReceiver37, "hi!", "", 100, userType42);
        booking.UserType userType47 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand48 = new booking.BookCommand(bookingReceiver37, "hi!", "hi!", 100, userType47);
        booking.BookingReceiver bookingReceiver52 = new booking.BookingReceiver();
        booking.UserType userType56 = booking.UserType.FACULTY;
        bookingReceiver52.bookSpace("", "", 100, userType56);
        bookingReceiver37.extendBooking("", "", (int) 'a', userType56);
        booking.CancelCommand cancelCommand61 = new booking.CancelCommand(bookingReceiver37, "BOOK", "CANCEL");
        commandInvoker19.setCommand((booking.ICommand) cancelCommand61);
        commandInvoker0.setCommand((booking.ICommand) cancelCommand61);
        cancelCommand61.doAction();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + booking.UserType.FACULTY + "'", userType12.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + userType32 + "' != '" + booking.UserType.NON_FACULTY + "'", userType32.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + userType47 + "' != '" + booking.UserType.FACULTY + "'", userType47.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType56 + "' != '" + booking.UserType.FACULTY + "'", userType56.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        double double7 = bookingReceiver0.getDeposit();
        double double8 = bookingReceiver0.getDeposit();
        double double9 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver13 = new booking.BookingReceiver();
        java.lang.String str14 = bookingReceiver13.getAction();
        booking.UserType userType18 = null;
        booking.ExtendCommand extendCommand19 = new booking.ExtendCommand(bookingReceiver13, "hi!", "", 100, userType18);
        booking.UserType userType23 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand24 = new booking.BookCommand(bookingReceiver13, "hi!", "hi!", 100, userType23);
        booking.BookingReceiver bookingReceiver28 = new booking.BookingReceiver();
        booking.UserType userType32 = booking.UserType.FACULTY;
        bookingReceiver28.bookSpace("", "", 100, userType32);
        bookingReceiver13.extendBooking("", "", (int) 'a', userType32);
        booking.UserType userType35 = booking.UserType.NON_FACULTY;
        double double36 = bookingReceiver13.getRate(userType35);
        bookingReceiver13.cancelBooking("BOOK", "hi!");
        java.lang.String str40 = bookingReceiver13.getAction();
        double double41 = bookingReceiver13.getDeposit();
        booking.BookingReceiver bookingReceiver45 = new booking.BookingReceiver();
        java.lang.String str46 = bookingReceiver45.getAction();
        double double47 = bookingReceiver45.getDeposit();
        booking.BookingReceiver bookingReceiver51 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver55 = new booking.BookingReceiver();
        java.lang.String str56 = bookingReceiver55.getAction();
        booking.UserType userType60 = null;
        booking.ExtendCommand extendCommand61 = new booking.ExtendCommand(bookingReceiver55, "hi!", "", 100, userType60);
        java.lang.String str62 = bookingReceiver55.getAction();
        booking.UserType userType66 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand67 = new booking.ExtendCommand(bookingReceiver55, "hi!", "hi!", (int) (byte) 0, userType66);
        booking.ExtendCommand extendCommand68 = new booking.ExtendCommand(bookingReceiver51, "", "", (int) (byte) 100, userType66);
        booking.BookingReceiver bookingReceiver72 = new booking.BookingReceiver();
        java.lang.String str73 = bookingReceiver72.getAction();
        booking.UserType userType77 = null;
        booking.ExtendCommand extendCommand78 = new booking.ExtendCommand(bookingReceiver72, "hi!", "", 100, userType77);
        booking.UserType userType82 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand83 = new booking.BookCommand(bookingReceiver72, "hi!", "hi!", 100, userType82);
        bookingReceiver51.bookSpace("hi!", "hi!", (int) (short) -1, userType82);
        booking.ExtendCommand extendCommand85 = new booking.ExtendCommand(bookingReceiver45, "EXTEND", "BOOK", (int) (byte) -1, userType82);
        booking.ExtendCommand extendCommand86 = new booking.ExtendCommand(bookingReceiver13, "CANCEL", "", 0, userType82);
        booking.BookCommand bookCommand87 = new booking.BookCommand(bookingReceiver0, "hi!", "EXTEND", (int) (byte) 100, userType82);
        double double88 = bookingReceiver0.getDeposit();
        booking.CancelCommand cancelCommand91 = new booking.CancelCommand(bookingReceiver0, "BOOK", "");
        cancelCommand91.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + userType23 + "' != '" + booking.UserType.FACULTY + "'", userType23.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType32 + "' != '" + booking.UserType.FACULTY + "'", userType32.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType35 + "' != '" + booking.UserType.NON_FACULTY + "'", userType35.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CANCEL" + "'", str40, "CANCEL");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + userType66 + "' != '" + booking.UserType.NON_FACULTY + "'", userType66.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + userType82 + "' != '" + booking.UserType.FACULTY + "'", userType82.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        booking.BookingSystem bookingSystem54 = new booking.BookingSystem((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot55);
        booking.ParkingSpot parkingSpot59 = new booking.ParkingSpot();
        parkingSpot59.occupySpot("hi!");
        bookingSystem58.update((booking.Subject) parkingSpot59);
        parkingSpot51.detach((booking.Observer) bookingSystem58);
        parkingSpot49.detach((booking.Observer) bookingSystem58);
        booking.ParkingSensor parkingSensor65 = new booking.ParkingSensor((booking.Subject) parkingSpot49);
        java.lang.String str66 = parkingSpot49.getLicensePlate();
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        parkingSpot49.freeSpot();
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor41 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor42 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor43 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.BookingSystem bookingSystem44 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.Observer observer45 = null;
        parkingSpot27.detach(observer45);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver5 = new booking.BookingReceiver();
        bookingReceiver5.cancelBooking("hi!", "hi!");
        java.lang.String str9 = bookingReceiver5.getAction();
        booking.BookingReceiver bookingReceiver10 = null;
        booking.BookingReceiver bookingReceiver14 = new booking.BookingReceiver();
        booking.UserType userType18 = booking.UserType.FACULTY;
        bookingReceiver14.bookSpace("", "", 100, userType18);
        booking.BookCommand bookCommand20 = new booking.BookCommand(bookingReceiver10, "hi!", "", 0, userType18);
        double double21 = bookingReceiver5.getRate(userType18);
        booking.UserType userType25 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand26 = new booking.ExtendCommand(bookingReceiver5, "BOOK", "EXTEND", (int) (short) 10, userType25);
        booking.BookCommand bookCommand27 = new booking.BookCommand(bookingReceiver0, "CANCEL", "hi!", (int) ' ', userType25);
        booking.BookingReceiver bookingReceiver28 = new booking.BookingReceiver();
        bookingReceiver28.cancelBooking("hi!", "hi!");
        java.lang.String str32 = bookingReceiver28.getAction();
        booking.BookingReceiver bookingReceiver33 = null;
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.UserType userType41 = booking.UserType.FACULTY;
        bookingReceiver37.bookSpace("", "", 100, userType41);
        booking.BookCommand bookCommand43 = new booking.BookCommand(bookingReceiver33, "hi!", "", 0, userType41);
        double double44 = bookingReceiver28.getRate(userType41);
        double double45 = bookingReceiver0.getRate(userType41);
        double double46 = bookingReceiver0.getDeposit();
        bookingReceiver0.cancelBooking("CANCEL", "CANCEL");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CANCEL" + "'", str9, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType18 + "' != '" + booking.UserType.FACULTY + "'", userType18.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 8.0d + "'", double21 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType25 + "' != '" + booking.UserType.FACULTY + "'", userType25.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "CANCEL" + "'", str32, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType41 + "' != '" + booking.UserType.FACULTY + "'", userType41.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 8.0d + "'", double44 == 8.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 8.0d + "'", double45 == 8.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.CancelCommand cancelCommand20 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        booking.BookingReceiver bookingReceiver24 = new booking.BookingReceiver();
        java.lang.String str25 = bookingReceiver24.getAction();
        booking.UserType userType29 = null;
        booking.ExtendCommand extendCommand30 = new booking.ExtendCommand(bookingReceiver24, "hi!", "", 100, userType29);
        booking.UserType userType34 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand35 = new booking.BookCommand(bookingReceiver24, "hi!", "hi!", 100, userType34);
        booking.UserType userType39 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand40 = new booking.ExtendCommand(bookingReceiver24, "", "", (int) (short) 1, userType39);
        bookingReceiver0.bookSpace("CANCEL", "EXTEND", (int) (byte) 10, userType39);
        booking.BookingReceiver bookingReceiver45 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver49 = new booking.BookingReceiver();
        java.lang.String str50 = bookingReceiver49.getAction();
        booking.UserType userType54 = null;
        booking.ExtendCommand extendCommand55 = new booking.ExtendCommand(bookingReceiver49, "hi!", "", 100, userType54);
        java.lang.String str56 = bookingReceiver49.getAction();
        booking.UserType userType60 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand61 = new booking.ExtendCommand(bookingReceiver49, "hi!", "hi!", (int) (byte) 0, userType60);
        booking.ExtendCommand extendCommand62 = new booking.ExtendCommand(bookingReceiver45, "", "", (int) (byte) 100, userType60);
        booking.BookingReceiver bookingReceiver66 = new booking.BookingReceiver();
        java.lang.String str67 = bookingReceiver66.getAction();
        booking.UserType userType71 = null;
        booking.ExtendCommand extendCommand72 = new booking.ExtendCommand(bookingReceiver66, "hi!", "", 100, userType71);
        booking.UserType userType76 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand77 = new booking.BookCommand(bookingReceiver66, "hi!", "hi!", 100, userType76);
        bookingReceiver45.bookSpace("hi!", "hi!", (int) (short) -1, userType76);
        bookingReceiver0.bookSpace("EXTEND", "hi!", (int) (byte) -1, userType76);
        double double80 = bookingReceiver0.getDeposit();
        double double81 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("hi!", "CANCEL");
        java.lang.String str85 = bookingReceiver0.getAction();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + userType34 + "' != '" + booking.UserType.FACULTY + "'", userType34.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.FACULTY + "'", userType39.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.NON_FACULTY + "'", userType60.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + userType76 + "' != '" + booking.UserType.FACULTY + "'", userType76.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 8.0d + "'", double80 == 8.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-8.0d) + "'", double81 == (-8.0d));
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "CANCEL" + "'", str85, "CANCEL");
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        double double8 = bookingReceiver0.getDeposit();
        java.lang.String str9 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("BOOK", "");
        booking.BookingReceiver bookingReceiver16 = new booking.BookingReceiver();
        java.lang.String str17 = bookingReceiver16.getAction();
        booking.UserType userType21 = null;
        booking.ExtendCommand extendCommand22 = new booking.ExtendCommand(bookingReceiver16, "hi!", "", 100, userType21);
        booking.UserType userType26 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand27 = new booking.BookCommand(bookingReceiver16, "hi!", "hi!", 100, userType26);
        booking.BookingReceiver bookingReceiver28 = new booking.BookingReceiver();
        java.lang.String str29 = bookingReceiver28.getAction();
        booking.UserType userType33 = null;
        booking.ExtendCommand extendCommand34 = new booking.ExtendCommand(bookingReceiver28, "hi!", "", 100, userType33);
        booking.UserType userType38 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand39 = new booking.BookCommand(bookingReceiver28, "hi!", "hi!", 100, userType38);
        booking.BookingReceiver bookingReceiver43 = new booking.BookingReceiver();
        booking.UserType userType47 = booking.UserType.FACULTY;
        bookingReceiver43.bookSpace("", "", 100, userType47);
        bookingReceiver28.extendBooking("", "", (int) 'a', userType47);
        double double50 = bookingReceiver16.getRate(userType47);
        booking.BookCommand bookCommand51 = new booking.BookCommand(bookingReceiver0, "BOOK", "BOOK", (int) (byte) 10, userType47);
        booking.BookingReceiver bookingReceiver55 = new booking.BookingReceiver();
        java.lang.String str56 = bookingReceiver55.getAction();
        booking.UserType userType60 = null;
        booking.ExtendCommand extendCommand61 = new booking.ExtendCommand(bookingReceiver55, "hi!", "", 100, userType60);
        java.lang.String str62 = bookingReceiver55.getAction();
        booking.BookingReceiver bookingReceiver66 = new booking.BookingReceiver();
        bookingReceiver66.cancelBooking("hi!", "hi!");
        bookingReceiver66.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver73 = new booking.BookingReceiver();
        booking.UserType userType77 = booking.UserType.FACULTY;
        bookingReceiver73.bookSpace("", "", 100, userType77);
        double double79 = bookingReceiver66.getRate(userType77);
        booking.BookingReceiver bookingReceiver83 = new booking.BookingReceiver();
        bookingReceiver83.cancelBooking("hi!", "hi!");
        booking.UserType userType87 = booking.UserType.STUDENT;
        double double88 = bookingReceiver83.getRate(userType87);
        booking.BookCommand bookCommand89 = new booking.BookCommand(bookingReceiver66, "hi!", "CANCEL", (int) (short) 10, userType87);
        booking.ExtendCommand extendCommand90 = new booking.ExtendCommand(bookingReceiver55, "BOOK", "EXTEND", (int) '4', userType87);
        booking.ExtendCommand extendCommand91 = new booking.ExtendCommand(bookingReceiver0, "CANCEL", "", (int) '#', userType87);
        extendCommand91.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + userType26 + "' != '" + booking.UserType.FACULTY + "'", userType26.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + userType38 + "' != '" + booking.UserType.FACULTY + "'", userType38.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType47 + "' != '" + booking.UserType.FACULTY + "'", userType47.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.0d + "'", double50 == 8.0d);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + userType77 + "' != '" + booking.UserType.FACULTY + "'", userType77.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 8.0d + "'", double79 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType87 + "' != '" + booking.UserType.STUDENT + "'", userType87.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 5.0d + "'", double88 == 5.0d);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        booking.UserType userType12 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand13 = new booking.BookCommand(bookingReceiver2, "hi!", "hi!", 100, userType12);
        bookCommand13.doAction();
        bookCommand13.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand13);
        commandInvoker0.executeCommand();
        booking.CommandInvoker commandInvoker18 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver19 = new booking.BookingReceiver();
        java.lang.String str20 = bookingReceiver19.getAction();
        booking.UserType userType24 = null;
        booking.ExtendCommand extendCommand25 = new booking.ExtendCommand(bookingReceiver19, "hi!", "", 100, userType24);
        booking.UserType userType29 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand30 = new booking.BookCommand(bookingReceiver19, "hi!", "hi!", 100, userType29);
        booking.UserType userType34 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver19, "", "", (int) (short) 1, userType34);
        commandInvoker18.setCommand((booking.ICommand) extendCommand35);
        extendCommand35.doAction();
        extendCommand35.doAction();
        commandInvoker0.setCommand((booking.ICommand) extendCommand35);
        booking.BookingReceiver bookingReceiver40 = null;
        booking.BookingReceiver bookingReceiver44 = new booking.BookingReceiver();
        bookingReceiver44.cancelBooking("hi!", "hi!");
        booking.UserType userType48 = booking.UserType.STUDENT;
        double double49 = bookingReceiver44.getRate(userType48);
        booking.BookCommand bookCommand50 = new booking.BookCommand(bookingReceiver40, "BOOK", "hi!", 0, userType48);
        commandInvoker0.setCommand((booking.ICommand) bookCommand50);
        // The following exception was thrown during execution in test generation
        try {
            bookCommand50.doAction();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.BookingReceiver.bookSpace(String, String, int, booking.UserType)\" because \"this.receiver\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + booking.UserType.FACULTY + "'", userType12.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType34 + "' != '" + booking.UserType.FACULTY + "'", userType34.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType48 + "' != '" + booking.UserType.STUDENT + "'", userType48.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 5.0d + "'", double49 == 5.0d);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        booking.UserType userType4 = booking.UserType.STUDENT;
        double double5 = bookingReceiver0.getRate(userType4);
        double double6 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("", "BOOK");
        booking.CancelCommand cancelCommand12 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        double double13 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.STUDENT + "'", userType4.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 5.0d + "'", double5 == 5.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSensor parkingSensor16 = new booking.ParkingSensor((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.freeSpot();
        boolean boolean19 = parkingSpot17.isOccupied();
        parkingSpot17.freeSpot();
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        booking.BookingSystem bookingSystem24 = new booking.BookingSystem((booking.Subject) parkingSpot21);
        booking.ParkingSpot parkingSpot25 = new booking.ParkingSpot();
        parkingSpot25.occupySpot("hi!");
        booking.BookingSystem bookingSystem28 = new booking.BookingSystem((booking.Subject) parkingSpot25);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        parkingSpot29.occupySpot("hi!");
        bookingSystem28.update((booking.Subject) parkingSpot29);
        parkingSpot21.detach((booking.Observer) bookingSystem28);
        parkingSpot17.detach((booking.Observer) bookingSystem28);
        parkingSensor16.update((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        booking.BookingSystem bookingSystem39 = new booking.BookingSystem((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        booking.BookingSystem bookingSystem43 = new booking.BookingSystem((booking.Subject) parkingSpot40);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        bookingSystem43.update((booking.Subject) parkingSpot44);
        parkingSpot36.detach((booking.Observer) bookingSystem43);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor50 = new booking.ParkingSensor((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        booking.BookingSystem bookingSystem54 = new booking.BookingSystem((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot55);
        booking.ParkingSpot parkingSpot59 = new booking.ParkingSpot();
        parkingSpot59.occupySpot("hi!");
        bookingSystem58.update((booking.Subject) parkingSpot59);
        parkingSpot51.detach((booking.Observer) bookingSystem58);
        parkingSensor50.update((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot65 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor66 = new booking.ParkingSensor((booking.Subject) parkingSpot65);
        parkingSpot51.detach((booking.Observer) parkingSensor66);
        bookingSystem43.update((booking.Subject) parkingSpot51);
        parkingSpot51.occupySpot("BOOK");
        booking.ParkingSpot parkingSpot71 = new booking.ParkingSpot();
        parkingSpot71.occupySpot("hi!");
        booking.BookingSystem bookingSystem74 = new booking.BookingSystem((booking.Subject) parkingSpot71);
        booking.ParkingSpot parkingSpot75 = new booking.ParkingSpot();
        parkingSpot75.occupySpot("hi!");
        booking.BookingSystem bookingSystem78 = new booking.BookingSystem((booking.Subject) parkingSpot75);
        bookingSystem74.update((booking.Subject) parkingSpot75);
        booking.ParkingSpot parkingSpot80 = new booking.ParkingSpot();
        parkingSpot80.occupySpot("hi!");
        booking.BookingSystem bookingSystem83 = new booking.BookingSystem((booking.Subject) parkingSpot80);
        booking.ParkingSpot parkingSpot84 = new booking.ParkingSpot();
        parkingSpot84.occupySpot("hi!");
        booking.BookingSystem bookingSystem87 = new booking.BookingSystem((booking.Subject) parkingSpot84);
        bookingSystem83.update((booking.Subject) parkingSpot84);
        parkingSpot75.detach((booking.Observer) bookingSystem83);
        parkingSpot51.attach((booking.Observer) bookingSystem83);
        booking.ParkingSpot parkingSpot91 = new booking.ParkingSpot();
        parkingSpot91.occupySpot("hi!");
        booking.BookingSystem bookingSystem94 = new booking.BookingSystem((booking.Subject) parkingSpot91);
        bookingSystem83.update((booking.Subject) parkingSpot91);
        parkingSpot17.attach((booking.Observer) bookingSystem83);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.BookingReceiver bookingReceiver50 = new booking.BookingReceiver();
        java.lang.String str51 = bookingReceiver50.getAction();
        booking.UserType userType55 = null;
        booking.ExtendCommand extendCommand56 = new booking.ExtendCommand(bookingReceiver50, "hi!", "", 100, userType55);
        booking.UserType userType60 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand61 = new booking.BookCommand(bookingReceiver50, "hi!", "hi!", 100, userType60);
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        booking.UserType userType69 = booking.UserType.FACULTY;
        bookingReceiver65.bookSpace("", "", 100, userType69);
        bookingReceiver50.extendBooking("", "", (int) 'a', userType69);
        booking.UserType userType72 = booking.UserType.NON_FACULTY;
        double double73 = bookingReceiver50.getRate(userType72);
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver0, "hi!", "BOOK", 1, userType72);
        java.lang.String str75 = bookingReceiver0.getAction();
        booking.CancelCommand cancelCommand78 = new booking.CancelCommand(bookingReceiver0, "hi!", "CANCEL");
        booking.CancelCommand cancelCommand81 = new booking.CancelCommand(bookingReceiver0, "BOOK", "CANCEL");
        cancelCommand81.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType69 + "' != '" + booking.UserType.FACULTY + "'", userType69.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.NON_FACULTY + "'", userType72.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        double double13 = bookingReceiver0.getAmount();
        java.lang.String str14 = bookingReceiver0.getAction();
        double double15 = bookingReceiver0.getDeposit();
        double double16 = bookingReceiver0.getDeposit();
        booking.BookingReceiver bookingReceiver20 = new booking.BookingReceiver();
        bookingReceiver20.cancelBooking("hi!", "hi!");
        java.lang.String str24 = bookingReceiver20.getAction();
        booking.BookingReceiver bookingReceiver25 = null;
        booking.BookingReceiver bookingReceiver29 = new booking.BookingReceiver();
        booking.UserType userType33 = booking.UserType.FACULTY;
        bookingReceiver29.bookSpace("", "", 100, userType33);
        booking.BookCommand bookCommand35 = new booking.BookCommand(bookingReceiver25, "hi!", "", 0, userType33);
        double double36 = bookingReceiver20.getRate(userType33);
        booking.UserType userType40 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand41 = new booking.ExtendCommand(bookingReceiver20, "BOOK", "EXTEND", (int) (short) 10, userType40);
        booking.BookCommand bookCommand42 = new booking.BookCommand(bookingReceiver0, "EXTEND", "hi!", (int) 'a', userType40);
        booking.BookingReceiver bookingReceiver46 = new booking.BookingReceiver();
        java.lang.String str47 = bookingReceiver46.getAction();
        booking.UserType userType51 = null;
        booking.ExtendCommand extendCommand52 = new booking.ExtendCommand(bookingReceiver46, "hi!", "", 100, userType51);
        booking.UserType userType56 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand57 = new booking.BookCommand(bookingReceiver46, "hi!", "hi!", 100, userType56);
        booking.UserType userType61 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand62 = new booking.ExtendCommand(bookingReceiver46, "", "", (int) (short) 1, userType61);
        bookingReceiver0.extendBooking("CANCEL", "EXTEND", (int) (byte) 1, userType61);
        bookingReceiver0.cancelBooking("", "CANCEL");
        java.lang.Class<?> wildcardClass67 = bookingReceiver0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CANCEL" + "'", str24, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType33 + "' != '" + booking.UserType.FACULTY + "'", userType33.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 8.0d + "'", double36 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType40 + "' != '" + booking.UserType.FACULTY + "'", userType40.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + userType56 + "' != '" + booking.UserType.FACULTY + "'", userType56.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType61 + "' != '" + booking.UserType.FACULTY + "'", userType61.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        booking.CancelCommand cancelCommand15 = new booking.CancelCommand(bookingReceiver0, "hi!", "BOOK");
        bookingReceiver0.cancelBooking("CANCEL", "BOOK");
        double double19 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver20 = new booking.BookingReceiver();
        bookingReceiver20.cancelBooking("hi!", "hi!");
        bookingReceiver20.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver27 = new booking.BookingReceiver();
        booking.UserType userType31 = booking.UserType.FACULTY;
        bookingReceiver27.bookSpace("", "", 100, userType31);
        double double33 = bookingReceiver20.getRate(userType31);
        booking.UserType userType37 = booking.UserType.VISITOR;
        booking.ExtendCommand extendCommand38 = new booking.ExtendCommand(bookingReceiver20, "BOOK", "", (int) '#', userType37);
        double double39 = bookingReceiver0.getRate(userType37);
        bookingReceiver0.cancelBooking("", "");
        java.lang.Class<?> wildcardClass43 = bookingReceiver0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 8.0d + "'", double33 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType37 + "' != '" + booking.UserType.VISITOR + "'", userType37.equals(booking.UserType.VISITOR));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 15.0d + "'", double39 == 15.0d);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.freeSpot();
        boolean boolean2 = parkingSpot0.isOccupied();
        booking.ParkingSensor parkingSensor3 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot8);
        booking.ParkingSpot parkingSpot12 = new booking.ParkingSpot();
        parkingSpot12.occupySpot("hi!");
        bookingSystem11.update((booking.Subject) parkingSpot12);
        parkingSpot4.detach((booking.Observer) bookingSystem11);
        boolean boolean17 = parkingSpot4.isOccupied();
        booking.ParkingSensor parkingSensor18 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.ParkingSensor parkingSensor19 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        parkingSensor3.update((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        booking.BookingSystem bookingSystem24 = new booking.BookingSystem((booking.Subject) parkingSpot21);
        booking.ParkingSpot parkingSpot25 = new booking.ParkingSpot();
        parkingSpot25.occupySpot("hi!");
        booking.BookingSystem bookingSystem28 = new booking.BookingSystem((booking.Subject) parkingSpot25);
        bookingSystem24.update((booking.Subject) parkingSpot25);
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor32 = new booking.ParkingSensor((booking.Subject) parkingSpot31);
        bookingSystem30.update((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor35 = new booking.ParkingSensor((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        booking.BookingSystem bookingSystem39 = new booking.BookingSystem((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        booking.BookingSystem bookingSystem43 = new booking.BookingSystem((booking.Subject) parkingSpot40);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        bookingSystem43.update((booking.Subject) parkingSpot44);
        parkingSpot36.detach((booking.Observer) bookingSystem43);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        booking.BookingSystem bookingSystem56 = new booking.BookingSystem((booking.Subject) parkingSpot53);
        booking.ParkingSpot parkingSpot57 = new booking.ParkingSpot();
        parkingSpot57.occupySpot("hi!");
        bookingSystem56.update((booking.Subject) parkingSpot57);
        parkingSpot49.detach((booking.Observer) bookingSystem56);
        parkingSpot36.detach((booking.Observer) bookingSystem56);
        parkingSpot36.occupySpot("CANCEL");
        parkingSensor35.update((booking.Subject) parkingSpot36);
        bookingSystem30.update((booking.Subject) parkingSpot36);
        parkingSpot4.detach((booking.Observer) bookingSystem30);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        boolean boolean51 = parkingSpot49.isOccupied();
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        booking.BookingSystem bookingSystem59 = new booking.BookingSystem((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        bookingSystem59.update((booking.Subject) parkingSpot60);
        parkingSpot52.detach((booking.Observer) bookingSystem59);
        boolean boolean65 = parkingSpot52.isOccupied();
        booking.ParkingSensor parkingSensor66 = new booking.ParkingSensor((booking.Subject) parkingSpot52);
        booking.ParkingSensor parkingSensor67 = new booking.ParkingSensor((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        booking.BookingSystem bookingSystem75 = new booking.BookingSystem((booking.Subject) parkingSpot72);
        bookingSystem71.update((booking.Subject) parkingSpot72);
        booking.BookingSystem bookingSystem77 = new booking.BookingSystem((booking.Subject) parkingSpot72);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor79 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        bookingSystem77.update((booking.Subject) parkingSpot78);
        parkingSpot78.occupySpot("CANCEL");
        booking.ParkingSpot parkingSpot83 = new booking.ParkingSpot();
        parkingSpot83.occupySpot("hi!");
        booking.BookingSystem bookingSystem86 = new booking.BookingSystem((booking.Subject) parkingSpot83);
        booking.ParkingSpot parkingSpot87 = new booking.ParkingSpot();
        parkingSpot87.occupySpot("hi!");
        booking.BookingSystem bookingSystem90 = new booking.BookingSystem((booking.Subject) parkingSpot87);
        bookingSystem86.update((booking.Subject) parkingSpot87);
        booking.BookingSystem bookingSystem92 = new booking.BookingSystem((booking.Subject) parkingSpot87);
        parkingSpot78.attach((booking.Observer) bookingSystem92);
        parkingSensor67.update((booking.Subject) parkingSpot78);
        parkingSpot49.attach((booking.Observer) parkingSensor67);
        booking.BookingSystem bookingSystem96 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot97 = new booking.ParkingSpot();
        bookingSystem96.update((booking.Subject) parkingSpot97);
        java.lang.String str99 = parkingSpot97.getLicensePlate();
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver11 = new booking.BookingReceiver();
        bookingReceiver11.cancelBooking("hi!", "hi!");
        bookingReceiver11.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver18 = new booking.BookingReceiver();
        booking.UserType userType22 = booking.UserType.FACULTY;
        bookingReceiver18.bookSpace("", "", 100, userType22);
        double double24 = bookingReceiver11.getRate(userType22);
        booking.BookingReceiver bookingReceiver28 = new booking.BookingReceiver();
        bookingReceiver28.cancelBooking("hi!", "hi!");
        booking.UserType userType32 = booking.UserType.STUDENT;
        double double33 = bookingReceiver28.getRate(userType32);
        booking.BookCommand bookCommand34 = new booking.BookCommand(bookingReceiver11, "hi!", "CANCEL", (int) (short) 10, userType32);
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver0, "BOOK", "EXTEND", (int) '4', userType32);
        extendCommand35.doAction();
        extendCommand35.doAction();
        java.lang.Class<?> wildcardClass38 = extendCommand35.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType22 + "' != '" + booking.UserType.FACULTY + "'", userType22.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 8.0d + "'", double24 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType32 + "' != '" + booking.UserType.STUDENT + "'", userType32.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5.0d + "'", double33 == 5.0d);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.freeSpot();
        parkingSpot0.freeSpot();
        parkingSpot0.freeSpot();
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.UserType userType4 = booking.UserType.FACULTY;
        bookingReceiver0.bookSpace("", "", 100, userType4);
        bookingReceiver0.cancelBooking("", "CANCEL");
        booking.BookingReceiver bookingReceiver9 = new booking.BookingReceiver();
        java.lang.String str10 = bookingReceiver9.getAction();
        booking.UserType userType14 = null;
        booking.ExtendCommand extendCommand15 = new booking.ExtendCommand(bookingReceiver9, "hi!", "", 100, userType14);
        double double16 = bookingReceiver9.getDeposit();
        java.lang.String str17 = bookingReceiver9.getAction();
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.BookingReceiver bookingReceiver31 = new booking.BookingReceiver();
        java.lang.String str32 = bookingReceiver31.getAction();
        booking.UserType userType36 = null;
        booking.ExtendCommand extendCommand37 = new booking.ExtendCommand(bookingReceiver31, "hi!", "", 100, userType36);
        booking.UserType userType41 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand42 = new booking.BookCommand(bookingReceiver31, "hi!", "hi!", 100, userType41);
        booking.BookingReceiver bookingReceiver46 = new booking.BookingReceiver();
        booking.UserType userType50 = booking.UserType.FACULTY;
        bookingReceiver46.bookSpace("", "", 100, userType50);
        bookingReceiver31.extendBooking("", "", (int) 'a', userType50);
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver21, "", "", 0, userType50);
        booking.BookingReceiver bookingReceiver54 = new booking.BookingReceiver();
        java.lang.String str55 = bookingReceiver54.getAction();
        booking.UserType userType59 = null;
        booking.ExtendCommand extendCommand60 = new booking.ExtendCommand(bookingReceiver54, "hi!", "", 100, userType59);
        java.lang.String str61 = bookingReceiver54.getAction();
        booking.UserType userType65 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand66 = new booking.ExtendCommand(bookingReceiver54, "hi!", "hi!", (int) (byte) 0, userType65);
        double double67 = bookingReceiver21.getRate(userType65);
        bookingReceiver9.extendBooking("hi!", "", (int) (short) -1, userType65);
        double double69 = bookingReceiver0.getRate(userType65);
        booking.BookingReceiver bookingReceiver70 = new booking.BookingReceiver();
        bookingReceiver70.cancelBooking("hi!", "hi!");
        java.lang.String str74 = bookingReceiver70.getAction();
        booking.BookingReceiver bookingReceiver75 = null;
        booking.BookingReceiver bookingReceiver79 = new booking.BookingReceiver();
        booking.UserType userType83 = booking.UserType.FACULTY;
        bookingReceiver79.bookSpace("", "", 100, userType83);
        booking.BookCommand bookCommand85 = new booking.BookCommand(bookingReceiver75, "hi!", "", 0, userType83);
        double double86 = bookingReceiver70.getRate(userType83);
        double double87 = bookingReceiver0.getRate(userType83);
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.FACULTY + "'", userType4.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + userType41 + "' != '" + booking.UserType.FACULTY + "'", userType41.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType50 + "' != '" + booking.UserType.FACULTY + "'", userType50.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + userType65 + "' != '" + booking.UserType.NON_FACULTY + "'", userType65.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 10.0d + "'", double69 == 10.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "CANCEL" + "'", str74, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType83 + "' != '" + booking.UserType.FACULTY + "'", userType83.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 8.0d + "'", double86 == 8.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 8.0d + "'", double87 == 8.0d);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.BookingReceiver bookingReceiver50 = new booking.BookingReceiver();
        java.lang.String str51 = bookingReceiver50.getAction();
        booking.UserType userType55 = null;
        booking.ExtendCommand extendCommand56 = new booking.ExtendCommand(bookingReceiver50, "hi!", "", 100, userType55);
        booking.UserType userType60 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand61 = new booking.BookCommand(bookingReceiver50, "hi!", "hi!", 100, userType60);
        booking.BookingReceiver bookingReceiver65 = new booking.BookingReceiver();
        booking.UserType userType69 = booking.UserType.FACULTY;
        bookingReceiver65.bookSpace("", "", 100, userType69);
        bookingReceiver50.extendBooking("", "", (int) 'a', userType69);
        booking.UserType userType72 = booking.UserType.NON_FACULTY;
        double double73 = bookingReceiver50.getRate(userType72);
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver0, "hi!", "BOOK", 1, userType72);
        double double75 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver79 = new booking.BookingReceiver();
        bookingReceiver79.cancelBooking("hi!", "hi!");
        java.lang.String str83 = bookingReceiver79.getAction();
        booking.BookingReceiver bookingReceiver84 = null;
        booking.BookingReceiver bookingReceiver88 = new booking.BookingReceiver();
        booking.UserType userType92 = booking.UserType.FACULTY;
        bookingReceiver88.bookSpace("", "", 100, userType92);
        booking.BookCommand bookCommand94 = new booking.BookCommand(bookingReceiver84, "hi!", "", 0, userType92);
        double double95 = bookingReceiver79.getRate(userType92);
        bookingReceiver0.extendBooking("EXTEND", "EXTEND", (-1), userType92);
        double double97 = bookingReceiver0.getDeposit();
        double double98 = bookingReceiver0.getDeposit();
        double double99 = bookingReceiver0.getAmount();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + userType60 + "' != '" + booking.UserType.FACULTY + "'", userType60.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType69 + "' != '" + booking.UserType.FACULTY + "'", userType69.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType72 + "' != '" + booking.UserType.NON_FACULTY + "'", userType72.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "CANCEL" + "'", str83, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType92 + "' != '" + booking.UserType.FACULTY + "'", userType92.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 8.0d + "'", double95 == 8.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + (-8.0d) + "'", double99 == (-8.0d));
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor11 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        bookingSystem9.update((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        booking.ParkingSpot parkingSpot28 = new booking.ParkingSpot();
        parkingSpot28.occupySpot("hi!");
        booking.BookingSystem bookingSystem31 = new booking.BookingSystem((booking.Subject) parkingSpot28);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.BookingSystem bookingSystem35 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        bookingSystem35.update((booking.Subject) parkingSpot36);
        parkingSpot28.detach((booking.Observer) bookingSystem35);
        parkingSpot15.detach((booking.Observer) bookingSystem35);
        parkingSpot15.occupySpot("CANCEL");
        parkingSensor14.update((booking.Subject) parkingSpot15);
        bookingSystem9.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot46 = new booking.ParkingSpot();
        parkingSpot46.occupySpot("hi!");
        booking.BookingSystem bookingSystem49 = new booking.BookingSystem((booking.Subject) parkingSpot46);
        booking.ParkingSpot parkingSpot50 = new booking.ParkingSpot();
        parkingSpot50.occupySpot("hi!");
        booking.BookingSystem bookingSystem53 = new booking.BookingSystem((booking.Subject) parkingSpot50);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        bookingSystem53.update((booking.Subject) parkingSpot54);
        parkingSpot46.detach((booking.Observer) bookingSystem53);
        bookingSystem9.update((booking.Subject) parkingSpot46);
        parkingSpot46.freeSpot();
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        booking.CancelCommand cancelCommand15 = new booking.CancelCommand(bookingReceiver0, "hi!", "BOOK");
        cancelCommand15.doAction();
        cancelCommand15.doAction();
        cancelCommand15.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        booking.UserType userType50 = null;
        booking.ExtendCommand extendCommand51 = new booking.ExtendCommand(bookingReceiver0, "BOOK", "CANCEL", (int) (short) 100, userType50);
        // The following exception was thrown during execution in test generation
        try {
            extendCommand51.doAction();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.UserType.ordinal()\" because \"userType\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        parkingSpot2.detach((booking.Observer) parkingSensor17);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        booking.BookingSystem bookingSystem26 = new booking.BookingSystem((booking.Subject) parkingSpot23);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        bookingSystem26.update((booking.Subject) parkingSpot27);
        parkingSpot19.detach((booking.Observer) bookingSystem26);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.BookingSystem bookingSystem35 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        booking.BookingSystem bookingSystem39 = new booking.BookingSystem((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        bookingSystem39.update((booking.Subject) parkingSpot40);
        parkingSpot32.detach((booking.Observer) bookingSystem39);
        parkingSpot19.detach((booking.Observer) bookingSystem39);
        booking.ParkingSpot parkingSpot46 = new booking.ParkingSpot();
        parkingSpot46.occupySpot("hi!");
        booking.BookingSystem bookingSystem49 = new booking.BookingSystem((booking.Subject) parkingSpot46);
        booking.ParkingSpot parkingSpot50 = new booking.ParkingSpot();
        parkingSpot50.occupySpot("hi!");
        booking.BookingSystem bookingSystem53 = new booking.BookingSystem((booking.Subject) parkingSpot50);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        bookingSystem53.update((booking.Subject) parkingSpot54);
        parkingSpot46.detach((booking.Observer) bookingSystem53);
        bookingSystem39.update((booking.Subject) parkingSpot46);
        booking.ParkingSensor parkingSensor60 = new booking.ParkingSensor((booking.Subject) parkingSpot46);
        booking.ParkingSensor parkingSensor61 = new booking.ParkingSensor((booking.Subject) parkingSpot46);
        booking.ParkingSensor parkingSensor62 = new booking.ParkingSensor((booking.Subject) parkingSpot46);
        parkingSensor17.update((booking.Subject) parkingSpot46);
        parkingSpot46.freeSpot();
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor28 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        parkingSpot29.occupySpot("hi!");
        booking.BookingSystem bookingSystem32 = new booking.BookingSystem((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        booking.BookingSystem bookingSystem36 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        bookingSystem36.update((booking.Subject) parkingSpot37);
        parkingSpot29.detach((booking.Observer) bookingSystem36);
        parkingSensor28.update((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor44 = new booking.ParkingSensor((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        bookingSystem52.update((booking.Subject) parkingSpot53);
        parkingSpot45.detach((booking.Observer) bookingSystem52);
        parkingSensor44.update((booking.Subject) parkingSpot45);
        parkingSpot29.detach((booking.Observer) parkingSensor44);
        parkingSpot0.detach((booking.Observer) parkingSensor44);
        parkingSpot0.occupySpot("hi!");
        booking.ParkingSpot parkingSpot63 = new booking.ParkingSpot();
        parkingSpot63.occupySpot("hi!");
        booking.BookingSystem bookingSystem66 = new booking.BookingSystem((booking.Subject) parkingSpot63);
        booking.ParkingSpot parkingSpot67 = new booking.ParkingSpot();
        parkingSpot67.occupySpot("hi!");
        booking.BookingSystem bookingSystem70 = new booking.BookingSystem((booking.Subject) parkingSpot67);
        booking.ParkingSpot parkingSpot71 = new booking.ParkingSpot();
        parkingSpot71.occupySpot("hi!");
        bookingSystem70.update((booking.Subject) parkingSpot71);
        parkingSpot63.detach((booking.Observer) bookingSystem70);
        booking.ParkingSpot parkingSpot76 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor77 = new booking.ParkingSensor((booking.Subject) parkingSpot76);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        parkingSpot78.occupySpot("hi!");
        booking.BookingSystem bookingSystem81 = new booking.BookingSystem((booking.Subject) parkingSpot78);
        booking.ParkingSpot parkingSpot82 = new booking.ParkingSpot();
        parkingSpot82.occupySpot("hi!");
        booking.BookingSystem bookingSystem85 = new booking.BookingSystem((booking.Subject) parkingSpot82);
        booking.ParkingSpot parkingSpot86 = new booking.ParkingSpot();
        parkingSpot86.occupySpot("hi!");
        bookingSystem85.update((booking.Subject) parkingSpot86);
        parkingSpot78.detach((booking.Observer) bookingSystem85);
        parkingSensor77.update((booking.Subject) parkingSpot78);
        booking.ParkingSpot parkingSpot92 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor93 = new booking.ParkingSensor((booking.Subject) parkingSpot92);
        parkingSpot78.detach((booking.Observer) parkingSensor93);
        bookingSystem70.update((booking.Subject) parkingSpot78);
        parkingSpot78.occupySpot("BOOK");
        booking.ParkingSensor parkingSensor98 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        parkingSpot0.detach((booking.Observer) parkingSensor98);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSensor parkingSensor49 = new booking.ParkingSensor((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot50 = new booking.ParkingSpot();
        parkingSpot50.occupySpot("hi!");
        booking.BookingSystem bookingSystem53 = new booking.BookingSystem((booking.Subject) parkingSpot50);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        booking.BookingSystem bookingSystem57 = new booking.BookingSystem((booking.Subject) parkingSpot54);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        bookingSystem57.update((booking.Subject) parkingSpot58);
        parkingSpot50.detach((booking.Observer) bookingSystem57);
        booking.ParkingSpot parkingSpot63 = new booking.ParkingSpot();
        parkingSpot63.occupySpot("hi!");
        booking.BookingSystem bookingSystem66 = new booking.BookingSystem((booking.Subject) parkingSpot63);
        booking.ParkingSpot parkingSpot67 = new booking.ParkingSpot();
        parkingSpot67.occupySpot("hi!");
        booking.BookingSystem bookingSystem70 = new booking.BookingSystem((booking.Subject) parkingSpot67);
        booking.ParkingSpot parkingSpot71 = new booking.ParkingSpot();
        parkingSpot71.occupySpot("hi!");
        bookingSystem70.update((booking.Subject) parkingSpot71);
        parkingSpot63.detach((booking.Observer) bookingSystem70);
        parkingSpot50.detach((booking.Observer) bookingSystem70);
        booking.ParkingSpot parkingSpot77 = new booking.ParkingSpot();
        parkingSpot77.occupySpot("hi!");
        booking.BookingSystem bookingSystem80 = new booking.BookingSystem((booking.Subject) parkingSpot77);
        booking.ParkingSpot parkingSpot81 = new booking.ParkingSpot();
        parkingSpot81.occupySpot("hi!");
        booking.BookingSystem bookingSystem84 = new booking.BookingSystem((booking.Subject) parkingSpot81);
        booking.ParkingSpot parkingSpot85 = new booking.ParkingSpot();
        parkingSpot85.occupySpot("hi!");
        bookingSystem84.update((booking.Subject) parkingSpot85);
        parkingSpot77.detach((booking.Observer) bookingSystem84);
        bookingSystem70.update((booking.Subject) parkingSpot77);
        booking.ParkingSensor parkingSensor91 = new booking.ParkingSensor((booking.Subject) parkingSpot77);
        booking.ParkingSpot parkingSpot92 = new booking.ParkingSpot();
        parkingSensor91.update((booking.Subject) parkingSpot92);
        parkingSensor49.update((booking.Subject) parkingSpot92);
        parkingSpot92.freeSpot();
        booking.ParkingSensor parkingSensor96 = new booking.ParkingSensor((booking.Subject) parkingSpot92);
        java.lang.Class<?> wildcardClass97 = parkingSensor96.getClass();
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        boolean boolean41 = parkingSpot27.isOccupied();
        booking.ParkingSensor parkingSensor42 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        parkingSpot43.occupySpot("hi!");
        booking.BookingSystem bookingSystem46 = new booking.BookingSystem((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot47 = new booking.ParkingSpot();
        parkingSpot47.occupySpot("hi!");
        booking.BookingSystem bookingSystem50 = new booking.BookingSystem((booking.Subject) parkingSpot47);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        bookingSystem50.update((booking.Subject) parkingSpot51);
        parkingSpot43.detach((booking.Observer) bookingSystem50);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        booking.BookingSystem bookingSystem59 = new booking.BookingSystem((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        booking.BookingSystem bookingSystem63 = new booking.BookingSystem((booking.Subject) parkingSpot60);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        bookingSystem63.update((booking.Subject) parkingSpot64);
        parkingSpot56.detach((booking.Observer) bookingSystem63);
        parkingSpot43.detach((booking.Observer) bookingSystem63);
        booking.ParkingSpot parkingSpot70 = new booking.ParkingSpot();
        parkingSpot70.occupySpot("hi!");
        booking.BookingSystem bookingSystem73 = new booking.BookingSystem((booking.Subject) parkingSpot70);
        booking.ParkingSpot parkingSpot74 = new booking.ParkingSpot();
        parkingSpot74.occupySpot("hi!");
        booking.BookingSystem bookingSystem77 = new booking.BookingSystem((booking.Subject) parkingSpot74);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        parkingSpot78.occupySpot("hi!");
        bookingSystem77.update((booking.Subject) parkingSpot78);
        parkingSpot70.detach((booking.Observer) bookingSystem77);
        bookingSystem63.update((booking.Subject) parkingSpot70);
        booking.ParkingSensor parkingSensor84 = new booking.ParkingSensor((booking.Subject) parkingSpot70);
        booking.ParkingSensor parkingSensor85 = new booking.ParkingSensor((booking.Subject) parkingSpot70);
        booking.ParkingSensor parkingSensor86 = new booking.ParkingSensor((booking.Subject) parkingSpot70);
        booking.BookingSystem bookingSystem87 = new booking.BookingSystem((booking.Subject) parkingSpot70);
        parkingSpot27.detach((booking.Observer) bookingSystem87);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.BookingReceiver bookingReceiver12 = new booking.BookingReceiver();
        java.lang.String str13 = bookingReceiver12.getAction();
        booking.UserType userType17 = null;
        booking.ExtendCommand extendCommand18 = new booking.ExtendCommand(bookingReceiver12, "hi!", "", 100, userType17);
        booking.UserType userType22 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand23 = new booking.BookCommand(bookingReceiver12, "hi!", "hi!", 100, userType22);
        booking.BookingReceiver bookingReceiver27 = new booking.BookingReceiver();
        booking.UserType userType31 = booking.UserType.FACULTY;
        bookingReceiver27.bookSpace("", "", 100, userType31);
        bookingReceiver12.extendBooking("", "", (int) 'a', userType31);
        double double34 = bookingReceiver0.getRate(userType31);
        booking.BookingReceiver bookingReceiver38 = new booking.BookingReceiver();
        java.lang.String str39 = bookingReceiver38.getAction();
        booking.UserType userType43 = null;
        booking.ExtendCommand extendCommand44 = new booking.ExtendCommand(bookingReceiver38, "hi!", "", 100, userType43);
        java.lang.String str45 = bookingReceiver38.getAction();
        booking.UserType userType49 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand50 = new booking.ExtendCommand(bookingReceiver38, "hi!", "hi!", (int) (byte) 0, userType49);
        booking.BookingReceiver bookingReceiver54 = new booking.BookingReceiver();
        java.lang.String str55 = bookingReceiver54.getAction();
        booking.UserType userType59 = null;
        booking.ExtendCommand extendCommand60 = new booking.ExtendCommand(bookingReceiver54, "hi!", "", 100, userType59);
        java.lang.String str61 = bookingReceiver54.getAction();
        booking.UserType userType65 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand66 = new booking.ExtendCommand(bookingReceiver54, "hi!", "hi!", (int) (byte) 0, userType65);
        booking.ExtendCommand extendCommand67 = new booking.ExtendCommand(bookingReceiver38, "CANCEL", "CANCEL", (int) (short) 1, userType65);
        booking.BookCommand bookCommand68 = new booking.BookCommand(bookingReceiver0, "CANCEL", "hi!", (int) (byte) 1, userType65);
        booking.BookingReceiver bookingReceiver72 = new booking.BookingReceiver();
        java.lang.String str73 = bookingReceiver72.getAction();
        booking.UserType userType77 = null;
        booking.ExtendCommand extendCommand78 = new booking.ExtendCommand(bookingReceiver72, "hi!", "", 100, userType77);
        java.lang.String str79 = bookingReceiver72.getAction();
        booking.UserType userType83 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand84 = new booking.ExtendCommand(bookingReceiver72, "hi!", "hi!", (int) (byte) 0, userType83);
        double double85 = bookingReceiver72.getAmount();
        booking.BookingReceiver bookingReceiver89 = new booking.BookingReceiver();
        bookingReceiver89.cancelBooking("hi!", "hi!");
        booking.UserType userType93 = booking.UserType.STUDENT;
        double double94 = bookingReceiver89.getRate(userType93);
        booking.BookCommand bookCommand95 = new booking.BookCommand(bookingReceiver72, "EXTEND", "", (int) (byte) 10, userType93);
        booking.BookCommand bookCommand96 = new booking.BookCommand(bookingReceiver0, "BOOK", "EXTEND", 1, userType93);
        bookCommand96.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + userType22 + "' != '" + booking.UserType.FACULTY + "'", userType22.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.0d + "'", double34 == 8.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + userType49 + "' != '" + booking.UserType.NON_FACULTY + "'", userType49.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + userType65 + "' != '" + booking.UserType.NON_FACULTY + "'", userType65.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + userType83 + "' != '" + booking.UserType.NON_FACULTY + "'", userType83.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + userType93 + "' != '" + booking.UserType.STUDENT + "'", userType93.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 5.0d + "'", double94 == 5.0d);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot15.detach((booking.Observer) parkingSensor30);
        bookingSystem7.update((booking.Subject) parkingSpot15);
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot15);
        java.lang.Class<?> wildcardClass34 = parkingSensor33.getClass();
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        booking.UserType userType4 = booking.UserType.STUDENT;
        double double5 = bookingReceiver0.getRate(userType4);
        booking.CancelCommand cancelCommand8 = new booking.CancelCommand(bookingReceiver0, "BOOK", "hi!");
        booking.BookingReceiver bookingReceiver12 = new booking.BookingReceiver();
        bookingReceiver12.cancelBooking("hi!", "hi!");
        bookingReceiver12.cancelBooking("", "");
        booking.UserType userType19 = booking.UserType.STUDENT;
        double double20 = bookingReceiver12.getRate(userType19);
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver0, "", "hi!", (int) '#', userType19);
        bookCommand21.doAction();
        bookCommand21.doAction();
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.STUDENT + "'", userType4.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 5.0d + "'", double5 == 5.0d);
        org.junit.Assert.assertTrue("'" + userType19 + "' != '" + booking.UserType.STUDENT + "'", userType19.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5.0d + "'", double20 == 5.0d);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor5 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        booking.BookingSystem bookingSystem13 = new booking.BookingSystem((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot14 = new booking.ParkingSpot();
        parkingSpot14.occupySpot("hi!");
        bookingSystem13.update((booking.Subject) parkingSpot14);
        parkingSpot6.detach((booking.Observer) bookingSystem13);
        parkingSensor5.update((booking.Subject) parkingSpot6);
        booking.ParkingSensor parkingSensor20 = new booking.ParkingSensor((booking.Subject) parkingSpot6);
        java.lang.String str21 = parkingSpot6.getLicensePlate();
        bookingSystem3.update((booking.Subject) parkingSpot6);
        booking.ParkingSensor parkingSensor23 = new booking.ParkingSensor((booking.Subject) parkingSpot6);
        parkingSpot6.occupySpot("hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        double double8 = bookingReceiver0.getDeposit();
        double double9 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver13 = new booking.BookingReceiver();
        java.lang.String str14 = bookingReceiver13.getAction();
        booking.UserType userType18 = null;
        booking.ExtendCommand extendCommand19 = new booking.ExtendCommand(bookingReceiver13, "hi!", "", 100, userType18);
        java.lang.String str20 = bookingReceiver13.getAction();
        bookingReceiver13.cancelBooking("BOOK", "CANCEL");
        booking.BookingReceiver bookingReceiver27 = new booking.BookingReceiver();
        java.lang.String str28 = bookingReceiver27.getAction();
        booking.UserType userType32 = null;
        booking.ExtendCommand extendCommand33 = new booking.ExtendCommand(bookingReceiver27, "hi!", "", 100, userType32);
        booking.UserType userType37 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand38 = new booking.BookCommand(bookingReceiver27, "hi!", "hi!", 100, userType37);
        booking.BookingReceiver bookingReceiver39 = new booking.BookingReceiver();
        java.lang.String str40 = bookingReceiver39.getAction();
        booking.UserType userType44 = null;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver39, "hi!", "", 100, userType44);
        booking.UserType userType49 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand50 = new booking.BookCommand(bookingReceiver39, "hi!", "hi!", 100, userType49);
        booking.BookingReceiver bookingReceiver54 = new booking.BookingReceiver();
        booking.UserType userType58 = booking.UserType.FACULTY;
        bookingReceiver54.bookSpace("", "", 100, userType58);
        bookingReceiver39.extendBooking("", "", (int) 'a', userType58);
        double double61 = bookingReceiver27.getRate(userType58);
        booking.ExtendCommand extendCommand62 = new booking.ExtendCommand(bookingReceiver13, "BOOK", "", 100, userType58);
        booking.BookCommand bookCommand63 = new booking.BookCommand(bookingReceiver0, "BOOK", "BOOK", (int) (byte) 1, userType58);
        double double64 = bookingReceiver0.getAmount();
        java.lang.Class<?> wildcardClass65 = bookingReceiver0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + userType37 + "' != '" + booking.UserType.FACULTY + "'", userType37.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType49 + "' != '" + booking.UserType.FACULTY + "'", userType49.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType58 + "' != '" + booking.UserType.FACULTY + "'", userType58.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 8.0d + "'", double61 == 8.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.CancelCommand cancelCommand20 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        booking.UserType userType24 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand25 = new booking.BookCommand(bookingReceiver0, "", "CANCEL", (int) (byte) 1, userType24);
        booking.CancelCommand cancelCommand28 = new booking.CancelCommand(bookingReceiver0, "BOOK", "");
        bookingReceiver0.cancelBooking("EXTEND", "EXTEND");
        booking.BookingReceiver bookingReceiver35 = new booking.BookingReceiver();
        bookingReceiver35.cancelBooking("hi!", "hi!");
        booking.UserType userType39 = booking.UserType.STUDENT;
        double double40 = bookingReceiver35.getRate(userType39);
        double double41 = bookingReceiver35.getDeposit();
        java.lang.String str42 = bookingReceiver35.getAction();
        booking.BookingReceiver bookingReceiver46 = new booking.BookingReceiver();
        java.lang.String str47 = bookingReceiver46.getAction();
        booking.BookingReceiver bookingReceiver51 = new booking.BookingReceiver();
        bookingReceiver51.cancelBooking("hi!", "hi!");
        java.lang.String str55 = bookingReceiver51.getAction();
        booking.BookingReceiver bookingReceiver56 = null;
        booking.BookingReceiver bookingReceiver60 = new booking.BookingReceiver();
        booking.UserType userType64 = booking.UserType.FACULTY;
        bookingReceiver60.bookSpace("", "", 100, userType64);
        booking.BookCommand bookCommand66 = new booking.BookCommand(bookingReceiver56, "hi!", "", 0, userType64);
        double double67 = bookingReceiver51.getRate(userType64);
        booking.UserType userType71 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand72 = new booking.ExtendCommand(bookingReceiver51, "BOOK", "EXTEND", (int) (short) 10, userType71);
        booking.BookCommand bookCommand73 = new booking.BookCommand(bookingReceiver46, "CANCEL", "hi!", (int) ' ', userType71);
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver35, "", "", (int) '#', userType71);
        bookingReceiver0.extendBooking("BOOK", "", (int) ' ', userType71);
        booking.CancelCommand cancelCommand78 = new booking.CancelCommand(bookingReceiver0, "", "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + userType24 + "' != '" + booking.UserType.FACULTY + "'", userType24.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.STUDENT + "'", userType39.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5.0d + "'", double40 == 5.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "CANCEL" + "'", str42, "CANCEL");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "CANCEL" + "'", str55, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType64 + "' != '" + booking.UserType.FACULTY + "'", userType64.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 8.0d + "'", double67 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType71 + "' != '" + booking.UserType.FACULTY + "'", userType71.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        java.lang.String str41 = parkingSpot27.getLicensePlate();
        booking.ParkingSensor parkingSensor42 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        parkingSpot27.occupySpot("hi!");
        boolean boolean45 = parkingSpot27.isOccupied();
        boolean boolean46 = parkingSpot27.isOccupied();
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor11 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        bookingSystem9.update((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor27 = new booking.ParkingSensor((booking.Subject) parkingSpot26);
        booking.ParkingSpot parkingSpot28 = new booking.ParkingSpot();
        parkingSpot28.occupySpot("hi!");
        booking.BookingSystem bookingSystem31 = new booking.BookingSystem((booking.Subject) parkingSpot28);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.BookingSystem bookingSystem35 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        bookingSystem35.update((booking.Subject) parkingSpot36);
        parkingSpot28.detach((booking.Observer) bookingSystem35);
        parkingSensor27.update((booking.Subject) parkingSpot28);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor43 = new booking.ParkingSensor((booking.Subject) parkingSpot42);
        parkingSpot28.detach((booking.Observer) parkingSensor43);
        bookingSystem20.update((booking.Subject) parkingSpot28);
        booking.ParkingSensor parkingSensor46 = new booking.ParkingSensor((booking.Subject) parkingSpot28);
        parkingSpot10.detach((booking.Observer) parkingSensor46);
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot10);
        boolean boolean49 = parkingSpot10.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        java.lang.String str4 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver5 = null;
        booking.BookingReceiver bookingReceiver9 = new booking.BookingReceiver();
        booking.UserType userType13 = booking.UserType.FACULTY;
        bookingReceiver9.bookSpace("", "", 100, userType13);
        booking.BookCommand bookCommand15 = new booking.BookCommand(bookingReceiver5, "hi!", "", 0, userType13);
        double double16 = bookingReceiver0.getRate(userType13);
        double double17 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        bookingReceiver21.cancelBooking("hi!", "hi!");
        double double25 = bookingReceiver21.getAmount();
        bookingReceiver21.cancelBooking("EXTEND", "hi!");
        booking.BookingReceiver bookingReceiver29 = new booking.BookingReceiver();
        java.lang.String str30 = bookingReceiver29.getAction();
        booking.UserType userType34 = null;
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver29, "hi!", "", 100, userType34);
        booking.BookingReceiver bookingReceiver39 = new booking.BookingReceiver();
        java.lang.String str40 = bookingReceiver39.getAction();
        booking.UserType userType44 = null;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver39, "hi!", "", 100, userType44);
        booking.UserType userType49 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand50 = new booking.BookCommand(bookingReceiver39, "hi!", "hi!", 100, userType49);
        booking.BookingReceiver bookingReceiver54 = new booking.BookingReceiver();
        booking.UserType userType58 = booking.UserType.FACULTY;
        bookingReceiver54.bookSpace("", "", 100, userType58);
        bookingReceiver39.extendBooking("", "", (int) 'a', userType58);
        booking.ExtendCommand extendCommand61 = new booking.ExtendCommand(bookingReceiver29, "", "", 0, userType58);
        booking.BookingReceiver bookingReceiver62 = new booking.BookingReceiver();
        java.lang.String str63 = bookingReceiver62.getAction();
        booking.UserType userType67 = null;
        booking.ExtendCommand extendCommand68 = new booking.ExtendCommand(bookingReceiver62, "hi!", "", 100, userType67);
        java.lang.String str69 = bookingReceiver62.getAction();
        booking.UserType userType73 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver62, "hi!", "hi!", (int) (byte) 0, userType73);
        double double75 = bookingReceiver29.getRate(userType73);
        double double76 = bookingReceiver21.getRate(userType73);
        booking.BookingReceiver bookingReceiver80 = new booking.BookingReceiver();
        bookingReceiver80.cancelBooking("hi!", "hi!");
        booking.UserType userType84 = booking.UserType.STUDENT;
        double double85 = bookingReceiver80.getRate(userType84);
        booking.ExtendCommand extendCommand86 = new booking.ExtendCommand(bookingReceiver21, "", "CANCEL", (int) (byte) 100, userType84);
        booking.BookCommand bookCommand87 = new booking.BookCommand(bookingReceiver0, "hi!", "CANCEL", 0, userType84);
        booking.UserType userType88 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double89 = bookingReceiver0.getRate(userType88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.UserType.ordinal()\" because \"userType\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CANCEL" + "'", str4, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType13 + "' != '" + booking.UserType.FACULTY + "'", userType13.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 8.0d + "'", double16 == 8.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType49 + "' != '" + booking.UserType.FACULTY + "'", userType49.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType58 + "' != '" + booking.UserType.FACULTY + "'", userType58.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + userType73 + "' != '" + booking.UserType.NON_FACULTY + "'", userType73.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 10.0d + "'", double75 == 10.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 10.0d + "'", double76 == 10.0d);
        org.junit.Assert.assertTrue("'" + userType84 + "' != '" + booking.UserType.STUDENT + "'", userType84.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 5.0d + "'", double85 == 5.0d);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        booking.UserType userType4 = booking.UserType.STUDENT;
        double double5 = bookingReceiver0.getRate(userType4);
        double double6 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("", "BOOK");
        booking.CancelCommand cancelCommand12 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        booking.CancelCommand cancelCommand15 = new booking.CancelCommand(bookingReceiver0, "CANCEL", "BOOK");
        double double16 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("hi!", "");
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.STUDENT + "'", userType4.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 5.0d + "'", double5 == 5.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        parkingSpot4.occupySpot("CANCEL");
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem12 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem13 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot14 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor15 = new booking.ParkingSensor((booking.Subject) parkingSpot14);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        parkingSpot16.occupySpot("hi!");
        booking.BookingSystem bookingSystem19 = new booking.BookingSystem((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        parkingSpot20.occupySpot("hi!");
        booking.BookingSystem bookingSystem23 = new booking.BookingSystem((booking.Subject) parkingSpot20);
        booking.ParkingSpot parkingSpot24 = new booking.ParkingSpot();
        parkingSpot24.occupySpot("hi!");
        bookingSystem23.update((booking.Subject) parkingSpot24);
        parkingSpot16.detach((booking.Observer) bookingSystem23);
        parkingSensor15.update((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor31 = new booking.ParkingSensor((booking.Subject) parkingSpot30);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.BookingSystem bookingSystem35 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        booking.BookingSystem bookingSystem39 = new booking.BookingSystem((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        bookingSystem39.update((booking.Subject) parkingSpot40);
        parkingSpot32.detach((booking.Observer) bookingSystem39);
        parkingSensor31.update((booking.Subject) parkingSpot32);
        parkingSpot16.detach((booking.Observer) parkingSensor31);
        parkingSpot16.freeSpot();
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot16);
        bookingSystem13.update((booking.Subject) parkingSpot16);
        booking.ParkingSensor parkingSensor50 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        bookingSystem3.update((booking.Subject) parkingSpot4);
        parkingSpot4.freeSpot();
        parkingSpot4.occupySpot("CANCEL");
        booking.ParkingSensor parkingSensor11 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot12 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor13 = new booking.ParkingSensor((booking.Subject) parkingSpot12);
        booking.ParkingSpot parkingSpot14 = new booking.ParkingSpot();
        parkingSpot14.occupySpot("hi!");
        booking.BookingSystem bookingSystem17 = new booking.BookingSystem((booking.Subject) parkingSpot14);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        bookingSystem21.update((booking.Subject) parkingSpot22);
        parkingSpot14.detach((booking.Observer) bookingSystem21);
        parkingSensor13.update((booking.Subject) parkingSpot14);
        booking.ParkingSensor parkingSensor28 = new booking.ParkingSensor((booking.Subject) parkingSpot14);
        java.lang.String str29 = parkingSpot14.getLicensePlate();
        parkingSpot14.occupySpot("CANCEL");
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        booking.BookingSystem bookingSystem42 = new booking.BookingSystem((booking.Subject) parkingSpot39);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        parkingSpot43.occupySpot("hi!");
        bookingSystem42.update((booking.Subject) parkingSpot43);
        parkingSpot35.detach((booking.Observer) bookingSystem42);
        booking.ParkingSpot parkingSpot48 = new booking.ParkingSpot();
        parkingSpot48.occupySpot("hi!");
        booking.BookingSystem bookingSystem51 = new booking.BookingSystem((booking.Subject) parkingSpot48);
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        bookingSystem55.update((booking.Subject) parkingSpot56);
        parkingSpot48.detach((booking.Observer) bookingSystem55);
        parkingSpot35.detach((booking.Observer) bookingSystem55);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        booking.BookingSystem bookingSystem65 = new booking.BookingSystem((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        booking.BookingSystem bookingSystem69 = new booking.BookingSystem((booking.Subject) parkingSpot66);
        booking.ParkingSpot parkingSpot70 = new booking.ParkingSpot();
        parkingSpot70.occupySpot("hi!");
        bookingSystem69.update((booking.Subject) parkingSpot70);
        parkingSpot62.detach((booking.Observer) bookingSystem69);
        bookingSystem55.update((booking.Subject) parkingSpot62);
        parkingSpot32.attach((booking.Observer) bookingSystem55);
        parkingSpot14.detach((booking.Observer) bookingSystem55);
        parkingSpot14.occupySpot("");
        parkingSensor11.update((booking.Subject) parkingSpot14);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver5 = new booking.BookingReceiver();
        bookingReceiver5.cancelBooking("hi!", "hi!");
        java.lang.String str9 = bookingReceiver5.getAction();
        booking.BookingReceiver bookingReceiver10 = null;
        booking.BookingReceiver bookingReceiver14 = new booking.BookingReceiver();
        booking.UserType userType18 = booking.UserType.FACULTY;
        bookingReceiver14.bookSpace("", "", 100, userType18);
        booking.BookCommand bookCommand20 = new booking.BookCommand(bookingReceiver10, "hi!", "", 0, userType18);
        double double21 = bookingReceiver5.getRate(userType18);
        booking.UserType userType25 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand26 = new booking.ExtendCommand(bookingReceiver5, "BOOK", "EXTEND", (int) (short) 10, userType25);
        booking.BookCommand bookCommand27 = new booking.BookCommand(bookingReceiver0, "CANCEL", "hi!", (int) ' ', userType25);
        bookCommand27.doAction();
        bookCommand27.doAction();
        bookCommand27.doAction();
        bookCommand27.doAction();
        bookCommand27.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CANCEL" + "'", str9, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType18 + "' != '" + booking.UserType.FACULTY + "'", userType18.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 8.0d + "'", double21 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType25 + "' != '" + booking.UserType.FACULTY + "'", userType25.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        booking.BookingReceiver bookingReceiver33 = new booking.BookingReceiver();
        java.lang.String str34 = bookingReceiver33.getAction();
        booking.UserType userType38 = null;
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver33, "hi!", "", 100, userType38);
        java.lang.String str40 = bookingReceiver33.getAction();
        booking.UserType userType44 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand45 = new booking.ExtendCommand(bookingReceiver33, "hi!", "hi!", (int) (byte) 0, userType44);
        double double46 = bookingReceiver0.getRate(userType44);
        double double47 = bookingReceiver0.getDeposit();
        booking.UserType userType51 = null;
        booking.BookCommand bookCommand52 = new booking.BookCommand(bookingReceiver0, "hi!", "BOOK", (int) (short) 100, userType51);
        booking.BookingReceiver bookingReceiver56 = new booking.BookingReceiver();
        java.lang.String str57 = bookingReceiver56.getAction();
        booking.UserType userType61 = null;
        booking.ExtendCommand extendCommand62 = new booking.ExtendCommand(bookingReceiver56, "hi!", "", 100, userType61);
        booking.UserType userType66 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand67 = new booking.BookCommand(bookingReceiver56, "hi!", "hi!", 100, userType66);
        booking.UserType userType71 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand72 = new booking.ExtendCommand(bookingReceiver56, "", "", (int) (short) 1, userType71);
        bookingReceiver0.bookSpace("", "CANCEL", 100, userType71);
        java.lang.String str74 = bookingReceiver0.getAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + booking.UserType.NON_FACULTY + "'", userType44.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + userType66 + "' != '" + booking.UserType.FACULTY + "'", userType66.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType71 + "' != '" + booking.UserType.FACULTY + "'", userType71.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "BOOK" + "'", str74, "BOOK");
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.UserType userType4 = booking.UserType.FACULTY;
        bookingReceiver0.bookSpace("", "", 100, userType4);
        booking.UserType userType9 = null;
        booking.BookCommand bookCommand10 = new booking.BookCommand(bookingReceiver0, "CANCEL", "BOOK", (int) ' ', userType9);
        // The following exception was thrown during execution in test generation
        try {
            bookCommand10.doAction();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.UserType.ordinal()\" because \"userType\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.FACULTY + "'", userType4.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        bookingSystem3.update((booking.Subject) parkingSpot4);
        boolean boolean8 = parkingSpot4.isOccupied();
        booking.ParkingSensor parkingSensor9 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        booking.BookingSystem bookingSystem13 = new booking.BookingSystem((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot14 = new booking.ParkingSpot();
        parkingSpot14.occupySpot("hi!");
        booking.BookingSystem bookingSystem17 = new booking.BookingSystem((booking.Subject) parkingSpot14);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        bookingSystem17.update((booking.Subject) parkingSpot18);
        parkingSpot10.detach((booking.Observer) bookingSystem17);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        booking.BookingSystem bookingSystem26 = new booking.BookingSystem((booking.Subject) parkingSpot23);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        bookingSystem30.update((booking.Subject) parkingSpot31);
        parkingSpot23.detach((booking.Observer) bookingSystem30);
        parkingSpot10.detach((booking.Observer) bookingSystem30);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        booking.BookingSystem bookingSystem40 = new booking.BookingSystem((booking.Subject) parkingSpot37);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.occupySpot("hi!");
        booking.BookingSystem bookingSystem44 = new booking.BookingSystem((booking.Subject) parkingSpot41);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        bookingSystem44.update((booking.Subject) parkingSpot45);
        parkingSpot37.detach((booking.Observer) bookingSystem44);
        bookingSystem30.update((booking.Subject) parkingSpot37);
        boolean boolean51 = parkingSpot37.isOccupied();
        booking.ParkingSensor parkingSensor52 = new booking.ParkingSensor((booking.Subject) parkingSpot37);
        parkingSpot37.occupySpot("BOOK");
        parkingSensor9.update((booking.Subject) parkingSpot37);
        booking.Subject subject56 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingSensor9.update(subject56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Object.equals(Object)\" because \"changedSubject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        double double7 = bookingReceiver0.getDeposit();
        java.lang.String str8 = bookingReceiver0.getAction();
        double double9 = bookingReceiver0.getDeposit();
        booking.BookingReceiver bookingReceiver13 = new booking.BookingReceiver();
        java.lang.String str14 = bookingReceiver13.getAction();
        double double15 = bookingReceiver13.getDeposit();
        booking.BookingReceiver bookingReceiver19 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver23 = new booking.BookingReceiver();
        java.lang.String str24 = bookingReceiver23.getAction();
        booking.UserType userType28 = null;
        booking.ExtendCommand extendCommand29 = new booking.ExtendCommand(bookingReceiver23, "hi!", "", 100, userType28);
        java.lang.String str30 = bookingReceiver23.getAction();
        booking.UserType userType34 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver23, "hi!", "hi!", (int) (byte) 0, userType34);
        booking.ExtendCommand extendCommand36 = new booking.ExtendCommand(bookingReceiver19, "", "", (int) (byte) 100, userType34);
        booking.BookingReceiver bookingReceiver40 = new booking.BookingReceiver();
        java.lang.String str41 = bookingReceiver40.getAction();
        booking.UserType userType45 = null;
        booking.ExtendCommand extendCommand46 = new booking.ExtendCommand(bookingReceiver40, "hi!", "", 100, userType45);
        booking.UserType userType50 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand51 = new booking.BookCommand(bookingReceiver40, "hi!", "hi!", 100, userType50);
        bookingReceiver19.bookSpace("hi!", "hi!", (int) (short) -1, userType50);
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver13, "EXTEND", "BOOK", (int) (byte) -1, userType50);
        bookingReceiver0.bookSpace("BOOK", "CANCEL", (int) (short) 0, userType50);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        bookingReceiver58.cancelBooking("hi!", "hi!");
        double double62 = bookingReceiver58.getAmount();
        bookingReceiver58.cancelBooking("EXTEND", "hi!");
        java.lang.String str66 = bookingReceiver58.getAction();
        booking.BookingReceiver bookingReceiver70 = new booking.BookingReceiver();
        bookingReceiver70.cancelBooking("hi!", "hi!");
        booking.UserType userType74 = booking.UserType.STUDENT;
        double double75 = bookingReceiver70.getRate(userType74);
        booking.CancelCommand cancelCommand78 = new booking.CancelCommand(bookingReceiver70, "BOOK", "hi!");
        booking.BookingReceiver bookingReceiver82 = new booking.BookingReceiver();
        bookingReceiver82.cancelBooking("hi!", "hi!");
        bookingReceiver82.cancelBooking("", "");
        booking.UserType userType89 = booking.UserType.STUDENT;
        double double90 = bookingReceiver82.getRate(userType89);
        booking.BookCommand bookCommand91 = new booking.BookCommand(bookingReceiver70, "", "hi!", (int) '#', userType89);
        bookingReceiver58.bookSpace("", "hi!", (int) 'a', userType89);
        bookingReceiver0.bookSpace("BOOK", "EXTEND", (int) (short) 100, userType89);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + userType34 + "' != '" + booking.UserType.NON_FACULTY + "'", userType34.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + userType50 + "' != '" + booking.UserType.FACULTY + "'", userType50.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "CANCEL" + "'", str66, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType74 + "' != '" + booking.UserType.STUDENT + "'", userType74.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 5.0d + "'", double75 == 5.0d);
        org.junit.Assert.assertTrue("'" + userType89 + "' != '" + booking.UserType.STUDENT + "'", userType89.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 5.0d + "'", double90 == 5.0d);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        double double7 = bookingReceiver0.getDeposit();
        double double8 = bookingReceiver0.getDeposit();
        double double9 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver13 = new booking.BookingReceiver();
        java.lang.String str14 = bookingReceiver13.getAction();
        booking.UserType userType18 = null;
        booking.ExtendCommand extendCommand19 = new booking.ExtendCommand(bookingReceiver13, "hi!", "", 100, userType18);
        booking.UserType userType23 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand24 = new booking.BookCommand(bookingReceiver13, "hi!", "hi!", 100, userType23);
        booking.BookingReceiver bookingReceiver28 = new booking.BookingReceiver();
        booking.UserType userType32 = booking.UserType.FACULTY;
        bookingReceiver28.bookSpace("", "", 100, userType32);
        bookingReceiver13.extendBooking("", "", (int) 'a', userType32);
        booking.UserType userType35 = booking.UserType.NON_FACULTY;
        double double36 = bookingReceiver13.getRate(userType35);
        bookingReceiver13.cancelBooking("BOOK", "hi!");
        java.lang.String str40 = bookingReceiver13.getAction();
        double double41 = bookingReceiver13.getDeposit();
        booking.BookingReceiver bookingReceiver45 = new booking.BookingReceiver();
        java.lang.String str46 = bookingReceiver45.getAction();
        double double47 = bookingReceiver45.getDeposit();
        booking.BookingReceiver bookingReceiver51 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver55 = new booking.BookingReceiver();
        java.lang.String str56 = bookingReceiver55.getAction();
        booking.UserType userType60 = null;
        booking.ExtendCommand extendCommand61 = new booking.ExtendCommand(bookingReceiver55, "hi!", "", 100, userType60);
        java.lang.String str62 = bookingReceiver55.getAction();
        booking.UserType userType66 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand67 = new booking.ExtendCommand(bookingReceiver55, "hi!", "hi!", (int) (byte) 0, userType66);
        booking.ExtendCommand extendCommand68 = new booking.ExtendCommand(bookingReceiver51, "", "", (int) (byte) 100, userType66);
        booking.BookingReceiver bookingReceiver72 = new booking.BookingReceiver();
        java.lang.String str73 = bookingReceiver72.getAction();
        booking.UserType userType77 = null;
        booking.ExtendCommand extendCommand78 = new booking.ExtendCommand(bookingReceiver72, "hi!", "", 100, userType77);
        booking.UserType userType82 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand83 = new booking.BookCommand(bookingReceiver72, "hi!", "hi!", 100, userType82);
        bookingReceiver51.bookSpace("hi!", "hi!", (int) (short) -1, userType82);
        booking.ExtendCommand extendCommand85 = new booking.ExtendCommand(bookingReceiver45, "EXTEND", "BOOK", (int) (byte) -1, userType82);
        booking.ExtendCommand extendCommand86 = new booking.ExtendCommand(bookingReceiver13, "CANCEL", "", 0, userType82);
        booking.BookCommand bookCommand87 = new booking.BookCommand(bookingReceiver0, "hi!", "EXTEND", (int) (byte) 100, userType82);
        double double88 = bookingReceiver0.getDeposit();
        booking.CancelCommand cancelCommand91 = new booking.CancelCommand(bookingReceiver0, "BOOK", "");
        booking.UserType userType95 = booking.UserType.NON_FACULTY;
        bookingReceiver0.bookSpace("BOOK", "hi!", (int) ' ', userType95);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + userType23 + "' != '" + booking.UserType.FACULTY + "'", userType23.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType32 + "' != '" + booking.UserType.FACULTY + "'", userType32.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType35 + "' != '" + booking.UserType.NON_FACULTY + "'", userType35.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CANCEL" + "'", str40, "CANCEL");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + userType66 + "' != '" + booking.UserType.NON_FACULTY + "'", userType66.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + userType82 + "' != '" + booking.UserType.FACULTY + "'", userType82.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + userType95 + "' != '" + booking.UserType.NON_FACULTY + "'", userType95.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        java.lang.String str4 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver5 = null;
        booking.BookingReceiver bookingReceiver9 = new booking.BookingReceiver();
        booking.UserType userType13 = booking.UserType.FACULTY;
        bookingReceiver9.bookSpace("", "", 100, userType13);
        booking.BookCommand bookCommand15 = new booking.BookCommand(bookingReceiver5, "hi!", "", 0, userType13);
        double double16 = bookingReceiver0.getRate(userType13);
        double double17 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CANCEL" + "'", str4, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType13 + "' != '" + booking.UserType.FACULTY + "'", userType13.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 8.0d + "'", double16 == 8.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        booking.BookingSystem bookingSystem24 = new booking.BookingSystem((booking.Subject) parkingSpot21);
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot21.occupySpot("CANCEL");
        booking.BookingSystem bookingSystem28 = new booking.BookingSystem((booking.Subject) parkingSpot21);
        parkingSpot21.freeSpot();
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot21);
        bookingSystem16.update((booking.Subject) parkingSpot21);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.BookingSystem bookingSystem35 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        bookingSystem35.update((booking.Subject) parkingSpot36);
        bookingSystem16.update((booking.Subject) parkingSpot36);
        java.lang.String str41 = parkingSpot36.getLicensePlate();
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        bookingSystem3.update((booking.Subject) parkingSpot4);
        parkingSpot4.freeSpot();
        java.lang.String str9 = parkingSpot4.getLicensePlate();
        parkingSpot4.freeSpot();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSpot2.detach((booking.Observer) bookingSystem22);
        parkingSpot2.occupySpot("CANCEL");
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        booking.BookingSystem bookingSystem41 = new booking.BookingSystem((booking.Subject) parkingSpot38);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        bookingSystem41.update((booking.Subject) parkingSpot42);
        parkingSpot34.detach((booking.Observer) bookingSystem41);
        parkingSensor33.update((booking.Subject) parkingSpot34);
        parkingSpot2.detach((booking.Observer) parkingSensor33);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        booking.BookingSystem bookingSystem56 = new booking.BookingSystem((booking.Subject) parkingSpot53);
        booking.ParkingSpot parkingSpot57 = new booking.ParkingSpot();
        parkingSpot57.occupySpot("hi!");
        bookingSystem56.update((booking.Subject) parkingSpot57);
        parkingSpot49.detach((booking.Observer) bookingSystem56);
        parkingSpot49.freeSpot();
        parkingSensor33.update((booking.Subject) parkingSpot49);
        java.lang.Class<?> wildcardClass64 = parkingSpot49.getClass();
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        booking.CancelCommand cancelCommand15 = new booking.CancelCommand(bookingReceiver0, "hi!", "BOOK");
        cancelCommand15.doAction();
        cancelCommand15.doAction();
        cancelCommand15.doAction();
        cancelCommand15.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        parkingSpot4.occupySpot("CANCEL");
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem12 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem13 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        boolean boolean14 = parkingSpot4.isOccupied();
        booking.ParkingSensor parkingSensor15 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        booking.BookingReceiver bookingReceiver0 = null;
        booking.CancelCommand cancelCommand3 = new booking.CancelCommand(bookingReceiver0, "EXTEND", "hi!");
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        boolean boolean13 = parkingSpot0.isOccupied();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        bookingSystem18.update((booking.Subject) parkingSpot19);
        booking.BookingSystem bookingSystem24 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot25 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor26 = new booking.ParkingSensor((booking.Subject) parkingSpot25);
        bookingSystem24.update((booking.Subject) parkingSpot25);
        booking.ParkingSpot parkingSpot28 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor29 = new booking.ParkingSensor((booking.Subject) parkingSpot28);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        booking.BookingSystem bookingSystem33 = new booking.BookingSystem((booking.Subject) parkingSpot30);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        bookingSystem37.update((booking.Subject) parkingSpot38);
        parkingSpot30.detach((booking.Observer) bookingSystem37);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        parkingSpot43.occupySpot("hi!");
        booking.BookingSystem bookingSystem46 = new booking.BookingSystem((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot47 = new booking.ParkingSpot();
        parkingSpot47.occupySpot("hi!");
        booking.BookingSystem bookingSystem50 = new booking.BookingSystem((booking.Subject) parkingSpot47);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        bookingSystem50.update((booking.Subject) parkingSpot51);
        parkingSpot43.detach((booking.Observer) bookingSystem50);
        parkingSpot30.detach((booking.Observer) bookingSystem50);
        parkingSpot30.occupySpot("CANCEL");
        parkingSensor29.update((booking.Subject) parkingSpot30);
        bookingSystem24.update((booking.Subject) parkingSpot30);
        parkingSensor14.update((booking.Subject) parkingSpot30);
        boolean boolean62 = parkingSpot30.isOccupied();
        java.lang.Class<?> wildcardClass63 = parkingSpot30.getClass();
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSpot2.detach((booking.Observer) bookingSystem22);
        parkingSpot2.occupySpot("CANCEL");
        parkingSensor1.update((booking.Subject) parkingSpot2);
        parkingSpot2.freeSpot();
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        double double7 = bookingReceiver0.getDeposit();
        double double8 = bookingReceiver0.getDeposit();
        java.lang.String str9 = bookingReceiver0.getAction();
        booking.CancelCommand cancelCommand12 = new booking.CancelCommand(bookingReceiver0, "hi!", "");
        booking.BookingReceiver bookingReceiver16 = new booking.BookingReceiver();
        bookingReceiver16.cancelBooking("hi!", "hi!");
        booking.BookingReceiver bookingReceiver23 = null;
        booking.BookingReceiver bookingReceiver27 = new booking.BookingReceiver();
        booking.UserType userType31 = booking.UserType.FACULTY;
        bookingReceiver27.bookSpace("", "", 100, userType31);
        booking.BookCommand bookCommand33 = new booking.BookCommand(bookingReceiver23, "hi!", "", 0, userType31);
        bookingReceiver16.extendBooking("hi!", "BOOK", 1, userType31);
        booking.BookingReceiver bookingReceiver38 = new booking.BookingReceiver();
        java.lang.String str39 = bookingReceiver38.getAction();
        booking.UserType userType43 = null;
        booking.ExtendCommand extendCommand44 = new booking.ExtendCommand(bookingReceiver38, "hi!", "", 100, userType43);
        booking.BookingReceiver bookingReceiver48 = new booking.BookingReceiver();
        java.lang.String str49 = bookingReceiver48.getAction();
        booking.UserType userType53 = null;
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver48, "hi!", "", 100, userType53);
        booking.UserType userType58 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand59 = new booking.BookCommand(bookingReceiver48, "hi!", "hi!", 100, userType58);
        booking.BookingReceiver bookingReceiver63 = new booking.BookingReceiver();
        booking.UserType userType67 = booking.UserType.FACULTY;
        bookingReceiver63.bookSpace("", "", 100, userType67);
        bookingReceiver48.extendBooking("", "", (int) 'a', userType67);
        booking.ExtendCommand extendCommand70 = new booking.ExtendCommand(bookingReceiver38, "", "", 0, userType67);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver16, "BOOK", "", (int) (short) 0, userType67);
        booking.BookCommand bookCommand72 = new booking.BookCommand(bookingReceiver0, "hi!", "CANCEL", 1, userType67);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + userType58 + "' != '" + booking.UserType.FACULTY + "'", userType58.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType67 + "' != '" + booking.UserType.FACULTY + "'", userType67.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        booking.UserType userType12 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand13 = new booking.BookCommand(bookingReceiver2, "hi!", "hi!", 100, userType12);
        bookCommand13.doAction();
        bookCommand13.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand13);
        booking.BookingReceiver bookingReceiver17 = new booking.BookingReceiver();
        bookingReceiver17.cancelBooking("hi!", "hi!");
        bookingReceiver17.cancelBooking("", "");
        booking.CancelCommand cancelCommand26 = new booking.CancelCommand(bookingReceiver17, "", "hi!");
        cancelCommand26.doAction();
        commandInvoker0.setCommand((booking.ICommand) cancelCommand26);
        booking.ICommand iCommand29 = null;
        commandInvoker0.setCommand(iCommand29);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + booking.UserType.FACULTY + "'", userType12.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        parkingSpot2.detach((booking.Observer) parkingSensor17);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        parkingSensor17.update((booking.Subject) parkingSpot19);
        booking.ParkingSensor parkingSensor24 = new booking.ParkingSensor((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot25 = new booking.ParkingSpot();
        parkingSpot25.occupySpot("hi!");
        booking.BookingSystem bookingSystem28 = new booking.BookingSystem((booking.Subject) parkingSpot25);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        parkingSpot29.occupySpot("hi!");
        booking.BookingSystem bookingSystem32 = new booking.BookingSystem((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        bookingSystem32.update((booking.Subject) parkingSpot33);
        parkingSpot25.detach((booking.Observer) bookingSystem32);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        booking.BookingSystem bookingSystem41 = new booking.BookingSystem((booking.Subject) parkingSpot38);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        booking.BookingSystem bookingSystem45 = new booking.BookingSystem((booking.Subject) parkingSpot42);
        booking.ParkingSpot parkingSpot46 = new booking.ParkingSpot();
        parkingSpot46.occupySpot("hi!");
        bookingSystem45.update((booking.Subject) parkingSpot46);
        parkingSpot38.detach((booking.Observer) bookingSystem45);
        parkingSpot25.detach((booking.Observer) bookingSystem45);
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        booking.BookingSystem bookingSystem59 = new booking.BookingSystem((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        bookingSystem59.update((booking.Subject) parkingSpot60);
        parkingSpot52.detach((booking.Observer) bookingSystem59);
        bookingSystem45.update((booking.Subject) parkingSpot52);
        parkingSpot52.freeSpot();
        booking.ParkingSensor parkingSensor67 = new booking.ParkingSensor((booking.Subject) parkingSpot52);
        parkingSpot19.detach((booking.Observer) parkingSensor67);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        java.lang.String str48 = bookingReceiver41.getAction();
        booking.UserType userType52 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver41, "hi!", "hi!", (int) (byte) 0, userType52);
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver37, "", "", (int) (byte) 100, userType52);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        booking.UserType userType68 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand69 = new booking.BookCommand(bookingReceiver58, "hi!", "hi!", 100, userType68);
        bookingReceiver37.bookSpace("hi!", "hi!", (int) (short) -1, userType68);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType68);
        booking.CancelCommand cancelCommand74 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        booking.UserType userType78 = null;
        booking.ExtendCommand extendCommand79 = new booking.ExtendCommand(bookingReceiver0, "", "BOOK", (-1), userType78);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + booking.UserType.NON_FACULTY + "'", userType52.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType68 + "' != '" + booking.UserType.FACULTY + "'", userType68.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        booking.BookingSystem bookingSystem54 = new booking.BookingSystem((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot55);
        booking.ParkingSpot parkingSpot59 = new booking.ParkingSpot();
        parkingSpot59.occupySpot("hi!");
        bookingSystem58.update((booking.Subject) parkingSpot59);
        parkingSpot51.detach((booking.Observer) bookingSystem58);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        bookingSystem71.update((booking.Subject) parkingSpot72);
        parkingSpot64.detach((booking.Observer) bookingSystem71);
        parkingSpot51.detach((booking.Observer) bookingSystem71);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        parkingSpot78.occupySpot("hi!");
        booking.BookingSystem bookingSystem81 = new booking.BookingSystem((booking.Subject) parkingSpot78);
        booking.ParkingSpot parkingSpot82 = new booking.ParkingSpot();
        parkingSpot82.occupySpot("hi!");
        booking.BookingSystem bookingSystem85 = new booking.BookingSystem((booking.Subject) parkingSpot82);
        booking.ParkingSpot parkingSpot86 = new booking.ParkingSpot();
        parkingSpot86.occupySpot("hi!");
        bookingSystem85.update((booking.Subject) parkingSpot86);
        parkingSpot78.detach((booking.Observer) bookingSystem85);
        bookingSystem71.update((booking.Subject) parkingSpot78);
        booking.ParkingSensor parkingSensor92 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        parkingSensor1.update((booking.Subject) parkingSpot78);
        booking.ParkingSensor parkingSensor94 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        boolean boolean95 = parkingSpot78.isOccupied();
        boolean boolean96 = parkingSpot78.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        extendCommand32.doAction();
        extendCommand32.doAction();
        extendCommand32.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        parkingSpot4.occupySpot("CANCEL");
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        java.lang.String str12 = parkingSpot4.getLicensePlate();
        parkingSpot4.freeSpot();
        java.lang.String str14 = parkingSpot4.getLicensePlate();
        parkingSpot4.occupySpot("hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        booking.BookingReceiver bookingReceiver0 = null;
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        booking.BookingReceiver bookingReceiver14 = new booking.BookingReceiver();
        java.lang.String str15 = bookingReceiver14.getAction();
        booking.UserType userType19 = null;
        booking.ExtendCommand extendCommand20 = new booking.ExtendCommand(bookingReceiver14, "hi!", "", 100, userType19);
        booking.UserType userType24 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand25 = new booking.BookCommand(bookingReceiver14, "hi!", "hi!", 100, userType24);
        booking.BookingReceiver bookingReceiver29 = new booking.BookingReceiver();
        booking.UserType userType33 = booking.UserType.FACULTY;
        bookingReceiver29.bookSpace("", "", 100, userType33);
        bookingReceiver14.extendBooking("", "", (int) 'a', userType33);
        bookingReceiver4.extendBooking("hi!", "", 0, userType33);
        booking.ExtendCommand extendCommand37 = new booking.ExtendCommand(bookingReceiver0, "hi!", "CANCEL", (int) (short) 1, userType33);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + userType24 + "' != '" + booking.UserType.FACULTY + "'", userType24.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType33 + "' != '" + booking.UserType.FACULTY + "'", userType33.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        double double4 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("EXTEND", "hi!");
        booking.BookingReceiver bookingReceiver11 = new booking.BookingReceiver();
        java.lang.String str12 = bookingReceiver11.getAction();
        booking.UserType userType16 = null;
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver11, "hi!", "", 100, userType16);
        java.lang.String str18 = bookingReceiver11.getAction();
        booking.UserType userType22 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver11, "hi!", "hi!", (int) (byte) 0, userType22);
        booking.BookingReceiver bookingReceiver27 = new booking.BookingReceiver();
        java.lang.String str28 = bookingReceiver27.getAction();
        booking.UserType userType32 = null;
        booking.ExtendCommand extendCommand33 = new booking.ExtendCommand(bookingReceiver27, "hi!", "", 100, userType32);
        booking.UserType userType37 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand38 = new booking.BookCommand(bookingReceiver27, "hi!", "hi!", 100, userType37);
        booking.BookingReceiver bookingReceiver42 = new booking.BookingReceiver();
        booking.UserType userType46 = booking.UserType.FACULTY;
        bookingReceiver42.bookSpace("", "", 100, userType46);
        bookingReceiver27.extendBooking("", "", (int) 'a', userType46);
        bookingReceiver11.bookSpace("EXTEND", "hi!", (int) (byte) 1, userType46);
        bookingReceiver0.bookSpace("CANCEL", "", 0, userType46);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + userType22 + "' != '" + booking.UserType.NON_FACULTY + "'", userType22.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + userType37 + "' != '" + booking.UserType.FACULTY + "'", userType37.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType46 + "' != '" + booking.UserType.FACULTY + "'", userType46.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        parkingSpot4.occupySpot("CANCEL");
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem12 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor27 = new booking.ParkingSensor((booking.Subject) parkingSpot26);
        booking.ParkingSpot parkingSpot28 = new booking.ParkingSpot();
        parkingSpot28.occupySpot("hi!");
        booking.BookingSystem bookingSystem31 = new booking.BookingSystem((booking.Subject) parkingSpot28);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.BookingSystem bookingSystem35 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        bookingSystem35.update((booking.Subject) parkingSpot36);
        parkingSpot28.detach((booking.Observer) bookingSystem35);
        parkingSensor27.update((booking.Subject) parkingSpot28);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor43 = new booking.ParkingSensor((booking.Subject) parkingSpot42);
        parkingSpot28.detach((booking.Observer) parkingSensor43);
        bookingSystem20.update((booking.Subject) parkingSpot28);
        parkingSpot28.occupySpot("BOOK");
        booking.ParkingSpot parkingSpot48 = new booking.ParkingSpot();
        parkingSpot48.occupySpot("hi!");
        booking.BookingSystem bookingSystem51 = new booking.BookingSystem((booking.Subject) parkingSpot48);
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        bookingSystem51.update((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot57 = new booking.ParkingSpot();
        parkingSpot57.occupySpot("hi!");
        booking.BookingSystem bookingSystem60 = new booking.BookingSystem((booking.Subject) parkingSpot57);
        booking.ParkingSpot parkingSpot61 = new booking.ParkingSpot();
        parkingSpot61.occupySpot("hi!");
        booking.BookingSystem bookingSystem64 = new booking.BookingSystem((booking.Subject) parkingSpot61);
        bookingSystem60.update((booking.Subject) parkingSpot61);
        parkingSpot52.detach((booking.Observer) bookingSystem60);
        parkingSpot28.attach((booking.Observer) bookingSystem60);
        parkingSpot28.occupySpot("EXTEND");
        bookingSystem12.update((booking.Subject) parkingSpot28);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor41 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor42 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        parkingSpot27.freeSpot();
        java.lang.String str44 = parkingSpot27.getLicensePlate();
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.Subject subject8 = null;
        // The following exception was thrown during execution in test generation
        try {
            bookingSystem3.update(subject8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Object.equals(Object)\" because \"changedSubject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver14 = new booking.BookingReceiver();
        java.lang.String str15 = bookingReceiver14.getAction();
        booking.UserType userType19 = null;
        booking.ExtendCommand extendCommand20 = new booking.ExtendCommand(bookingReceiver14, "hi!", "", 100, userType19);
        booking.UserType userType24 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand25 = new booking.BookCommand(bookingReceiver14, "hi!", "hi!", 100, userType24);
        booking.BookingReceiver bookingReceiver29 = new booking.BookingReceiver();
        booking.UserType userType33 = booking.UserType.FACULTY;
        bookingReceiver29.bookSpace("", "", 100, userType33);
        bookingReceiver14.extendBooking("", "", (int) 'a', userType33);
        booking.UserType userType36 = booking.UserType.NON_FACULTY;
        double double37 = bookingReceiver14.getRate(userType36);
        booking.BookingReceiver bookingReceiver38 = null;
        booking.BookingReceiver bookingReceiver42 = new booking.BookingReceiver();
        bookingReceiver42.cancelBooking("hi!", "hi!");
        booking.UserType userType46 = booking.UserType.STUDENT;
        double double47 = bookingReceiver42.getRate(userType46);
        booking.BookCommand bookCommand48 = new booking.BookCommand(bookingReceiver38, "BOOK", "hi!", 0, userType46);
        double double49 = bookingReceiver14.getRate(userType46);
        bookingReceiver0.extendBooking("EXTEND", "EXTEND", 0, userType46);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + userType24 + "' != '" + booking.UserType.FACULTY + "'", userType24.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType33 + "' != '" + booking.UserType.FACULTY + "'", userType33.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType36 + "' != '" + booking.UserType.NON_FACULTY + "'", userType36.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertTrue("'" + userType46 + "' != '" + booking.UserType.STUDENT + "'", userType46.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 5.0d + "'", double47 == 5.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 5.0d + "'", double49 == 5.0d);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        parkingSpot3.occupySpot("hi!");
        booking.BookingSystem bookingSystem6 = new booking.BookingSystem((booking.Subject) parkingSpot3);
        booking.ParkingSpot parkingSpot7 = new booking.ParkingSpot();
        parkingSpot7.occupySpot("hi!");
        booking.BookingSystem bookingSystem10 = new booking.BookingSystem((booking.Subject) parkingSpot7);
        booking.ParkingSpot parkingSpot11 = new booking.ParkingSpot();
        parkingSpot11.occupySpot("hi!");
        bookingSystem10.update((booking.Subject) parkingSpot11);
        parkingSpot3.detach((booking.Observer) bookingSystem10);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        parkingSpot16.occupySpot("hi!");
        booking.BookingSystem bookingSystem19 = new booking.BookingSystem((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        parkingSpot20.occupySpot("hi!");
        booking.BookingSystem bookingSystem23 = new booking.BookingSystem((booking.Subject) parkingSpot20);
        booking.ParkingSpot parkingSpot24 = new booking.ParkingSpot();
        parkingSpot24.occupySpot("hi!");
        bookingSystem23.update((booking.Subject) parkingSpot24);
        parkingSpot16.detach((booking.Observer) bookingSystem23);
        parkingSpot3.detach((booking.Observer) bookingSystem23);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        booking.BookingSystem bookingSystem33 = new booking.BookingSystem((booking.Subject) parkingSpot30);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        bookingSystem37.update((booking.Subject) parkingSpot38);
        parkingSpot30.detach((booking.Observer) bookingSystem37);
        bookingSystem23.update((booking.Subject) parkingSpot30);
        parkingSpot0.attach((booking.Observer) bookingSystem23);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor46 = new booking.ParkingSensor((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot47 = new booking.ParkingSpot();
        parkingSpot47.occupySpot("hi!");
        booking.BookingSystem bookingSystem50 = new booking.BookingSystem((booking.Subject) parkingSpot47);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        booking.BookingSystem bookingSystem54 = new booking.BookingSystem((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        bookingSystem54.update((booking.Subject) parkingSpot55);
        parkingSpot47.detach((booking.Observer) bookingSystem54);
        parkingSensor46.update((booking.Subject) parkingSpot47);
        booking.ParkingSpot parkingSpot61 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor62 = new booking.ParkingSensor((booking.Subject) parkingSpot61);
        booking.ParkingSpot parkingSpot63 = new booking.ParkingSpot();
        parkingSpot63.occupySpot("hi!");
        booking.BookingSystem bookingSystem66 = new booking.BookingSystem((booking.Subject) parkingSpot63);
        booking.ParkingSpot parkingSpot67 = new booking.ParkingSpot();
        parkingSpot67.occupySpot("hi!");
        booking.BookingSystem bookingSystem70 = new booking.BookingSystem((booking.Subject) parkingSpot67);
        booking.ParkingSpot parkingSpot71 = new booking.ParkingSpot();
        parkingSpot71.occupySpot("hi!");
        bookingSystem70.update((booking.Subject) parkingSpot71);
        parkingSpot63.detach((booking.Observer) bookingSystem70);
        booking.ParkingSpot parkingSpot76 = new booking.ParkingSpot();
        parkingSpot76.occupySpot("hi!");
        booking.BookingSystem bookingSystem79 = new booking.BookingSystem((booking.Subject) parkingSpot76);
        booking.ParkingSpot parkingSpot80 = new booking.ParkingSpot();
        parkingSpot80.occupySpot("hi!");
        booking.BookingSystem bookingSystem83 = new booking.BookingSystem((booking.Subject) parkingSpot80);
        booking.ParkingSpot parkingSpot84 = new booking.ParkingSpot();
        parkingSpot84.occupySpot("hi!");
        bookingSystem83.update((booking.Subject) parkingSpot84);
        parkingSpot76.detach((booking.Observer) bookingSystem83);
        parkingSpot63.detach((booking.Observer) bookingSystem83);
        parkingSpot63.occupySpot("CANCEL");
        parkingSensor62.update((booking.Subject) parkingSpot63);
        parkingSensor46.update((booking.Subject) parkingSpot63);
        booking.ParkingSensor parkingSensor94 = new booking.ParkingSensor((booking.Subject) parkingSpot63);
        bookingSystem23.update((booking.Subject) parkingSpot63);
        java.lang.String str96 = parkingSpot63.getLicensePlate();
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "hi!" + "'", str96, "hi!");
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        parkingSpot4.occupySpot("CANCEL");
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        parkingSpot4.occupySpot("BOOK");
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        parkingSpot4.occupySpot("CANCEL");
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        booking.BookingSystem bookingSystem54 = new booking.BookingSystem((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot55);
        booking.ParkingSpot parkingSpot59 = new booking.ParkingSpot();
        parkingSpot59.occupySpot("hi!");
        bookingSystem58.update((booking.Subject) parkingSpot59);
        parkingSpot51.detach((booking.Observer) bookingSystem58);
        parkingSpot49.detach((booking.Observer) bookingSystem58);
        booking.ParkingSensor parkingSensor65 = new booking.ParkingSensor((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        booking.BookingSystem bookingSystem69 = new booking.BookingSystem((booking.Subject) parkingSpot66);
        booking.ParkingSpot parkingSpot70 = new booking.ParkingSpot();
        parkingSpot70.occupySpot("hi!");
        bookingSystem69.update((booking.Subject) parkingSpot70);
        parkingSpot70.freeSpot();
        booking.ParkingSpot parkingSpot75 = new booking.ParkingSpot();
        parkingSpot75.occupySpot("hi!");
        booking.BookingSystem bookingSystem78 = new booking.BookingSystem((booking.Subject) parkingSpot75);
        booking.ParkingSpot parkingSpot79 = new booking.ParkingSpot();
        parkingSpot79.occupySpot("hi!");
        booking.BookingSystem bookingSystem82 = new booking.BookingSystem((booking.Subject) parkingSpot79);
        booking.ParkingSpot parkingSpot83 = new booking.ParkingSpot();
        parkingSpot83.occupySpot("hi!");
        bookingSystem82.update((booking.Subject) parkingSpot83);
        parkingSpot75.detach((booking.Observer) bookingSystem82);
        parkingSpot70.detach((booking.Observer) bookingSystem82);
        parkingSpot70.freeSpot();
        parkingSensor65.update((booking.Subject) parkingSpot70);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver41 = new booking.BookingReceiver();
        java.lang.String str42 = bookingReceiver41.getAction();
        booking.UserType userType46 = null;
        booking.ExtendCommand extendCommand47 = new booking.ExtendCommand(bookingReceiver41, "hi!", "", 100, userType46);
        java.lang.String str48 = bookingReceiver41.getAction();
        booking.UserType userType52 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand53 = new booking.ExtendCommand(bookingReceiver41, "hi!", "hi!", (int) (byte) 0, userType52);
        booking.ExtendCommand extendCommand54 = new booking.ExtendCommand(bookingReceiver37, "", "", (int) (byte) 100, userType52);
        booking.BookingReceiver bookingReceiver58 = new booking.BookingReceiver();
        java.lang.String str59 = bookingReceiver58.getAction();
        booking.UserType userType63 = null;
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver58, "hi!", "", 100, userType63);
        booking.UserType userType68 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand69 = new booking.BookCommand(bookingReceiver58, "hi!", "hi!", 100, userType68);
        bookingReceiver37.bookSpace("hi!", "hi!", (int) (short) -1, userType68);
        booking.BookCommand bookCommand71 = new booking.BookCommand(bookingReceiver0, "hi!", "", 0, userType68);
        double double72 = bookingReceiver0.getAmount();
        java.lang.String str73 = bookingReceiver0.getAction();
        double double74 = bookingReceiver0.getAmount();
        java.lang.String str75 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver79 = new booking.BookingReceiver();
        bookingReceiver79.cancelBooking("hi!", "hi!");
        java.lang.String str83 = bookingReceiver79.getAction();
        booking.BookingReceiver bookingReceiver84 = null;
        booking.BookingReceiver bookingReceiver88 = new booking.BookingReceiver();
        booking.UserType userType92 = booking.UserType.FACULTY;
        bookingReceiver88.bookSpace("", "", 100, userType92);
        booking.BookCommand bookCommand94 = new booking.BookCommand(bookingReceiver84, "hi!", "", 0, userType92);
        double double95 = bookingReceiver79.getRate(userType92);
        bookingReceiver0.extendBooking("hi!", "", 1, userType92);
        bookingReceiver0.cancelBooking("", "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + booking.UserType.NON_FACULTY + "'", userType52.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + userType68 + "' != '" + booking.UserType.FACULTY + "'", userType68.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-8.0d) + "'", double72 == (-8.0d));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "BOOK" + "'", str73, "BOOK");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-8.0d) + "'", double74 == (-8.0d));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "BOOK" + "'", str75, "BOOK");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "CANCEL" + "'", str83, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType92 + "' != '" + booking.UserType.FACULTY + "'", userType92.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 8.0d + "'", double95 == 8.0d);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand21 = new booking.BookCommand(bookingReceiver10, "hi!", "hi!", 100, userType20);
        booking.BookingReceiver bookingReceiver25 = new booking.BookingReceiver();
        booking.UserType userType29 = booking.UserType.FACULTY;
        bookingReceiver25.bookSpace("", "", 100, userType29);
        bookingReceiver10.extendBooking("", "", (int) 'a', userType29);
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver0, "", "", 0, userType29);
        java.lang.String str33 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("EXTEND", "CANCEL");
        booking.CancelCommand cancelCommand39 = new booking.CancelCommand(bookingReceiver0, "", "BOOK");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.UserType userType15 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (short) 1, userType15);
        booking.BookingReceiver bookingReceiver20 = null;
        booking.BookingReceiver bookingReceiver24 = new booking.BookingReceiver();
        booking.UserType userType28 = booking.UserType.FACULTY;
        bookingReceiver24.bookSpace("", "", 100, userType28);
        booking.BookCommand bookCommand30 = new booking.BookCommand(bookingReceiver20, "hi!", "", 0, userType28);
        bookingReceiver0.bookSpace("", "BOOK", (int) (byte) 10, userType28);
        double double32 = bookingReceiver0.getAmount();
        java.lang.String str33 = bookingReceiver0.getAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.FACULTY + "'", userType15.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType28 + "' != '" + booking.UserType.FACULTY + "'", userType28.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 80.0d + "'", double32 == 80.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "BOOK" + "'", str33, "BOOK");
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        parkingSpot0.occupySpot("hi!");
        parkingSpot0.occupySpot("BOOK");
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        booking.BookingReceiver bookingReceiver0 = null;
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        booking.UserType userType14 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand15 = new booking.BookCommand(bookingReceiver4, "hi!", "hi!", 100, userType14);
        double double16 = bookingReceiver4.getAmount();
        booking.BookingReceiver bookingReceiver20 = new booking.BookingReceiver();
        java.lang.String str21 = bookingReceiver20.getAction();
        booking.UserType userType25 = null;
        booking.ExtendCommand extendCommand26 = new booking.ExtendCommand(bookingReceiver20, "hi!", "", 100, userType25);
        booking.UserType userType30 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand31 = new booking.BookCommand(bookingReceiver20, "hi!", "hi!", 100, userType30);
        booking.BookingReceiver bookingReceiver35 = new booking.BookingReceiver();
        booking.UserType userType39 = booking.UserType.FACULTY;
        bookingReceiver35.bookSpace("", "", 100, userType39);
        bookingReceiver20.extendBooking("", "", (int) 'a', userType39);
        bookingReceiver4.extendBooking("CANCEL", "hi!", (int) (short) 10, userType39);
        double double43 = bookingReceiver4.getDeposit();
        booking.BookingReceiver bookingReceiver47 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver51 = new booking.BookingReceiver();
        java.lang.String str52 = bookingReceiver51.getAction();
        booking.UserType userType56 = null;
        booking.ExtendCommand extendCommand57 = new booking.ExtendCommand(bookingReceiver51, "hi!", "", 100, userType56);
        java.lang.String str58 = bookingReceiver51.getAction();
        booking.UserType userType62 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand63 = new booking.ExtendCommand(bookingReceiver51, "hi!", "hi!", (int) (byte) 0, userType62);
        booking.ExtendCommand extendCommand64 = new booking.ExtendCommand(bookingReceiver47, "", "", (int) (byte) 100, userType62);
        booking.BookingReceiver bookingReceiver68 = new booking.BookingReceiver();
        java.lang.String str69 = bookingReceiver68.getAction();
        booking.UserType userType73 = null;
        booking.ExtendCommand extendCommand74 = new booking.ExtendCommand(bookingReceiver68, "hi!", "", 100, userType73);
        booking.UserType userType78 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand79 = new booking.BookCommand(bookingReceiver68, "hi!", "hi!", 100, userType78);
        bookingReceiver47.bookSpace("hi!", "hi!", (int) (short) -1, userType78);
        booking.BookCommand bookCommand81 = new booking.BookCommand(bookingReceiver4, "", "", 1, userType78);
        booking.ExtendCommand extendCommand82 = new booking.ExtendCommand(bookingReceiver0, "", "BOOK", 1, userType78);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + userType14 + "' != '" + booking.UserType.FACULTY + "'", userType14.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + userType30 + "' != '" + booking.UserType.FACULTY + "'", userType30.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType39 + "' != '" + booking.UserType.FACULTY + "'", userType39.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + userType62 + "' != '" + booking.UserType.NON_FACULTY + "'", userType62.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + userType78 + "' != '" + booking.UserType.FACULTY + "'", userType78.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        booking.BookingReceiver bookingReceiver16 = new booking.BookingReceiver();
        java.lang.String str17 = bookingReceiver16.getAction();
        booking.UserType userType21 = null;
        booking.ExtendCommand extendCommand22 = new booking.ExtendCommand(bookingReceiver16, "hi!", "", 100, userType21);
        java.lang.String str23 = bookingReceiver16.getAction();
        booking.UserType userType27 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand28 = new booking.ExtendCommand(bookingReceiver16, "hi!", "hi!", (int) (byte) 0, userType27);
        booking.ExtendCommand extendCommand29 = new booking.ExtendCommand(bookingReceiver0, "CANCEL", "CANCEL", (int) (short) 1, userType27);
        booking.BookingReceiver bookingReceiver30 = new booking.BookingReceiver();
        java.lang.String str31 = bookingReceiver30.getAction();
        booking.UserType userType35 = null;
        booking.ExtendCommand extendCommand36 = new booking.ExtendCommand(bookingReceiver30, "hi!", "", 100, userType35);
        java.lang.String str37 = bookingReceiver30.getAction();
        booking.UserType userType41 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand42 = new booking.ExtendCommand(bookingReceiver30, "hi!", "hi!", (int) (byte) 0, userType41);
        booking.BookingReceiver bookingReceiver46 = new booking.BookingReceiver();
        java.lang.String str47 = bookingReceiver46.getAction();
        booking.UserType userType51 = null;
        booking.ExtendCommand extendCommand52 = new booking.ExtendCommand(bookingReceiver46, "hi!", "", 100, userType51);
        booking.UserType userType56 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand57 = new booking.BookCommand(bookingReceiver46, "hi!", "hi!", 100, userType56);
        booking.BookingReceiver bookingReceiver61 = new booking.BookingReceiver();
        booking.UserType userType65 = booking.UserType.FACULTY;
        bookingReceiver61.bookSpace("", "", 100, userType65);
        bookingReceiver46.extendBooking("", "", (int) 'a', userType65);
        bookingReceiver30.bookSpace("EXTEND", "hi!", (int) (byte) 1, userType65);
        double double69 = bookingReceiver0.getRate(userType65);
        booking.BookingReceiver bookingReceiver73 = new booking.BookingReceiver();
        bookingReceiver73.cancelBooking("hi!", "hi!");
        bookingReceiver73.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver80 = new booking.BookingReceiver();
        booking.UserType userType84 = booking.UserType.FACULTY;
        bookingReceiver80.bookSpace("", "", 100, userType84);
        double double86 = bookingReceiver73.getRate(userType84);
        bookingReceiver0.extendBooking("EXTEND", "EXTEND", (int) '4', userType84);
        booking.CancelCommand cancelCommand90 = new booking.CancelCommand(bookingReceiver0, "CANCEL", "hi!");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + userType27 + "' != '" + booking.UserType.NON_FACULTY + "'", userType27.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + userType41 + "' != '" + booking.UserType.NON_FACULTY + "'", userType41.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + userType56 + "' != '" + booking.UserType.FACULTY + "'", userType56.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType65 + "' != '" + booking.UserType.FACULTY + "'", userType65.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 8.0d + "'", double69 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType84 + "' != '" + booking.UserType.FACULTY + "'", userType84.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 8.0d + "'", double86 == 8.0d);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        double double4 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("EXTEND", "hi!");
        java.lang.String str8 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver12 = new booking.BookingReceiver();
        bookingReceiver12.cancelBooking("hi!", "hi!");
        booking.UserType userType16 = booking.UserType.STUDENT;
        double double17 = bookingReceiver12.getRate(userType16);
        booking.CancelCommand cancelCommand20 = new booking.CancelCommand(bookingReceiver12, "BOOK", "hi!");
        booking.BookingReceiver bookingReceiver24 = new booking.BookingReceiver();
        bookingReceiver24.cancelBooking("hi!", "hi!");
        bookingReceiver24.cancelBooking("", "");
        booking.UserType userType31 = booking.UserType.STUDENT;
        double double32 = bookingReceiver24.getRate(userType31);
        booking.BookCommand bookCommand33 = new booking.BookCommand(bookingReceiver12, "", "hi!", (int) '#', userType31);
        bookingReceiver0.bookSpace("", "hi!", (int) 'a', userType31);
        java.lang.String str35 = bookingReceiver0.getAction();
        java.lang.String str36 = bookingReceiver0.getAction();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CANCEL" + "'", str8, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType16 + "' != '" + booking.UserType.STUDENT + "'", userType16.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.0d + "'", double17 == 5.0d);
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.STUDENT + "'", userType31.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5.0d + "'", double32 == 5.0d);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "BOOK" + "'", str35, "BOOK");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "BOOK" + "'", str36, "BOOK");
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor11 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        bookingSystem9.update((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        booking.BookingSystem bookingSystem47 = new booking.BookingSystem((booking.Subject) parkingSpot44);
        booking.ParkingSpot parkingSpot48 = new booking.ParkingSpot();
        parkingSpot48.occupySpot("hi!");
        booking.BookingSystem bookingSystem51 = new booking.BookingSystem((booking.Subject) parkingSpot48);
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        bookingSystem51.update((booking.Subject) parkingSpot52);
        parkingSpot44.detach((booking.Observer) bookingSystem51);
        parkingSpot31.detach((booking.Observer) bookingSystem51);
        parkingSpot31.occupySpot("CANCEL");
        parkingSensor30.update((booking.Subject) parkingSpot31);
        parkingSensor14.update((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSensor14.update((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        bookingSystem71.update((booking.Subject) parkingSpot72);
        parkingSpot64.detach((booking.Observer) bookingSystem71);
        parkingSpot62.detach((booking.Observer) bookingSystem71);
        parkingSpot10.attach((booking.Observer) bookingSystem71);
        java.lang.String str79 = parkingSpot10.getLicensePlate();
        booking.ParkingSensor parkingSensor80 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot81 = new booking.ParkingSpot();
        parkingSpot81.occupySpot("hi!");
        booking.BookingSystem bookingSystem84 = new booking.BookingSystem((booking.Subject) parkingSpot81);
        booking.ParkingSpot parkingSpot85 = new booking.ParkingSpot();
        parkingSpot85.occupySpot("hi!");
        bookingSystem84.update((booking.Subject) parkingSpot85);
        parkingSpot85.freeSpot();
        parkingSensor80.update((booking.Subject) parkingSpot85);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSpot2.detach((booking.Observer) bookingSystem22);
        parkingSpot2.occupySpot("CANCEL");
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        booking.BookingSystem bookingSystem41 = new booking.BookingSystem((booking.Subject) parkingSpot38);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        bookingSystem41.update((booking.Subject) parkingSpot42);
        parkingSpot34.detach((booking.Observer) bookingSystem41);
        parkingSensor33.update((booking.Subject) parkingSpot34);
        parkingSpot2.detach((booking.Observer) parkingSensor33);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        booking.BookingSystem bookingSystem56 = new booking.BookingSystem((booking.Subject) parkingSpot53);
        bookingSystem52.update((booking.Subject) parkingSpot53);
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot53);
        parkingSpot2.detach((booking.Observer) bookingSystem58);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        bookingSystem58.update((booking.Subject) parkingSpot60);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        booking.BookingSystem bookingSystem65 = new booking.BookingSystem((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        bookingSystem65.update((booking.Subject) parkingSpot66);
        parkingSpot66.freeSpot();
        java.lang.String str71 = parkingSpot66.getLicensePlate();
        boolean boolean72 = parkingSpot66.isOccupied();
        bookingSystem58.update((booking.Subject) parkingSpot66);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        bookingSystem3.update((booking.Subject) parkingSpot4);
        parkingSpot4.freeSpot();
        booking.ParkingSpot parkingSpot9 = new booking.ParkingSpot();
        parkingSpot9.occupySpot("hi!");
        booking.BookingSystem bookingSystem12 = new booking.BookingSystem((booking.Subject) parkingSpot9);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        bookingSystem16.update((booking.Subject) parkingSpot17);
        parkingSpot9.detach((booking.Observer) bookingSystem16);
        parkingSpot4.detach((booking.Observer) bookingSystem16);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        booking.BookingSystem bookingSystem26 = new booking.BookingSystem((booking.Subject) parkingSpot23);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        bookingSystem30.update((booking.Subject) parkingSpot31);
        parkingSpot23.detach((booking.Observer) bookingSystem30);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        booking.BookingSystem bookingSystem39 = new booking.BookingSystem((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        booking.BookingSystem bookingSystem43 = new booking.BookingSystem((booking.Subject) parkingSpot40);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        bookingSystem43.update((booking.Subject) parkingSpot44);
        parkingSpot36.detach((booking.Observer) bookingSystem43);
        parkingSpot23.detach((booking.Observer) bookingSystem43);
        booking.ParkingSpot parkingSpot50 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor51 = new booking.ParkingSensor((booking.Subject) parkingSpot50);
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        booking.BookingSystem bookingSystem59 = new booking.BookingSystem((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        bookingSystem59.update((booking.Subject) parkingSpot60);
        parkingSpot52.detach((booking.Observer) bookingSystem59);
        parkingSensor51.update((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor67 = new booking.ParkingSensor((booking.Subject) parkingSpot66);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        booking.BookingSystem bookingSystem75 = new booking.BookingSystem((booking.Subject) parkingSpot72);
        booking.ParkingSpot parkingSpot76 = new booking.ParkingSpot();
        parkingSpot76.occupySpot("hi!");
        bookingSystem75.update((booking.Subject) parkingSpot76);
        parkingSpot68.detach((booking.Observer) bookingSystem75);
        parkingSensor67.update((booking.Subject) parkingSpot68);
        parkingSpot52.detach((booking.Observer) parkingSensor67);
        parkingSpot23.detach((booking.Observer) parkingSensor67);
        parkingSpot23.occupySpot("hi!");
        parkingSpot23.freeSpot();
        parkingSpot23.occupySpot("hi!");
        boolean boolean89 = parkingSpot23.isOccupied();
        bookingSystem16.update((booking.Subject) parkingSpot23);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        booking.BookingReceiver bookingReceiver0 = null;
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        bookingReceiver4.cancelBooking("hi!", "hi!");
        double double8 = bookingReceiver4.getAmount();
        booking.BookingReceiver bookingReceiver12 = new booking.BookingReceiver();
        java.lang.String str13 = bookingReceiver12.getAction();
        booking.UserType userType17 = null;
        booking.ExtendCommand extendCommand18 = new booking.ExtendCommand(bookingReceiver12, "hi!", "", 100, userType17);
        java.lang.String str19 = bookingReceiver12.getAction();
        booking.UserType userType23 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand24 = new booking.ExtendCommand(bookingReceiver12, "hi!", "hi!", (int) (byte) 0, userType23);
        booking.BookingReceiver bookingReceiver28 = new booking.BookingReceiver();
        java.lang.String str29 = bookingReceiver28.getAction();
        booking.UserType userType33 = null;
        booking.ExtendCommand extendCommand34 = new booking.ExtendCommand(bookingReceiver28, "hi!", "", 100, userType33);
        booking.UserType userType38 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand39 = new booking.BookCommand(bookingReceiver28, "hi!", "hi!", 100, userType38);
        booking.BookingReceiver bookingReceiver43 = new booking.BookingReceiver();
        booking.UserType userType47 = booking.UserType.FACULTY;
        bookingReceiver43.bookSpace("", "", 100, userType47);
        bookingReceiver28.extendBooking("", "", (int) 'a', userType47);
        bookingReceiver12.bookSpace("EXTEND", "hi!", (int) (byte) 1, userType47);
        bookingReceiver4.extendBooking("hi!", "hi!", (int) (byte) 10, userType47);
        double double52 = bookingReceiver4.getAmount();
        booking.BookingReceiver bookingReceiver56 = new booking.BookingReceiver();
        java.lang.String str57 = bookingReceiver56.getAction();
        booking.UserType userType61 = null;
        booking.ExtendCommand extendCommand62 = new booking.ExtendCommand(bookingReceiver56, "hi!", "", 100, userType61);
        booking.UserType userType66 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand67 = new booking.BookCommand(bookingReceiver56, "hi!", "hi!", 100, userType66);
        booking.BookingReceiver bookingReceiver71 = new booking.BookingReceiver();
        booking.UserType userType75 = booking.UserType.FACULTY;
        bookingReceiver71.bookSpace("", "", 100, userType75);
        bookingReceiver56.extendBooking("", "", (int) 'a', userType75);
        booking.UserType userType78 = booking.UserType.NON_FACULTY;
        double double79 = bookingReceiver56.getRate(userType78);
        bookingReceiver56.cancelBooking("BOOK", "hi!");
        booking.BookingReceiver bookingReceiver86 = null;
        booking.BookingReceiver bookingReceiver90 = new booking.BookingReceiver();
        bookingReceiver90.cancelBooking("hi!", "hi!");
        booking.UserType userType94 = booking.UserType.STUDENT;
        double double95 = bookingReceiver90.getRate(userType94);
        booking.BookCommand bookCommand96 = new booking.BookCommand(bookingReceiver86, "BOOK", "hi!", 0, userType94);
        bookingReceiver56.bookSpace("EXTEND", "BOOK", (int) (short) -1, userType94);
        booking.ExtendCommand extendCommand98 = new booking.ExtendCommand(bookingReceiver4, "EXTEND", "", (int) (byte) 1, userType94);
        booking.ExtendCommand extendCommand99 = new booking.ExtendCommand(bookingReceiver0, "BOOK", "", (int) (byte) 10, userType94);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + userType23 + "' != '" + booking.UserType.NON_FACULTY + "'", userType23.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + userType38 + "' != '" + booking.UserType.FACULTY + "'", userType38.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType47 + "' != '" + booking.UserType.FACULTY + "'", userType47.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 80.0d + "'", double52 == 80.0d);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + userType66 + "' != '" + booking.UserType.FACULTY + "'", userType66.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType75 + "' != '" + booking.UserType.FACULTY + "'", userType75.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType78 + "' != '" + booking.UserType.NON_FACULTY + "'", userType78.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 10.0d + "'", double79 == 10.0d);
        org.junit.Assert.assertTrue("'" + userType94 + "' != '" + booking.UserType.STUDENT + "'", userType94.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 5.0d + "'", double95 == 5.0d);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSensor parkingSensor13 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.Subject subject14 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingSensor13.update(subject14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Object.equals(Object)\" because \"changedSubject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        booking.UserType userType4 = booking.UserType.STUDENT;
        double double5 = bookingReceiver0.getRate(userType4);
        double double6 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("", "BOOK");
        booking.CancelCommand cancelCommand12 = new booking.CancelCommand(bookingReceiver0, "hi!", "hi!");
        booking.CancelCommand cancelCommand15 = new booking.CancelCommand(bookingReceiver0, "CANCEL", "BOOK");
        double double16 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver20 = new booking.BookingReceiver();
        bookingReceiver20.cancelBooking("hi!", "hi!");
        bookingReceiver20.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver27 = new booking.BookingReceiver();
        booking.UserType userType31 = booking.UserType.FACULTY;
        bookingReceiver27.bookSpace("", "", 100, userType31);
        double double33 = bookingReceiver20.getRate(userType31);
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        java.lang.String str38 = bookingReceiver37.getAction();
        booking.UserType userType42 = null;
        booking.ExtendCommand extendCommand43 = new booking.ExtendCommand(bookingReceiver37, "hi!", "", 100, userType42);
        java.lang.String str44 = bookingReceiver37.getAction();
        booking.UserType userType48 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand49 = new booking.ExtendCommand(bookingReceiver37, "hi!", "hi!", (int) (byte) 0, userType48);
        booking.BookingReceiver bookingReceiver53 = new booking.BookingReceiver();
        java.lang.String str54 = bookingReceiver53.getAction();
        booking.UserType userType58 = null;
        booking.ExtendCommand extendCommand59 = new booking.ExtendCommand(bookingReceiver53, "hi!", "", 100, userType58);
        java.lang.String str60 = bookingReceiver53.getAction();
        booking.UserType userType64 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand65 = new booking.ExtendCommand(bookingReceiver53, "hi!", "hi!", (int) (byte) 0, userType64);
        booking.ExtendCommand extendCommand66 = new booking.ExtendCommand(bookingReceiver37, "CANCEL", "CANCEL", (int) (short) 1, userType64);
        booking.BookingReceiver bookingReceiver70 = new booking.BookingReceiver();
        java.lang.String str71 = bookingReceiver70.getAction();
        booking.UserType userType75 = null;
        booking.ExtendCommand extendCommand76 = new booking.ExtendCommand(bookingReceiver70, "hi!", "", 100, userType75);
        booking.UserType userType80 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand81 = new booking.BookCommand(bookingReceiver70, "hi!", "hi!", 100, userType80);
        booking.BookingReceiver bookingReceiver85 = new booking.BookingReceiver();
        booking.UserType userType89 = booking.UserType.FACULTY;
        bookingReceiver85.bookSpace("", "", 100, userType89);
        bookingReceiver70.extendBooking("", "", (int) 'a', userType89);
        booking.UserType userType92 = booking.UserType.NON_FACULTY;
        double double93 = bookingReceiver70.getRate(userType92);
        bookingReceiver37.extendBooking("hi!", "", (int) (byte) -1, userType92);
        bookingReceiver20.extendBooking("", "", 100, userType92);
        bookingReceiver0.extendBooking("BOOK", "BOOK", (int) (short) -1, userType92);
        java.lang.String str97 = bookingReceiver0.getAction();
        double double98 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + booking.UserType.STUDENT + "'", userType4.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 5.0d + "'", double5 == 5.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 8.0d + "'", double33 == 8.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + userType48 + "' != '" + booking.UserType.NON_FACULTY + "'", userType48.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + userType64 + "' != '" + booking.UserType.NON_FACULTY + "'", userType64.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + userType80 + "' != '" + booking.UserType.FACULTY + "'", userType80.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType89 + "' != '" + booking.UserType.FACULTY + "'", userType89.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType92 + "' != '" + booking.UserType.NON_FACULTY + "'", userType92.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "EXTEND" + "'", str97, "EXTEND");
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSensor parkingSensor10 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot11 = new booking.ParkingSpot();
        parkingSpot11.occupySpot("hi!");
        booking.BookingSystem bookingSystem14 = new booking.BookingSystem((booking.Subject) parkingSpot11);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        bookingSystem14.update((booking.Subject) parkingSpot15);
        parkingSpot15.freeSpot();
        java.lang.String str20 = parkingSpot15.getLicensePlate();
        boolean boolean21 = parkingSpot15.isOccupied();
        parkingSensor10.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        booking.BookingSystem bookingSystem26 = new booking.BookingSystem((booking.Subject) parkingSpot23);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        bookingSystem26.update((booking.Subject) parkingSpot27);
        parkingSpot27.freeSpot();
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        booking.BookingSystem bookingSystem35 = new booking.BookingSystem((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot36 = new booking.ParkingSpot();
        parkingSpot36.occupySpot("hi!");
        booking.BookingSystem bookingSystem39 = new booking.BookingSystem((booking.Subject) parkingSpot36);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        bookingSystem39.update((booking.Subject) parkingSpot40);
        parkingSpot32.detach((booking.Observer) bookingSystem39);
        parkingSpot27.detach((booking.Observer) bookingSystem39);
        parkingSensor10.update((booking.Subject) parkingSpot27);
        booking.BookingSystem bookingSystem47 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        java.lang.String str5 = bookingReceiver4.getAction();
        booking.UserType userType9 = null;
        booking.ExtendCommand extendCommand10 = new booking.ExtendCommand(bookingReceiver4, "hi!", "", 100, userType9);
        java.lang.String str11 = bookingReceiver4.getAction();
        booking.UserType userType15 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver4, "hi!", "hi!", (int) (byte) 0, userType15);
        booking.ExtendCommand extendCommand17 = new booking.ExtendCommand(bookingReceiver0, "", "", (int) (byte) 100, userType15);
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        booking.UserType userType31 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand32 = new booking.BookCommand(bookingReceiver21, "hi!", "hi!", 100, userType31);
        bookingReceiver0.bookSpace("hi!", "hi!", (int) (short) -1, userType31);
        java.lang.String str34 = bookingReceiver0.getAction();
        booking.CancelCommand cancelCommand37 = new booking.CancelCommand(bookingReceiver0, "CANCEL", "BOOK");
        booking.BookingReceiver bookingReceiver38 = new booking.BookingReceiver();
        java.lang.String str39 = bookingReceiver38.getAction();
        booking.UserType userType43 = null;
        booking.ExtendCommand extendCommand44 = new booking.ExtendCommand(bookingReceiver38, "hi!", "", 100, userType43);
        java.lang.String str45 = bookingReceiver38.getAction();
        booking.UserType userType49 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand50 = new booking.ExtendCommand(bookingReceiver38, "hi!", "hi!", (int) (byte) 0, userType49);
        booking.CancelCommand cancelCommand53 = new booking.CancelCommand(bookingReceiver38, "hi!", "BOOK");
        booking.CancelCommand cancelCommand56 = new booking.CancelCommand(bookingReceiver38, "CANCEL", "CANCEL");
        booking.CancelCommand cancelCommand59 = new booking.CancelCommand(bookingReceiver38, "hi!", "CANCEL");
        booking.BookingReceiver bookingReceiver63 = new booking.BookingReceiver();
        java.lang.String str64 = bookingReceiver63.getAction();
        booking.UserType userType68 = null;
        booking.ExtendCommand extendCommand69 = new booking.ExtendCommand(bookingReceiver63, "hi!", "", 100, userType68);
        booking.UserType userType73 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand74 = new booking.BookCommand(bookingReceiver63, "hi!", "hi!", 100, userType73);
        booking.BookingReceiver bookingReceiver78 = new booking.BookingReceiver();
        booking.UserType userType82 = booking.UserType.FACULTY;
        bookingReceiver78.bookSpace("", "", 100, userType82);
        bookingReceiver63.extendBooking("", "", (int) 'a', userType82);
        booking.UserType userType85 = booking.UserType.NON_FACULTY;
        double double86 = bookingReceiver63.getRate(userType85);
        booking.BookCommand bookCommand87 = new booking.BookCommand(bookingReceiver38, "hi!", "", (int) '#', userType85);
        double double88 = bookingReceiver0.getRate(userType85);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.NON_FACULTY + "'", userType15.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType31 + "' != '" + booking.UserType.FACULTY + "'", userType31.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "BOOK" + "'", str34, "BOOK");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + userType49 + "' != '" + booking.UserType.NON_FACULTY + "'", userType49.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + userType73 + "' != '" + booking.UserType.FACULTY + "'", userType73.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType82 + "' != '" + booking.UserType.FACULTY + "'", userType82.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType85 + "' != '" + booking.UserType.NON_FACULTY + "'", userType85.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 10.0d + "'", double86 == 10.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 10.0d + "'", double88 == 10.0d);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        booking.BookingReceiver bookingReceiver0 = null;
        booking.CancelCommand cancelCommand3 = new booking.CancelCommand(bookingReceiver0, "", "");
        // The following exception was thrown during execution in test generation
        try {
            cancelCommand3.doAction();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.BookingReceiver.cancelBooking(String, String)\" because \"this.receiver\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot15.detach((booking.Observer) parkingSensor30);
        bookingSystem7.update((booking.Subject) parkingSpot15);
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot15);
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor36 = new booking.ParkingSensor((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        booking.BookingSystem bookingSystem40 = new booking.BookingSystem((booking.Subject) parkingSpot37);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.occupySpot("hi!");
        booking.BookingSystem bookingSystem44 = new booking.BookingSystem((booking.Subject) parkingSpot41);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        bookingSystem44.update((booking.Subject) parkingSpot45);
        parkingSpot37.detach((booking.Observer) bookingSystem44);
        parkingSensor36.update((booking.Subject) parkingSpot37);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor52 = new booking.ParkingSensor((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        booking.BookingSystem bookingSystem56 = new booking.BookingSystem((booking.Subject) parkingSpot53);
        booking.ParkingSpot parkingSpot57 = new booking.ParkingSpot();
        parkingSpot57.occupySpot("hi!");
        booking.BookingSystem bookingSystem60 = new booking.BookingSystem((booking.Subject) parkingSpot57);
        booking.ParkingSpot parkingSpot61 = new booking.ParkingSpot();
        parkingSpot61.occupySpot("hi!");
        bookingSystem60.update((booking.Subject) parkingSpot61);
        parkingSpot53.detach((booking.Observer) bookingSystem60);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        booking.BookingSystem bookingSystem69 = new booking.BookingSystem((booking.Subject) parkingSpot66);
        booking.ParkingSpot parkingSpot70 = new booking.ParkingSpot();
        parkingSpot70.occupySpot("hi!");
        booking.BookingSystem bookingSystem73 = new booking.BookingSystem((booking.Subject) parkingSpot70);
        booking.ParkingSpot parkingSpot74 = new booking.ParkingSpot();
        parkingSpot74.occupySpot("hi!");
        bookingSystem73.update((booking.Subject) parkingSpot74);
        parkingSpot66.detach((booking.Observer) bookingSystem73);
        parkingSpot53.detach((booking.Observer) bookingSystem73);
        parkingSpot53.occupySpot("CANCEL");
        parkingSensor52.update((booking.Subject) parkingSpot53);
        parkingSensor36.update((booking.Subject) parkingSpot53);
        booking.ParkingSpot parkingSpot84 = new booking.ParkingSpot();
        parkingSensor36.update((booking.Subject) parkingSpot84);
        bookingSystem34.update((booking.Subject) parkingSpot84);
        booking.ParkingSensor parkingSensor87 = new booking.ParkingSensor((booking.Subject) parkingSpot84);
        booking.BookingSystem bookingSystem88 = new booking.BookingSystem((booking.Subject) parkingSpot84);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor14 = new booking.ParkingSensor((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSensor14.update((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor30 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot15.detach((booking.Observer) parkingSensor30);
        bookingSystem7.update((booking.Subject) parkingSpot15);
        parkingSpot15.occupySpot("BOOK");
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        booking.BookingSystem bookingSystem42 = new booking.BookingSystem((booking.Subject) parkingSpot39);
        bookingSystem38.update((booking.Subject) parkingSpot39);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        booking.BookingSystem bookingSystem47 = new booking.BookingSystem((booking.Subject) parkingSpot44);
        booking.ParkingSpot parkingSpot48 = new booking.ParkingSpot();
        parkingSpot48.occupySpot("hi!");
        booking.BookingSystem bookingSystem51 = new booking.BookingSystem((booking.Subject) parkingSpot48);
        bookingSystem47.update((booking.Subject) parkingSpot48);
        parkingSpot39.detach((booking.Observer) bookingSystem47);
        parkingSpot15.attach((booking.Observer) bookingSystem47);
        parkingSpot15.occupySpot("EXTEND");
        boolean boolean57 = parkingSpot15.isOccupied();
        java.lang.String str58 = parkingSpot15.getLicensePlate();
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        parkingSpot4.freeSpot();
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        booking.ParkingSensor parkingSensor41 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSensor41.update((booking.Subject) parkingSpot42);
        booking.ParkingSensor parkingSensor44 = new booking.ParkingSensor((booking.Subject) parkingSpot42);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        bookingSystem52.update((booking.Subject) parkingSpot53);
        parkingSpot45.detach((booking.Observer) bookingSystem52);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        booking.BookingSystem bookingSystem65 = new booking.BookingSystem((booking.Subject) parkingSpot62);
        booking.ParkingSpot parkingSpot66 = new booking.ParkingSpot();
        parkingSpot66.occupySpot("hi!");
        bookingSystem65.update((booking.Subject) parkingSpot66);
        parkingSpot58.detach((booking.Observer) bookingSystem65);
        parkingSpot45.detach((booking.Observer) bookingSystem65);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        booking.BookingSystem bookingSystem75 = new booking.BookingSystem((booking.Subject) parkingSpot72);
        booking.ParkingSpot parkingSpot76 = new booking.ParkingSpot();
        parkingSpot76.occupySpot("hi!");
        booking.BookingSystem bookingSystem79 = new booking.BookingSystem((booking.Subject) parkingSpot76);
        booking.ParkingSpot parkingSpot80 = new booking.ParkingSpot();
        parkingSpot80.occupySpot("hi!");
        bookingSystem79.update((booking.Subject) parkingSpot80);
        parkingSpot72.detach((booking.Observer) bookingSystem79);
        bookingSystem65.update((booking.Subject) parkingSpot72);
        booking.ParkingSensor parkingSensor86 = new booking.ParkingSensor((booking.Subject) parkingSpot72);
        booking.ParkingSensor parkingSensor87 = new booking.ParkingSensor((booking.Subject) parkingSpot72);
        booking.ParkingSensor parkingSensor88 = new booking.ParkingSensor((booking.Subject) parkingSpot72);
        parkingSpot72.occupySpot("EXTEND");
        parkingSensor44.update((booking.Subject) parkingSpot72);
        booking.ParkingSensor parkingSensor92 = new booking.ParkingSensor((booking.Subject) parkingSpot72);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        boolean boolean4 = parkingSpot0.isOccupied();
        booking.ParkingSensor parkingSensor5 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor7 = new booking.ParkingSensor((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot8);
        booking.ParkingSpot parkingSpot12 = new booking.ParkingSpot();
        parkingSpot12.occupySpot("hi!");
        booking.BookingSystem bookingSystem15 = new booking.BookingSystem((booking.Subject) parkingSpot12);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        parkingSpot16.occupySpot("hi!");
        bookingSystem15.update((booking.Subject) parkingSpot16);
        parkingSpot8.detach((booking.Observer) bookingSystem15);
        parkingSensor7.update((booking.Subject) parkingSpot8);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor23 = new booking.ParkingSensor((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot24 = new booking.ParkingSpot();
        parkingSpot24.occupySpot("hi!");
        booking.BookingSystem bookingSystem27 = new booking.BookingSystem((booking.Subject) parkingSpot24);
        booking.ParkingSpot parkingSpot28 = new booking.ParkingSpot();
        parkingSpot28.occupySpot("hi!");
        booking.BookingSystem bookingSystem31 = new booking.BookingSystem((booking.Subject) parkingSpot28);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        parkingSpot32.occupySpot("hi!");
        bookingSystem31.update((booking.Subject) parkingSpot32);
        parkingSpot24.detach((booking.Observer) bookingSystem31);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        booking.BookingSystem bookingSystem40 = new booking.BookingSystem((booking.Subject) parkingSpot37);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.occupySpot("hi!");
        booking.BookingSystem bookingSystem44 = new booking.BookingSystem((booking.Subject) parkingSpot41);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        bookingSystem44.update((booking.Subject) parkingSpot45);
        parkingSpot37.detach((booking.Observer) bookingSystem44);
        parkingSpot24.detach((booking.Observer) bookingSystem44);
        parkingSpot24.occupySpot("CANCEL");
        parkingSensor23.update((booking.Subject) parkingSpot24);
        parkingSensor7.update((booking.Subject) parkingSpot24);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSensor7.update((booking.Subject) parkingSpot55);
        booking.ParkingSpot parkingSpot57 = new booking.ParkingSpot();
        parkingSpot57.occupySpot("hi!");
        booking.BookingSystem bookingSystem60 = new booking.BookingSystem((booking.Subject) parkingSpot57);
        booking.ParkingSpot parkingSpot61 = new booking.ParkingSpot();
        parkingSpot61.occupySpot("hi!");
        booking.BookingSystem bookingSystem64 = new booking.BookingSystem((booking.Subject) parkingSpot61);
        booking.ParkingSpot parkingSpot65 = new booking.ParkingSpot();
        parkingSpot65.occupySpot("hi!");
        bookingSystem64.update((booking.Subject) parkingSpot65);
        parkingSpot57.detach((booking.Observer) bookingSystem64);
        parkingSpot55.detach((booking.Observer) bookingSystem64);
        boolean boolean71 = parkingSpot55.isOccupied();
        parkingSensor5.update((booking.Subject) parkingSpot55);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        bookingReceiver0.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver7 = new booking.BookingReceiver();
        booking.UserType userType11 = booking.UserType.FACULTY;
        bookingReceiver7.bookSpace("", "", 100, userType11);
        double double13 = bookingReceiver0.getRate(userType11);
        java.lang.String str14 = bookingReceiver0.getAction();
        double double15 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("BOOK", "EXTEND");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.FACULTY + "'", userType11.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 8.0d + "'", double13 == 8.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CANCEL" + "'", str14, "CANCEL");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        boolean boolean51 = parkingSpot49.isOccupied();
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        booking.BookingSystem bookingSystem59 = new booking.BookingSystem((booking.Subject) parkingSpot56);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        bookingSystem59.update((booking.Subject) parkingSpot60);
        parkingSpot52.detach((booking.Observer) bookingSystem59);
        booking.ParkingSpot parkingSpot65 = new booking.ParkingSpot();
        parkingSpot65.occupySpot("hi!");
        booking.BookingSystem bookingSystem68 = new booking.BookingSystem((booking.Subject) parkingSpot65);
        booking.ParkingSpot parkingSpot69 = new booking.ParkingSpot();
        parkingSpot69.occupySpot("hi!");
        booking.BookingSystem bookingSystem72 = new booking.BookingSystem((booking.Subject) parkingSpot69);
        booking.ParkingSpot parkingSpot73 = new booking.ParkingSpot();
        parkingSpot73.occupySpot("hi!");
        bookingSystem72.update((booking.Subject) parkingSpot73);
        parkingSpot65.detach((booking.Observer) bookingSystem72);
        parkingSpot52.detach((booking.Observer) bookingSystem72);
        booking.ParkingSpot parkingSpot79 = new booking.ParkingSpot();
        parkingSpot79.occupySpot("hi!");
        booking.BookingSystem bookingSystem82 = new booking.BookingSystem((booking.Subject) parkingSpot79);
        booking.ParkingSpot parkingSpot83 = new booking.ParkingSpot();
        parkingSpot83.occupySpot("hi!");
        booking.BookingSystem bookingSystem86 = new booking.BookingSystem((booking.Subject) parkingSpot83);
        booking.ParkingSpot parkingSpot87 = new booking.ParkingSpot();
        parkingSpot87.occupySpot("hi!");
        bookingSystem86.update((booking.Subject) parkingSpot87);
        parkingSpot79.detach((booking.Observer) bookingSystem86);
        bookingSystem72.update((booking.Subject) parkingSpot79);
        booking.ParkingSensor parkingSensor93 = new booking.ParkingSensor((booking.Subject) parkingSpot79);
        parkingSpot49.detach((booking.Observer) parkingSensor93);
        booking.BookingSystem bookingSystem95 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSensor parkingSensor96 = new booking.ParkingSensor((booking.Subject) parkingSpot49);
        boolean boolean97 = parkingSpot49.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        booking.BookingReceiver bookingReceiver16 = new booking.BookingReceiver();
        java.lang.String str17 = bookingReceiver16.getAction();
        booking.UserType userType21 = null;
        booking.ExtendCommand extendCommand22 = new booking.ExtendCommand(bookingReceiver16, "hi!", "", 100, userType21);
        java.lang.String str23 = bookingReceiver16.getAction();
        booking.UserType userType27 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand28 = new booking.ExtendCommand(bookingReceiver16, "hi!", "hi!", (int) (byte) 0, userType27);
        booking.ExtendCommand extendCommand29 = new booking.ExtendCommand(bookingReceiver0, "CANCEL", "CANCEL", (int) (short) 1, userType27);
        booking.BookingReceiver bookingReceiver30 = new booking.BookingReceiver();
        java.lang.String str31 = bookingReceiver30.getAction();
        booking.UserType userType35 = null;
        booking.ExtendCommand extendCommand36 = new booking.ExtendCommand(bookingReceiver30, "hi!", "", 100, userType35);
        java.lang.String str37 = bookingReceiver30.getAction();
        booking.UserType userType41 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand42 = new booking.ExtendCommand(bookingReceiver30, "hi!", "hi!", (int) (byte) 0, userType41);
        booking.BookingReceiver bookingReceiver46 = new booking.BookingReceiver();
        java.lang.String str47 = bookingReceiver46.getAction();
        booking.UserType userType51 = null;
        booking.ExtendCommand extendCommand52 = new booking.ExtendCommand(bookingReceiver46, "hi!", "", 100, userType51);
        booking.UserType userType56 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand57 = new booking.BookCommand(bookingReceiver46, "hi!", "hi!", 100, userType56);
        booking.BookingReceiver bookingReceiver61 = new booking.BookingReceiver();
        booking.UserType userType65 = booking.UserType.FACULTY;
        bookingReceiver61.bookSpace("", "", 100, userType65);
        bookingReceiver46.extendBooking("", "", (int) 'a', userType65);
        bookingReceiver30.bookSpace("EXTEND", "hi!", (int) (byte) 1, userType65);
        double double69 = bookingReceiver0.getRate(userType65);
        double double70 = bookingReceiver0.getDeposit();
        double double71 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + userType27 + "' != '" + booking.UserType.NON_FACULTY + "'", userType27.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + userType41 + "' != '" + booking.UserType.NON_FACULTY + "'", userType41.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + userType56 + "' != '" + booking.UserType.FACULTY + "'", userType56.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType65 + "' != '" + booking.UserType.FACULTY + "'", userType65.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 8.0d + "'", double69 == 8.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver1 = null;
        booking.BookingReceiver bookingReceiver5 = new booking.BookingReceiver();
        booking.UserType userType9 = booking.UserType.FACULTY;
        bookingReceiver5.bookSpace("", "", 100, userType9);
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver1, "hi!", "", 0, userType9);
        commandInvoker0.setCommand((booking.ICommand) bookCommand11);
        booking.CommandInvoker commandInvoker13 = new booking.CommandInvoker();
        commandInvoker13.executeCommand();
        booking.BookingReceiver bookingReceiver15 = new booking.BookingReceiver();
        java.lang.String str16 = bookingReceiver15.getAction();
        booking.UserType userType20 = null;
        booking.ExtendCommand extendCommand21 = new booking.ExtendCommand(bookingReceiver15, "hi!", "", 100, userType20);
        java.lang.String str22 = bookingReceiver15.getAction();
        booking.UserType userType26 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver15, "hi!", "hi!", (int) (byte) 0, userType26);
        extendCommand27.doAction();
        commandInvoker13.setCommand((booking.ICommand) extendCommand27);
        booking.BookingReceiver bookingReceiver30 = new booking.BookingReceiver();
        java.lang.String str31 = bookingReceiver30.getAction();
        booking.UserType userType35 = null;
        booking.ExtendCommand extendCommand36 = new booking.ExtendCommand(bookingReceiver30, "hi!", "", 100, userType35);
        booking.UserType userType40 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand41 = new booking.BookCommand(bookingReceiver30, "hi!", "hi!", 100, userType40);
        bookCommand41.doAction();
        commandInvoker13.setCommand((booking.ICommand) bookCommand41);
        commandInvoker0.setCommand((booking.ICommand) bookCommand41);
        bookCommand41.doAction();
        org.junit.Assert.assertTrue("'" + userType9 + "' != '" + booking.UserType.FACULTY + "'", userType9.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + userType26 + "' != '" + booking.UserType.NON_FACULTY + "'", userType26.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + userType40 + "' != '" + booking.UserType.FACULTY + "'", userType40.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        double double7 = bookingReceiver0.getDeposit();
        double double8 = bookingReceiver0.getDeposit();
        double double9 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver13 = new booking.BookingReceiver();
        java.lang.String str14 = bookingReceiver13.getAction();
        booking.UserType userType18 = null;
        booking.ExtendCommand extendCommand19 = new booking.ExtendCommand(bookingReceiver13, "hi!", "", 100, userType18);
        booking.UserType userType23 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand24 = new booking.BookCommand(bookingReceiver13, "hi!", "hi!", 100, userType23);
        booking.BookingReceiver bookingReceiver28 = new booking.BookingReceiver();
        booking.UserType userType32 = booking.UserType.FACULTY;
        bookingReceiver28.bookSpace("", "", 100, userType32);
        bookingReceiver13.extendBooking("", "", (int) 'a', userType32);
        booking.UserType userType35 = booking.UserType.NON_FACULTY;
        double double36 = bookingReceiver13.getRate(userType35);
        bookingReceiver13.cancelBooking("BOOK", "hi!");
        java.lang.String str40 = bookingReceiver13.getAction();
        double double41 = bookingReceiver13.getDeposit();
        booking.BookingReceiver bookingReceiver45 = new booking.BookingReceiver();
        java.lang.String str46 = bookingReceiver45.getAction();
        double double47 = bookingReceiver45.getDeposit();
        booking.BookingReceiver bookingReceiver51 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver55 = new booking.BookingReceiver();
        java.lang.String str56 = bookingReceiver55.getAction();
        booking.UserType userType60 = null;
        booking.ExtendCommand extendCommand61 = new booking.ExtendCommand(bookingReceiver55, "hi!", "", 100, userType60);
        java.lang.String str62 = bookingReceiver55.getAction();
        booking.UserType userType66 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand67 = new booking.ExtendCommand(bookingReceiver55, "hi!", "hi!", (int) (byte) 0, userType66);
        booking.ExtendCommand extendCommand68 = new booking.ExtendCommand(bookingReceiver51, "", "", (int) (byte) 100, userType66);
        booking.BookingReceiver bookingReceiver72 = new booking.BookingReceiver();
        java.lang.String str73 = bookingReceiver72.getAction();
        booking.UserType userType77 = null;
        booking.ExtendCommand extendCommand78 = new booking.ExtendCommand(bookingReceiver72, "hi!", "", 100, userType77);
        booking.UserType userType82 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand83 = new booking.BookCommand(bookingReceiver72, "hi!", "hi!", 100, userType82);
        bookingReceiver51.bookSpace("hi!", "hi!", (int) (short) -1, userType82);
        booking.ExtendCommand extendCommand85 = new booking.ExtendCommand(bookingReceiver45, "EXTEND", "BOOK", (int) (byte) -1, userType82);
        booking.ExtendCommand extendCommand86 = new booking.ExtendCommand(bookingReceiver13, "CANCEL", "", 0, userType82);
        booking.BookCommand bookCommand87 = new booking.BookCommand(bookingReceiver0, "hi!", "EXTEND", (int) (byte) 100, userType82);
        double double88 = bookingReceiver0.getDeposit();
        booking.CancelCommand cancelCommand91 = new booking.CancelCommand(bookingReceiver0, "BOOK", "");
        booking.UserType userType92 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double93 = bookingReceiver0.getRate(userType92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"booking.UserType.ordinal()\" because \"userType\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + userType23 + "' != '" + booking.UserType.FACULTY + "'", userType23.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType32 + "' != '" + booking.UserType.FACULTY + "'", userType32.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType35 + "' != '" + booking.UserType.NON_FACULTY + "'", userType35.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CANCEL" + "'", str40, "CANCEL");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + userType66 + "' != '" + booking.UserType.NON_FACULTY + "'", userType66.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + userType82 + "' != '" + booking.UserType.FACULTY + "'", userType82.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.BookingReceiver bookingReceiver15 = new booking.BookingReceiver();
        booking.UserType userType19 = booking.UserType.FACULTY;
        bookingReceiver15.bookSpace("", "", 100, userType19);
        bookingReceiver0.extendBooking("", "", (int) 'a', userType19);
        booking.UserType userType22 = booking.UserType.NON_FACULTY;
        double double23 = bookingReceiver0.getRate(userType22);
        bookingReceiver0.cancelBooking("BOOK", "hi!");
        booking.BookingReceiver bookingReceiver30 = null;
        booking.BookingReceiver bookingReceiver34 = new booking.BookingReceiver();
        bookingReceiver34.cancelBooking("hi!", "hi!");
        booking.UserType userType38 = booking.UserType.STUDENT;
        double double39 = bookingReceiver34.getRate(userType38);
        booking.BookCommand bookCommand40 = new booking.BookCommand(bookingReceiver30, "BOOK", "hi!", 0, userType38);
        bookingReceiver0.bookSpace("EXTEND", "BOOK", (int) (short) -1, userType38);
        booking.CancelCommand cancelCommand44 = new booking.CancelCommand(bookingReceiver0, "BOOK", "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType19 + "' != '" + booking.UserType.FACULTY + "'", userType19.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType22 + "' != '" + booking.UserType.NON_FACULTY + "'", userType22.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + userType38 + "' != '" + booking.UserType.STUDENT + "'", userType38.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 5.0d + "'", double39 == 5.0d);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        bookingReceiver0.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver7 = new booking.BookingReceiver();
        booking.UserType userType11 = booking.UserType.FACULTY;
        bookingReceiver7.bookSpace("", "", 100, userType11);
        double double13 = bookingReceiver0.getRate(userType11);
        booking.UserType userType17 = booking.UserType.VISITOR;
        booking.ExtendCommand extendCommand18 = new booking.ExtendCommand(bookingReceiver0, "BOOK", "", (int) '#', userType17);
        booking.BookingReceiver bookingReceiver22 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver26 = new booking.BookingReceiver();
        java.lang.String str27 = bookingReceiver26.getAction();
        booking.UserType userType31 = null;
        booking.ExtendCommand extendCommand32 = new booking.ExtendCommand(bookingReceiver26, "hi!", "", 100, userType31);
        java.lang.String str33 = bookingReceiver26.getAction();
        booking.UserType userType37 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand38 = new booking.ExtendCommand(bookingReceiver26, "hi!", "hi!", (int) (byte) 0, userType37);
        booking.ExtendCommand extendCommand39 = new booking.ExtendCommand(bookingReceiver22, "", "", (int) (byte) 100, userType37);
        booking.BookCommand bookCommand40 = new booking.BookCommand(bookingReceiver0, "CANCEL", "EXTEND", (int) '#', userType37);
        booking.CancelCommand cancelCommand43 = new booking.CancelCommand(bookingReceiver0, "", "BOOK");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.FACULTY + "'", userType11.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 8.0d + "'", double13 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType17 + "' != '" + booking.UserType.VISITOR + "'", userType17.equals(booking.UserType.VISITOR));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + userType37 + "' != '" + booking.UserType.NON_FACULTY + "'", userType37.equals(booking.UserType.NON_FACULTY));
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        double double2 = bookingReceiver0.getDeposit();
        booking.BookingReceiver bookingReceiver6 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        java.lang.String str17 = bookingReceiver10.getAction();
        booking.UserType userType21 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand22 = new booking.ExtendCommand(bookingReceiver10, "hi!", "hi!", (int) (byte) 0, userType21);
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver6, "", "", (int) (byte) 100, userType21);
        booking.BookingReceiver bookingReceiver27 = new booking.BookingReceiver();
        java.lang.String str28 = bookingReceiver27.getAction();
        booking.UserType userType32 = null;
        booking.ExtendCommand extendCommand33 = new booking.ExtendCommand(bookingReceiver27, "hi!", "", 100, userType32);
        booking.UserType userType37 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand38 = new booking.BookCommand(bookingReceiver27, "hi!", "hi!", 100, userType37);
        bookingReceiver6.bookSpace("hi!", "hi!", (int) (short) -1, userType37);
        booking.ExtendCommand extendCommand40 = new booking.ExtendCommand(bookingReceiver0, "EXTEND", "BOOK", (int) (byte) -1, userType37);
        booking.CancelCommand cancelCommand43 = new booking.CancelCommand(bookingReceiver0, "CANCEL", "hi!");
        cancelCommand43.doAction();
        cancelCommand43.doAction();
        cancelCommand43.doAction();
        cancelCommand43.doAction();
        cancelCommand43.doAction();
        cancelCommand43.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + userType21 + "' != '" + booking.UserType.NON_FACULTY + "'", userType21.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + userType37 + "' != '" + booking.UserType.FACULTY + "'", userType37.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.occupySpot("hi!");
        booking.BookingSystem bookingSystem44 = new booking.BookingSystem((booking.Subject) parkingSpot41);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        bookingSystem44.update((booking.Subject) parkingSpot45);
        parkingSpot45.freeSpot();
        java.lang.String str50 = parkingSpot45.getLicensePlate();
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor52 = new booking.ParkingSensor((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        booking.BookingSystem bookingSystem56 = new booking.BookingSystem((booking.Subject) parkingSpot53);
        booking.ParkingSpot parkingSpot57 = new booking.ParkingSpot();
        parkingSpot57.occupySpot("hi!");
        booking.BookingSystem bookingSystem60 = new booking.BookingSystem((booking.Subject) parkingSpot57);
        booking.ParkingSpot parkingSpot61 = new booking.ParkingSpot();
        parkingSpot61.occupySpot("hi!");
        bookingSystem60.update((booking.Subject) parkingSpot61);
        parkingSpot53.detach((booking.Observer) bookingSystem60);
        parkingSensor52.update((booking.Subject) parkingSpot53);
        booking.ParkingSensor parkingSensor67 = new booking.ParkingSensor((booking.Subject) parkingSpot53);
        parkingSpot45.detach((booking.Observer) parkingSensor67);
        parkingSpot45.freeSpot();
        parkingSpot45.occupySpot("CANCEL");
        parkingSpot45.freeSpot();
        booking.BookingSystem bookingSystem73 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        bookingSystem20.update((booking.Subject) parkingSpot45);
        parkingSpot45.freeSpot();
        booking.ParkingSensor parkingSensor76 = new booking.ParkingSensor((booking.Subject) parkingSpot45);
        java.lang.Class<?> wildcardClass77 = parkingSensor76.getClass();
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSensor parkingSensor16 = new booking.ParkingSensor((booking.Subject) parkingSpot2);
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot2);
        parkingSpot2.occupySpot("CANCEL");
        parkingSpot2.freeSpot();
        boolean boolean21 = parkingSpot2.isOccupied();
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver5 = new booking.BookingReceiver();
        bookingReceiver5.cancelBooking("hi!", "hi!");
        java.lang.String str9 = bookingReceiver5.getAction();
        booking.BookingReceiver bookingReceiver10 = null;
        booking.BookingReceiver bookingReceiver14 = new booking.BookingReceiver();
        booking.UserType userType18 = booking.UserType.FACULTY;
        bookingReceiver14.bookSpace("", "", 100, userType18);
        booking.BookCommand bookCommand20 = new booking.BookCommand(bookingReceiver10, "hi!", "", 0, userType18);
        double double21 = bookingReceiver5.getRate(userType18);
        booking.UserType userType25 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand26 = new booking.ExtendCommand(bookingReceiver5, "BOOK", "EXTEND", (int) (short) 10, userType25);
        booking.BookCommand bookCommand27 = new booking.BookCommand(bookingReceiver0, "CANCEL", "hi!", (int) ' ', userType25);
        booking.BookingReceiver bookingReceiver28 = new booking.BookingReceiver();
        bookingReceiver28.cancelBooking("hi!", "hi!");
        java.lang.String str32 = bookingReceiver28.getAction();
        booking.BookingReceiver bookingReceiver33 = null;
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        booking.UserType userType41 = booking.UserType.FACULTY;
        bookingReceiver37.bookSpace("", "", 100, userType41);
        booking.BookCommand bookCommand43 = new booking.BookCommand(bookingReceiver33, "hi!", "", 0, userType41);
        double double44 = bookingReceiver28.getRate(userType41);
        double double45 = bookingReceiver0.getRate(userType41);
        bookingReceiver0.cancelBooking("hi!", "CANCEL");
        double double49 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CANCEL" + "'", str9, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType18 + "' != '" + booking.UserType.FACULTY + "'", userType18.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 8.0d + "'", double21 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType25 + "' != '" + booking.UserType.FACULTY + "'", userType25.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "CANCEL" + "'", str32, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType41 + "' != '" + booking.UserType.FACULTY + "'", userType41.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 8.0d + "'", double44 == 8.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 8.0d + "'", double45 == 8.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSpot2.detach((booking.Observer) parkingSensor17);
        booking.BookingSystem bookingSystem33 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        java.lang.String str34 = parkingSpot2.getLicensePlate();
        boolean boolean35 = parkingSpot2.isOccupied();
        boolean boolean36 = parkingSpot2.isOccupied();
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver5 = new booking.BookingReceiver();
        bookingReceiver5.cancelBooking("hi!", "hi!");
        java.lang.String str9 = bookingReceiver5.getAction();
        booking.BookingReceiver bookingReceiver10 = null;
        booking.BookingReceiver bookingReceiver14 = new booking.BookingReceiver();
        booking.UserType userType18 = booking.UserType.FACULTY;
        bookingReceiver14.bookSpace("", "", 100, userType18);
        booking.BookCommand bookCommand20 = new booking.BookCommand(bookingReceiver10, "hi!", "", 0, userType18);
        double double21 = bookingReceiver5.getRate(userType18);
        booking.UserType userType25 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand26 = new booking.ExtendCommand(bookingReceiver5, "BOOK", "EXTEND", (int) (short) 10, userType25);
        booking.BookCommand bookCommand27 = new booking.BookCommand(bookingReceiver0, "CANCEL", "hi!", (int) ' ', userType25);
        double double28 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("BOOK", "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CANCEL" + "'", str9, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType18 + "' != '" + booking.UserType.FACULTY + "'", userType18.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 8.0d + "'", double21 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType25 + "' != '" + booking.UserType.FACULTY + "'", userType25.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        parkingSpot4.occupySpot("CANCEL");
        booking.BookingSystem bookingSystem11 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem12 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        parkingSpot4.occupySpot("EXTEND");
        boolean boolean15 = parkingSpot4.isOccupied();
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot21.freeSpot();
        java.lang.String str26 = parkingSpot21.getLicensePlate();
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor28 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        parkingSpot29.occupySpot("hi!");
        booking.BookingSystem bookingSystem32 = new booking.BookingSystem((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        booking.BookingSystem bookingSystem36 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        bookingSystem36.update((booking.Subject) parkingSpot37);
        parkingSpot29.detach((booking.Observer) bookingSystem36);
        parkingSensor28.update((booking.Subject) parkingSpot29);
        booking.ParkingSensor parkingSensor43 = new booking.ParkingSensor((booking.Subject) parkingSpot29);
        parkingSpot21.detach((booking.Observer) parkingSensor43);
        booking.BookingSystem bookingSystem45 = new booking.BookingSystem((booking.Subject) parkingSpot21);
        booking.ParkingSpot parkingSpot46 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor47 = new booking.ParkingSensor((booking.Subject) parkingSpot46);
        booking.ParkingSpot parkingSpot48 = new booking.ParkingSpot();
        parkingSpot48.occupySpot("hi!");
        booking.BookingSystem bookingSystem51 = new booking.BookingSystem((booking.Subject) parkingSpot48);
        booking.ParkingSpot parkingSpot52 = new booking.ParkingSpot();
        parkingSpot52.occupySpot("hi!");
        booking.BookingSystem bookingSystem55 = new booking.BookingSystem((booking.Subject) parkingSpot52);
        booking.ParkingSpot parkingSpot56 = new booking.ParkingSpot();
        parkingSpot56.occupySpot("hi!");
        bookingSystem55.update((booking.Subject) parkingSpot56);
        parkingSpot48.detach((booking.Observer) bookingSystem55);
        parkingSensor47.update((booking.Subject) parkingSpot48);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor63 = new booking.ParkingSensor((booking.Subject) parkingSpot62);
        parkingSpot48.detach((booking.Observer) parkingSensor63);
        booking.ParkingSpot parkingSpot65 = new booking.ParkingSpot();
        parkingSpot65.occupySpot("hi!");
        booking.BookingSystem bookingSystem68 = new booking.BookingSystem((booking.Subject) parkingSpot65);
        parkingSensor63.update((booking.Subject) parkingSpot65);
        parkingSpot65.freeSpot();
        booking.ParkingSpot parkingSpot71 = new booking.ParkingSpot();
        parkingSpot71.occupySpot("hi!");
        booking.BookingSystem bookingSystem74 = new booking.BookingSystem((booking.Subject) parkingSpot71);
        booking.ParkingSpot parkingSpot75 = new booking.ParkingSpot();
        parkingSpot75.occupySpot("hi!");
        booking.BookingSystem bookingSystem78 = new booking.BookingSystem((booking.Subject) parkingSpot75);
        bookingSystem74.update((booking.Subject) parkingSpot75);
        parkingSpot75.occupySpot("CANCEL");
        booking.BookingSystem bookingSystem82 = new booking.BookingSystem((booking.Subject) parkingSpot75);
        parkingSpot75.occupySpot("BOOK");
        booking.ParkingSensor parkingSensor85 = new booking.ParkingSensor((booking.Subject) parkingSpot75);
        parkingSpot65.detach((booking.Observer) parkingSensor85);
        bookingSystem45.update((booking.Subject) parkingSpot65);
        bookingSystem16.update((booking.Subject) parkingSpot65);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        double double2 = bookingReceiver0.getDeposit();
        booking.BookingReceiver bookingReceiver6 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        java.lang.String str17 = bookingReceiver10.getAction();
        booking.UserType userType21 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand22 = new booking.ExtendCommand(bookingReceiver10, "hi!", "hi!", (int) (byte) 0, userType21);
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver6, "", "", (int) (byte) 100, userType21);
        booking.CancelCommand cancelCommand26 = new booking.CancelCommand(bookingReceiver6, "hi!", "hi!");
        booking.BookingReceiver bookingReceiver30 = new booking.BookingReceiver();
        java.lang.String str31 = bookingReceiver30.getAction();
        booking.UserType userType35 = null;
        booking.ExtendCommand extendCommand36 = new booking.ExtendCommand(bookingReceiver30, "hi!", "", 100, userType35);
        booking.UserType userType40 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand41 = new booking.BookCommand(bookingReceiver30, "hi!", "hi!", 100, userType40);
        booking.UserType userType45 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand46 = new booking.ExtendCommand(bookingReceiver30, "", "", (int) (short) 1, userType45);
        bookingReceiver6.bookSpace("CANCEL", "EXTEND", (int) (byte) 10, userType45);
        bookingReceiver0.extendBooking("CANCEL", "hi!", (-1), userType45);
        java.lang.String str49 = bookingReceiver0.getAction();
        double double50 = bookingReceiver0.getAmount();
        double double51 = bookingReceiver0.getAmount();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        double double55 = bookingReceiver0.getAmount();
        double double56 = bookingReceiver0.getAmount();
        java.lang.String str57 = bookingReceiver0.getAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + userType21 + "' != '" + booking.UserType.NON_FACULTY + "'", userType21.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + userType40 + "' != '" + booking.UserType.FACULTY + "'", userType40.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType45 + "' != '" + booking.UserType.FACULTY + "'", userType45.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "EXTEND" + "'", str49, "EXTEND");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-8.0d) + "'", double50 == (-8.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-8.0d) + "'", double51 == (-8.0d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "CANCEL" + "'", str57, "CANCEL");
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        booking.UserType userType10 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand11 = new booking.BookCommand(bookingReceiver0, "hi!", "hi!", 100, userType10);
        booking.BookingReceiver bookingReceiver15 = new booking.BookingReceiver();
        booking.UserType userType19 = booking.UserType.FACULTY;
        bookingReceiver15.bookSpace("", "", 100, userType19);
        bookingReceiver0.extendBooking("", "", (int) 'a', userType19);
        booking.CancelCommand cancelCommand24 = new booking.CancelCommand(bookingReceiver0, "BOOK", "CANCEL");
        cancelCommand24.doAction();
        cancelCommand24.doAction();
        cancelCommand24.doAction();
        cancelCommand24.doAction();
        cancelCommand24.doAction();
        cancelCommand24.doAction();
        cancelCommand24.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + userType10 + "' != '" + booking.UserType.FACULTY + "'", userType10.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType19 + "' != '" + booking.UserType.FACULTY + "'", userType19.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        double double8 = bookingReceiver0.getAmount();
        double double9 = bookingReceiver0.getDeposit();
        double double10 = bookingReceiver0.getAmount();
        booking.CancelCommand cancelCommand13 = new booking.CancelCommand(bookingReceiver0, "BOOK", "BOOK");
        cancelCommand13.doAction();
        cancelCommand13.doAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSensor parkingSensor49 = new booking.ParkingSensor((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot50 = new booking.ParkingSpot();
        parkingSpot50.occupySpot("hi!");
        booking.BookingSystem bookingSystem53 = new booking.BookingSystem((booking.Subject) parkingSpot50);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        booking.BookingSystem bookingSystem57 = new booking.BookingSystem((booking.Subject) parkingSpot54);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        bookingSystem57.update((booking.Subject) parkingSpot58);
        parkingSpot50.detach((booking.Observer) bookingSystem57);
        booking.ParkingSpot parkingSpot63 = new booking.ParkingSpot();
        parkingSpot63.occupySpot("hi!");
        booking.BookingSystem bookingSystem66 = new booking.BookingSystem((booking.Subject) parkingSpot63);
        booking.ParkingSpot parkingSpot67 = new booking.ParkingSpot();
        parkingSpot67.occupySpot("hi!");
        booking.BookingSystem bookingSystem70 = new booking.BookingSystem((booking.Subject) parkingSpot67);
        booking.ParkingSpot parkingSpot71 = new booking.ParkingSpot();
        parkingSpot71.occupySpot("hi!");
        bookingSystem70.update((booking.Subject) parkingSpot71);
        parkingSpot63.detach((booking.Observer) bookingSystem70);
        parkingSpot50.detach((booking.Observer) bookingSystem70);
        booking.ParkingSpot parkingSpot77 = new booking.ParkingSpot();
        parkingSpot77.occupySpot("hi!");
        booking.BookingSystem bookingSystem80 = new booking.BookingSystem((booking.Subject) parkingSpot77);
        booking.ParkingSpot parkingSpot81 = new booking.ParkingSpot();
        parkingSpot81.occupySpot("hi!");
        booking.BookingSystem bookingSystem84 = new booking.BookingSystem((booking.Subject) parkingSpot81);
        booking.ParkingSpot parkingSpot85 = new booking.ParkingSpot();
        parkingSpot85.occupySpot("hi!");
        bookingSystem84.update((booking.Subject) parkingSpot85);
        parkingSpot77.detach((booking.Observer) bookingSystem84);
        bookingSystem70.update((booking.Subject) parkingSpot77);
        booking.ParkingSensor parkingSensor91 = new booking.ParkingSensor((booking.Subject) parkingSpot77);
        booking.ParkingSpot parkingSpot92 = new booking.ParkingSpot();
        parkingSensor91.update((booking.Subject) parkingSpot92);
        parkingSensor49.update((booking.Subject) parkingSpot92);
        parkingSpot92.freeSpot();
        parkingSpot92.occupySpot("hi!");
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        booking.UserType userType12 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand13 = new booking.BookCommand(bookingReceiver2, "hi!", "hi!", 100, userType12);
        bookCommand13.doAction();
        bookCommand13.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand13);
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver18 = new booking.BookingReceiver();
        java.lang.String str19 = bookingReceiver18.getAction();
        booking.UserType userType23 = null;
        booking.ExtendCommand extendCommand24 = new booking.ExtendCommand(bookingReceiver18, "hi!", "", 100, userType23);
        booking.UserType userType28 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand29 = new booking.BookCommand(bookingReceiver18, "hi!", "hi!", 100, userType28);
        bookCommand29.doAction();
        bookCommand29.doAction();
        bookCommand29.doAction();
        bookCommand29.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand29);
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + booking.UserType.FACULTY + "'", userType12.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + userType28 + "' != '" + booking.UserType.FACULTY + "'", userType28.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot41 = new booking.ParkingSpot();
        parkingSpot41.occupySpot("hi!");
        booking.BookingSystem bookingSystem44 = new booking.BookingSystem((booking.Subject) parkingSpot41);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        bookingSystem48.update((booking.Subject) parkingSpot49);
        parkingSpot41.detach((booking.Observer) bookingSystem48);
        booking.ParkingSpot parkingSpot54 = new booking.ParkingSpot();
        parkingSpot54.occupySpot("hi!");
        booking.BookingSystem bookingSystem57 = new booking.BookingSystem((booking.Subject) parkingSpot54);
        booking.ParkingSpot parkingSpot58 = new booking.ParkingSpot();
        parkingSpot58.occupySpot("hi!");
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot58);
        booking.ParkingSpot parkingSpot62 = new booking.ParkingSpot();
        parkingSpot62.occupySpot("hi!");
        bookingSystem61.update((booking.Subject) parkingSpot62);
        parkingSpot54.detach((booking.Observer) bookingSystem61);
        parkingSpot41.detach((booking.Observer) bookingSystem61);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        booking.BookingSystem bookingSystem75 = new booking.BookingSystem((booking.Subject) parkingSpot72);
        booking.ParkingSpot parkingSpot76 = new booking.ParkingSpot();
        parkingSpot76.occupySpot("hi!");
        bookingSystem75.update((booking.Subject) parkingSpot76);
        parkingSpot68.detach((booking.Observer) bookingSystem75);
        bookingSystem61.update((booking.Subject) parkingSpot68);
        bookingSystem20.update((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot83 = new booking.ParkingSpot();
        parkingSpot83.occupySpot("hi!");
        booking.BookingSystem bookingSystem86 = new booking.BookingSystem((booking.Subject) parkingSpot83);
        booking.ParkingSpot parkingSpot87 = new booking.ParkingSpot();
        parkingSpot87.occupySpot("hi!");
        booking.BookingSystem bookingSystem90 = new booking.BookingSystem((booking.Subject) parkingSpot87);
        booking.ParkingSpot parkingSpot91 = new booking.ParkingSpot();
        parkingSpot91.occupySpot("hi!");
        bookingSystem90.update((booking.Subject) parkingSpot91);
        parkingSpot83.detach((booking.Observer) bookingSystem90);
        parkingSpot68.detach((booking.Observer) bookingSystem90);
        booking.BookingSystem bookingSystem97 = new booking.BookingSystem((booking.Subject) parkingSpot68);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        bookingSystem20.update((booking.Subject) parkingSpot27);
        boolean boolean41 = parkingSpot27.isOccupied();
        booking.ParkingSensor parkingSensor42 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        parkingSpot43.freeSpot();
        boolean boolean45 = parkingSpot43.isOccupied();
        parkingSpot43.freeSpot();
        parkingSensor42.update((booking.Subject) parkingSpot43);
        parkingSpot43.occupySpot("hi!");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        booking.BookingSystem bookingSystem22 = new booking.BookingSystem((booking.Subject) parkingSpot19);
        booking.ParkingSpot parkingSpot23 = new booking.ParkingSpot();
        parkingSpot23.occupySpot("hi!");
        bookingSystem22.update((booking.Subject) parkingSpot23);
        parkingSpot15.detach((booking.Observer) bookingSystem22);
        parkingSpot2.detach((booking.Observer) bookingSystem22);
        parkingSpot2.occupySpot("CANCEL");
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot32 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor33 = new booking.ParkingSensor((booking.Subject) parkingSpot32);
        booking.ParkingSpot parkingSpot34 = new booking.ParkingSpot();
        parkingSpot34.occupySpot("hi!");
        booking.BookingSystem bookingSystem37 = new booking.BookingSystem((booking.Subject) parkingSpot34);
        booking.ParkingSpot parkingSpot38 = new booking.ParkingSpot();
        parkingSpot38.occupySpot("hi!");
        booking.BookingSystem bookingSystem41 = new booking.BookingSystem((booking.Subject) parkingSpot38);
        booking.ParkingSpot parkingSpot42 = new booking.ParkingSpot();
        parkingSpot42.occupySpot("hi!");
        bookingSystem41.update((booking.Subject) parkingSpot42);
        parkingSpot34.detach((booking.Observer) bookingSystem41);
        parkingSensor33.update((booking.Subject) parkingSpot34);
        parkingSpot2.detach((booking.Observer) parkingSensor33);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        booking.BookingSystem bookingSystem56 = new booking.BookingSystem((booking.Subject) parkingSpot53);
        bookingSystem52.update((booking.Subject) parkingSpot53);
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot53);
        parkingSpot2.detach((booking.Observer) bookingSystem58);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        booking.BookingSystem bookingSystem63 = new booking.BookingSystem((booking.Subject) parkingSpot60);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        bookingSystem67.update((booking.Subject) parkingSpot68);
        parkingSpot60.detach((booking.Observer) bookingSystem67);
        booking.ParkingSpot parkingSpot73 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor74 = new booking.ParkingSensor((booking.Subject) parkingSpot73);
        booking.ParkingSpot parkingSpot75 = new booking.ParkingSpot();
        parkingSpot75.occupySpot("hi!");
        booking.BookingSystem bookingSystem78 = new booking.BookingSystem((booking.Subject) parkingSpot75);
        booking.ParkingSpot parkingSpot79 = new booking.ParkingSpot();
        parkingSpot79.occupySpot("hi!");
        booking.BookingSystem bookingSystem82 = new booking.BookingSystem((booking.Subject) parkingSpot79);
        booking.ParkingSpot parkingSpot83 = new booking.ParkingSpot();
        parkingSpot83.occupySpot("hi!");
        bookingSystem82.update((booking.Subject) parkingSpot83);
        parkingSpot75.detach((booking.Observer) bookingSystem82);
        parkingSensor74.update((booking.Subject) parkingSpot75);
        booking.ParkingSpot parkingSpot89 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor90 = new booking.ParkingSensor((booking.Subject) parkingSpot89);
        parkingSpot75.detach((booking.Observer) parkingSensor90);
        bookingSystem67.update((booking.Subject) parkingSpot75);
        parkingSpot75.occupySpot("BOOK");
        booking.ParkingSensor parkingSensor95 = new booking.ParkingSensor((booking.Subject) parkingSpot75);
        bookingSystem58.update((booking.Subject) parkingSpot75);
        boolean boolean97 = parkingSpot75.isOccupied();
        java.lang.String str98 = parkingSpot75.getLicensePlate();
        java.lang.String str99 = parkingSpot75.getLicensePlate();
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "hi!" + "'", str98, "hi!");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "hi!" + "'", str99, "hi!");
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        boolean boolean13 = parkingSpot0.isOccupied();
        boolean boolean14 = parkingSpot0.isOccupied();
        booking.ParkingSensor parkingSensor15 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.Subject subject16 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingSensor15.update(subject16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Object.equals(Object)\" because \"changedSubject\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        parkingSpot0.freeSpot();
        booking.ParkingSpot parkingSpot3 = new booking.ParkingSpot();
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor5 = new booking.ParkingSensor((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        booking.BookingSystem bookingSystem13 = new booking.BookingSystem((booking.Subject) parkingSpot10);
        booking.ParkingSpot parkingSpot14 = new booking.ParkingSpot();
        parkingSpot14.occupySpot("hi!");
        bookingSystem13.update((booking.Subject) parkingSpot14);
        parkingSpot6.detach((booking.Observer) bookingSystem13);
        parkingSensor5.update((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot20 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor21 = new booking.ParkingSensor((booking.Subject) parkingSpot20);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        booking.BookingSystem bookingSystem29 = new booking.BookingSystem((booking.Subject) parkingSpot26);
        booking.ParkingSpot parkingSpot30 = new booking.ParkingSpot();
        parkingSpot30.occupySpot("hi!");
        bookingSystem29.update((booking.Subject) parkingSpot30);
        parkingSpot22.detach((booking.Observer) bookingSystem29);
        parkingSensor21.update((booking.Subject) parkingSpot22);
        parkingSpot6.detach((booking.Observer) parkingSensor21);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor38 = new booking.ParkingSensor((booking.Subject) parkingSpot37);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        booking.BookingSystem bookingSystem42 = new booking.BookingSystem((booking.Subject) parkingSpot39);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        parkingSpot43.occupySpot("hi!");
        booking.BookingSystem bookingSystem46 = new booking.BookingSystem((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot47 = new booking.ParkingSpot();
        parkingSpot47.occupySpot("hi!");
        bookingSystem46.update((booking.Subject) parkingSpot47);
        parkingSpot39.detach((booking.Observer) bookingSystem46);
        parkingSensor38.update((booking.Subject) parkingSpot39);
        booking.ParkingSensor parkingSensor53 = new booking.ParkingSensor((booking.Subject) parkingSpot39);
        parkingSpot6.attach((booking.Observer) parkingSensor53);
        parkingSpot3.attach((booking.Observer) parkingSensor53);
        parkingSpot0.attach((booking.Observer) parkingSensor53);
        parkingSpot0.occupySpot("CANCEL");
        parkingSpot0.occupySpot("BOOK");
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot8 = new booking.ParkingSpot();
        parkingSpot8.occupySpot("hi!");
        bookingSystem7.update((booking.Subject) parkingSpot8);
        parkingSpot0.detach((booking.Observer) bookingSystem7);
        booking.ParkingSpot parkingSpot13 = new booking.ParkingSpot();
        parkingSpot13.occupySpot("hi!");
        booking.BookingSystem bookingSystem16 = new booking.BookingSystem((booking.Subject) parkingSpot13);
        booking.ParkingSpot parkingSpot17 = new booking.ParkingSpot();
        parkingSpot17.occupySpot("hi!");
        booking.BookingSystem bookingSystem20 = new booking.BookingSystem((booking.Subject) parkingSpot17);
        booking.ParkingSpot parkingSpot21 = new booking.ParkingSpot();
        parkingSpot21.occupySpot("hi!");
        bookingSystem20.update((booking.Subject) parkingSpot21);
        parkingSpot13.detach((booking.Observer) bookingSystem20);
        parkingSpot0.detach((booking.Observer) bookingSystem20);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor28 = new booking.ParkingSensor((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot29 = new booking.ParkingSpot();
        parkingSpot29.occupySpot("hi!");
        booking.BookingSystem bookingSystem32 = new booking.BookingSystem((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot33 = new booking.ParkingSpot();
        parkingSpot33.occupySpot("hi!");
        booking.BookingSystem bookingSystem36 = new booking.BookingSystem((booking.Subject) parkingSpot33);
        booking.ParkingSpot parkingSpot37 = new booking.ParkingSpot();
        parkingSpot37.occupySpot("hi!");
        bookingSystem36.update((booking.Subject) parkingSpot37);
        parkingSpot29.detach((booking.Observer) bookingSystem36);
        parkingSensor28.update((booking.Subject) parkingSpot29);
        booking.ParkingSpot parkingSpot43 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor44 = new booking.ParkingSensor((booking.Subject) parkingSpot43);
        booking.ParkingSpot parkingSpot45 = new booking.ParkingSpot();
        parkingSpot45.occupySpot("hi!");
        booking.BookingSystem bookingSystem48 = new booking.BookingSystem((booking.Subject) parkingSpot45);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSpot49.occupySpot("hi!");
        booking.BookingSystem bookingSystem52 = new booking.BookingSystem((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot53 = new booking.ParkingSpot();
        parkingSpot53.occupySpot("hi!");
        bookingSystem52.update((booking.Subject) parkingSpot53);
        parkingSpot45.detach((booking.Observer) bookingSystem52);
        parkingSensor44.update((booking.Subject) parkingSpot45);
        parkingSpot29.detach((booking.Observer) parkingSensor44);
        parkingSpot0.detach((booking.Observer) parkingSensor44);
        booking.BookingSystem bookingSystem61 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        parkingSpot0.freeSpot();
        booking.BookingSystem bookingSystem63 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        parkingSpot0.freeSpot();
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot16 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor17 = new booking.ParkingSensor((booking.Subject) parkingSpot16);
        booking.ParkingSpot parkingSpot18 = new booking.ParkingSpot();
        parkingSpot18.occupySpot("hi!");
        booking.BookingSystem bookingSystem21 = new booking.BookingSystem((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot22 = new booking.ParkingSpot();
        parkingSpot22.occupySpot("hi!");
        booking.BookingSystem bookingSystem25 = new booking.BookingSystem((booking.Subject) parkingSpot22);
        booking.ParkingSpot parkingSpot26 = new booking.ParkingSpot();
        parkingSpot26.occupySpot("hi!");
        bookingSystem25.update((booking.Subject) parkingSpot26);
        parkingSpot18.detach((booking.Observer) bookingSystem25);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        booking.BookingSystem bookingSystem38 = new booking.BookingSystem((booking.Subject) parkingSpot35);
        booking.ParkingSpot parkingSpot39 = new booking.ParkingSpot();
        parkingSpot39.occupySpot("hi!");
        bookingSystem38.update((booking.Subject) parkingSpot39);
        parkingSpot31.detach((booking.Observer) bookingSystem38);
        parkingSpot18.detach((booking.Observer) bookingSystem38);
        parkingSpot18.occupySpot("CANCEL");
        parkingSensor17.update((booking.Subject) parkingSpot18);
        parkingSensor1.update((booking.Subject) parkingSpot18);
        booking.ParkingSpot parkingSpot49 = new booking.ParkingSpot();
        parkingSensor1.update((booking.Subject) parkingSpot49);
        booking.ParkingSpot parkingSpot51 = new booking.ParkingSpot();
        parkingSpot51.occupySpot("hi!");
        booking.BookingSystem bookingSystem54 = new booking.BookingSystem((booking.Subject) parkingSpot51);
        booking.ParkingSpot parkingSpot55 = new booking.ParkingSpot();
        parkingSpot55.occupySpot("hi!");
        booking.BookingSystem bookingSystem58 = new booking.BookingSystem((booking.Subject) parkingSpot55);
        booking.ParkingSpot parkingSpot59 = new booking.ParkingSpot();
        parkingSpot59.occupySpot("hi!");
        bookingSystem58.update((booking.Subject) parkingSpot59);
        parkingSpot51.detach((booking.Observer) bookingSystem58);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        booking.ParkingSpot parkingSpot68 = new booking.ParkingSpot();
        parkingSpot68.occupySpot("hi!");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot68);
        booking.ParkingSpot parkingSpot72 = new booking.ParkingSpot();
        parkingSpot72.occupySpot("hi!");
        bookingSystem71.update((booking.Subject) parkingSpot72);
        parkingSpot64.detach((booking.Observer) bookingSystem71);
        parkingSpot51.detach((booking.Observer) bookingSystem71);
        booking.ParkingSpot parkingSpot78 = new booking.ParkingSpot();
        parkingSpot78.occupySpot("hi!");
        booking.BookingSystem bookingSystem81 = new booking.BookingSystem((booking.Subject) parkingSpot78);
        booking.ParkingSpot parkingSpot82 = new booking.ParkingSpot();
        parkingSpot82.occupySpot("hi!");
        booking.BookingSystem bookingSystem85 = new booking.BookingSystem((booking.Subject) parkingSpot82);
        booking.ParkingSpot parkingSpot86 = new booking.ParkingSpot();
        parkingSpot86.occupySpot("hi!");
        bookingSystem85.update((booking.Subject) parkingSpot86);
        parkingSpot78.detach((booking.Observer) bookingSystem85);
        bookingSystem71.update((booking.Subject) parkingSpot78);
        booking.ParkingSensor parkingSensor92 = new booking.ParkingSensor((booking.Subject) parkingSpot78);
        parkingSensor1.update((booking.Subject) parkingSpot78);
        booking.BookingSystem bookingSystem94 = new booking.BookingSystem((booking.Subject) parkingSpot78);
        parkingSpot78.freeSpot();
        parkingSpot78.occupySpot("CANCEL");
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        bookingReceiver0.cancelBooking("hi!", "hi!");
        java.lang.String str4 = bookingReceiver0.getAction();
        booking.BookingReceiver bookingReceiver5 = null;
        booking.BookingReceiver bookingReceiver9 = new booking.BookingReceiver();
        booking.UserType userType13 = booking.UserType.FACULTY;
        bookingReceiver9.bookSpace("", "", 100, userType13);
        booking.BookCommand bookCommand15 = new booking.BookCommand(bookingReceiver5, "hi!", "", 0, userType13);
        double double16 = bookingReceiver0.getRate(userType13);
        booking.UserType userType20 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand21 = new booking.ExtendCommand(bookingReceiver0, "BOOK", "EXTEND", (int) (short) 10, userType20);
        extendCommand21.doAction();
        extendCommand21.doAction();
        extendCommand21.doAction();
        extendCommand21.doAction();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CANCEL" + "'", str4, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType13 + "' != '" + booking.UserType.FACULTY + "'", userType13.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 8.0d + "'", double16 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType20 + "' != '" + booking.UserType.FACULTY + "'", userType20.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        booking.BookingReceiver bookingReceiver0 = null;
        booking.BookingReceiver bookingReceiver4 = new booking.BookingReceiver();
        bookingReceiver4.cancelBooking("hi!", "hi!");
        bookingReceiver4.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver11 = new booking.BookingReceiver();
        booking.UserType userType15 = booking.UserType.FACULTY;
        bookingReceiver11.bookSpace("", "", 100, userType15);
        double double17 = bookingReceiver4.getRate(userType15);
        java.lang.String str18 = bookingReceiver4.getAction();
        booking.BookingReceiver bookingReceiver22 = new booking.BookingReceiver();
        java.lang.String str23 = bookingReceiver22.getAction();
        booking.UserType userType27 = null;
        booking.ExtendCommand extendCommand28 = new booking.ExtendCommand(bookingReceiver22, "hi!", "", 100, userType27);
        java.lang.String str29 = bookingReceiver22.getAction();
        booking.UserType userType33 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand34 = new booking.ExtendCommand(bookingReceiver22, "hi!", "hi!", (int) (byte) 0, userType33);
        double double35 = bookingReceiver22.getAmount();
        java.lang.String str36 = bookingReceiver22.getAction();
        double double37 = bookingReceiver22.getDeposit();
        double double38 = bookingReceiver22.getDeposit();
        booking.BookingReceiver bookingReceiver42 = new booking.BookingReceiver();
        bookingReceiver42.cancelBooking("hi!", "hi!");
        java.lang.String str46 = bookingReceiver42.getAction();
        booking.BookingReceiver bookingReceiver47 = null;
        booking.BookingReceiver bookingReceiver51 = new booking.BookingReceiver();
        booking.UserType userType55 = booking.UserType.FACULTY;
        bookingReceiver51.bookSpace("", "", 100, userType55);
        booking.BookCommand bookCommand57 = new booking.BookCommand(bookingReceiver47, "hi!", "", 0, userType55);
        double double58 = bookingReceiver42.getRate(userType55);
        booking.UserType userType62 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand63 = new booking.ExtendCommand(bookingReceiver42, "BOOK", "EXTEND", (int) (short) 10, userType62);
        booking.BookCommand bookCommand64 = new booking.BookCommand(bookingReceiver22, "EXTEND", "hi!", (int) 'a', userType62);
        booking.ExtendCommand extendCommand65 = new booking.ExtendCommand(bookingReceiver4, "", "", 1, userType62);
        booking.BookCommand bookCommand66 = new booking.BookCommand(bookingReceiver0, "CANCEL", "BOOK", (int) (short) 0, userType62);
        java.lang.Class<?> wildcardClass67 = userType62.getClass();
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + booking.UserType.FACULTY + "'", userType15.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 8.0d + "'", double17 == 8.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CANCEL" + "'", str18, "CANCEL");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + userType33 + "' != '" + booking.UserType.NON_FACULTY + "'", userType33.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "CANCEL" + "'", str46, "CANCEL");
        org.junit.Assert.assertTrue("'" + userType55 + "' != '" + booking.UserType.FACULTY + "'", userType55.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 8.0d + "'", double58 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType62 + "' != '" + booking.UserType.FACULTY + "'", userType62.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        booking.UserType userType12 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand13 = new booking.BookCommand(bookingReceiver2, "hi!", "hi!", 100, userType12);
        bookCommand13.doAction();
        bookCommand13.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand13);
        commandInvoker0.executeCommand();
        booking.CommandInvoker commandInvoker18 = new booking.CommandInvoker();
        booking.BookingReceiver bookingReceiver19 = new booking.BookingReceiver();
        java.lang.String str20 = bookingReceiver19.getAction();
        booking.UserType userType24 = null;
        booking.ExtendCommand extendCommand25 = new booking.ExtendCommand(bookingReceiver19, "hi!", "", 100, userType24);
        booking.UserType userType29 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand30 = new booking.BookCommand(bookingReceiver19, "hi!", "hi!", 100, userType29);
        booking.UserType userType34 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand35 = new booking.ExtendCommand(bookingReceiver19, "", "", (int) (short) 1, userType34);
        commandInvoker18.setCommand((booking.ICommand) extendCommand35);
        extendCommand35.doAction();
        extendCommand35.doAction();
        commandInvoker0.setCommand((booking.ICommand) extendCommand35);
        booking.BookingReceiver bookingReceiver40 = new booking.BookingReceiver();
        bookingReceiver40.cancelBooking("hi!", "hi!");
        bookingReceiver40.cancelBooking("", "");
        booking.CancelCommand cancelCommand49 = new booking.CancelCommand(bookingReceiver40, "", "hi!");
        commandInvoker0.setCommand((booking.ICommand) cancelCommand49);
        cancelCommand49.doAction();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + booking.UserType.FACULTY + "'", userType12.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + booking.UserType.FACULTY + "'", userType29.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType34 + "' != '" + booking.UserType.FACULTY + "'", userType34.equals(booking.UserType.FACULTY));
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        double double2 = bookingReceiver0.getAmount();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        java.lang.String str9 = bookingReceiver2.getAction();
        booking.UserType userType13 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand14 = new booking.ExtendCommand(bookingReceiver2, "hi!", "hi!", (int) (byte) 0, userType13);
        extendCommand14.doAction();
        commandInvoker0.setCommand((booking.ICommand) extendCommand14);
        booking.BookingReceiver bookingReceiver17 = new booking.BookingReceiver();
        java.lang.String str18 = bookingReceiver17.getAction();
        booking.UserType userType22 = null;
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver17, "hi!", "", 100, userType22);
        booking.UserType userType27 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand28 = new booking.BookCommand(bookingReceiver17, "hi!", "hi!", 100, userType27);
        bookCommand28.doAction();
        bookCommand28.doAction();
        bookCommand28.doAction();
        bookCommand28.doAction();
        bookCommand28.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand28);
        java.lang.Class<?> wildcardClass35 = bookCommand28.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + userType13 + "' != '" + booking.UserType.NON_FACULTY + "'", userType13.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + userType27 + "' != '" + booking.UserType.FACULTY + "'", userType27.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        double double8 = bookingReceiver0.getDeposit();
        java.lang.String str9 = bookingReceiver0.getAction();
        bookingReceiver0.cancelBooking("BOOK", "");
        booking.BookingReceiver bookingReceiver16 = new booking.BookingReceiver();
        java.lang.String str17 = bookingReceiver16.getAction();
        booking.UserType userType21 = null;
        booking.ExtendCommand extendCommand22 = new booking.ExtendCommand(bookingReceiver16, "hi!", "", 100, userType21);
        booking.UserType userType26 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand27 = new booking.BookCommand(bookingReceiver16, "hi!", "hi!", 100, userType26);
        booking.BookingReceiver bookingReceiver28 = new booking.BookingReceiver();
        java.lang.String str29 = bookingReceiver28.getAction();
        booking.UserType userType33 = null;
        booking.ExtendCommand extendCommand34 = new booking.ExtendCommand(bookingReceiver28, "hi!", "", 100, userType33);
        booking.UserType userType38 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand39 = new booking.BookCommand(bookingReceiver28, "hi!", "hi!", 100, userType38);
        booking.BookingReceiver bookingReceiver43 = new booking.BookingReceiver();
        booking.UserType userType47 = booking.UserType.FACULTY;
        bookingReceiver43.bookSpace("", "", 100, userType47);
        bookingReceiver28.extendBooking("", "", (int) 'a', userType47);
        double double50 = bookingReceiver16.getRate(userType47);
        booking.BookCommand bookCommand51 = new booking.BookCommand(bookingReceiver0, "BOOK", "BOOK", (int) (byte) 10, userType47);
        booking.BookingReceiver bookingReceiver55 = new booking.BookingReceiver();
        java.lang.String str56 = bookingReceiver55.getAction();
        booking.UserType userType60 = null;
        booking.ExtendCommand extendCommand61 = new booking.ExtendCommand(bookingReceiver55, "hi!", "", 100, userType60);
        java.lang.String str62 = bookingReceiver55.getAction();
        booking.BookingReceiver bookingReceiver66 = new booking.BookingReceiver();
        bookingReceiver66.cancelBooking("hi!", "hi!");
        bookingReceiver66.cancelBooking("", "");
        booking.BookingReceiver bookingReceiver73 = new booking.BookingReceiver();
        booking.UserType userType77 = booking.UserType.FACULTY;
        bookingReceiver73.bookSpace("", "", 100, userType77);
        double double79 = bookingReceiver66.getRate(userType77);
        booking.BookingReceiver bookingReceiver83 = new booking.BookingReceiver();
        bookingReceiver83.cancelBooking("hi!", "hi!");
        booking.UserType userType87 = booking.UserType.STUDENT;
        double double88 = bookingReceiver83.getRate(userType87);
        booking.BookCommand bookCommand89 = new booking.BookCommand(bookingReceiver66, "hi!", "CANCEL", (int) (short) 10, userType87);
        booking.ExtendCommand extendCommand90 = new booking.ExtendCommand(bookingReceiver55, "BOOK", "EXTEND", (int) '4', userType87);
        booking.ExtendCommand extendCommand91 = new booking.ExtendCommand(bookingReceiver0, "CANCEL", "", (int) '#', userType87);
        java.lang.String str92 = bookingReceiver0.getAction();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + userType26 + "' != '" + booking.UserType.FACULTY + "'", userType26.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + userType38 + "' != '" + booking.UserType.FACULTY + "'", userType38.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType47 + "' != '" + booking.UserType.FACULTY + "'", userType47.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.0d + "'", double50 == 8.0d);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + userType77 + "' != '" + booking.UserType.FACULTY + "'", userType77.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 8.0d + "'", double79 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType87 + "' != '" + booking.UserType.STUDENT + "'", userType87.equals(booking.UserType.STUDENT));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 5.0d + "'", double88 == 5.0d);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "CANCEL" + "'", str92, "CANCEL");
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        booking.UserType userType5 = null;
        booking.ExtendCommand extendCommand6 = new booking.ExtendCommand(bookingReceiver0, "hi!", "", 100, userType5);
        java.lang.String str7 = bookingReceiver0.getAction();
        booking.UserType userType11 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand12 = new booking.ExtendCommand(bookingReceiver0, "hi!", "hi!", (int) (byte) 0, userType11);
        double double13 = bookingReceiver0.getAmount();
        java.lang.String str14 = bookingReceiver0.getAction();
        booking.CancelCommand cancelCommand17 = new booking.CancelCommand(bookingReceiver0, "hi!", "CANCEL");
        double double18 = bookingReceiver0.getDeposit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + booking.UserType.NON_FACULTY + "'", userType11.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot9 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor10 = new booking.ParkingSensor((booking.Subject) parkingSpot9);
        booking.ParkingSpot parkingSpot11 = new booking.ParkingSpot();
        parkingSpot11.occupySpot("hi!");
        booking.BookingSystem bookingSystem14 = new booking.BookingSystem((booking.Subject) parkingSpot11);
        booking.ParkingSpot parkingSpot15 = new booking.ParkingSpot();
        parkingSpot15.occupySpot("hi!");
        booking.BookingSystem bookingSystem18 = new booking.BookingSystem((booking.Subject) parkingSpot15);
        booking.ParkingSpot parkingSpot19 = new booking.ParkingSpot();
        parkingSpot19.occupySpot("hi!");
        bookingSystem18.update((booking.Subject) parkingSpot19);
        parkingSpot11.detach((booking.Observer) bookingSystem18);
        parkingSensor10.update((booking.Subject) parkingSpot11);
        booking.ParkingSpot parkingSpot25 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor26 = new booking.ParkingSensor((booking.Subject) parkingSpot25);
        booking.ParkingSpot parkingSpot27 = new booking.ParkingSpot();
        parkingSpot27.occupySpot("hi!");
        booking.BookingSystem bookingSystem30 = new booking.BookingSystem((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot31 = new booking.ParkingSpot();
        parkingSpot31.occupySpot("hi!");
        booking.BookingSystem bookingSystem34 = new booking.BookingSystem((booking.Subject) parkingSpot31);
        booking.ParkingSpot parkingSpot35 = new booking.ParkingSpot();
        parkingSpot35.occupySpot("hi!");
        bookingSystem34.update((booking.Subject) parkingSpot35);
        parkingSpot27.detach((booking.Observer) bookingSystem34);
        booking.ParkingSpot parkingSpot40 = new booking.ParkingSpot();
        parkingSpot40.occupySpot("hi!");
        booking.BookingSystem bookingSystem43 = new booking.BookingSystem((booking.Subject) parkingSpot40);
        booking.ParkingSpot parkingSpot44 = new booking.ParkingSpot();
        parkingSpot44.occupySpot("hi!");
        booking.BookingSystem bookingSystem47 = new booking.BookingSystem((booking.Subject) parkingSpot44);
        booking.ParkingSpot parkingSpot48 = new booking.ParkingSpot();
        parkingSpot48.occupySpot("hi!");
        bookingSystem47.update((booking.Subject) parkingSpot48);
        parkingSpot40.detach((booking.Observer) bookingSystem47);
        parkingSpot27.detach((booking.Observer) bookingSystem47);
        parkingSpot27.occupySpot("CANCEL");
        parkingSensor26.update((booking.Subject) parkingSpot27);
        parkingSensor10.update((booking.Subject) parkingSpot27);
        boolean boolean58 = parkingSpot27.isOccupied();
        bookingSystem3.update((booking.Subject) parkingSpot27);
        booking.ParkingSpot parkingSpot60 = new booking.ParkingSpot();
        parkingSpot60.occupySpot("hi!");
        booking.BookingSystem bookingSystem63 = new booking.BookingSystem((booking.Subject) parkingSpot60);
        booking.ParkingSpot parkingSpot64 = new booking.ParkingSpot();
        parkingSpot64.occupySpot("hi!");
        booking.BookingSystem bookingSystem67 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        bookingSystem63.update((booking.Subject) parkingSpot64);
        parkingSpot64.occupySpot("CANCEL");
        booking.BookingSystem bookingSystem71 = new booking.BookingSystem((booking.Subject) parkingSpot64);
        java.lang.String str72 = parkingSpot64.getLicensePlate();
        parkingSpot64.freeSpot();
        bookingSystem3.update((booking.Subject) parkingSpot64);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        parkingSpot0.occupySpot("hi!");
        booking.BookingSystem bookingSystem3 = new booking.BookingSystem((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot4 = new booking.ParkingSpot();
        parkingSpot4.occupySpot("hi!");
        booking.BookingSystem bookingSystem7 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        bookingSystem3.update((booking.Subject) parkingSpot4);
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot4);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor11 = new booking.ParkingSensor((booking.Subject) parkingSpot10);
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot10.freeSpot();
        booking.BookingSystem bookingSystem14 = new booking.BookingSystem((booking.Subject) parkingSpot10);
        java.lang.Class<?> wildcardClass15 = bookingSystem14.getClass();
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        booking.BookingReceiver bookingReceiver0 = new booking.BookingReceiver();
        java.lang.String str1 = bookingReceiver0.getAction();
        double double2 = bookingReceiver0.getDeposit();
        booking.BookingReceiver bookingReceiver6 = new booking.BookingReceiver();
        booking.BookingReceiver bookingReceiver10 = new booking.BookingReceiver();
        java.lang.String str11 = bookingReceiver10.getAction();
        booking.UserType userType15 = null;
        booking.ExtendCommand extendCommand16 = new booking.ExtendCommand(bookingReceiver10, "hi!", "", 100, userType15);
        java.lang.String str17 = bookingReceiver10.getAction();
        booking.UserType userType21 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand22 = new booking.ExtendCommand(bookingReceiver10, "hi!", "hi!", (int) (byte) 0, userType21);
        booking.ExtendCommand extendCommand23 = new booking.ExtendCommand(bookingReceiver6, "", "", (int) (byte) 100, userType21);
        booking.CancelCommand cancelCommand26 = new booking.CancelCommand(bookingReceiver6, "hi!", "hi!");
        booking.BookingReceiver bookingReceiver30 = new booking.BookingReceiver();
        java.lang.String str31 = bookingReceiver30.getAction();
        booking.UserType userType35 = null;
        booking.ExtendCommand extendCommand36 = new booking.ExtendCommand(bookingReceiver30, "hi!", "", 100, userType35);
        booking.UserType userType40 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand41 = new booking.BookCommand(bookingReceiver30, "hi!", "hi!", 100, userType40);
        booking.UserType userType45 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand46 = new booking.ExtendCommand(bookingReceiver30, "", "", (int) (short) 1, userType45);
        bookingReceiver6.bookSpace("CANCEL", "EXTEND", (int) (byte) 10, userType45);
        bookingReceiver0.extendBooking("CANCEL", "hi!", (-1), userType45);
        java.lang.String str49 = bookingReceiver0.getAction();
        double double50 = bookingReceiver0.getAmount();
        booking.BookingReceiver bookingReceiver54 = new booking.BookingReceiver();
        java.lang.String str55 = bookingReceiver54.getAction();
        booking.UserType userType59 = null;
        booking.ExtendCommand extendCommand60 = new booking.ExtendCommand(bookingReceiver54, "hi!", "", 100, userType59);
        booking.UserType userType64 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand65 = new booking.BookCommand(bookingReceiver54, "hi!", "hi!", 100, userType64);
        booking.BookingReceiver bookingReceiver66 = new booking.BookingReceiver();
        java.lang.String str67 = bookingReceiver66.getAction();
        booking.UserType userType71 = null;
        booking.ExtendCommand extendCommand72 = new booking.ExtendCommand(bookingReceiver66, "hi!", "", 100, userType71);
        booking.UserType userType76 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand77 = new booking.BookCommand(bookingReceiver66, "hi!", "hi!", 100, userType76);
        booking.BookingReceiver bookingReceiver81 = new booking.BookingReceiver();
        booking.UserType userType85 = booking.UserType.FACULTY;
        bookingReceiver81.bookSpace("", "", 100, userType85);
        bookingReceiver66.extendBooking("", "", (int) 'a', userType85);
        double double88 = bookingReceiver54.getRate(userType85);
        booking.UserType userType89 = booking.UserType.VISITOR;
        double double90 = bookingReceiver54.getRate(userType89);
        booking.ExtendCommand extendCommand91 = new booking.ExtendCommand(bookingReceiver0, "EXTEND", "BOOK", (int) (byte) 100, userType89);
        java.lang.Class<?> wildcardClass92 = bookingReceiver0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + userType21 + "' != '" + booking.UserType.NON_FACULTY + "'", userType21.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + userType40 + "' != '" + booking.UserType.FACULTY + "'", userType40.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType45 + "' != '" + booking.UserType.FACULTY + "'", userType45.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "EXTEND" + "'", str49, "EXTEND");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-8.0d) + "'", double50 == (-8.0d));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + userType64 + "' != '" + booking.UserType.FACULTY + "'", userType64.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + userType76 + "' != '" + booking.UserType.FACULTY + "'", userType76.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType85 + "' != '" + booking.UserType.FACULTY + "'", userType85.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 8.0d + "'", double88 == 8.0d);
        org.junit.Assert.assertTrue("'" + userType89 + "' != '" + booking.UserType.VISITOR + "'", userType89.equals(booking.UserType.VISITOR));
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 15.0d + "'", double90 == 15.0d);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        booking.CommandInvoker commandInvoker0 = new booking.CommandInvoker();
        commandInvoker0.executeCommand();
        booking.BookingReceiver bookingReceiver2 = new booking.BookingReceiver();
        java.lang.String str3 = bookingReceiver2.getAction();
        booking.UserType userType7 = null;
        booking.ExtendCommand extendCommand8 = new booking.ExtendCommand(bookingReceiver2, "hi!", "", 100, userType7);
        booking.UserType userType12 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand13 = new booking.BookCommand(bookingReceiver2, "hi!", "hi!", 100, userType12);
        bookCommand13.doAction();
        bookCommand13.doAction();
        commandInvoker0.setCommand((booking.ICommand) bookCommand13);
        commandInvoker0.executeCommand();
        commandInvoker0.executeCommand();
        booking.CommandInvoker commandInvoker19 = new booking.CommandInvoker();
        commandInvoker19.executeCommand();
        booking.BookingReceiver bookingReceiver21 = new booking.BookingReceiver();
        java.lang.String str22 = bookingReceiver21.getAction();
        booking.UserType userType26 = null;
        booking.ExtendCommand extendCommand27 = new booking.ExtendCommand(bookingReceiver21, "hi!", "", 100, userType26);
        java.lang.String str28 = bookingReceiver21.getAction();
        booking.UserType userType32 = booking.UserType.NON_FACULTY;
        booking.ExtendCommand extendCommand33 = new booking.ExtendCommand(bookingReceiver21, "hi!", "hi!", (int) (byte) 0, userType32);
        extendCommand33.doAction();
        commandInvoker19.setCommand((booking.ICommand) extendCommand33);
        commandInvoker19.executeCommand();
        booking.BookingReceiver bookingReceiver37 = new booking.BookingReceiver();
        java.lang.String str38 = bookingReceiver37.getAction();
        booking.UserType userType42 = null;
        booking.ExtendCommand extendCommand43 = new booking.ExtendCommand(bookingReceiver37, "hi!", "", 100, userType42);
        booking.UserType userType47 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand48 = new booking.BookCommand(bookingReceiver37, "hi!", "hi!", 100, userType47);
        booking.BookingReceiver bookingReceiver52 = new booking.BookingReceiver();
        booking.UserType userType56 = booking.UserType.FACULTY;
        bookingReceiver52.bookSpace("", "", 100, userType56);
        bookingReceiver37.extendBooking("", "", (int) 'a', userType56);
        booking.CancelCommand cancelCommand61 = new booking.CancelCommand(bookingReceiver37, "BOOK", "CANCEL");
        commandInvoker19.setCommand((booking.ICommand) cancelCommand61);
        commandInvoker0.setCommand((booking.ICommand) cancelCommand61);
        booking.BookingReceiver bookingReceiver64 = new booking.BookingReceiver();
        java.lang.String str65 = bookingReceiver64.getAction();
        booking.UserType userType69 = null;
        booking.ExtendCommand extendCommand70 = new booking.ExtendCommand(bookingReceiver64, "hi!", "", 100, userType69);
        booking.UserType userType74 = booking.UserType.FACULTY;
        booking.BookCommand bookCommand75 = new booking.BookCommand(bookingReceiver64, "hi!", "hi!", 100, userType74);
        booking.UserType userType79 = booking.UserType.FACULTY;
        booking.ExtendCommand extendCommand80 = new booking.ExtendCommand(bookingReceiver64, "", "", (int) (short) 1, userType79);
        commandInvoker0.setCommand((booking.ICommand) extendCommand80);
        java.lang.Class<?> wildcardClass82 = commandInvoker0.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + booking.UserType.FACULTY + "'", userType12.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + userType32 + "' != '" + booking.UserType.NON_FACULTY + "'", userType32.equals(booking.UserType.NON_FACULTY));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + userType47 + "' != '" + booking.UserType.FACULTY + "'", userType47.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType56 + "' != '" + booking.UserType.FACULTY + "'", userType56.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + userType74 + "' != '" + booking.UserType.FACULTY + "'", userType74.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertTrue("'" + userType79 + "' != '" + booking.UserType.FACULTY + "'", userType79.equals(booking.UserType.FACULTY));
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        booking.ParkingSpot parkingSpot0 = new booking.ParkingSpot();
        booking.ParkingSensor parkingSensor1 = new booking.ParkingSensor((booking.Subject) parkingSpot0);
        booking.ParkingSpot parkingSpot2 = new booking.ParkingSpot();
        parkingSpot2.occupySpot("hi!");
        booking.BookingSystem bookingSystem5 = new booking.BookingSystem((booking.Subject) parkingSpot2);
        booking.ParkingSpot parkingSpot6 = new booking.ParkingSpot();
        parkingSpot6.occupySpot("hi!");
        booking.BookingSystem bookingSystem9 = new booking.BookingSystem((booking.Subject) parkingSpot6);
        booking.ParkingSpot parkingSpot10 = new booking.ParkingSpot();
        parkingSpot10.occupySpot("hi!");
        bookingSystem9.update((booking.Subject) parkingSpot10);
        parkingSpot2.detach((booking.Observer) bookingSystem9);
        parkingSensor1.update((booking.Subject) parkingSpot2);
        booking.ParkingSensor parkingSensor16 = new booking.ParkingSensor((booking.Subject) parkingSpot2);
        booking.BookingSystem bookingSystem17 = new booking.BookingSystem((booking.Subject) parkingSpot2);
    }
}

