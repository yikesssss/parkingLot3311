package rando.database;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        java.lang.Class<?> wildcardClass1 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot1 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        database.Database.resetInstance();
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot3 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        database.Database database1 = database.Database.getInstance("");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        database.Database database1 = database.Database.getInstance("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot5 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("hi!");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: hi! (The system cannot find the file specified)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("hi!");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: hi! (The system cannot find the file specified)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = parkingSpot2.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        database.Database database1 = database.Database.getInstance("");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("hi!");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: hi! (The system cannot find the file specified)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.lang.Class<?> wildcardClass3 = userList2.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        database.Database database1 = database.Database.getInstance("");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.lang.Class<?> wildcardClass3 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.lang.Class<?> wildcardClass6 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.lang.Class<?> wildcardClass4 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.lang.Class<?> wildcardClass7 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        java.lang.Class<?> wildcardClass7 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        database.Database database1 = database.Database.getInstance("hi!");
        java.lang.Class<?> wildcardClass2 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        java.lang.Class<?> wildcardClass10 = userList8.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.lang.Class<?> wildcardClass4 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.lang.Class<?> wildcardClass5 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot7 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.lang.Class<?> wildcardClass3 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.lang.Class<?> wildcardClass4 = userList3.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = parkingSpot8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        java.lang.Class<?> wildcardClass11 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        java.lang.Class<?> wildcardClass3 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass15 = parkingSpot14.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '4');
        java.lang.Class<?> wildcardClass11 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot5 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
// flaky "1) test0047(RegressionTest0)":         database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        java.util.ArrayList<user.User> userList21 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList21);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        java.lang.Class<?> wildcardClass14 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
// flaky "2) test0055(RegressionTest0)":         database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        java.lang.Class<?> wildcardClass21 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        java.lang.Class<?> wildcardClass30 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
// flaky "3) test0057(RegressionTest0)":         database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
// flaky "4) test0058(RegressionTest0)":         database1.load("hi!");
        database1.update("hi!");
        java.util.ArrayList<user.User> userList12 = database1.users;
        java.lang.Class<?> wildcardClass13 = userList12.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
// flaky "5) test0059(RegressionTest0)":         database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        java.lang.Class<?> wildcardClass21 = userList17.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
// flaky "6) test0060(RegressionTest0)":         database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database22.users = userList26;
        java.util.ArrayList<user.User> userList28 = database22.users;
        java.util.ArrayList<user.User> userList29 = database22.users;
        database22.load("hi!");
        java.util.ArrayList<user.User> userList32 = database22.users;
        database1.users = userList32;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot5 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.lang.Class<?> wildcardClass9 = userList8.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        java.util.ArrayList<user.User> userList9 = database6.users;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database11.users = userList15;
        database6.users = userList15;
        database.Database database19 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList20 = database19.users;
        java.util.ArrayList<user.User> userList21 = database19.users;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database23.users = userList29;
        database19.users = userList29;
        database6.users = userList29;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        database6.users = userList40;
        database1.users = userList40;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.lang.Class<?> wildcardClass8 = userList7.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
// flaky "7) test0069(RegressionTest0)":         database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.util.ArrayList<user.User> userList5 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot7 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        database1.users = userList35;
        java.util.ArrayList<user.User> userList38 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList38);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
// flaky "8) test0077(RegressionTest0)":         database1.load("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList9 = database1.users;
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        java.util.ArrayList<user.User> userList14 = database11.users;
        database11.load("hi!");
        database11.load("hi!");
        java.util.ArrayList<user.User> userList19 = database11.users;
        database1.users = userList19;
        java.lang.Class<?> wildcardClass21 = userList19.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.lang.Class<?> wildcardClass5 = userList4.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
// flaky "9) test0081(RegressionTest0)":         database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = parkingSpot12.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        java.lang.Class<?> wildcardClass3 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.lang.Class<?> wildcardClass3 = userList2.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
// flaky "10) test0088(RegressionTest0)":         database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database22.users = userList26;
        java.util.ArrayList<user.User> userList28 = database22.users;
        java.util.ArrayList<user.User> userList29 = database22.users;
        database22.load("hi!");
        java.util.ArrayList<user.User> userList32 = database22.users;
        database1.users = userList32;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        database.Database database17 = database.Database.getInstance("hi!");
        user.User[] userArray18 = new user.User[] {};
        java.util.ArrayList<user.User> userList19 = new java.util.ArrayList<user.User>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<user.User>) userList19, userArray18);
        database17.users = userList19;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        database17.users = userList24;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database.Database database31 = database.Database.getInstance("hi!");
        user.User[] userArray32 = new user.User[] {};
        java.util.ArrayList<user.User> userList33 = new java.util.ArrayList<user.User>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<user.User>) userList33, userArray32);
        database31.users = userList33;
        database27.users = userList33;
        database17.users = userList33;
        database1.users = userList33;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userArray18);
        org.junit.Assert.assertArrayEquals(userArray18, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userArray32);
        org.junit.Assert.assertArrayEquals(userArray32, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass15 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        java.lang.Class<?> wildcardClass10 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        java.util.ArrayList<user.User> userList16 = database1.users;
        java.lang.Class<?> wildcardClass17 = userList16.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot7 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        java.lang.Class<?> wildcardClass13 = userList10.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList32 = database31.users;
        java.util.ArrayList<user.User> userList33 = database31.users;
        java.util.ArrayList<user.User> userList34 = database31.users;
        database31.load("hi!");
        database.Database database38 = database.Database.getInstance("");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database38.users = userList47;
        database31.users = userList47;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database1.users = userList51;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList51);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        java.util.ArrayList<user.User> userList16 = database1.users;
        java.lang.Class<?> wildcardClass17 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.util.ArrayList<user.User> userList5 = database1.users;
        database.Database database7 = database.Database.getInstance("hi!");
        user.User[] userArray8 = new user.User[] {};
        java.util.ArrayList<user.User> userList9 = new java.util.ArrayList<user.User>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<user.User>) userList9, userArray8);
        database7.users = userList9;
        database1.users = userList9;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userArray8);
        org.junit.Assert.assertArrayEquals(userArray8, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(userList15);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        database18.users = userList30;
        database1.users = userList30;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.util.ArrayList<user.User> userList5 = database1.users;
        database.Database database7 = database.Database.getInstance("hi!");
        user.User[] userArray8 = new user.User[] {};
        java.util.ArrayList<user.User> userList9 = new java.util.ArrayList<user.User>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<user.User>) userList9, userArray8);
        database7.users = userList9;
        database1.users = userList9;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass15 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userArray8);
        org.junit.Assert.assertArrayEquals(userArray8, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot3 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList14 = null;
        database1.users = userList14;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.iterator()\" because \"this.users\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
// flaky "11) test0109(RegressionTest0)":         database1.update("hi!");
        java.lang.Class<?> wildcardClass10 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
// flaky "1) test0109(RegressionTest0)":         org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
// flaky "1) test0109(RegressionTest0)":         org.junit.Assert.assertNotNull(userList5);
// flaky "1) test0109(RegressionTest0)":         org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database.Database database16 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database1.users = userList17;
        java.util.ArrayList<user.User> userList19 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
// flaky "12) test0110(RegressionTest0)":         org.junit.Assert.assertNotNull(userList2);
// flaky "2) test0110(RegressionTest0)":         org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList19);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        database1.users = userList35;
        java.lang.Class<?> wildcardClass38 = userList35.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        java.lang.Class<?> wildcardClass9 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        database.Database database13 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        java.util.ArrayList<user.User> userList16 = database13.users;
        database13.load("hi!");
        database13.load("hi!");
        java.util.ArrayList<user.User> userList21 = database13.users;
        database1.users = userList21;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList21);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = parkingSpot10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        database.Database database1 = database.Database.getInstance("hi!");
        database.Database database3 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList4 = database3.users;
        java.util.ArrayList<user.User> userList5 = database3.users;
        java.util.ArrayList<user.User> userList6 = database3.users;
        database3.load("hi!");
        database.Database database10 = database.Database.getInstance("");
        database.Database database12 = database.Database.getInstance("hi!");
        user.User[] userArray13 = new user.User[] {};
        java.util.ArrayList<user.User> userList14 = new java.util.ArrayList<user.User>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<user.User>) userList14, userArray13);
        database12.users = userList14;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database12.users = userList19;
        database10.users = userList19;
        database3.users = userList19;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database24.users = userList28;
        java.util.ArrayList<user.User> userList30 = database24.users;
        java.util.ArrayList<user.User> userList31 = database24.users;
        database3.users = userList31;
        database1.users = userList31;
        java.lang.Class<?> wildcardClass34 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userArray13);
        org.junit.Assert.assertArrayEquals(userArray13, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        java.lang.Class<?> wildcardClass13 = userList10.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        java.lang.Class<?> wildcardClass22 = userList21.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot3 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        database1.update("hi!");
        java.util.ArrayList<user.User> userList12 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList12);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        java.lang.Class<?> wildcardClass7 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        java.lang.Class<?> wildcardClass15 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass19 = parkingSpot18.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = parkingSpot6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList9 = database1.users;
        java.lang.Class<?> wildcardClass10 = userList9.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.lang.Class<?> wildcardClass21 = userList18.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        java.lang.Class<?> wildcardClass7 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot5 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        java.util.ArrayList<user.User> userList26 = database23.users;
        java.util.ArrayList<user.User> userList27 = database23.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database23.users = userList31;
        database1.users = userList31;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        java.util.ArrayList<user.User> userList26 = database23.users;
        java.util.ArrayList<user.User> userList27 = database23.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database23.users = userList31;
        database1.users = userList31;
        java.util.ArrayList<user.User> userList36 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(userList36);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        database18.users = userList30;
        database1.users = userList30;
        database.Database database34 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList35 = database34.users;
        java.util.ArrayList<user.User> userList36 = database34.users;
        java.util.ArrayList<user.User> userList37 = database34.users;
        database34.load("hi!");
        database.Database database41 = database.Database.getInstance("");
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database41.users = userList50;
        database34.users = userList50;
        database1.users = userList50;
        java.lang.Class<?> wildcardClass55 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        java.util.ArrayList<user.User> userList9 = database6.users;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database11.users = userList15;
        database6.users = userList15;
        database.Database database19 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList20 = database19.users;
        java.util.ArrayList<user.User> userList21 = database19.users;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database23.users = userList29;
        database19.users = userList29;
        database6.users = userList29;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        database6.users = userList40;
        database1.users = userList40;
        java.util.ArrayList<user.User> userList44 = database1.users;
        java.lang.Class<?> wildcardClass45 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass15 = parkingSpot14.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = parkingSpot16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        database.Database database17 = database.Database.getInstance("hi!");
        user.User[] userArray18 = new user.User[] {};
        java.util.ArrayList<user.User> userList19 = new java.util.ArrayList<user.User>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<user.User>) userList19, userArray18);
        database17.users = userList19;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        database17.users = userList24;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database.Database database31 = database.Database.getInstance("hi!");
        user.User[] userArray32 = new user.User[] {};
        java.util.ArrayList<user.User> userList33 = new java.util.ArrayList<user.User>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<user.User>) userList33, userArray32);
        database31.users = userList33;
        database27.users = userList33;
        database17.users = userList33;
        database1.users = userList33;
        java.lang.Class<?> wildcardClass39 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userArray18);
        org.junit.Assert.assertArrayEquals(userArray18, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userArray32);
        org.junit.Assert.assertArrayEquals(userArray32, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        java.util.ArrayList<user.User> userList38 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(userList38);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        java.lang.Class<?> wildcardClass11 = userList10.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList14 = null;
        database1.users = userList14;
        java.lang.Class<?> wildcardClass16 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        java.lang.Class<?> wildcardClass15 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.util.ArrayList<user.User> userList5 = database1.users;
        database.Database database7 = database.Database.getInstance("hi!");
        user.User[] userArray8 = new user.User[] {};
        java.util.ArrayList<user.User> userList9 = new java.util.ArrayList<user.User>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<user.User>) userList9, userArray8);
        database7.users = userList9;
        database1.users = userList9;
        java.util.ArrayList<user.User> userList13 = null;
        database1.users = userList13;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
// flaky "13) test0158(RegressionTest0)":         org.junit.Assert.assertNotNull(userList2);
// flaky "3) test0158(RegressionTest0)":         org.junit.Assert.assertNotNull(userList3);
// flaky "2) test0158(RegressionTest0)":         org.junit.Assert.assertNotNull(userList4);
// flaky "2) test0158(RegressionTest0)":         org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userArray8);
        org.junit.Assert.assertArrayEquals(userArray8, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
// flaky "14) test0159(RegressionTest0)":         org.junit.Assert.assertNotNull(userList2);
// flaky "4) test0159(RegressionTest0)":         org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
// flaky "3) test0159(RegressionTest0)":         org.junit.Assert.assertNotNull(userList6);
// flaky "3) test0159(RegressionTest0)":         org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database27.users = userList31;
        java.util.ArrayList<user.User> userList33 = database27.users;
        java.util.ArrayList<user.User> userList34 = database27.users;
        database16.users = userList34;
        database1.users = userList34;
        java.lang.Class<?> wildcardClass37 = userList34.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = parkingSpot10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList17 = database1.users;
        java.util.ArrayList<user.User> userList18 = database1.users;
        database.Database database20 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList21 = database20.users;
        java.util.ArrayList<user.User> userList22 = database20.users;
        database.Database database24 = database.Database.getInstance("hi!");
        user.User[] userArray25 = new user.User[] {};
        java.util.ArrayList<user.User> userList26 = new java.util.ArrayList<user.User>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<user.User>) userList26, userArray25);
        database24.users = userList26;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database24.users = userList31;
        database20.users = userList31;
        database20.load("hi!");
        java.util.ArrayList<user.User> userList36 = database20.users;
        java.util.ArrayList<user.User> userList37 = database20.users;
        database1.users = userList37;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userArray25);
        org.junit.Assert.assertArrayEquals(userArray25, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        database1.users = userList35;
        java.util.ArrayList<user.User> userList38 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList38);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        java.util.ArrayList<user.User> userList26 = database23.users;
        java.util.ArrayList<user.User> userList27 = database23.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database23.users = userList31;
        database1.users = userList31;
        java.lang.Class<?> wildcardClass36 = userList31.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot7 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList32 = database31.users;
        java.util.ArrayList<user.User> userList33 = database31.users;
        java.util.ArrayList<user.User> userList34 = database31.users;
        database31.load("hi!");
        database.Database database38 = database.Database.getInstance("");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database38.users = userList47;
        database31.users = userList47;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database1.users = userList51;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList51);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database27.users = userList31;
        java.util.ArrayList<user.User> userList33 = database27.users;
        java.util.ArrayList<user.User> userList34 = database27.users;
        database16.users = userList34;
        database1.users = userList34;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        java.lang.Class<?> wildcardClass7 = userList6.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        java.lang.Class<?> wildcardClass7 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList9 = database1.users;
        java.util.ArrayList<user.User> userList10 = database1.users;
        java.lang.Class<?> wildcardClass11 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database39.users = userList50;
        database1.users = userList50;
        database.Database database55 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList56 = database55.users;
        java.util.ArrayList<user.User> userList57 = database55.users;
        java.util.ArrayList<user.User> userList58 = database55.users;
        database.Database database60 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList61 = database60.users;
        database.Database database63 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList64 = database63.users;
        database60.users = userList64;
        database55.users = userList64;
        database55.update("hi!");
        java.util.ArrayList<user.User> userList69 = database55.users;
        java.util.ArrayList<user.User> userList70 = database55.users;
        java.util.ArrayList<user.User> userList71 = database55.users;
        database1.users = userList71;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(database60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(database63);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList69);
        org.junit.Assert.assertNotNull(userList70);
        org.junit.Assert.assertNotNull(userList71);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        java.util.ArrayList<user.User> userList31 = database27.users;
        database1.users = userList31;
        java.util.ArrayList<user.User> userList33 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList33);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot(0);
        java.lang.Class<?> wildcardClass5 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        java.util.ArrayList<user.User> userList9 = database6.users;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database11.users = userList15;
        database6.users = userList15;
        database.Database database19 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList20 = database19.users;
        java.util.ArrayList<user.User> userList21 = database19.users;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database23.users = userList29;
        database19.users = userList29;
        database6.users = userList29;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        database6.users = userList40;
        database1.users = userList40;
        java.util.ArrayList<user.User> userList44 = database1.users;
        java.util.ArrayList<user.User> userList45 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList45);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.lang.Class<?> wildcardClass21 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database1.load("hi!");
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        java.lang.Class<?> wildcardClass26 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = parkingSpot6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot7 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot3 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        java.util.ArrayList<user.User> userList26 = database23.users;
        java.util.ArrayList<user.User> userList27 = database23.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database23.users = userList31;
        database1.users = userList31;
        java.util.ArrayList<user.User> userList36 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(userList36);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        database1.users = userList35;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        java.lang.Class<?> wildcardClass11 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList32 = database31.users;
        java.util.ArrayList<user.User> userList33 = database31.users;
        java.util.ArrayList<user.User> userList34 = database31.users;
        database31.load("hi!");
        database.Database database38 = database.Database.getInstance("");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database38.users = userList47;
        database31.users = userList47;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        java.util.ArrayList<user.User> userList56 = database53.users;
        java.util.ArrayList<user.User> userList57 = database53.users;
        database.Database database59 = database.Database.getInstance("hi!");
        user.User[] userArray60 = new user.User[] {};
        java.util.ArrayList<user.User> userList61 = new java.util.ArrayList<user.User>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<user.User>) userList61, userArray60);
        database59.users = userList61;
        database53.users = userList61;
        database31.users = userList61;
        java.util.ArrayList<user.User> userList66 = database31.users;
        database1.users = userList66;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userArray60);
        org.junit.Assert.assertArrayEquals(userArray60, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(userList66);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database39.users = userList50;
        database1.users = userList50;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass56 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList13 = database1.users;
        java.lang.Class<?> wildcardClass14 = userList13.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        database18.users = userList30;
        database1.users = userList30;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot7 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database.Database database16 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database1.users = userList17;
        java.util.ArrayList<user.User> userList19 = database1.users;
        java.lang.Class<?> wildcardClass20 = userList19.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        java.util.ArrayList<user.User> userList26 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList26);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        database.Database database13 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        java.util.ArrayList<user.User> userList16 = database13.users;
        database13.load("hi!");
        database13.load("hi!");
        java.util.ArrayList<user.User> userList21 = database13.users;
        database1.users = userList21;
        database.Database database24 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList25 = database24.users;
        java.util.ArrayList<user.User> userList26 = database24.users;
        java.util.ArrayList<user.User> userList27 = database24.users;
        database24.load("hi!");
        database.Database database31 = database.Database.getInstance("");
        database.Database database33 = database.Database.getInstance("hi!");
        user.User[] userArray34 = new user.User[] {};
        java.util.ArrayList<user.User> userList35 = new java.util.ArrayList<user.User>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<user.User>) userList35, userArray34);
        database33.users = userList35;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database33.users = userList40;
        database31.users = userList40;
        database24.users = userList40;
        database.Database database45 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList46 = database45.users;
        database.Database database48 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList49 = database48.users;
        database45.users = userList49;
        java.util.ArrayList<user.User> userList51 = database45.users;
        java.util.ArrayList<user.User> userList52 = database45.users;
        database45.load("hi!");
        java.util.ArrayList<user.User> userList55 = database45.users;
        database24.users = userList55;
        database1.users = userList55;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userArray34);
        org.junit.Assert.assertArrayEquals(userArray34, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList55);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database1.users = userList11;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        database1.update("hi!");
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        database1.users = userList15;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = parkingSpot4.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot21 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass15 = parkingSpot14.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database.Database database9 = database.Database.getInstance("");
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database9.users = userList18;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database22.users = userList26;
        java.util.ArrayList<user.User> userList28 = database22.users;
        java.util.ArrayList<user.User> userList29 = database22.users;
        database22.load("hi!");
        java.util.ArrayList<user.User> userList32 = database22.users;
        database9.users = userList32;
        database.Database database35 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList36 = database35.users;
        java.util.ArrayList<user.User> userList37 = database35.users;
        java.util.ArrayList<user.User> userList38 = database35.users;
        java.util.ArrayList<user.User> userList39 = database35.users;
        database9.users = userList39;
        database1.users = userList39;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(userList39);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        java.lang.Class<?> wildcardClass15 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        java.lang.Class<?> wildcardClass38 = userList31.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database39.users = userList50;
        database1.users = userList50;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        java.util.ArrayList<user.User> userList12 = database10.users;
        java.util.ArrayList<user.User> userList13 = database10.users;
        database1.users = userList13;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database22.users = userList26;
        java.util.ArrayList<user.User> userList28 = database22.users;
        java.util.ArrayList<user.User> userList29 = database22.users;
        database22.load("hi!");
        java.util.ArrayList<user.User> userList32 = database22.users;
        database1.users = userList32;
        java.util.ArrayList<user.User> userList34 = database1.users;
        java.lang.Class<?> wildcardClass35 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList30 = database29.users;
        java.util.ArrayList<user.User> userList31 = database29.users;
        java.util.ArrayList<user.User> userList32 = database29.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        database34.users = userList38;
        database29.users = userList38;
        database.Database database42 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList43 = database42.users;
        java.util.ArrayList<user.User> userList44 = database42.users;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        java.util.ArrayList<user.User> userList48 = database46.users;
        database.Database database50 = database.Database.getInstance("hi!");
        user.User[] userArray51 = new user.User[] {};
        java.util.ArrayList<user.User> userList52 = new java.util.ArrayList<user.User>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<user.User>) userList52, userArray51);
        database50.users = userList52;
        database46.users = userList52;
        database42.users = userList52;
        database29.users = userList52;
        database.Database database59 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList60 = database59.users;
        database.Database database62 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList63 = database62.users;
        database59.users = userList63;
        database29.users = userList63;
        java.util.ArrayList<user.User> userList66 = database29.users;
        database25.users = userList66;
        database1.users = userList66;
        java.lang.Class<?> wildcardClass69 = userList66.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userArray51);
        org.junit.Assert.assertArrayEquals(userArray51, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(database62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(userList66);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        database1.update("hi!");
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        database1.users = userList15;
        database1.load("hi!");
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.util.ArrayList<user.User> userList5 = database1.users;
        database.Database database7 = database.Database.getInstance("hi!");
        user.User[] userArray8 = new user.User[] {};
        java.util.ArrayList<user.User> userList9 = new java.util.ArrayList<user.User>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<user.User>) userList9, userArray8);
        database7.users = userList9;
        database1.users = userList9;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
// flaky "15) test0222(RegressionTest0)":         org.junit.Assert.assertNull(userList2);
// flaky "5) test0222(RegressionTest0)":         org.junit.Assert.assertNull(userList3);
// flaky "4) test0222(RegressionTest0)":         org.junit.Assert.assertNull(userList4);
// flaky "4) test0222(RegressionTest0)":         org.junit.Assert.assertNull(userList5);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userArray8);
        org.junit.Assert.assertArrayEquals(userArray8, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(userList15);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database1.users = userList11;
        java.lang.Class<?> wildcardClass14 = userList11.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        java.util.ArrayList<user.User> userList9 = database6.users;
        database6.load("hi!");
        database.Database database13 = database.Database.getInstance("");
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database15.users = userList22;
        database13.users = userList22;
        database6.users = userList22;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database27.users = userList31;
        java.util.ArrayList<user.User> userList33 = database27.users;
        java.util.ArrayList<user.User> userList34 = database27.users;
        database6.users = userList34;
        database1.users = userList34;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
// flaky "16) test0226(RegressionTest0)":         org.junit.Assert.assertNull(userList2);
// flaky "6) test0226(RegressionTest0)":         org.junit.Assert.assertNull(userList3);
// flaky "5) test0226(RegressionTest0)":         org.junit.Assert.assertNull(userList4);
        org.junit.Assert.assertNotNull(database6);
// flaky "5) test0226(RegressionTest0)":         org.junit.Assert.assertNull(userList7);
// flaky "1) test0226(RegressionTest0)":         org.junit.Assert.assertNull(userList8);
// flaky "1) test0226(RegressionTest0)":         org.junit.Assert.assertNull(userList9);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        java.lang.Class<?> wildcardClass17 = userList16.getClass();
        org.junit.Assert.assertNotNull(database1);
// flaky "17) test0228(RegressionTest0)":         org.junit.Assert.assertNull(userList2);
// flaky "7) test0228(RegressionTest0)":         org.junit.Assert.assertNull(userList3);
        org.junit.Assert.assertNotNull(database5);
// flaky "6) test0228(RegressionTest0)":         org.junit.Assert.assertNull(userList6);
// flaky "6) test0228(RegressionTest0)":         org.junit.Assert.assertNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        java.lang.Class<?> wildcardClass26 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database22.users = userList26;
        java.util.ArrayList<user.User> userList28 = database22.users;
        java.util.ArrayList<user.User> userList29 = database22.users;
        database22.load("hi!");
        java.util.ArrayList<user.User> userList32 = database22.users;
        database1.users = userList32;
        java.util.ArrayList<user.User> userList34 = database1.users;
        java.lang.Class<?> wildcardClass35 = userList34.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        database.Database database1 = database.Database.getInstance("hi!");
        database.Database database3 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList4 = database3.users;
        java.util.ArrayList<user.User> userList5 = database3.users;
        java.util.ArrayList<user.User> userList6 = database3.users;
        database3.load("hi!");
        database.Database database10 = database.Database.getInstance("");
        database.Database database12 = database.Database.getInstance("hi!");
        user.User[] userArray13 = new user.User[] {};
        java.util.ArrayList<user.User> userList14 = new java.util.ArrayList<user.User>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<user.User>) userList14, userArray13);
        database12.users = userList14;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database12.users = userList19;
        database10.users = userList19;
        database3.users = userList19;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database24.users = userList28;
        java.util.ArrayList<user.User> userList30 = database24.users;
        java.util.ArrayList<user.User> userList31 = database24.users;
        database3.users = userList31;
        database1.users = userList31;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass36 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userArray13);
        org.junit.Assert.assertArrayEquals(userArray13, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        database1.update("hi!");
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        database1.users = userList15;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = parkingSpot2.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        java.util.ArrayList<user.User> userList16 = database1.users;
        java.util.ArrayList<user.User> userList17 = database1.users;
        database.Database database19 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList20 = database19.users;
        java.util.ArrayList<user.User> userList21 = database19.users;
        database.Database database23 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        java.util.ArrayList<user.User> userList26 = database23.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database28.users = userList32;
        database23.users = userList32;
        database.Database database36 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList37 = database36.users;
        java.util.ArrayList<user.User> userList38 = database36.users;
        database.Database database40 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList41 = database40.users;
        java.util.ArrayList<user.User> userList42 = database40.users;
        database.Database database44 = database.Database.getInstance("hi!");
        user.User[] userArray45 = new user.User[] {};
        java.util.ArrayList<user.User> userList46 = new java.util.ArrayList<user.User>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<user.User>) userList46, userArray45);
        database44.users = userList46;
        database40.users = userList46;
        database36.users = userList46;
        database23.users = userList46;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        database.Database database56 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList57 = database56.users;
        database53.users = userList57;
        database23.users = userList57;
        java.util.ArrayList<user.User> userList60 = database23.users;
        database19.users = userList60;
        database1.users = userList60;
        java.lang.Class<?> wildcardClass63 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database44);
        org.junit.Assert.assertNotNull(userArray45);
        org.junit.Assert.assertArrayEquals(userArray45, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot5 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database22.users = userList26;
        java.util.ArrayList<user.User> userList28 = database22.users;
        java.util.ArrayList<user.User> userList29 = database22.users;
        database22.load("hi!");
        java.util.ArrayList<user.User> userList32 = database22.users;
        database1.users = userList32;
        java.util.ArrayList<user.User> userList34 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList34);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        user.User[] userArray17 = new user.User[] {};
        java.util.ArrayList<user.User> userList18 = new java.util.ArrayList<user.User>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<user.User>) userList18, userArray17);
        database16.users = userList18;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database16.users = userList23;
        database12.users = userList23;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database.Database database31 = database.Database.getInstance("hi!");
        user.User[] userArray32 = new user.User[] {};
        java.util.ArrayList<user.User> userList33 = new java.util.ArrayList<user.User>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<user.User>) userList33, userArray32);
        database31.users = userList33;
        database27.users = userList33;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database38.users = userList42;
        java.util.ArrayList<user.User> userList44 = database38.users;
        java.util.ArrayList<user.User> userList45 = database38.users;
        database27.users = userList45;
        database12.users = userList45;
        database1.users = userList45;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userArray17);
        org.junit.Assert.assertArrayEquals(userArray17, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userArray32);
        org.junit.Assert.assertArrayEquals(userArray32, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList45);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot7 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = parkingSpot6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database.Database database23 = database.Database.getInstance("");
        database.Database database25 = database.Database.getInstance("hi!");
        user.User[] userArray26 = new user.User[] {};
        java.util.ArrayList<user.User> userList27 = new java.util.ArrayList<user.User>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<user.User>) userList27, userArray26);
        database25.users = userList27;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database25.users = userList32;
        database23.users = userList32;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        java.util.ArrayList<user.User> userList43 = database36.users;
        database36.load("hi!");
        java.util.ArrayList<user.User> userList46 = database36.users;
        database23.users = userList46;
        database1.users = userList46;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass51 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userArray26);
        org.junit.Assert.assertArrayEquals(userArray26, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        database.Database database1 = database.Database.getInstance("hi!");
        database.Database database3 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList4 = database3.users;
        java.util.ArrayList<user.User> userList5 = database3.users;
        java.util.ArrayList<user.User> userList6 = database3.users;
        database3.load("hi!");
        database.Database database10 = database.Database.getInstance("");
        database.Database database12 = database.Database.getInstance("hi!");
        user.User[] userArray13 = new user.User[] {};
        java.util.ArrayList<user.User> userList14 = new java.util.ArrayList<user.User>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<user.User>) userList14, userArray13);
        database12.users = userList14;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database12.users = userList19;
        database10.users = userList19;
        database3.users = userList19;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database24.users = userList28;
        java.util.ArrayList<user.User> userList30 = database24.users;
        java.util.ArrayList<user.User> userList31 = database24.users;
        database3.users = userList31;
        database1.users = userList31;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userArray13);
        org.junit.Assert.assertArrayEquals(userArray13, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        java.util.ArrayList<user.User> userList51 = database1.users;
        java.lang.Class<?> wildcardClass52 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        database18.users = userList30;
        database1.users = userList30;
        database.Database database34 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList35 = database34.users;
        java.util.ArrayList<user.User> userList36 = database34.users;
        java.util.ArrayList<user.User> userList37 = database34.users;
        database34.load("hi!");
        database.Database database41 = database.Database.getInstance("");
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database41.users = userList50;
        database34.users = userList50;
        database1.users = userList50;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList28 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList28);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        java.util.ArrayList<user.User> userList17 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        java.util.ArrayList<user.User> userList26 = database1.users;
        java.lang.Class<?> wildcardClass27 = userList26.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database1.load("hi!");
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database6.users = userList12;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database.Database database20 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList21 = database20.users;
        database17.users = userList21;
        java.util.ArrayList<user.User> userList23 = database17.users;
        java.util.ArrayList<user.User> userList24 = database17.users;
        database6.users = userList24;
        database1.users = userList24;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        java.util.ArrayList<user.User> userList16 = database1.users;
        java.util.ArrayList<user.User> userList17 = database1.users;
        java.lang.Class<?> wildcardClass18 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 1);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        java.util.ArrayList<user.User> userList26 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList26);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        database1.load("hi!");
        java.lang.Class<?> wildcardClass14 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.load("hi!");
        java.lang.Class<?> wildcardClass28 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database15.users = userList19;
        java.util.ArrayList<user.User> userList21 = database15.users;
        database15.load("hi!");
        database15.update("hi!");
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database15.users = userList29;
        database1.users = userList29;
        java.util.ArrayList<user.User> userList32 = database1.users;
        java.util.ArrayList<user.User> userList33 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        java.util.ArrayList<user.User> userList43 = database36.users;
        database25.users = userList43;
        java.util.ArrayList<user.User> userList45 = database25.users;
        database25.load("hi!");
        database.Database database49 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList50 = database49.users;
        java.util.ArrayList<user.User> userList51 = database49.users;
        database.Database database53 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        java.util.ArrayList<user.User> userList56 = database53.users;
        database.Database database58 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList59 = database58.users;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database58.users = userList62;
        database53.users = userList62;
        database.Database database66 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList67 = database66.users;
        java.util.ArrayList<user.User> userList68 = database66.users;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        java.util.ArrayList<user.User> userList72 = database70.users;
        database.Database database74 = database.Database.getInstance("hi!");
        user.User[] userArray75 = new user.User[] {};
        java.util.ArrayList<user.User> userList76 = new java.util.ArrayList<user.User>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<user.User>) userList76, userArray75);
        database74.users = userList76;
        database70.users = userList76;
        database66.users = userList76;
        database53.users = userList76;
        database.Database database83 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList84 = database83.users;
        database.Database database86 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList87 = database86.users;
        database83.users = userList87;
        database53.users = userList87;
        java.util.ArrayList<user.User> userList90 = database53.users;
        database49.users = userList90;
        database25.users = userList90;
        database1.users = userList90;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass96 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userArray75);
        org.junit.Assert.assertArrayEquals(userArray75, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(database83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(database86);
        org.junit.Assert.assertNotNull(userList87);
        org.junit.Assert.assertNotNull(userList90);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database1.users = userList11;
        java.util.ArrayList<user.User> userList14 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList14);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot21 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database25.users = userList29;
        database1.users = userList29;
        java.lang.Class<?> wildcardClass32 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        database1.update("hi!");
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        database1.users = userList15;
        database1.load("hi!");
        database1.update("hi!");
        java.lang.Class<?> wildcardClass21 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database39.users = userList50;
        database1.users = userList50;
        database1.load("hi!");
        java.lang.Class<?> wildcardClass56 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database1.load("hi!");
        database1.update("hi!");
        java.lang.Class<?> wildcardClass15 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        database18.users = userList30;
        database1.users = userList30;
        java.lang.Class<?> wildcardClass33 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = parkingSpot10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        database1.users = userList35;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList30 = database29.users;
        java.util.ArrayList<user.User> userList31 = database29.users;
        java.util.ArrayList<user.User> userList32 = database29.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        database34.users = userList38;
        database29.users = userList38;
        database.Database database42 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList43 = database42.users;
        java.util.ArrayList<user.User> userList44 = database42.users;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        java.util.ArrayList<user.User> userList48 = database46.users;
        database.Database database50 = database.Database.getInstance("hi!");
        user.User[] userArray51 = new user.User[] {};
        java.util.ArrayList<user.User> userList52 = new java.util.ArrayList<user.User>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<user.User>) userList52, userArray51);
        database50.users = userList52;
        database46.users = userList52;
        database42.users = userList52;
        database29.users = userList52;
        database.Database database59 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList60 = database59.users;
        database.Database database62 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList63 = database62.users;
        database59.users = userList63;
        database29.users = userList63;
        java.util.ArrayList<user.User> userList66 = database29.users;
        database25.users = userList66;
        database1.users = userList66;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userArray51);
        org.junit.Assert.assertArrayEquals(userArray51, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(database62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(userList66);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        java.lang.Class<?> wildcardClass23 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        database.Database database12 = database.Database.getInstance("");
        database.Database database14 = database.Database.getInstance("hi!");
        user.User[] userArray15 = new user.User[] {};
        java.util.ArrayList<user.User> userList16 = new java.util.ArrayList<user.User>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<user.User>) userList16, userArray15);
        database14.users = userList16;
        database.Database database20 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList21 = database20.users;
        database14.users = userList21;
        database12.users = userList21;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database25.users = userList29;
        java.util.ArrayList<user.User> userList31 = database25.users;
        java.util.ArrayList<user.User> userList32 = database25.users;
        database25.load("hi!");
        java.util.ArrayList<user.User> userList35 = database25.users;
        database12.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database38.users = userList42;
        java.util.ArrayList<user.User> userList44 = database38.users;
        database38.load("hi!");
        java.util.ArrayList<user.User> userList47 = database38.users;
        database12.users = userList47;
        database1.users = userList47;
        database.Database database51 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList52 = database51.users;
        java.util.ArrayList<user.User> userList53 = database51.users;
        database.Database database55 = database.Database.getInstance("hi!");
        user.User[] userArray56 = new user.User[] {};
        java.util.ArrayList<user.User> userList57 = new java.util.ArrayList<user.User>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<user.User>) userList57, userArray56);
        database55.users = userList57;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database55.users = userList62;
        database51.users = userList62;
        database.Database database66 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList67 = database66.users;
        java.util.ArrayList<user.User> userList68 = database66.users;
        database.Database database70 = database.Database.getInstance("hi!");
        user.User[] userArray71 = new user.User[] {};
        java.util.ArrayList<user.User> userList72 = new java.util.ArrayList<user.User>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<user.User>) userList72, userArray71);
        database70.users = userList72;
        database66.users = userList72;
        database.Database database77 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList78 = database77.users;
        database.Database database80 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList81 = database80.users;
        database77.users = userList81;
        java.util.ArrayList<user.User> userList83 = database77.users;
        java.util.ArrayList<user.User> userList84 = database77.users;
        database66.users = userList84;
        database51.users = userList84;
        database1.users = userList84;
        java.lang.Class<?> wildcardClass88 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userArray15);
        org.junit.Assert.assertArrayEquals(userArray15, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(database51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userArray56);
        org.junit.Assert.assertArrayEquals(userArray56, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userArray71);
        org.junit.Assert.assertArrayEquals(userArray71, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(database77);
        org.junit.Assert.assertNotNull(userList78);
        org.junit.Assert.assertNotNull(database80);
        org.junit.Assert.assertNotNull(userList81);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = parkingSpot12.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.load("hi!");
        database.Database database29 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList30 = database29.users;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database29.users = userList33;
        java.util.ArrayList<user.User> userList35 = database29.users;
        database29.load("hi!");
        user.User[] userArray38 = new user.User[] {};
        java.util.ArrayList<user.User> userList39 = new java.util.ArrayList<user.User>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<user.User>) userList39, userArray38);
        database29.users = userList39;
        java.util.ArrayList<user.User> userList42 = database29.users;
        database1.users = userList42;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userArray38);
        org.junit.Assert.assertArrayEquals(userArray38, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(userList42);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList28 = database1.users;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList28);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        java.util.ArrayList<user.User> userList12 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(userList12);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        java.util.ArrayList<user.User> userList9 = database6.users;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database11.users = userList15;
        database6.users = userList15;
        database.Database database19 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList20 = database19.users;
        java.util.ArrayList<user.User> userList21 = database19.users;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database23.users = userList29;
        database19.users = userList29;
        database6.users = userList29;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        database6.users = userList40;
        database1.users = userList40;
        java.util.ArrayList<user.User> userList44 = database1.users;
        java.util.ArrayList<user.User> userList45 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList45);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        java.util.ArrayList<user.User> userList38 = database1.users;
        database.Database database40 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList41 = database40.users;
        java.util.ArrayList<user.User> userList42 = database40.users;
        java.util.ArrayList<user.User> userList43 = database40.users;
        java.util.ArrayList<user.User> userList44 = database40.users;
        database.Database database46 = database.Database.getInstance("hi!");
        user.User[] userArray47 = new user.User[] {};
        java.util.ArrayList<user.User> userList48 = new java.util.ArrayList<user.User>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<user.User>) userList48, userArray47);
        database46.users = userList48;
        database40.users = userList48;
        database40.update("hi!");
        java.util.ArrayList<user.User> userList54 = database40.users;
        database1.users = userList54;
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userArray47);
        org.junit.Assert.assertArrayEquals(userArray47, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(userList54);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot7 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList14 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(userList14);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList15);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        database18.users = userList30;
        database1.users = userList30;
        database1.update("hi!");
        database1.update("hi!");
        java.util.ArrayList<user.User> userList37 = database1.users;
        java.lang.Class<?> wildcardClass38 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        database.Database database13 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        java.util.ArrayList<user.User> userList16 = database13.users;
        database13.load("hi!");
        database13.load("hi!");
        java.util.ArrayList<user.User> userList21 = database13.users;
        database1.users = userList21;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList21);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass21 = parkingSpot20.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        database1.update("hi!");
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        java.util.ArrayList<user.User> userList16 = database13.users;
        database.Database database18 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        java.util.ArrayList<user.User> userList21 = database18.users;
        database18.load("hi!");
        database.Database database25 = database.Database.getInstance("");
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database27.users = userList34;
        database25.users = userList34;
        database18.users = userList34;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        database39.users = userList43;
        java.util.ArrayList<user.User> userList45 = database39.users;
        java.util.ArrayList<user.User> userList46 = database39.users;
        database18.users = userList46;
        database13.users = userList46;
        database1.users = userList46;
        java.lang.Class<?> wildcardClass50 = userList46.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        java.util.ArrayList<user.User> userList16 = database1.users;
        java.util.ArrayList<user.User> userList17 = database1.users;
        database.Database database19 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList20 = database19.users;
        java.util.ArrayList<user.User> userList21 = database19.users;
        database.Database database23 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        java.util.ArrayList<user.User> userList26 = database23.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database28.users = userList32;
        database23.users = userList32;
        database.Database database36 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList37 = database36.users;
        java.util.ArrayList<user.User> userList38 = database36.users;
        database.Database database40 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList41 = database40.users;
        java.util.ArrayList<user.User> userList42 = database40.users;
        database.Database database44 = database.Database.getInstance("hi!");
        user.User[] userArray45 = new user.User[] {};
        java.util.ArrayList<user.User> userList46 = new java.util.ArrayList<user.User>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<user.User>) userList46, userArray45);
        database44.users = userList46;
        database40.users = userList46;
        database36.users = userList46;
        database23.users = userList46;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        database.Database database56 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList57 = database56.users;
        database53.users = userList57;
        database23.users = userList57;
        java.util.ArrayList<user.User> userList60 = database23.users;
        database19.users = userList60;
        database1.users = userList60;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database44);
        org.junit.Assert.assertNotNull(userArray45);
        org.junit.Assert.assertArrayEquals(userArray45, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList60);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database27.users = userList31;
        java.util.ArrayList<user.User> userList33 = database27.users;
        database27.load("hi!");
        java.util.ArrayList<user.User> userList36 = database27.users;
        database1.users = userList36;
        java.lang.Class<?> wildcardClass38 = userList36.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        java.lang.Class<?> wildcardClass11 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        java.lang.Class<?> wildcardClass10 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass15 = parkingSpot14.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot21 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList17 = database1.users;
        java.util.ArrayList<user.User> userList18 = database1.users;
        database.Database database20 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList21 = database20.users;
        java.util.ArrayList<user.User> userList22 = database20.users;
        database.Database database24 = database.Database.getInstance("hi!");
        user.User[] userArray25 = new user.User[] {};
        java.util.ArrayList<user.User> userList26 = new java.util.ArrayList<user.User>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<user.User>) userList26, userArray25);
        database24.users = userList26;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database24.users = userList31;
        database20.users = userList31;
        database20.load("hi!");
        java.util.ArrayList<user.User> userList36 = database20.users;
        java.util.ArrayList<user.User> userList37 = database20.users;
        database1.users = userList37;
        java.util.ArrayList<user.User> userList39 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userArray25);
        org.junit.Assert.assertArrayEquals(userArray25, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList39);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        java.lang.Class<?> wildcardClass9 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 100);
        java.lang.Class<?> wildcardClass15 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) -1);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.update("hi!");
        database.Database database11 = database.Database.getInstance("");
        database.Database database13 = database.Database.getInstance("hi!");
        user.User[] userArray14 = new user.User[] {};
        java.util.ArrayList<user.User> userList15 = new java.util.ArrayList<user.User>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<user.User>) userList15, userArray14);
        database13.users = userList15;
        database.Database database19 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList20 = database19.users;
        database13.users = userList20;
        database11.users = userList20;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database24.users = userList28;
        java.util.ArrayList<user.User> userList30 = database24.users;
        java.util.ArrayList<user.User> userList31 = database24.users;
        database24.load("hi!");
        java.util.ArrayList<user.User> userList34 = database24.users;
        database11.users = userList34;
        database1.users = userList34;
        database.Database database38 = database.Database.getInstance("hi!");
        user.User[] userArray39 = new user.User[] {};
        java.util.ArrayList<user.User> userList40 = new java.util.ArrayList<user.User>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<user.User>) userList40, userArray39);
        database38.users = userList40;
        database.Database database44 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList45 = database44.users;
        database38.users = userList45;
        database1.users = userList45;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userArray14);
        org.junit.Assert.assertArrayEquals(userArray14, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userArray39);
        org.junit.Assert.assertArrayEquals(userArray39, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(database44);
        org.junit.Assert.assertNotNull(userList45);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        java.util.ArrayList<user.User> userList9 = database6.users;
        database6.load("hi!");
        database.Database database13 = database.Database.getInstance("");
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database15.users = userList22;
        database13.users = userList22;
        database6.users = userList22;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database27.users = userList31;
        java.util.ArrayList<user.User> userList33 = database27.users;
        java.util.ArrayList<user.User> userList34 = database27.users;
        database6.users = userList34;
        database1.users = userList34;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        database.Database database12 = database.Database.getInstance("");
        database.Database database14 = database.Database.getInstance("hi!");
        user.User[] userArray15 = new user.User[] {};
        java.util.ArrayList<user.User> userList16 = new java.util.ArrayList<user.User>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<user.User>) userList16, userArray15);
        database14.users = userList16;
        database.Database database20 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList21 = database20.users;
        database14.users = userList21;
        database12.users = userList21;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database25.users = userList29;
        java.util.ArrayList<user.User> userList31 = database25.users;
        java.util.ArrayList<user.User> userList32 = database25.users;
        database25.load("hi!");
        java.util.ArrayList<user.User> userList35 = database25.users;
        database12.users = userList35;
        database12.load("hi!");
        database.Database database40 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList41 = database40.users;
        database.Database database43 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList44 = database43.users;
        database40.users = userList44;
        java.util.ArrayList<user.User> userList46 = database40.users;
        database40.load("hi!");
        user.User[] userArray49 = new user.User[] {};
        java.util.ArrayList<user.User> userList50 = new java.util.ArrayList<user.User>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<user.User>) userList50, userArray49);
        database40.users = userList50;
        java.util.ArrayList<user.User> userList53 = database40.users;
        database12.users = userList53;
        database1.users = userList53;
        java.lang.Class<?> wildcardClass56 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userArray15);
        org.junit.Assert.assertArrayEquals(userArray15, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(userArray49);
        org.junit.Assert.assertArrayEquals(userArray49, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database.Database database22 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList23 = database22.users;
        java.util.ArrayList<user.User> userList24 = database22.users;
        java.util.ArrayList<user.User> userList25 = database22.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database27.users = userList31;
        database22.users = userList31;
        database.Database database35 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList36 = database35.users;
        java.util.ArrayList<user.User> userList37 = database35.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database39.users = userList45;
        database35.users = userList45;
        database22.users = userList45;
        java.util.ArrayList<user.User> userList51 = database22.users;
        database1.users = userList51;
        java.lang.Class<?> wildcardClass53 = userList51.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList4 = database3.users;
        java.util.ArrayList<user.User> userList5 = database3.users;
        database.Database database7 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList8 = database7.users;
        java.util.ArrayList<user.User> userList9 = database7.users;
        java.util.ArrayList<user.User> userList10 = database7.users;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        database7.users = userList16;
        database7.update("hi!");
        java.util.ArrayList<user.User> userList21 = database7.users;
        database3.users = userList21;
        database.Database database24 = database.Database.getInstance("hi!");
        user.User[] userArray25 = new user.User[] {};
        java.util.ArrayList<user.User> userList26 = new java.util.ArrayList<user.User>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<user.User>) userList26, userArray25);
        database24.users = userList26;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database30.users = userList34;
        database24.users = userList34;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database38.users = userList42;
        java.util.ArrayList<user.User> userList44 = database38.users;
        database38.load("hi!");
        database38.update("hi!");
        database.Database database50 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList51 = database50.users;
        java.util.ArrayList<user.User> userList52 = database50.users;
        database38.users = userList52;
        database24.users = userList52;
        java.util.ArrayList<user.User> userList55 = database24.users;
        database3.users = userList55;
        java.util.ArrayList<user.User> userList57 = database3.users;
        database1.users = userList57;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userArray25);
        org.junit.Assert.assertArrayEquals(userArray25, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList57);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        database.Database database13 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        java.util.ArrayList<user.User> userList16 = database13.users;
        database13.load("hi!");
        database13.load("hi!");
        java.util.ArrayList<user.User> userList21 = database13.users;
        database1.users = userList21;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList21);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database25.users = userList29;
        java.util.ArrayList<user.User> userList31 = database25.users;
        java.util.ArrayList<user.User> userList32 = database25.users;
        database25.load("hi!");
        user.User[] userArray35 = new user.User[] {};
        java.util.ArrayList<user.User> userList36 = new java.util.ArrayList<user.User>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<user.User>) userList36, userArray35);
        database25.users = userList36;
        database1.users = userList36;
        java.lang.Class<?> wildcardClass40 = userList36.getClass();
        org.junit.Assert.assertNotNull(database1);
// flaky "18) test0322(RegressionTest0)":         org.junit.Assert.assertNull(userList2);
// flaky "8) test0322(RegressionTest0)":         org.junit.Assert.assertNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userArray35);
        org.junit.Assert.assertArrayEquals(userArray35, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass19 = parkingSpot18.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.util.ArrayList<user.User> userList5 = database1.users;
        database.Database database7 = database.Database.getInstance("hi!");
        user.User[] userArray8 = new user.User[] {};
        java.util.ArrayList<user.User> userList9 = new java.util.ArrayList<user.User>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<user.User>) userList9, userArray8);
        database7.users = userList9;
        database1.users = userList9;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userArray8);
        org.junit.Assert.assertArrayEquals(userArray8, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot21 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        user.User[] userArray17 = new user.User[] {};
        java.util.ArrayList<user.User> userList18 = new java.util.ArrayList<user.User>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<user.User>) userList18, userArray17);
        database16.users = userList18;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database16.users = userList23;
        database12.users = userList23;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database.Database database31 = database.Database.getInstance("hi!");
        user.User[] userArray32 = new user.User[] {};
        java.util.ArrayList<user.User> userList33 = new java.util.ArrayList<user.User>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<user.User>) userList33, userArray32);
        database31.users = userList33;
        database27.users = userList33;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database38.users = userList42;
        java.util.ArrayList<user.User> userList44 = database38.users;
        java.util.ArrayList<user.User> userList45 = database38.users;
        database27.users = userList45;
        database12.users = userList45;
        database1.users = userList45;
        java.lang.Class<?> wildcardClass49 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userArray17);
        org.junit.Assert.assertArrayEquals(userArray17, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userArray32);
        org.junit.Assert.assertArrayEquals(userArray32, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        java.util.ArrayList<user.User> userList26 = database23.users;
        java.util.ArrayList<user.User> userList27 = database23.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database23.users = userList31;
        database1.users = userList31;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database15.users = userList22;
        database11.users = userList22;
        database11.load("hi!");
        java.util.ArrayList<user.User> userList27 = database11.users;
        database11.load("hi!");
        java.util.ArrayList<user.User> userList30 = database11.users;
        database1.users = userList30;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        java.util.ArrayList<user.User> userList35 = database33.users;
        java.util.ArrayList<user.User> userList36 = database33.users;
        java.util.ArrayList<user.User> userList37 = database33.users;
        database1.users = userList37;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        java.util.ArrayList<user.User> userList51 = database1.users;
        java.util.ArrayList<user.User> userList52 = database1.users;
        java.lang.Class<?> wildcardClass53 = userList52.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        database18.users = userList30;
        database1.users = userList30;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList35 = database1.users;
        java.util.ArrayList<user.User> userList36 = null;
        database1.users = userList36;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.iterator()\" because \"this.users\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList35);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.load("hi!");
// flaky "19) test0333(RegressionTest0)":         database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
// flaky "9) test0333(RegressionTest0)":         org.junit.Assert.assertNotNull(userList2);
// flaky "7) test0333(RegressionTest0)":         org.junit.Assert.assertNotNull(userList3);
// flaky "7) test0333(RegressionTest0)":         org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
// flaky "2) test0333(RegressionTest0)":         org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
// flaky "2) test0333(RegressionTest0)":         org.junit.Assert.assertNotNull(userList10);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList32 = database31.users;
        java.util.ArrayList<user.User> userList33 = database31.users;
        java.util.ArrayList<user.User> userList34 = database31.users;
        database31.load("hi!");
        database.Database database38 = database.Database.getInstance("");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database38.users = userList47;
        database31.users = userList47;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database1.users = userList51;
        java.lang.Class<?> wildcardClass53 = userList51.getClass();
        org.junit.Assert.assertNotNull(database1);
// flaky "20) test0334(RegressionTest0)":         org.junit.Assert.assertNotNull(userList2);
// flaky "10) test0334(RegressionTest0)":         org.junit.Assert.assertNotNull(userList3);
// flaky "8) test0334(RegressionTest0)":         org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
// flaky "8) test0334(RegressionTest0)":         org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
// flaky "3) test0334(RegressionTest0)":         org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
// flaky "3) test0334(RegressionTest0)":         org.junit.Assert.assertNotNull(userList15);
// flaky "1) test0334(RegressionTest0)":         org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
// flaky "1) test0334(RegressionTest0)":         org.junit.Assert.assertNotNull(userList19);
// flaky "1) test0334(RegressionTest0)":         org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        java.lang.Class<?> wildcardClass12 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = parkingSpot12.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = parkingSpot10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList32 = database31.users;
        java.util.ArrayList<user.User> userList33 = database31.users;
        java.util.ArrayList<user.User> userList34 = database31.users;
        database31.load("hi!");
        database.Database database38 = database.Database.getInstance("");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database38.users = userList47;
        database31.users = userList47;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        java.util.ArrayList<user.User> userList56 = database53.users;
        java.util.ArrayList<user.User> userList57 = database53.users;
        database.Database database59 = database.Database.getInstance("hi!");
        user.User[] userArray60 = new user.User[] {};
        java.util.ArrayList<user.User> userList61 = new java.util.ArrayList<user.User>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<user.User>) userList61, userArray60);
        database59.users = userList61;
        database53.users = userList61;
        database31.users = userList61;
        java.util.ArrayList<user.User> userList66 = database31.users;
        database1.users = userList66;
        database.Database database69 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList70 = database69.users;
        java.util.ArrayList<user.User> userList71 = database69.users;
        java.util.ArrayList<user.User> userList72 = database69.users;
        java.util.ArrayList<user.User> userList73 = database69.users;
        database.Database database75 = database.Database.getInstance("hi!");
        user.User[] userArray76 = new user.User[] {};
        java.util.ArrayList<user.User> userList77 = new java.util.ArrayList<user.User>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<user.User>) userList77, userArray76);
        database75.users = userList77;
        database69.users = userList77;
        database1.users = userList77;
        java.lang.Class<?> wildcardClass82 = userList77.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userArray60);
        org.junit.Assert.assertArrayEquals(userArray60, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(userList66);
        org.junit.Assert.assertNotNull(database69);
        org.junit.Assert.assertNotNull(userList70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(userList73);
        org.junit.Assert.assertNotNull(database75);
        org.junit.Assert.assertNotNull(userArray76);
        org.junit.Assert.assertArrayEquals(userArray76, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        java.lang.Class<?> wildcardClass9 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database39.users = userList50;
        database1.users = userList50;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        database1.update("hi!");
        java.util.ArrayList<user.User> userList28 = database1.users;
        java.lang.Class<?> wildcardClass29 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.util.ArrayList<user.User> userList5 = database1.users;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList17 = database1.users;
        java.lang.Class<?> wildcardClass18 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        database.Database database24 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList25 = database24.users;
        java.util.ArrayList<user.User> userList26 = database24.users;
        java.util.ArrayList<user.User> userList27 = database24.users;
        database24.load("hi!");
        database24.load("hi!");
        java.util.ArrayList<user.User> userList32 = database24.users;
        java.util.ArrayList<user.User> userList33 = database24.users;
        database1.users = userList33;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        java.lang.Class<?> wildcardClass21 = userList19.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database1.users = userList11;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        java.util.ArrayList<user.User> userList38 = database1.users;
        database.Database database40 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList41 = database40.users;
        java.util.ArrayList<user.User> userList42 = database40.users;
        java.util.ArrayList<user.User> userList43 = database40.users;
        database40.load("hi!");
        database.Database database47 = database.Database.getInstance("");
        database.Database database49 = database.Database.getInstance("hi!");
        user.User[] userArray50 = new user.User[] {};
        java.util.ArrayList<user.User> userList51 = new java.util.ArrayList<user.User>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<user.User>) userList51, userArray50);
        database49.users = userList51;
        database.Database database55 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList56 = database55.users;
        database49.users = userList56;
        database47.users = userList56;
        database40.users = userList56;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database.Database database64 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList65 = database64.users;
        database61.users = userList65;
        java.util.ArrayList<user.User> userList67 = database61.users;
        java.util.ArrayList<user.User> userList68 = database61.users;
        database61.load("hi!");
        java.util.ArrayList<user.User> userList71 = database61.users;
        database40.users = userList71;
        database.Database database74 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList75 = database74.users;
        java.util.ArrayList<user.User> userList76 = database74.users;
        java.util.ArrayList<user.User> userList77 = database74.users;
        database40.users = userList77;
        database1.users = userList77;
        database1.update("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList84 = database1.users;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database47);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userArray50);
        org.junit.Assert.assertArrayEquals(userArray50, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(userList76);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(userList84);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList9 = database1.users;
        java.util.ArrayList<user.User> userList10 = database1.users;
        java.lang.Class<?> wildcardClass11 = userList10.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        java.lang.Class<?> wildcardClass12 = userList11.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList14 = null;
        database1.users = userList14;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList9 = database1.users;
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        java.util.ArrayList<user.User> userList14 = database11.users;
        database11.load("hi!");
        database11.load("hi!");
        java.util.ArrayList<user.User> userList19 = database11.users;
        database1.users = userList19;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
// flaky "21) test0357(RegressionTest0)":         org.junit.Assert.assertNotNull(userList2);
// flaky "11) test0357(RegressionTest0)":         org.junit.Assert.assertNotNull(userList3);
// flaky "9) test0357(RegressionTest0)":         org.junit.Assert.assertNotNull(userList4);
// flaky "9) test0357(RegressionTest0)":         org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
// flaky "4) test0357(RegressionTest0)":         org.junit.Assert.assertNotNull(userList12);
// flaky "4) test0357(RegressionTest0)":         org.junit.Assert.assertNotNull(userList13);
// flaky "2) test0357(RegressionTest0)":         org.junit.Assert.assertNotNull(userList14);
// flaky "2) test0357(RegressionTest0)":         org.junit.Assert.assertNotNull(userList19);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database39.users = userList50;
        database1.users = userList50;
        database.Database database55 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList56 = database55.users;
        java.util.ArrayList<user.User> userList57 = database55.users;
        java.util.ArrayList<user.User> userList58 = database55.users;
        database.Database database60 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList61 = database60.users;
        database.Database database63 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList64 = database63.users;
        database60.users = userList64;
        database55.users = userList64;
        database55.update("hi!");
        java.util.ArrayList<user.User> userList69 = database55.users;
        java.util.ArrayList<user.User> userList70 = database55.users;
        java.util.ArrayList<user.User> userList71 = database55.users;
        database1.users = userList71;
        database1.load("hi!");
        database.Database database76 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList77 = database76.users;
        java.util.ArrayList<user.User> userList78 = database76.users;
        database.Database database80 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList81 = database80.users;
        java.util.ArrayList<user.User> userList82 = database80.users;
        database.Database database84 = database.Database.getInstance("hi!");
        user.User[] userArray85 = new user.User[] {};
        java.util.ArrayList<user.User> userList86 = new java.util.ArrayList<user.User>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<user.User>) userList86, userArray85);
        database84.users = userList86;
        database80.users = userList86;
        database76.users = userList86;
        database1.users = userList86;
        org.junit.Assert.assertNotNull(database1);
// flaky "22) test0358(RegressionTest0)":         org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
// flaky "12) test0358(RegressionTest0)":         org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
// flaky "10) test0358(RegressionTest0)":         org.junit.Assert.assertNotNull(userList9);
// flaky "10) test0358(RegressionTest0)":         org.junit.Assert.assertNotNull(userList10);
// flaky "5) test0358(RegressionTest0)":         org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
// flaky "5) test0358(RegressionTest0)":         org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
// flaky "3) test0358(RegressionTest0)":         org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
// flaky "3) test0358(RegressionTest0)":         org.junit.Assert.assertNotNull(userList22);
// flaky "2) test0358(RegressionTest0)":         org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
// flaky "1) test0358(RegressionTest0)":         org.junit.Assert.assertNotNull(userList26);
// flaky "1) test0358(RegressionTest0)":         org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(database60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(database63);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList69);
        org.junit.Assert.assertNotNull(userList70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(database76);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(userList78);
        org.junit.Assert.assertNotNull(database80);
        org.junit.Assert.assertNotNull(userList81);
        org.junit.Assert.assertNotNull(userList82);
        org.junit.Assert.assertNotNull(database84);
        org.junit.Assert.assertNotNull(userArray85);
        org.junit.Assert.assertArrayEquals(userArray85, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        java.util.ArrayList<user.User> userList43 = database36.users;
        database25.users = userList43;
        java.util.ArrayList<user.User> userList45 = database25.users;
        database25.load("hi!");
        database.Database database49 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList50 = database49.users;
        java.util.ArrayList<user.User> userList51 = database49.users;
        database.Database database53 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        java.util.ArrayList<user.User> userList56 = database53.users;
        database.Database database58 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList59 = database58.users;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database58.users = userList62;
        database53.users = userList62;
        database.Database database66 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList67 = database66.users;
        java.util.ArrayList<user.User> userList68 = database66.users;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        java.util.ArrayList<user.User> userList72 = database70.users;
        database.Database database74 = database.Database.getInstance("hi!");
        user.User[] userArray75 = new user.User[] {};
        java.util.ArrayList<user.User> userList76 = new java.util.ArrayList<user.User>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<user.User>) userList76, userArray75);
        database74.users = userList76;
        database70.users = userList76;
        database66.users = userList76;
        database53.users = userList76;
        database.Database database83 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList84 = database83.users;
        database.Database database86 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList87 = database86.users;
        database83.users = userList87;
        database53.users = userList87;
        java.util.ArrayList<user.User> userList90 = database53.users;
        database49.users = userList90;
        database25.users = userList90;
        database1.users = userList90;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList96 = database1.users;
        java.util.ArrayList<user.User> userList97 = database1.users;
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userArray75);
        org.junit.Assert.assertArrayEquals(userArray75, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(database83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(database86);
        org.junit.Assert.assertNotNull(userList87);
        org.junit.Assert.assertNotNull(userList90);
        org.junit.Assert.assertNotNull(userList96);
        org.junit.Assert.assertNotNull(userList97);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        java.util.ArrayList<user.User> userList17 = database1.users;
        java.util.ArrayList<user.User> userList18 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        database1.load("hi!");
        database.Database database26 = database.Database.getInstance("hi!");
        user.User[] userArray27 = new user.User[] {};
        java.util.ArrayList<user.User> userList28 = new java.util.ArrayList<user.User>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<user.User>) userList28, userArray27);
        database26.users = userList28;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database.Database database35 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList36 = database35.users;
        database32.users = userList36;
        database26.users = userList36;
        database.Database database40 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList41 = database40.users;
        database.Database database43 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList44 = database43.users;
        database40.users = userList44;
        java.util.ArrayList<user.User> userList46 = database40.users;
        database40.load("hi!");
        database40.update("hi!");
        database.Database database52 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList53 = database52.users;
        java.util.ArrayList<user.User> userList54 = database52.users;
        database40.users = userList54;
        database26.users = userList54;
        java.util.ArrayList<user.User> userList57 = database26.users;
        java.util.ArrayList<user.User> userList58 = database26.users;
        database1.users = userList58;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userArray27);
        org.junit.Assert.assertArrayEquals(userArray27, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        database.Database database24 = database.Database.getInstance("hi!");
        user.User[] userArray25 = new user.User[] {};
        java.util.ArrayList<user.User> userList26 = new java.util.ArrayList<user.User>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<user.User>) userList26, userArray25);
        database24.users = userList26;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database30.users = userList34;
        database24.users = userList34;
        java.util.ArrayList<user.User> userList37 = null;
        database24.users = userList37;
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database24.users = userList42;
        database1.users = userList42;
        database.Database database48 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList49 = database48.users;
        java.util.ArrayList<user.User> userList50 = database48.users;
        java.util.ArrayList<user.User> userList51 = database48.users;
        database48.load("hi!");
        database.Database database55 = database.Database.getInstance("");
        database.Database database57 = database.Database.getInstance("hi!");
        user.User[] userArray58 = new user.User[] {};
        java.util.ArrayList<user.User> userList59 = new java.util.ArrayList<user.User>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<user.User>) userList59, userArray58);
        database57.users = userList59;
        database.Database database63 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList64 = database63.users;
        database57.users = userList64;
        database55.users = userList64;
        database48.users = userList64;
        java.util.ArrayList<user.User> userList68 = database48.users;
        database1.users = userList68;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userArray25);
        org.junit.Assert.assertArrayEquals(userArray25, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(database57);
        org.junit.Assert.assertNotNull(userArray58);
        org.junit.Assert.assertArrayEquals(userArray58, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(database63);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList68);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database1.load("hi!");
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database6.users = userList12;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database.Database database20 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList21 = database20.users;
        database17.users = userList21;
        java.util.ArrayList<user.User> userList23 = database17.users;
        java.util.ArrayList<user.User> userList24 = database17.users;
        database6.users = userList24;
        database1.users = userList24;
        database1.load("hi!");
        java.lang.Class<?> wildcardClass29 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.util.ArrayList<user.User> userList5 = database1.users;
        database.Database database7 = database.Database.getInstance("hi!");
        user.User[] userArray8 = new user.User[] {};
        java.util.ArrayList<user.User> userList9 = new java.util.ArrayList<user.User>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<user.User>) userList9, userArray8);
        database7.users = userList9;
        database1.users = userList9;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList18 = database1.users;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass21 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userArray8);
        org.junit.Assert.assertArrayEquals(userArray8, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = parkingSpot12.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        java.lang.Class<?> wildcardClass51 = userList44.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) 'a');
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.update("hi!");
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        java.util.ArrayList<user.User> userList17 = database15.users;
        database.Database database19 = database.Database.getInstance("hi!");
        user.User[] userArray20 = new user.User[] {};
        java.util.ArrayList<user.User> userList21 = new java.util.ArrayList<user.User>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<user.User>) userList21, userArray20);
        database19.users = userList21;
        database15.users = userList21;
        database11.users = userList21;
        database1.users = userList21;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userArray20);
        org.junit.Assert.assertArrayEquals(userArray20, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot21 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = parkingSpot16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 1);
        java.lang.Class<?> wildcardClass17 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database22.users = userList26;
        java.util.ArrayList<user.User> userList28 = database22.users;
        java.util.ArrayList<user.User> userList29 = database22.users;
        database22.load("hi!");
        java.util.ArrayList<user.User> userList32 = database22.users;
        database1.users = userList32;
        database.Database database35 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList36 = database35.users;
        java.util.ArrayList<user.User> userList37 = database35.users;
        java.util.ArrayList<user.User> userList38 = database35.users;
        database1.users = userList38;
        java.lang.Class<?> wildcardClass40 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot23 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        database18.users = userList30;
        database1.users = userList30;
        database.Database database34 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList35 = database34.users;
        java.util.ArrayList<user.User> userList36 = database34.users;
        java.util.ArrayList<user.User> userList37 = database34.users;
        database34.load("hi!");
        database.Database database41 = database.Database.getInstance("");
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database41.users = userList50;
        database34.users = userList50;
        database1.users = userList50;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList57 = null;
        database1.users = userList57;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        java.util.ArrayList<user.User> userList12 = database10.users;
        java.util.ArrayList<user.User> userList13 = database10.users;
        database1.users = userList13;
        java.lang.Class<?> wildcardClass15 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
// flaky "23) test0380(RegressionTest0)":         org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
// flaky "13) test0380(RegressionTest0)":         org.junit.Assert.assertNotNull(userList5);
// flaky "11) test0380(RegressionTest0)":         org.junit.Assert.assertNotNull(userList7);
// flaky "11) test0380(RegressionTest0)":         org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
// flaky "6) test0380(RegressionTest0)":         org.junit.Assert.assertNotNull(userList11);
// flaky "6) test0380(RegressionTest0)":         org.junit.Assert.assertNotNull(userList12);
// flaky "4) test0380(RegressionTest0)":         org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = parkingSpot12.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        database1.update("hi!");
        database.Database database29 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList30 = database29.users;
        java.util.ArrayList<user.User> userList31 = database29.users;
        database.Database database33 = database.Database.getInstance("hi!");
        user.User[] userArray34 = new user.User[] {};
        java.util.ArrayList<user.User> userList35 = new java.util.ArrayList<user.User>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<user.User>) userList35, userArray34);
        database33.users = userList35;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database33.users = userList40;
        database29.users = userList40;
        database29.load("hi!");
        java.util.ArrayList<user.User> userList45 = database29.users;
        java.util.ArrayList<user.User> userList46 = database29.users;
        database.Database database48 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList49 = database48.users;
        java.util.ArrayList<user.User> userList50 = database48.users;
        database.Database database52 = database.Database.getInstance("hi!");
        user.User[] userArray53 = new user.User[] {};
        java.util.ArrayList<user.User> userList54 = new java.util.ArrayList<user.User>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<user.User>) userList54, userArray53);
        database52.users = userList54;
        database.Database database58 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList59 = database58.users;
        database52.users = userList59;
        database48.users = userList59;
        database48.load("hi!");
        java.util.ArrayList<user.User> userList64 = database48.users;
        java.util.ArrayList<user.User> userList65 = database48.users;
        database29.users = userList65;
        java.util.ArrayList<user.User> userList67 = database29.users;
        database1.users = userList67;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userArray34);
        org.junit.Assert.assertArrayEquals(userArray34, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(database52);
        org.junit.Assert.assertNotNull(userArray53);
        org.junit.Assert.assertArrayEquals(userArray53, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(userList67);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        java.util.ArrayList<user.User> userList12 = database1.users;
        java.lang.Class<?> wildcardClass13 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        java.util.ArrayList<user.User> userList10 = database1.users;
        java.lang.Class<?> wildcardClass11 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        database.Database database13 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        java.util.ArrayList<user.User> userList16 = database13.users;
        database13.load("hi!");
        database13.load("hi!");
        java.util.ArrayList<user.User> userList21 = database13.users;
        database1.users = userList21;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass25 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot7 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        database1.load("hi!");
        database.Database database26 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList27 = database26.users;
        database.Database database29 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList30 = database29.users;
        database26.users = userList30;
        java.util.ArrayList<user.User> userList32 = database26.users;
        database26.update("hi!");
        database.Database database36 = database.Database.getInstance("");
        database.Database database38 = database.Database.getInstance("hi!");
        user.User[] userArray39 = new user.User[] {};
        java.util.ArrayList<user.User> userList40 = new java.util.ArrayList<user.User>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<user.User>) userList40, userArray39);
        database38.users = userList40;
        database.Database database44 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList45 = database44.users;
        database38.users = userList45;
        database36.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database.Database database52 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList53 = database52.users;
        database49.users = userList53;
        java.util.ArrayList<user.User> userList55 = database49.users;
        java.util.ArrayList<user.User> userList56 = database49.users;
        database49.load("hi!");
        java.util.ArrayList<user.User> userList59 = database49.users;
        database36.users = userList59;
        database26.users = userList59;
        database.Database database63 = database.Database.getInstance("hi!");
        user.User[] userArray64 = new user.User[] {};
        java.util.ArrayList<user.User> userList65 = new java.util.ArrayList<user.User>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<user.User>) userList65, userArray64);
        database63.users = userList65;
        database.Database database69 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList70 = database69.users;
        database63.users = userList70;
        database26.users = userList70;
        database1.users = userList70;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userArray39);
        org.junit.Assert.assertArrayEquals(userArray39, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(database44);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(database52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database63);
        org.junit.Assert.assertNotNull(userArray64);
        org.junit.Assert.assertArrayEquals(userArray64, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(database69);
        org.junit.Assert.assertNotNull(userList70);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database1.load("hi!");
        database1.update("hi!");
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database11.users = userList15;
        java.util.ArrayList<user.User> userList17 = database11.users;
        database11.load("hi!");
        database11.update("hi!");
        java.util.ArrayList<user.User> userList22 = database11.users;
        database1.users = userList22;
        java.lang.Class<?> wildcardClass24 = userList22.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database1.users = userList12;
        java.util.ArrayList<user.User> userList15 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(userList15);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database1.update("hi!");
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList5 = database4.users;
        java.util.ArrayList<user.User> userList6 = database4.users;
        java.util.ArrayList<user.User> userList7 = database4.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database9.users = userList13;
        database4.users = userList13;
        database.Database database17 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList18 = database17.users;
        java.util.ArrayList<user.User> userList19 = database17.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        user.User[] userArray26 = new user.User[] {};
        java.util.ArrayList<user.User> userList27 = new java.util.ArrayList<user.User>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<user.User>) userList27, userArray26);
        database25.users = userList27;
        database21.users = userList27;
        database17.users = userList27;
        database4.users = userList27;
        database1.users = userList27;
        java.lang.Class<?> wildcardClass34 = userList27.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userArray26);
        org.junit.Assert.assertArrayEquals(userArray26, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        database1.load("hi!");
        database1.update("hi!");
        java.lang.Class<?> wildcardClass18 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        java.util.ArrayList<user.User> userList13 = database1.users;
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database15.users = userList22;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database15.users = userList31;
        database1.users = userList31;
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database15.users = userList19;
        java.util.ArrayList<user.User> userList21 = database15.users;
        database15.load("hi!");
        database15.update("hi!");
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database15.users = userList29;
        database1.users = userList29;
        java.util.ArrayList<user.User> userList32 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        database.Database database24 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList25 = database24.users;
        java.util.ArrayList<user.User> userList26 = database24.users;
        java.util.ArrayList<user.User> userList27 = database24.users;
        database24.load("hi!");
        database24.load("hi!");
        java.util.ArrayList<user.User> userList32 = database24.users;
        java.util.ArrayList<user.User> userList33 = database24.users;
        database1.users = userList33;
        java.util.ArrayList<user.User> userList35 = database1.users;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass38 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        database.Database database12 = database.Database.getInstance("");
        database.Database database14 = database.Database.getInstance("hi!");
        user.User[] userArray15 = new user.User[] {};
        java.util.ArrayList<user.User> userList16 = new java.util.ArrayList<user.User>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<user.User>) userList16, userArray15);
        database14.users = userList16;
        database.Database database20 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList21 = database20.users;
        database14.users = userList21;
        database12.users = userList21;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database25.users = userList29;
        java.util.ArrayList<user.User> userList31 = database25.users;
        java.util.ArrayList<user.User> userList32 = database25.users;
        database25.load("hi!");
        java.util.ArrayList<user.User> userList35 = database25.users;
        database12.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database38.users = userList42;
        java.util.ArrayList<user.User> userList44 = database38.users;
        database38.load("hi!");
        java.util.ArrayList<user.User> userList47 = database38.users;
        database12.users = userList47;
        database1.users = userList47;
        java.util.ArrayList<user.User> userList50 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userArray15);
        org.junit.Assert.assertArrayEquals(userArray15, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList50);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList32 = database31.users;
        java.util.ArrayList<user.User> userList33 = database31.users;
        java.util.ArrayList<user.User> userList34 = database31.users;
        database31.load("hi!");
        database.Database database38 = database.Database.getInstance("");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database38.users = userList47;
        database31.users = userList47;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        java.util.ArrayList<user.User> userList56 = database53.users;
        java.util.ArrayList<user.User> userList57 = database53.users;
        database.Database database59 = database.Database.getInstance("hi!");
        user.User[] userArray60 = new user.User[] {};
        java.util.ArrayList<user.User> userList61 = new java.util.ArrayList<user.User>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<user.User>) userList61, userArray60);
        database59.users = userList61;
        database53.users = userList61;
        database31.users = userList61;
        java.util.ArrayList<user.User> userList66 = database31.users;
        database1.users = userList66;
        java.util.ArrayList<user.User> userList68 = database1.users;
        java.lang.Class<?> wildcardClass69 = userList68.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userArray60);
        org.junit.Assert.assertArrayEquals(userArray60, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(userList66);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database11.users = userList17;
        database1.users = userList17;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList30 = database29.users;
        java.util.ArrayList<user.User> userList31 = database29.users;
        java.util.ArrayList<user.User> userList32 = database29.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        database34.users = userList38;
        database29.users = userList38;
        database29.update("hi!");
        java.util.ArrayList<user.User> userList43 = database29.users;
        database25.users = userList43;
        database25.load("hi!");
        database25.load("hi!");
        database.Database database50 = database.Database.getInstance("hi!");
        user.User[] userArray51 = new user.User[] {};
        java.util.ArrayList<user.User> userList52 = new java.util.ArrayList<user.User>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<user.User>) userList52, userArray51);
        database50.users = userList52;
        database.Database database56 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList57 = database56.users;
        database.Database database59 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList60 = database59.users;
        database56.users = userList60;
        database50.users = userList60;
        database.Database database64 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList65 = database64.users;
        database.Database database67 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList68 = database67.users;
        database64.users = userList68;
        java.util.ArrayList<user.User> userList70 = database64.users;
        database64.load("hi!");
        database64.update("hi!");
        database.Database database76 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList77 = database76.users;
        java.util.ArrayList<user.User> userList78 = database76.users;
        database64.users = userList78;
        database50.users = userList78;
        java.util.ArrayList<user.User> userList81 = database50.users;
        java.util.ArrayList<user.User> userList82 = database50.users;
        database25.users = userList82;
        database25.update("hi!");
        java.util.ArrayList<user.User> userList86 = database25.users;
        database1.users = userList86;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userArray51);
        org.junit.Assert.assertArrayEquals(userArray51, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(database67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(userList70);
        org.junit.Assert.assertNotNull(database76);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(userList78);
        org.junit.Assert.assertNotNull(userList81);
        org.junit.Assert.assertNotNull(userList82);
        org.junit.Assert.assertNotNull(userList86);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList26 = database1.users;
        java.lang.Class<?> wildcardClass27 = userList26.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.load("hi!");
        database.Database database29 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList30 = database29.users;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database29.users = userList33;
        java.util.ArrayList<user.User> userList35 = database29.users;
        database29.load("hi!");
        java.util.ArrayList<user.User> userList38 = database29.users;
        database1.users = userList38;
        database1.load("hi!");
        java.lang.Class<?> wildcardClass42 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.lang.Class<?> wildcardClass11 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database1.users = userList11;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass16 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        user.User[] userArray17 = new user.User[] {};
        java.util.ArrayList<user.User> userList18 = new java.util.ArrayList<user.User>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<user.User>) userList18, userArray17);
        database16.users = userList18;
        database12.users = userList18;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        database.Database database26 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList27 = database26.users;
        database23.users = userList27;
        java.util.ArrayList<user.User> userList29 = database23.users;
        java.util.ArrayList<user.User> userList30 = database23.users;
        database12.users = userList30;
        java.util.ArrayList<user.User> userList32 = database12.users;
        database12.load("hi!");
        database.Database database36 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList37 = database36.users;
        java.util.ArrayList<user.User> userList38 = database36.users;
        database.Database database40 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList41 = database40.users;
        java.util.ArrayList<user.User> userList42 = database40.users;
        java.util.ArrayList<user.User> userList43 = database40.users;
        database.Database database45 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList46 = database45.users;
        database.Database database48 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList49 = database48.users;
        database45.users = userList49;
        database40.users = userList49;
        database.Database database53 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        database.Database database57 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList58 = database57.users;
        java.util.ArrayList<user.User> userList59 = database57.users;
        database.Database database61 = database.Database.getInstance("hi!");
        user.User[] userArray62 = new user.User[] {};
        java.util.ArrayList<user.User> userList63 = new java.util.ArrayList<user.User>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<user.User>) userList63, userArray62);
        database61.users = userList63;
        database57.users = userList63;
        database53.users = userList63;
        database40.users = userList63;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        database.Database database73 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList74 = database73.users;
        database70.users = userList74;
        database40.users = userList74;
        java.util.ArrayList<user.User> userList77 = database40.users;
        database36.users = userList77;
        database12.users = userList77;
        database.Database database81 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList82 = database81.users;
        java.util.ArrayList<user.User> userList83 = database81.users;
        java.util.ArrayList<user.User> userList84 = database81.users;
        database81.load("hi!");
        database81.load("hi!");
        java.util.ArrayList<user.User> userList89 = database81.users;
        database12.users = userList89;
        database1.users = userList89;
        java.lang.Class<?> wildcardClass92 = userList89.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userArray17);
        org.junit.Assert.assertArrayEquals(userArray17, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(database57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userArray62);
        org.junit.Assert.assertArrayEquals(userArray62, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(database73);
        org.junit.Assert.assertNotNull(userList74);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(database81);
        org.junit.Assert.assertNotNull(userList82);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(userList89);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        java.util.ArrayList<user.User> userList9 = database6.users;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database11.users = userList15;
        database6.users = userList15;
        database.Database database19 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList20 = database19.users;
        java.util.ArrayList<user.User> userList21 = database19.users;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database23.users = userList29;
        database19.users = userList29;
        database6.users = userList29;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        database6.users = userList40;
        database1.users = userList40;
        java.util.ArrayList<user.User> userList44 = database1.users;
        java.util.ArrayList<user.User> userList45 = database1.users;
        java.util.ArrayList<user.User> userList46 = database1.users;
        java.lang.Class<?> wildcardClass47 = userList46.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.update("hi!");
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        java.util.ArrayList<user.User> userList17 = database15.users;
        database.Database database19 = database.Database.getInstance("hi!");
        user.User[] userArray20 = new user.User[] {};
        java.util.ArrayList<user.User> userList21 = new java.util.ArrayList<user.User>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<user.User>) userList21, userArray20);
        database19.users = userList21;
        database15.users = userList21;
        database11.users = userList21;
        database1.users = userList21;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList29 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userArray20);
        org.junit.Assert.assertArrayEquals(userArray20, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(userList29);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        java.util.ArrayList<user.User> userList21 = database1.users;
        java.lang.Class<?> wildcardClass22 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        database.Database database22 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList23 = database22.users;
        java.util.ArrayList<user.User> userList24 = database22.users;
        database.Database database26 = database.Database.getInstance("hi!");
        user.User[] userArray27 = new user.User[] {};
        java.util.ArrayList<user.User> userList28 = new java.util.ArrayList<user.User>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<user.User>) userList28, userArray27);
        database26.users = userList28;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database26.users = userList33;
        database22.users = userList33;
        database22.load("hi!");
        java.util.ArrayList<user.User> userList38 = database22.users;
        database1.users = userList38;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userArray27);
        org.junit.Assert.assertArrayEquals(userArray27, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList38);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        java.util.ArrayList<user.User> userList43 = database36.users;
        database25.users = userList43;
        java.util.ArrayList<user.User> userList45 = database25.users;
        database25.load("hi!");
        database.Database database49 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList50 = database49.users;
        java.util.ArrayList<user.User> userList51 = database49.users;
        database.Database database53 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        java.util.ArrayList<user.User> userList56 = database53.users;
        database.Database database58 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList59 = database58.users;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database58.users = userList62;
        database53.users = userList62;
        database.Database database66 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList67 = database66.users;
        java.util.ArrayList<user.User> userList68 = database66.users;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        java.util.ArrayList<user.User> userList72 = database70.users;
        database.Database database74 = database.Database.getInstance("hi!");
        user.User[] userArray75 = new user.User[] {};
        java.util.ArrayList<user.User> userList76 = new java.util.ArrayList<user.User>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<user.User>) userList76, userArray75);
        database74.users = userList76;
        database70.users = userList76;
        database66.users = userList76;
        database53.users = userList76;
        database.Database database83 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList84 = database83.users;
        database.Database database86 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList87 = database86.users;
        database83.users = userList87;
        database53.users = userList87;
        java.util.ArrayList<user.User> userList90 = database53.users;
        database49.users = userList90;
        database25.users = userList90;
        database1.users = userList90;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList96 = database1.users;
        java.util.ArrayList<user.User> userList97 = database1.users;
        java.util.ArrayList<user.User> userList98 = database1.users;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userArray75);
        org.junit.Assert.assertArrayEquals(userArray75, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(database83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(database86);
        org.junit.Assert.assertNotNull(userList87);
        org.junit.Assert.assertNotNull(userList90);
        org.junit.Assert.assertNotNull(userList96);
        org.junit.Assert.assertNotNull(userList97);
        org.junit.Assert.assertNotNull(userList98);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.update("hi!");
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database.Database database19 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList20 = database19.users;
        database16.users = userList20;
        java.util.ArrayList<user.User> userList22 = database16.users;
        database16.load("hi!");
        java.util.ArrayList<user.User> userList25 = database16.users;
        database.Database database27 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database.Database database31 = database.Database.getInstance("hi!");
        user.User[] userArray32 = new user.User[] {};
        java.util.ArrayList<user.User> userList33 = new java.util.ArrayList<user.User>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<user.User>) userList33, userArray32);
        database31.users = userList33;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        database31.users = userList38;
        database27.users = userList38;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        java.util.ArrayList<user.User> userList44 = database42.users;
        database.Database database46 = database.Database.getInstance("hi!");
        user.User[] userArray47 = new user.User[] {};
        java.util.ArrayList<user.User> userList48 = new java.util.ArrayList<user.User>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<user.User>) userList48, userArray47);
        database46.users = userList48;
        database42.users = userList48;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        database.Database database56 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList57 = database56.users;
        database53.users = userList57;
        java.util.ArrayList<user.User> userList59 = database53.users;
        java.util.ArrayList<user.User> userList60 = database53.users;
        database42.users = userList60;
        database27.users = userList60;
        database16.users = userList60;
        database1.users = userList60;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList67 = database1.users;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userArray32);
        org.junit.Assert.assertArrayEquals(userArray32, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userArray47);
        org.junit.Assert.assertArrayEquals(userArray47, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(userList67);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        java.util.ArrayList<user.User> userList13 = database1.users;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList13);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        database18.users = userList30;
        database1.users = userList30;
        database1.update("hi!");
        database1.update("hi!");
        java.lang.Class<?> wildcardClass37 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList4 = database3.users;
        java.util.ArrayList<user.User> userList5 = database3.users;
        database.Database database7 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList8 = database7.users;
        java.util.ArrayList<user.User> userList9 = database7.users;
        java.util.ArrayList<user.User> userList10 = database7.users;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        database7.users = userList16;
        database7.update("hi!");
        java.util.ArrayList<user.User> userList21 = database7.users;
        database3.users = userList21;
        database.Database database24 = database.Database.getInstance("hi!");
        user.User[] userArray25 = new user.User[] {};
        java.util.ArrayList<user.User> userList26 = new java.util.ArrayList<user.User>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<user.User>) userList26, userArray25);
        database24.users = userList26;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database30.users = userList34;
        database24.users = userList34;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database38.users = userList42;
        java.util.ArrayList<user.User> userList44 = database38.users;
        database38.load("hi!");
        database38.update("hi!");
        database.Database database50 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList51 = database50.users;
        java.util.ArrayList<user.User> userList52 = database50.users;
        database38.users = userList52;
        database24.users = userList52;
        java.util.ArrayList<user.User> userList55 = database24.users;
        database3.users = userList55;
        java.util.ArrayList<user.User> userList57 = database3.users;
        database1.users = userList57;
        java.util.ArrayList<user.User> userList59 = null;
        database1.users = userList59;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userArray25);
        org.junit.Assert.assertArrayEquals(userArray25, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList57);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList32 = database31.users;
        java.util.ArrayList<user.User> userList33 = database31.users;
        java.util.ArrayList<user.User> userList34 = database31.users;
        database31.load("hi!");
        database.Database database38 = database.Database.getInstance("");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database38.users = userList47;
        database31.users = userList47;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        java.util.ArrayList<user.User> userList56 = database53.users;
        java.util.ArrayList<user.User> userList57 = database53.users;
        database.Database database59 = database.Database.getInstance("hi!");
        user.User[] userArray60 = new user.User[] {};
        java.util.ArrayList<user.User> userList61 = new java.util.ArrayList<user.User>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<user.User>) userList61, userArray60);
        database59.users = userList61;
        database53.users = userList61;
        database31.users = userList61;
        java.util.ArrayList<user.User> userList66 = database31.users;
        database1.users = userList66;
        java.util.ArrayList<user.User> userList68 = database1.users;
        java.util.ArrayList<user.User> userList69 = database1.users;
        java.lang.Class<?> wildcardClass70 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNull(userList2);
        org.junit.Assert.assertNull(userList3);
        org.junit.Assert.assertNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNull(userList15);
        org.junit.Assert.assertNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNull(userList19);
        org.junit.Assert.assertNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userArray60);
        org.junit.Assert.assertArrayEquals(userArray60, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(userList66);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(userList69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        database18.users = userList30;
        database1.users = userList30;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList35 = database1.users;
        java.util.ArrayList<user.User> userList36 = null;
        database1.users = userList36;
        java.lang.Class<?> wildcardClass38 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) ' ');
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList13 = database1.users;
        java.util.ArrayList<user.User> userList14 = null;
        database1.users = userList14;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
// flaky "24) test0425(RegressionTest0)":         org.junit.Assert.assertNotNull(userList2);
// flaky "14) test0425(RegressionTest0)":         org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(userList13);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.util.ArrayList<user.User> userList5 = database1.users;
        database.Database database7 = database.Database.getInstance("hi!");
        user.User[] userArray8 = new user.User[] {};
        java.util.ArrayList<user.User> userList9 = new java.util.ArrayList<user.User>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<user.User>) userList9, userArray8);
        database7.users = userList9;
        database1.users = userList9;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = null;
        database1.users = userList15;
        java.util.ArrayList<user.User> userList17 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNull(userList2);
        org.junit.Assert.assertNull(userList3);
        org.junit.Assert.assertNull(userList4);
        org.junit.Assert.assertNull(userList5);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userArray8);
        org.junit.Assert.assertArrayEquals(userArray8, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(userList17);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot21 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot7 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass15 = parkingSpot14.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.load("hi!");
        database.Database database29 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList30 = database29.users;
        java.util.ArrayList<user.User> userList31 = database29.users;
        java.util.ArrayList<user.User> userList32 = database29.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        database34.users = userList38;
        database29.users = userList38;
        database.Database database42 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList43 = database42.users;
        java.util.ArrayList<user.User> userList44 = database42.users;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        java.util.ArrayList<user.User> userList48 = database46.users;
        database.Database database50 = database.Database.getInstance("hi!");
        user.User[] userArray51 = new user.User[] {};
        java.util.ArrayList<user.User> userList52 = new java.util.ArrayList<user.User>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<user.User>) userList52, userArray51);
        database50.users = userList52;
        database46.users = userList52;
        database42.users = userList52;
        database29.users = userList52;
        database.Database database59 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList60 = database59.users;
        java.util.ArrayList<user.User> userList61 = database59.users;
        java.util.ArrayList<user.User> userList62 = database59.users;
        database59.load("hi!");
        database.Database database66 = database.Database.getInstance("");
        database.Database database68 = database.Database.getInstance("hi!");
        user.User[] userArray69 = new user.User[] {};
        java.util.ArrayList<user.User> userList70 = new java.util.ArrayList<user.User>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<user.User>) userList70, userArray69);
        database68.users = userList70;
        database.Database database74 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList75 = database74.users;
        database68.users = userList75;
        database66.users = userList75;
        database59.users = userList75;
        java.util.ArrayList<user.User> userList79 = database59.users;
        database29.users = userList79;
        java.util.ArrayList<user.User> userList81 = database29.users;
        database1.users = userList81;
        java.util.ArrayList<user.User> userList83 = database1.users;
        java.util.ArrayList<user.User> userList84 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userArray51);
        org.junit.Assert.assertArrayEquals(userArray51, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(database68);
        org.junit.Assert.assertNotNull(userArray69);
        org.junit.Assert.assertArrayEquals(userArray69, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(userList79);
        org.junit.Assert.assertNotNull(userList81);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(userList84);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.update("hi!");
        database.Database database11 = database.Database.getInstance("");
        database.Database database13 = database.Database.getInstance("hi!");
        user.User[] userArray14 = new user.User[] {};
        java.util.ArrayList<user.User> userList15 = new java.util.ArrayList<user.User>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<user.User>) userList15, userArray14);
        database13.users = userList15;
        database.Database database19 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList20 = database19.users;
        database13.users = userList20;
        database11.users = userList20;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database24.users = userList28;
        java.util.ArrayList<user.User> userList30 = database24.users;
        java.util.ArrayList<user.User> userList31 = database24.users;
        database24.load("hi!");
        java.util.ArrayList<user.User> userList34 = database24.users;
        database11.users = userList34;
        database1.users = userList34;
        database.Database database38 = database.Database.getInstance("hi!");
        user.User[] userArray39 = new user.User[] {};
        java.util.ArrayList<user.User> userList40 = new java.util.ArrayList<user.User>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<user.User>) userList40, userArray39);
        database38.users = userList40;
        database.Database database44 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList45 = database44.users;
        database38.users = userList45;
        database1.users = userList45;
        java.util.ArrayList<user.User> userList48 = database1.users;
        java.lang.Class<?> wildcardClass49 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userArray14);
        org.junit.Assert.assertArrayEquals(userArray14, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userArray39);
        org.junit.Assert.assertArrayEquals(userArray39, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(database44);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        java.util.ArrayList<user.User> userList43 = database36.users;
        database25.users = userList43;
        java.util.ArrayList<user.User> userList45 = database25.users;
        database25.load("hi!");
        database.Database database49 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList50 = database49.users;
        java.util.ArrayList<user.User> userList51 = database49.users;
        database.Database database53 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        java.util.ArrayList<user.User> userList56 = database53.users;
        database.Database database58 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList59 = database58.users;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database58.users = userList62;
        database53.users = userList62;
        database.Database database66 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList67 = database66.users;
        java.util.ArrayList<user.User> userList68 = database66.users;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        java.util.ArrayList<user.User> userList72 = database70.users;
        database.Database database74 = database.Database.getInstance("hi!");
        user.User[] userArray75 = new user.User[] {};
        java.util.ArrayList<user.User> userList76 = new java.util.ArrayList<user.User>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<user.User>) userList76, userArray75);
        database74.users = userList76;
        database70.users = userList76;
        database66.users = userList76;
        database53.users = userList76;
        database.Database database83 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList84 = database83.users;
        database.Database database86 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList87 = database86.users;
        database83.users = userList87;
        database53.users = userList87;
        java.util.ArrayList<user.User> userList90 = database53.users;
        database49.users = userList90;
        database25.users = userList90;
        database1.users = userList90;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList96 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userArray75);
        org.junit.Assert.assertArrayEquals(userArray75, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(database83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(database86);
        org.junit.Assert.assertNotNull(userList87);
        org.junit.Assert.assertNotNull(userList90);
        org.junit.Assert.assertNotNull(userList96);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList13 = database1.users;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(userList13);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        java.lang.Class<?> wildcardClass11 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        java.util.ArrayList<user.User> userList38 = database1.users;
        database.Database database40 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList41 = database40.users;
        java.util.ArrayList<user.User> userList42 = database40.users;
        java.util.ArrayList<user.User> userList43 = database40.users;
        database40.load("hi!");
        database.Database database47 = database.Database.getInstance("");
        database.Database database49 = database.Database.getInstance("hi!");
        user.User[] userArray50 = new user.User[] {};
        java.util.ArrayList<user.User> userList51 = new java.util.ArrayList<user.User>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<user.User>) userList51, userArray50);
        database49.users = userList51;
        database.Database database55 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList56 = database55.users;
        database49.users = userList56;
        database47.users = userList56;
        database40.users = userList56;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database.Database database64 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList65 = database64.users;
        database61.users = userList65;
        java.util.ArrayList<user.User> userList67 = database61.users;
        java.util.ArrayList<user.User> userList68 = database61.users;
        database61.load("hi!");
        java.util.ArrayList<user.User> userList71 = database61.users;
        database40.users = userList71;
        database.Database database74 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList75 = database74.users;
        java.util.ArrayList<user.User> userList76 = database74.users;
        java.util.ArrayList<user.User> userList77 = database74.users;
        database40.users = userList77;
        database1.users = userList77;
        database1.update("hi!");
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database47);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userArray50);
        org.junit.Assert.assertArrayEquals(userArray50, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(userList76);
        org.junit.Assert.assertNotNull(userList77);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot(10);
        java.lang.Class<?> wildcardClass5 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        java.util.ArrayList<user.User> userList13 = database1.users;
        database1.load("hi!");
        database.Database database17 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList18 = database17.users;
        java.util.ArrayList<user.User> userList19 = database17.users;
        java.util.ArrayList<user.User> userList20 = database17.users;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database22.users = userList26;
        database17.users = userList26;
        database17.update("hi!");
        java.util.ArrayList<user.User> userList31 = database17.users;
        java.util.ArrayList<user.User> userList32 = database17.users;
        database1.users = userList32;
        java.lang.Class<?> wildcardClass34 = userList32.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 0);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = null;
        database1.users = userList10;
        java.util.ArrayList<user.User> userList12 = database1.users;
        java.util.ArrayList<user.User> userList13 = database1.users;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNull(userList12);
        org.junit.Assert.assertNull(userList13);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
// flaky "25) test0443(RegressionTest0)":         org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
// flaky "15) test0443(RegressionTest0)":         org.junit.Assert.assertNotNull(userList5);
// flaky "12) test0443(RegressionTest0)":         org.junit.Assert.assertNotNull(userList7);
// flaky "12) test0443(RegressionTest0)":         org.junit.Assert.assertNotNull(userList8);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database22.users = userList26;
        java.util.ArrayList<user.User> userList28 = database22.users;
        java.util.ArrayList<user.User> userList29 = database22.users;
        database22.load("hi!");
        java.util.ArrayList<user.User> userList32 = database22.users;
        database1.users = userList32;
        java.util.ArrayList<user.User> userList34 = database1.users;
        database.Database database36 = database.Database.getInstance("hi!");
        user.User[] userArray37 = new user.User[] {};
        java.util.ArrayList<user.User> userList38 = new java.util.ArrayList<user.User>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<user.User>) userList38, userArray37);
        database36.users = userList38;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        database.Database database45 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList46 = database45.users;
        database42.users = userList46;
        database36.users = userList46;
        java.util.ArrayList<user.User> userList49 = database36.users;
        database1.users = userList49;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
// flaky "26) test0444(RegressionTest0)":         org.junit.Assert.assertNotNull(userList2);
// flaky "16) test0444(RegressionTest0)":         org.junit.Assert.assertNotNull(userList3);
// flaky "13) test0444(RegressionTest0)":         org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userArray37);
        org.junit.Assert.assertArrayEquals(userArray37, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(userList49);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.update("hi!");
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database.Database database19 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList20 = database19.users;
        database16.users = userList20;
        java.util.ArrayList<user.User> userList22 = database16.users;
        database16.load("hi!");
        java.util.ArrayList<user.User> userList25 = database16.users;
        database.Database database27 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database.Database database31 = database.Database.getInstance("hi!");
        user.User[] userArray32 = new user.User[] {};
        java.util.ArrayList<user.User> userList33 = new java.util.ArrayList<user.User>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<user.User>) userList33, userArray32);
        database31.users = userList33;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        database31.users = userList38;
        database27.users = userList38;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        java.util.ArrayList<user.User> userList44 = database42.users;
        database.Database database46 = database.Database.getInstance("hi!");
        user.User[] userArray47 = new user.User[] {};
        java.util.ArrayList<user.User> userList48 = new java.util.ArrayList<user.User>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<user.User>) userList48, userArray47);
        database46.users = userList48;
        database42.users = userList48;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        database.Database database56 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList57 = database56.users;
        database53.users = userList57;
        java.util.ArrayList<user.User> userList59 = database53.users;
        java.util.ArrayList<user.User> userList60 = database53.users;
        database42.users = userList60;
        database27.users = userList60;
        database16.users = userList60;
        database1.users = userList60;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userArray32);
        org.junit.Assert.assertArrayEquals(userArray32, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userArray47);
        org.junit.Assert.assertArrayEquals(userArray47, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(userList60);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot7 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        database.Database database17 = database.Database.getInstance("hi!");
        user.User[] userArray18 = new user.User[] {};
        java.util.ArrayList<user.User> userList19 = new java.util.ArrayList<user.User>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<user.User>) userList19, userArray18);
        database17.users = userList19;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        database17.users = userList24;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database.Database database31 = database.Database.getInstance("hi!");
        user.User[] userArray32 = new user.User[] {};
        java.util.ArrayList<user.User> userList33 = new java.util.ArrayList<user.User>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<user.User>) userList33, userArray32);
        database31.users = userList33;
        database27.users = userList33;
        database17.users = userList33;
        database1.users = userList33;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userArray18);
        org.junit.Assert.assertArrayEquals(userArray18, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userArray32);
        org.junit.Assert.assertArrayEquals(userArray32, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        java.util.ArrayList<user.User> userList21 = database1.users;
        java.lang.Class<?> wildcardClass22 = userList21.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) 0);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        java.util.ArrayList<user.User> userList21 = database1.users;
        java.util.ArrayList<user.User> userList22 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList27 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList27);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList9 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList9);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database39.users = userList50;
        database1.users = userList50;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList56 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList56);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database1.users = userList11;
        java.util.ArrayList<user.User> userList14 = database1.users;
        java.lang.Class<?> wildcardClass15 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass12 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        database1.update("hi!");
        database1.load("hi!");
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database.Database database26 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList27 = database26.users;
        java.util.ArrayList<user.User> userList28 = database26.users;
        java.util.ArrayList<user.User> userList29 = database26.users;
        database26.load("hi!");
        database26.load("hi!");
        java.util.ArrayList<user.User> userList34 = database26.users;
        database14.users = userList34;
        database1.users = userList34;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList34);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        database18.users = userList30;
        database1.users = userList30;
        database.Database database34 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList35 = database34.users;
        java.util.ArrayList<user.User> userList36 = database34.users;
        java.util.ArrayList<user.User> userList37 = database34.users;
        database34.load("hi!");
        database.Database database41 = database.Database.getInstance("");
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database41.users = userList50;
        database34.users = userList50;
        database1.users = userList50;
        database.Database database56 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList57 = database56.users;
        java.util.ArrayList<user.User> userList58 = database56.users;
        java.util.ArrayList<user.User> userList59 = database56.users;
        database56.load("hi!");
        database.Database database63 = database.Database.getInstance("");
        database.Database database65 = database.Database.getInstance("hi!");
        user.User[] userArray66 = new user.User[] {};
        java.util.ArrayList<user.User> userList67 = new java.util.ArrayList<user.User>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<user.User>) userList67, userArray66);
        database65.users = userList67;
        database.Database database71 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList72 = database71.users;
        database65.users = userList72;
        database63.users = userList72;
        database56.users = userList72;
        database.Database database77 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList78 = database77.users;
        database.Database database80 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList81 = database80.users;
        database77.users = userList81;
        java.util.ArrayList<user.User> userList83 = database77.users;
        java.util.ArrayList<user.User> userList84 = database77.users;
        database77.load("hi!");
        java.util.ArrayList<user.User> userList87 = database77.users;
        database56.users = userList87;
        database1.users = userList87;
        java.util.ArrayList<user.User> userList90 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database63);
        org.junit.Assert.assertNotNull(database65);
        org.junit.Assert.assertNotNull(userArray66);
        org.junit.Assert.assertArrayEquals(userArray66, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(database71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database77);
        org.junit.Assert.assertNotNull(userList78);
        org.junit.Assert.assertNotNull(database80);
        org.junit.Assert.assertNotNull(userList81);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(userList87);
        org.junit.Assert.assertNotNull(userList90);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.update("hi!");
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database8.load("hi!");
        database.Database database15 = database.Database.getInstance("");
        database.Database database17 = database.Database.getInstance("hi!");
        user.User[] userArray18 = new user.User[] {};
        java.util.ArrayList<user.User> userList19 = new java.util.ArrayList<user.User>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<user.User>) userList19, userArray18);
        database17.users = userList19;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        database17.users = userList24;
        database15.users = userList24;
        database8.users = userList24;
        database1.users = userList24;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userArray18);
        org.junit.Assert.assertArrayEquals(userArray18, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database1.users = userList12;
        java.lang.Class<?> wildcardClass15 = userList12.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        java.util.ArrayList<user.User> userList21 = database1.users;
        java.util.ArrayList<user.User> userList22 = database1.users;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList25 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList25);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database39.users = userList50;
        database1.users = userList50;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList56 = database1.users;
        java.lang.Class<?> wildcardClass57 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        database1.users = userList35;
        java.util.ArrayList<user.User> userList38 = database1.users;
        java.lang.Class<?> wildcardClass39 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 0);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database15.users = userList19;
        java.util.ArrayList<user.User> userList21 = database15.users;
        database15.load("hi!");
        database15.update("hi!");
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database15.users = userList29;
        database1.users = userList29;
        java.util.ArrayList<user.User> userList32 = database1.users;
        java.util.ArrayList<user.User> userList33 = database1.users;
        java.lang.Class<?> wildcardClass34 = userList33.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        database.Database database13 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        java.util.ArrayList<user.User> userList16 = database13.users;
        database13.load("hi!");
        database13.load("hi!");
        java.util.ArrayList<user.User> userList21 = database13.users;
        database1.users = userList21;
        database.Database database24 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList25 = database24.users;
        java.util.ArrayList<user.User> userList26 = database24.users;
        java.util.ArrayList<user.User> userList27 = database24.users;
        database24.load("hi!");
        database.Database database31 = database.Database.getInstance("");
        database.Database database33 = database.Database.getInstance("hi!");
        user.User[] userArray34 = new user.User[] {};
        java.util.ArrayList<user.User> userList35 = new java.util.ArrayList<user.User>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<user.User>) userList35, userArray34);
        database33.users = userList35;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database33.users = userList40;
        database31.users = userList40;
        database24.users = userList40;
        database.Database database45 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList46 = database45.users;
        database.Database database48 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList49 = database48.users;
        database45.users = userList49;
        java.util.ArrayList<user.User> userList51 = database45.users;
        java.util.ArrayList<user.User> userList52 = database45.users;
        database45.load("hi!");
        java.util.ArrayList<user.User> userList55 = database45.users;
        database24.users = userList55;
        database1.users = userList55;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userArray34);
        org.junit.Assert.assertArrayEquals(userArray34, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList55);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot24 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot25 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
        org.junit.Assert.assertNull(parkingSpot24);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        database.Database database24 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList25 = database24.users;
        java.util.ArrayList<user.User> userList26 = database24.users;
        java.util.ArrayList<user.User> userList27 = database24.users;
        database24.load("hi!");
        database24.load("hi!");
        java.util.ArrayList<user.User> userList32 = database24.users;
        java.util.ArrayList<user.User> userList33 = database24.users;
        database1.users = userList33;
        java.util.ArrayList<user.User> userList35 = database1.users;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList35);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        java.util.ArrayList<user.User> userList28 = database25.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database30.users = userList34;
        database25.users = userList34;
        database.Database database38 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        java.util.ArrayList<user.User> userList44 = database42.users;
        database.Database database46 = database.Database.getInstance("hi!");
        user.User[] userArray47 = new user.User[] {};
        java.util.ArrayList<user.User> userList48 = new java.util.ArrayList<user.User>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<user.User>) userList48, userArray47);
        database46.users = userList48;
        database42.users = userList48;
        database38.users = userList48;
        database25.users = userList48;
        database.Database database55 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList56 = database55.users;
        java.util.ArrayList<user.User> userList57 = database55.users;
        java.util.ArrayList<user.User> userList58 = database55.users;
        database55.load("hi!");
        database.Database database62 = database.Database.getInstance("");
        database.Database database64 = database.Database.getInstance("hi!");
        user.User[] userArray65 = new user.User[] {};
        java.util.ArrayList<user.User> userList66 = new java.util.ArrayList<user.User>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<user.User>) userList66, userArray65);
        database64.users = userList66;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        database64.users = userList71;
        database62.users = userList71;
        database55.users = userList71;
        java.util.ArrayList<user.User> userList75 = database55.users;
        database25.users = userList75;
        database1.users = userList75;
        java.lang.Class<?> wildcardClass78 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userArray47);
        org.junit.Assert.assertArrayEquals(userArray47, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(database62);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userArray65);
        org.junit.Assert.assertArrayEquals(userArray65, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        java.util.ArrayList<user.User> userList13 = database1.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database15.users = userList19;
        database.Database database22 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList23 = database22.users;
        java.util.ArrayList<user.User> userList24 = database22.users;
        java.util.ArrayList<user.User> userList25 = database22.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database27.users = userList31;
        database22.users = userList31;
        database.Database database35 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList36 = database35.users;
        java.util.ArrayList<user.User> userList37 = database35.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database39.users = userList45;
        database35.users = userList45;
        database22.users = userList45;
        database15.users = userList45;
        java.util.ArrayList<user.User> userList52 = database15.users;
        database1.users = userList52;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(userList52);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database.Database database22 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList23 = database22.users;
        java.util.ArrayList<user.User> userList24 = database22.users;
        database.Database database26 = database.Database.getInstance("hi!");
        user.User[] userArray27 = new user.User[] {};
        java.util.ArrayList<user.User> userList28 = new java.util.ArrayList<user.User>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<user.User>) userList28, userArray27);
        database26.users = userList28;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database26.users = userList33;
        database22.users = userList33;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        java.util.ArrayList<user.User> userList39 = database37.users;
        database.Database database41 = database.Database.getInstance("hi!");
        user.User[] userArray42 = new user.User[] {};
        java.util.ArrayList<user.User> userList43 = new java.util.ArrayList<user.User>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<user.User>) userList43, userArray42);
        database41.users = userList43;
        database37.users = userList43;
        database.Database database48 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList49 = database48.users;
        database.Database database51 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList52 = database51.users;
        database48.users = userList52;
        java.util.ArrayList<user.User> userList54 = database48.users;
        java.util.ArrayList<user.User> userList55 = database48.users;
        database37.users = userList55;
        database22.users = userList55;
        database1.users = userList55;
        java.util.ArrayList<user.User> userList59 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userArray27);
        org.junit.Assert.assertArrayEquals(userArray27, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userArray42);
        org.junit.Assert.assertArrayEquals(userArray42, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(database51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList59);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        database1.load("hi!");
        database.Database database26 = database.Database.getInstance("hi!");
        user.User[] userArray27 = new user.User[] {};
        java.util.ArrayList<user.User> userList28 = new java.util.ArrayList<user.User>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<user.User>) userList28, userArray27);
        database26.users = userList28;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database.Database database35 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList36 = database35.users;
        database32.users = userList36;
        database26.users = userList36;
        database.Database database40 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList41 = database40.users;
        database.Database database43 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList44 = database43.users;
        database40.users = userList44;
        java.util.ArrayList<user.User> userList46 = database40.users;
        database40.load("hi!");
        database40.update("hi!");
        database.Database database52 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList53 = database52.users;
        java.util.ArrayList<user.User> userList54 = database52.users;
        database40.users = userList54;
        database26.users = userList54;
        java.util.ArrayList<user.User> userList57 = database26.users;
        java.util.ArrayList<user.User> userList58 = database26.users;
        database1.users = userList58;
        java.lang.Class<?> wildcardClass60 = userList58.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userArray27);
        org.junit.Assert.assertArrayEquals(userArray27, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        java.util.ArrayList<user.User> userList17 = database15.users;
        database.Database database19 = database.Database.getInstance("hi!");
        user.User[] userArray20 = new user.User[] {};
        java.util.ArrayList<user.User> userList21 = new java.util.ArrayList<user.User>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<user.User>) userList21, userArray20);
        database19.users = userList21;
        database15.users = userList21;
        database5.users = userList21;
        database1.users = userList21;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userArray20);
        org.junit.Assert.assertArrayEquals(userArray20, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        java.util.ArrayList<user.User> userList26 = database1.users;
        java.util.ArrayList<user.User> userList27 = database1.users;
        database.Database database29 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList30 = database29.users;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database29.users = userList33;
        java.util.ArrayList<user.User> userList35 = database29.users;
        database29.load("hi!");
        user.User[] userArray38 = new user.User[] {};
        java.util.ArrayList<user.User> userList39 = new java.util.ArrayList<user.User>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<user.User>) userList39, userArray38);
        database29.users = userList39;
        database29.update("hi!");
        database29.update("hi!");
        java.util.ArrayList<user.User> userList46 = database29.users;
        database1.users = userList46;
        java.lang.Class<?> wildcardClass48 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userArray38);
        org.junit.Assert.assertArrayEquals(userArray38, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        java.util.ArrayList<user.User> userList38 = database1.users;
        database.Database database40 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList41 = database40.users;
        java.util.ArrayList<user.User> userList42 = database40.users;
        java.util.ArrayList<user.User> userList43 = database40.users;
        database40.load("hi!");
        database.Database database47 = database.Database.getInstance("");
        database.Database database49 = database.Database.getInstance("hi!");
        user.User[] userArray50 = new user.User[] {};
        java.util.ArrayList<user.User> userList51 = new java.util.ArrayList<user.User>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<user.User>) userList51, userArray50);
        database49.users = userList51;
        database.Database database55 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList56 = database55.users;
        database49.users = userList56;
        database47.users = userList56;
        database40.users = userList56;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database.Database database64 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList65 = database64.users;
        database61.users = userList65;
        java.util.ArrayList<user.User> userList67 = database61.users;
        java.util.ArrayList<user.User> userList68 = database61.users;
        database61.load("hi!");
        java.util.ArrayList<user.User> userList71 = database61.users;
        database40.users = userList71;
        database.Database database74 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList75 = database74.users;
        java.util.ArrayList<user.User> userList76 = database74.users;
        java.util.ArrayList<user.User> userList77 = database74.users;
        database40.users = userList77;
        database1.users = userList77;
        database1.update("hi!");
        database1.update("hi!");
        java.util.ArrayList<user.User> userList84 = database1.users;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database47);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userArray50);
        org.junit.Assert.assertArrayEquals(userArray50, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(userList76);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(userList84);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.util.ArrayList<user.User> userList5 = database1.users;
        database.Database database7 = database.Database.getInstance("hi!");
        user.User[] userArray8 = new user.User[] {};
        java.util.ArrayList<user.User> userList9 = new java.util.ArrayList<user.User>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<user.User>) userList9, userArray8);
        database7.users = userList9;
        database1.users = userList9;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = null;
        database1.users = userList15;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userArray8);
        org.junit.Assert.assertArrayEquals(userArray8, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        database1.load("hi!");
        database1.update("hi!");
        database.Database database19 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList20 = database19.users;
        java.util.ArrayList<user.User> userList21 = database19.users;
        java.util.ArrayList<user.User> userList22 = database19.users;
        database19.load("hi!");
        database.Database database26 = database.Database.getInstance("");
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database26.users = userList35;
        database19.users = userList35;
        java.util.ArrayList<user.User> userList39 = database19.users;
        database1.users = userList39;
        java.lang.Class<?> wildcardClass41 = userList39.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        database.Database database24 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList25 = database24.users;
        java.util.ArrayList<user.User> userList26 = database24.users;
        java.util.ArrayList<user.User> userList27 = database24.users;
        database24.load("hi!");
        database24.load("hi!");
        java.util.ArrayList<user.User> userList32 = database24.users;
        java.util.ArrayList<user.User> userList33 = database24.users;
        database1.users = userList33;
        java.util.ArrayList<user.User> userList35 = database1.users;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList35);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.load("hi!");
        database.Database database16 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        java.util.ArrayList<user.User> userList19 = database16.users;
        database16.load("hi!");
        database16.load("hi!");
        java.util.ArrayList<user.User> userList24 = database16.users;
        database1.users = userList24;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList24);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        database.Database database24 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList25 = database24.users;
        java.util.ArrayList<user.User> userList26 = database24.users;
        java.util.ArrayList<user.User> userList27 = database24.users;
        database24.load("hi!");
        database24.load("hi!");
        java.util.ArrayList<user.User> userList32 = database24.users;
        java.util.ArrayList<user.User> userList33 = database24.users;
        database1.users = userList33;
        java.util.ArrayList<user.User> userList35 = database1.users;
        java.lang.Class<?> wildcardClass36 = userList35.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 1);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        java.util.ArrayList<user.User> userList30 = database1.users;
        database.Database database32 = database.Database.getInstance("");
        database.Database database34 = database.Database.getInstance("hi!");
        user.User[] userArray35 = new user.User[] {};
        java.util.ArrayList<user.User> userList36 = new java.util.ArrayList<user.User>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<user.User>) userList36, userArray35);
        database34.users = userList36;
        database.Database database40 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList41 = database40.users;
        database34.users = userList41;
        database32.users = userList41;
        database.Database database45 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList46 = database45.users;
        database.Database database48 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList49 = database48.users;
        database45.users = userList49;
        java.util.ArrayList<user.User> userList51 = database45.users;
        java.util.ArrayList<user.User> userList52 = database45.users;
        database45.load("hi!");
        java.util.ArrayList<user.User> userList55 = database45.users;
        database32.users = userList55;
        database.Database database58 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList59 = database58.users;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database58.users = userList62;
        java.util.ArrayList<user.User> userList64 = database58.users;
        database58.load("hi!");
        java.util.ArrayList<user.User> userList67 = database58.users;
        database32.users = userList67;
        database1.users = userList67;
        java.lang.Class<?> wildcardClass70 = userList67.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userArray35);
        org.junit.Assert.assertArrayEquals(userArray35, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        database18.users = userList30;
        database1.users = userList30;
        database1.update("hi!");
        database1.load("hi!");
        database.Database database38 = database.Database.getInstance("hi!");
        user.User[] userArray39 = new user.User[] {};
        java.util.ArrayList<user.User> userList40 = new java.util.ArrayList<user.User>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<user.User>) userList40, userArray39);
        database38.users = userList40;
        java.util.ArrayList<user.User> userList43 = database38.users;
        database38.update("hi!");
        java.util.ArrayList<user.User> userList46 = database38.users;
        database1.users = userList46;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userArray39);
        org.junit.Assert.assertArrayEquals(userArray39, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList46);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database28.users = userList32;
        database22.users = userList32;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        database36.load("hi!");
        database36.update("hi!");
        database.Database database48 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList49 = database48.users;
        java.util.ArrayList<user.User> userList50 = database48.users;
        database36.users = userList50;
        database22.users = userList50;
        java.util.ArrayList<user.User> userList53 = database22.users;
        database1.users = userList53;
        java.util.ArrayList<user.User> userList55 = database1.users;
        java.lang.Class<?> wildcardClass56 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.load("hi!");
        database.Database database29 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList30 = database29.users;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database29.users = userList33;
        java.util.ArrayList<user.User> userList35 = database29.users;
        database29.load("hi!");
        user.User[] userArray38 = new user.User[] {};
        java.util.ArrayList<user.User> userList39 = new java.util.ArrayList<user.User>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<user.User>) userList39, userArray38);
        database29.users = userList39;
        java.util.ArrayList<user.User> userList42 = database29.users;
        database1.users = userList42;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass46 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userArray38);
        org.junit.Assert.assertArrayEquals(userArray38, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        java.util.ArrayList<user.User> userList31 = database27.users;
        database1.users = userList31;
        database.Database database34 = database.Database.getInstance("hi!");
        user.User[] userArray35 = new user.User[] {};
        java.util.ArrayList<user.User> userList36 = new java.util.ArrayList<user.User>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<user.User>) userList36, userArray35);
        database34.users = userList36;
        java.util.ArrayList<user.User> userList39 = database34.users;
        database34.update("hi!");
        database34.load("hi!");
        database.Database database45 = database.Database.getInstance("");
        database.Database database47 = database.Database.getInstance("hi!");
        user.User[] userArray48 = new user.User[] {};
        java.util.ArrayList<user.User> userList49 = new java.util.ArrayList<user.User>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<user.User>) userList49, userArray48);
        database47.users = userList49;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        database47.users = userList54;
        database45.users = userList54;
        database.Database database58 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList59 = database58.users;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database58.users = userList62;
        java.util.ArrayList<user.User> userList64 = database58.users;
        java.util.ArrayList<user.User> userList65 = database58.users;
        database58.load("hi!");
        java.util.ArrayList<user.User> userList68 = database58.users;
        database45.users = userList68;
        database.Database database71 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList72 = database71.users;
        database.Database database74 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList75 = database74.users;
        database71.users = userList75;
        java.util.ArrayList<user.User> userList77 = database71.users;
        database71.load("hi!");
        java.util.ArrayList<user.User> userList80 = database71.users;
        database45.users = userList80;
        database34.users = userList80;
        java.util.ArrayList<user.User> userList83 = database34.users;
        java.util.ArrayList<user.User> userList84 = database34.users;
        database1.users = userList84;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userArray35);
        org.junit.Assert.assertArrayEquals(userArray35, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(database47);
        org.junit.Assert.assertNotNull(userArray48);
        org.junit.Assert.assertArrayEquals(userArray48, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(database71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(userList80);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(userList84);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database11.users = userList15;
        java.util.ArrayList<user.User> userList17 = database11.users;
        database11.load("hi!");
        database11.update("hi!");
        java.util.ArrayList<user.User> userList22 = database11.users;
        database1.users = userList22;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList22);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        java.util.ArrayList<user.User> userList16 = database1.users;
        java.util.ArrayList<user.User> userList17 = database1.users;
        database.Database database19 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList20 = database19.users;
        java.util.ArrayList<user.User> userList21 = database19.users;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database23.users = userList29;
        database19.users = userList29;
        java.util.ArrayList<user.User> userList34 = database19.users;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        java.util.ArrayList<user.User> userList43 = database36.users;
        database.Database database45 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList46 = database45.users;
        java.util.ArrayList<user.User> userList47 = database45.users;
        java.util.ArrayList<user.User> userList48 = database45.users;
        database36.users = userList48;
        database19.users = userList48;
        database1.users = userList48;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList48);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database39.users = userList50;
        database1.users = userList50;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList56 = database1.users;
        database.Database database58 = database.Database.getInstance("");
        database.Database database60 = database.Database.getInstance("hi!");
        user.User[] userArray61 = new user.User[] {};
        java.util.ArrayList<user.User> userList62 = new java.util.ArrayList<user.User>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<user.User>) userList62, userArray61);
        database60.users = userList62;
        database.Database database66 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList67 = database66.users;
        database60.users = userList67;
        database58.users = userList67;
        database.Database database71 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList72 = database71.users;
        database.Database database74 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList75 = database74.users;
        database71.users = userList75;
        java.util.ArrayList<user.User> userList77 = database71.users;
        java.util.ArrayList<user.User> userList78 = database71.users;
        database71.load("hi!");
        java.util.ArrayList<user.User> userList81 = database71.users;
        database58.users = userList81;
        database1.users = userList81;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(database60);
        org.junit.Assert.assertNotNull(userArray61);
        org.junit.Assert.assertArrayEquals(userArray61, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(database71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(userList78);
        org.junit.Assert.assertNotNull(userList81);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }
}
