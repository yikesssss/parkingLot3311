package rando.database;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        database18.users = userList30;
        database1.users = userList30;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList35 = null;
        database1.users = userList35;
        java.lang.Class<?> wildcardClass37 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
// flaky "1) test0501(RegressionTest1)":         org.junit.Assert.assertNull(userList2);
// flaky "1) test0501(RegressionTest1)":         org.junit.Assert.assertNull(userList3);
        org.junit.Assert.assertNotNull(database5);
// flaky "1) test0501(RegressionTest1)":         org.junit.Assert.assertNull(userList6);
// flaky "1) test0501(RegressionTest1)":         org.junit.Assert.assertNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database27.users = userList31;
        java.util.ArrayList<user.User> userList33 = database27.users;
        database27.load("hi!");
        java.util.ArrayList<user.User> userList36 = database27.users;
        database1.users = userList36;
        java.lang.Class<?> wildcardClass38 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        java.util.ArrayList<user.User> userList28 = database25.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database30.users = userList34;
        database25.users = userList34;
        database.Database database38 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        java.util.ArrayList<user.User> userList44 = database42.users;
        database.Database database46 = database.Database.getInstance("hi!");
        user.User[] userArray47 = new user.User[] {};
        java.util.ArrayList<user.User> userList48 = new java.util.ArrayList<user.User>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<user.User>) userList48, userArray47);
        database46.users = userList48;
        database42.users = userList48;
        database38.users = userList48;
        database25.users = userList48;
        database.Database database55 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList56 = database55.users;
        java.util.ArrayList<user.User> userList57 = database55.users;
        java.util.ArrayList<user.User> userList58 = database55.users;
        database55.load("hi!");
        database.Database database62 = database.Database.getInstance("");
        database.Database database64 = database.Database.getInstance("hi!");
        user.User[] userArray65 = new user.User[] {};
        java.util.ArrayList<user.User> userList66 = new java.util.ArrayList<user.User>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<user.User>) userList66, userArray65);
        database64.users = userList66;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        database64.users = userList71;
        database62.users = userList71;
        database55.users = userList71;
        java.util.ArrayList<user.User> userList75 = database55.users;
        database25.users = userList75;
        database1.users = userList75;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userArray47);
        org.junit.Assert.assertArrayEquals(userArray47, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(database62);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userArray65);
        org.junit.Assert.assertArrayEquals(userArray65, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList75);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        user.User[] userArray17 = new user.User[] {};
        java.util.ArrayList<user.User> userList18 = new java.util.ArrayList<user.User>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<user.User>) userList18, userArray17);
        database16.users = userList18;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database16.users = userList23;
        database12.users = userList23;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database.Database database31 = database.Database.getInstance("hi!");
        user.User[] userArray32 = new user.User[] {};
        java.util.ArrayList<user.User> userList33 = new java.util.ArrayList<user.User>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<user.User>) userList33, userArray32);
        database31.users = userList33;
        database27.users = userList33;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database38.users = userList42;
        java.util.ArrayList<user.User> userList44 = database38.users;
        java.util.ArrayList<user.User> userList45 = database38.users;
        database27.users = userList45;
        database12.users = userList45;
        database1.users = userList45;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userArray17);
        org.junit.Assert.assertArrayEquals(userArray17, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userArray32);
        org.junit.Assert.assertArrayEquals(userArray32, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList45);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database.Database database18 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        java.util.ArrayList<user.User> userList24 = database22.users;
        database.Database database26 = database.Database.getInstance("hi!");
        user.User[] userArray27 = new user.User[] {};
        java.util.ArrayList<user.User> userList28 = new java.util.ArrayList<user.User>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<user.User>) userList28, userArray27);
        database26.users = userList28;
        database22.users = userList28;
        database18.users = userList28;
        database5.users = userList28;
        database.Database database35 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList36 = database35.users;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database35.users = userList39;
        database5.users = userList39;
        java.util.ArrayList<user.User> userList42 = database5.users;
        database1.users = userList42;
        database.Database database45 = database.Database.getInstance("hi!");
        user.User[] userArray46 = new user.User[] {};
        java.util.ArrayList<user.User> userList47 = new java.util.ArrayList<user.User>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<user.User>) userList47, userArray46);
        database45.users = userList47;
        java.util.ArrayList<user.User> userList50 = database45.users;
        database45.update("hi!");
        database45.load("hi!");
        database.Database database56 = database.Database.getInstance("");
        database.Database database58 = database.Database.getInstance("hi!");
        user.User[] userArray59 = new user.User[] {};
        java.util.ArrayList<user.User> userList60 = new java.util.ArrayList<user.User>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<user.User>) userList60, userArray59);
        database58.users = userList60;
        database.Database database64 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList65 = database64.users;
        database58.users = userList65;
        database56.users = userList65;
        database.Database database69 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList70 = database69.users;
        database.Database database72 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList73 = database72.users;
        database69.users = userList73;
        java.util.ArrayList<user.User> userList75 = database69.users;
        java.util.ArrayList<user.User> userList76 = database69.users;
        database69.load("hi!");
        java.util.ArrayList<user.User> userList79 = database69.users;
        database56.users = userList79;
        database.Database database82 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList83 = database82.users;
        database.Database database85 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList86 = database85.users;
        database82.users = userList86;
        java.util.ArrayList<user.User> userList88 = database82.users;
        database82.load("hi!");
        java.util.ArrayList<user.User> userList91 = database82.users;
        database56.users = userList91;
        database45.users = userList91;
        database1.users = userList91;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userArray27);
        org.junit.Assert.assertArrayEquals(userArray27, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userArray46);
        org.junit.Assert.assertArrayEquals(userArray46, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(userArray59);
        org.junit.Assert.assertArrayEquals(userArray59, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(database69);
        org.junit.Assert.assertNotNull(userList70);
        org.junit.Assert.assertNotNull(database72);
        org.junit.Assert.assertNotNull(userList73);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(userList76);
        org.junit.Assert.assertNotNull(userList79);
        org.junit.Assert.assertNotNull(database82);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(database85);
        org.junit.Assert.assertNotNull(userList86);
        org.junit.Assert.assertNotNull(userList88);
        org.junit.Assert.assertNotNull(userList91);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        java.util.ArrayList<user.User> userList13 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList16 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList16);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot21 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.util.ArrayList<user.User> userList5 = database1.users;
        database.Database database7 = database.Database.getInstance("hi!");
        user.User[] userArray8 = new user.User[] {};
        java.util.ArrayList<user.User> userList9 = new java.util.ArrayList<user.User>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<user.User>) userList9, userArray8);
        database7.users = userList9;
        database1.users = userList9;
        java.util.ArrayList<user.User> userList13 = null;
        database1.users = userList13;
        java.util.ArrayList<user.User> userList15 = database1.users;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userArray8);
        org.junit.Assert.assertArrayEquals(userArray8, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(userList15);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        database1.update("hi!");
        database1.load("hi!");
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database.Database database26 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList27 = database26.users;
        java.util.ArrayList<user.User> userList28 = database26.users;
        java.util.ArrayList<user.User> userList29 = database26.users;
        database26.load("hi!");
        database26.load("hi!");
        java.util.ArrayList<user.User> userList34 = database26.users;
        database14.users = userList34;
        database1.users = userList34;
        java.lang.Class<?> wildcardClass37 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        database.Database database10 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList11 = database10.users;
        java.util.ArrayList<user.User> userList12 = database10.users;
        java.util.ArrayList<user.User> userList13 = database10.users;
        database10.load("hi!");
        database.Database database17 = database.Database.getInstance("");
        database.Database database19 = database.Database.getInstance("hi!");
        user.User[] userArray20 = new user.User[] {};
        java.util.ArrayList<user.User> userList21 = new java.util.ArrayList<user.User>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<user.User>) userList21, userArray20);
        database19.users = userList21;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database19.users = userList26;
        database17.users = userList26;
        database10.users = userList26;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        java.util.ArrayList<user.User> userList37 = database31.users;
        java.util.ArrayList<user.User> userList38 = database31.users;
        database10.users = userList38;
        database1.users = userList38;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userArray20);
        org.junit.Assert.assertArrayEquals(userArray20, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList38);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = parkingSpot16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        database1.load("hi!");
        database1.update("hi!");
        database.Database database19 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList20 = database19.users;
        java.util.ArrayList<user.User> userList21 = database19.users;
        java.util.ArrayList<user.User> userList22 = database19.users;
        database19.load("hi!");
        database.Database database26 = database.Database.getInstance("");
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database26.users = userList35;
        database19.users = userList35;
        java.util.ArrayList<user.User> userList39 = database19.users;
        database1.users = userList39;
        java.lang.Class<?> wildcardClass41 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        java.util.ArrayList<user.User> userList9 = database6.users;
        database6.load("hi!");
        database.Database database13 = database.Database.getInstance("");
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database15.users = userList22;
        database13.users = userList22;
        database6.users = userList22;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database27.users = userList31;
        java.util.ArrayList<user.User> userList33 = database27.users;
        java.util.ArrayList<user.User> userList34 = database27.users;
        database6.users = userList34;
        database1.users = userList34;
        java.util.ArrayList<user.User> userList37 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(userList37);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        database1.load("hi!");
        database1.load("hi!");
        java.lang.Class<?> wildcardClass25 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.update("hi!");
        database.Database database11 = database.Database.getInstance("");
        database.Database database13 = database.Database.getInstance("hi!");
        user.User[] userArray14 = new user.User[] {};
        java.util.ArrayList<user.User> userList15 = new java.util.ArrayList<user.User>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<user.User>) userList15, userArray14);
        database13.users = userList15;
        database.Database database19 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList20 = database19.users;
        database13.users = userList20;
        database11.users = userList20;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database24.users = userList28;
        java.util.ArrayList<user.User> userList30 = database24.users;
        java.util.ArrayList<user.User> userList31 = database24.users;
        database24.load("hi!");
        java.util.ArrayList<user.User> userList34 = database24.users;
        database11.users = userList34;
        database1.users = userList34;
        database.Database database38 = database.Database.getInstance("hi!");
        user.User[] userArray39 = new user.User[] {};
        java.util.ArrayList<user.User> userList40 = new java.util.ArrayList<user.User>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<user.User>) userList40, userArray39);
        database38.users = userList40;
        database.Database database44 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList45 = database44.users;
        database38.users = userList45;
        database1.users = userList45;
        java.util.ArrayList<user.User> userList48 = database1.users;
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userArray14);
        org.junit.Assert.assertArrayEquals(userArray14, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userArray39);
        org.junit.Assert.assertArrayEquals(userArray39, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(database44);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(userList48);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList28 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList28);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        java.util.ArrayList<user.User> userList30 = database1.users;
        java.util.ArrayList<user.User> userList31 = database1.users;
        java.lang.Class<?> wildcardClass32 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        java.util.ArrayList<user.User> userList21 = database1.users;
        java.util.ArrayList<user.User> userList22 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList22);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        database1.users = userList35;
        java.util.ArrayList<user.User> userList38 = database1.users;
        java.lang.Class<?> wildcardClass39 = userList38.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database15.users = userList19;
        java.util.ArrayList<user.User> userList21 = database15.users;
        database15.load("hi!");
        database15.update("hi!");
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database15.users = userList29;
        database1.users = userList29;
        java.util.ArrayList<user.User> userList32 = database1.users;
        java.util.ArrayList<user.User> userList33 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        database18.users = userList30;
        database1.users = userList30;
        database.Database database34 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList35 = database34.users;
        java.util.ArrayList<user.User> userList36 = database34.users;
        java.util.ArrayList<user.User> userList37 = database34.users;
        database34.load("hi!");
        database.Database database41 = database.Database.getInstance("");
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database41.users = userList50;
        database34.users = userList50;
        database1.users = userList50;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass57 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList21);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList13 = database1.users;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(userList13);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.update("hi!");
        database.Database database11 = database.Database.getInstance("");
        database.Database database13 = database.Database.getInstance("hi!");
        user.User[] userArray14 = new user.User[] {};
        java.util.ArrayList<user.User> userList15 = new java.util.ArrayList<user.User>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<user.User>) userList15, userArray14);
        database13.users = userList15;
        database.Database database19 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList20 = database19.users;
        database13.users = userList20;
        database11.users = userList20;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database24.users = userList28;
        java.util.ArrayList<user.User> userList30 = database24.users;
        java.util.ArrayList<user.User> userList31 = database24.users;
        database24.load("hi!");
        java.util.ArrayList<user.User> userList34 = database24.users;
        database11.users = userList34;
        database1.users = userList34;
        database.Database database38 = database.Database.getInstance("hi!");
        user.User[] userArray39 = new user.User[] {};
        java.util.ArrayList<user.User> userList40 = new java.util.ArrayList<user.User>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<user.User>) userList40, userArray39);
        database38.users = userList40;
        database.Database database44 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList45 = database44.users;
        database38.users = userList45;
        database1.users = userList45;
        java.lang.Class<?> wildcardClass48 = userList45.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userArray14);
        org.junit.Assert.assertArrayEquals(userArray14, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userArray39);
        org.junit.Assert.assertArrayEquals(userArray39, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(database44);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 100);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        java.lang.Class<?> wildcardClass7 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        java.lang.Class<?> wildcardClass21 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList32 = database31.users;
        java.util.ArrayList<user.User> userList33 = database31.users;
        java.util.ArrayList<user.User> userList34 = database31.users;
        database31.load("hi!");
        database.Database database38 = database.Database.getInstance("");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database38.users = userList47;
        database31.users = userList47;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        java.util.ArrayList<user.User> userList56 = database53.users;
        java.util.ArrayList<user.User> userList57 = database53.users;
        database.Database database59 = database.Database.getInstance("hi!");
        user.User[] userArray60 = new user.User[] {};
        java.util.ArrayList<user.User> userList61 = new java.util.ArrayList<user.User>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<user.User>) userList61, userArray60);
        database59.users = userList61;
        database53.users = userList61;
        database31.users = userList61;
        java.util.ArrayList<user.User> userList66 = database31.users;
        database1.users = userList66;
        database.Database database69 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList70 = database69.users;
        java.util.ArrayList<user.User> userList71 = database69.users;
        java.util.ArrayList<user.User> userList72 = database69.users;
        java.util.ArrayList<user.User> userList73 = database69.users;
        database.Database database75 = database.Database.getInstance("hi!");
        user.User[] userArray76 = new user.User[] {};
        java.util.ArrayList<user.User> userList77 = new java.util.ArrayList<user.User>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<user.User>) userList77, userArray76);
        database75.users = userList77;
        database69.users = userList77;
        database1.users = userList77;
        java.util.ArrayList<user.User> userList82 = database1.users;
        java.lang.Class<?> wildcardClass83 = userList82.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userArray60);
        org.junit.Assert.assertArrayEquals(userArray60, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(userList66);
        org.junit.Assert.assertNotNull(database69);
        org.junit.Assert.assertNotNull(userList70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(userList73);
        org.junit.Assert.assertNotNull(database75);
        org.junit.Assert.assertNotNull(userArray76);
        org.junit.Assert.assertArrayEquals(userArray76, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(userList82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        database1.load("hi!");
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        java.util.ArrayList<user.User> userList13 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList13);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        database1.update("hi!");
        database.Database database29 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList30 = database29.users;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database29.users = userList33;
        java.util.ArrayList<user.User> userList35 = database29.users;
        database29.update("hi!");
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList44 = database43.users;
        java.util.ArrayList<user.User> userList45 = database43.users;
        database.Database database47 = database.Database.getInstance("hi!");
        user.User[] userArray48 = new user.User[] {};
        java.util.ArrayList<user.User> userList49 = new java.util.ArrayList<user.User>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<user.User>) userList49, userArray48);
        database47.users = userList49;
        database43.users = userList49;
        database39.users = userList49;
        database29.users = userList49;
        database1.users = userList49;
        java.lang.Class<?> wildcardClass56 = userList49.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(database47);
        org.junit.Assert.assertNotNull(userArray48);
        org.junit.Assert.assertArrayEquals(userArray48, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database.Database database18 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        java.util.ArrayList<user.User> userList24 = database22.users;
        database.Database database26 = database.Database.getInstance("hi!");
        user.User[] userArray27 = new user.User[] {};
        java.util.ArrayList<user.User> userList28 = new java.util.ArrayList<user.User>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<user.User>) userList28, userArray27);
        database26.users = userList28;
        database22.users = userList28;
        database18.users = userList28;
        database5.users = userList28;
        database.Database database35 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList36 = database35.users;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database35.users = userList39;
        database5.users = userList39;
        java.util.ArrayList<user.User> userList42 = database5.users;
        database1.users = userList42;
        database.Database database45 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList46 = database45.users;
        java.util.ArrayList<user.User> userList47 = database45.users;
        java.util.ArrayList<user.User> userList48 = database45.users;
        database.Database database50 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList51 = database50.users;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        database50.users = userList54;
        database45.users = userList54;
        java.util.ArrayList<user.User> userList57 = database45.users;
        database1.users = userList57;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userArray27);
        org.junit.Assert.assertArrayEquals(userArray27, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList57);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        java.lang.Class<?> wildcardClass24 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        database.Database database1 = database.Database.getInstance("hi!");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database.Database database13 = database.Database.getInstance("hi!");
        user.User[] userArray14 = new user.User[] {};
        java.util.ArrayList<user.User> userList15 = new java.util.ArrayList<user.User>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<user.User>) userList15, userArray14);
        database13.users = userList15;
        database.Database database19 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList20 = database19.users;
        database13.users = userList20;
        database3.users = userList20;
        java.util.ArrayList<user.User> userList23 = database3.users;
        database3.load("hi!");
        database3.update("hi!");
        database3.update("hi!");
        java.util.ArrayList<user.User> userList30 = database3.users;
        database1.users = userList30;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userArray14);
        org.junit.Assert.assertArrayEquals(userArray14, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList30);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database.Database database22 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList23 = database22.users;
        java.util.ArrayList<user.User> userList24 = database22.users;
        database.Database database26 = database.Database.getInstance("hi!");
        user.User[] userArray27 = new user.User[] {};
        java.util.ArrayList<user.User> userList28 = new java.util.ArrayList<user.User>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<user.User>) userList28, userArray27);
        database26.users = userList28;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database26.users = userList33;
        database22.users = userList33;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        java.util.ArrayList<user.User> userList39 = database37.users;
        database.Database database41 = database.Database.getInstance("hi!");
        user.User[] userArray42 = new user.User[] {};
        java.util.ArrayList<user.User> userList43 = new java.util.ArrayList<user.User>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<user.User>) userList43, userArray42);
        database41.users = userList43;
        database37.users = userList43;
        database.Database database48 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList49 = database48.users;
        database.Database database51 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList52 = database51.users;
        database48.users = userList52;
        java.util.ArrayList<user.User> userList54 = database48.users;
        java.util.ArrayList<user.User> userList55 = database48.users;
        database37.users = userList55;
        database22.users = userList55;
        database1.users = userList55;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userArray27);
        org.junit.Assert.assertArrayEquals(userArray27, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userArray42);
        org.junit.Assert.assertArrayEquals(userArray42, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(database51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        database1.users = userList35;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database22.users = userList26;
        java.util.ArrayList<user.User> userList28 = database22.users;
        java.util.ArrayList<user.User> userList29 = database22.users;
        database22.load("hi!");
        java.util.ArrayList<user.User> userList32 = database22.users;
        database1.users = userList32;
        database.Database database35 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList36 = database35.users;
        java.util.ArrayList<user.User> userList37 = database35.users;
        java.util.ArrayList<user.User> userList38 = database35.users;
        database35.load("hi!");
        database.Database database42 = database.Database.getInstance("");
        database.Database database44 = database.Database.getInstance("hi!");
        user.User[] userArray45 = new user.User[] {};
        java.util.ArrayList<user.User> userList46 = new java.util.ArrayList<user.User>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<user.User>) userList46, userArray45);
        database44.users = userList46;
        database.Database database50 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList51 = database50.users;
        database44.users = userList51;
        database42.users = userList51;
        database35.users = userList51;
        database.Database database56 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList57 = database56.users;
        database.Database database59 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList60 = database59.users;
        database56.users = userList60;
        java.util.ArrayList<user.User> userList62 = database56.users;
        java.util.ArrayList<user.User> userList63 = database56.users;
        database56.load("hi!");
        java.util.ArrayList<user.User> userList66 = database56.users;
        database35.users = userList66;
        java.util.ArrayList<user.User> userList68 = database35.users;
        database1.users = userList68;
        java.lang.Class<?> wildcardClass70 = userList68.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(database44);
        org.junit.Assert.assertNotNull(userArray45);
        org.junit.Assert.assertArrayEquals(userArray45, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(userList66);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database11.users = userList15;
        java.util.ArrayList<user.User> userList17 = database11.users;
        database11.update("hi!");
        java.util.ArrayList<user.User> userList20 = database11.users;
        database1.users = userList20;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList20);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = parkingSpot6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass21 = parkingSpot20.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        database1.update("hi!");
        database1.load("hi!");
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database.Database database26 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList27 = database26.users;
        java.util.ArrayList<user.User> userList28 = database26.users;
        java.util.ArrayList<user.User> userList29 = database26.users;
        database26.load("hi!");
        database26.load("hi!");
        java.util.ArrayList<user.User> userList34 = database26.users;
        database14.users = userList34;
        database1.users = userList34;
        java.lang.Class<?> wildcardClass37 = userList34.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        database.Database database1 = database.Database.getInstance("hi!");
        database.Database database3 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList4 = database3.users;
        java.util.ArrayList<user.User> userList5 = database3.users;
        java.util.ArrayList<user.User> userList6 = database3.users;
        database3.load("hi!");
        database.Database database10 = database.Database.getInstance("");
        database.Database database12 = database.Database.getInstance("hi!");
        user.User[] userArray13 = new user.User[] {};
        java.util.ArrayList<user.User> userList14 = new java.util.ArrayList<user.User>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<user.User>) userList14, userArray13);
        database12.users = userList14;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database12.users = userList19;
        database10.users = userList19;
        database3.users = userList19;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database24.users = userList28;
        java.util.ArrayList<user.User> userList30 = database24.users;
        java.util.ArrayList<user.User> userList31 = database24.users;
        database3.users = userList31;
        database1.users = userList31;
        java.util.ArrayList<user.User> userList34 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userArray13);
        org.junit.Assert.assertArrayEquals(userArray13, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList34);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass19 = parkingSpot18.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) '#');
        java.lang.Class<?> wildcardClass21 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database11.users = userList17;
        database1.users = userList17;
        database.Database database23 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        database.Database database27 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database.Database database35 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList36 = database35.users;
        database32.users = userList36;
        database27.users = userList36;
        database27.update("hi!");
        java.util.ArrayList<user.User> userList41 = database27.users;
        database23.users = userList41;
        database.Database database44 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList45 = database44.users;
        java.util.ArrayList<user.User> userList46 = database44.users;
        java.util.ArrayList<user.User> userList47 = database44.users;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database.Database database52 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList53 = database52.users;
        database49.users = userList53;
        database44.users = userList53;
        database.Database database57 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList58 = database57.users;
        java.util.ArrayList<user.User> userList59 = database57.users;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        java.util.ArrayList<user.User> userList63 = database61.users;
        database.Database database65 = database.Database.getInstance("hi!");
        user.User[] userArray66 = new user.User[] {};
        java.util.ArrayList<user.User> userList67 = new java.util.ArrayList<user.User>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<user.User>) userList67, userArray66);
        database65.users = userList67;
        database61.users = userList67;
        database57.users = userList67;
        database44.users = userList67;
        java.util.ArrayList<user.User> userList73 = database44.users;
        database23.users = userList73;
        database1.users = userList73;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database44);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(database52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(database57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(database65);
        org.junit.Assert.assertNotNull(userArray66);
        org.junit.Assert.assertArrayEquals(userArray66, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(userList73);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.update("hi!");
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        java.util.ArrayList<user.User> userList17 = database15.users;
        database.Database database19 = database.Database.getInstance("hi!");
        user.User[] userArray20 = new user.User[] {};
        java.util.ArrayList<user.User> userList21 = new java.util.ArrayList<user.User>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<user.User>) userList21, userArray20);
        database19.users = userList21;
        database15.users = userList21;
        database11.users = userList21;
        database1.users = userList21;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList29 = database1.users;
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userArray20);
        org.junit.Assert.assertArrayEquals(userArray20, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(userList29);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        database.Database database24 = database.Database.getInstance("hi!");
        user.User[] userArray25 = new user.User[] {};
        java.util.ArrayList<user.User> userList26 = new java.util.ArrayList<user.User>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<user.User>) userList26, userArray25);
        database24.users = userList26;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database30.users = userList34;
        database24.users = userList34;
        java.util.ArrayList<user.User> userList37 = null;
        database24.users = userList37;
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database24.users = userList42;
        database1.users = userList42;
        database.Database database48 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList49 = database48.users;
        java.util.ArrayList<user.User> userList50 = database48.users;
        java.util.ArrayList<user.User> userList51 = database48.users;
        database48.load("hi!");
        database.Database database55 = database.Database.getInstance("");
        database.Database database57 = database.Database.getInstance("hi!");
        user.User[] userArray58 = new user.User[] {};
        java.util.ArrayList<user.User> userList59 = new java.util.ArrayList<user.User>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<user.User>) userList59, userArray58);
        database57.users = userList59;
        database.Database database63 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList64 = database63.users;
        database57.users = userList64;
        database55.users = userList64;
        database48.users = userList64;
        java.util.ArrayList<user.User> userList68 = database48.users;
        database1.users = userList68;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userArray25);
        org.junit.Assert.assertArrayEquals(userArray25, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(database57);
        org.junit.Assert.assertNotNull(userArray58);
        org.junit.Assert.assertArrayEquals(userArray58, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(database63);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList68);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList8 = database7.users;
        java.util.ArrayList<user.User> userList9 = database7.users;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database11.users = userList17;
        database7.users = userList17;
        java.util.ArrayList<user.User> userList22 = database7.users;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database24.users = userList28;
        java.util.ArrayList<user.User> userList30 = database24.users;
        java.util.ArrayList<user.User> userList31 = database24.users;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        java.util.ArrayList<user.User> userList35 = database33.users;
        java.util.ArrayList<user.User> userList36 = database33.users;
        database24.users = userList36;
        database7.users = userList36;
        database.Database database40 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList41 = database40.users;
        java.util.ArrayList<user.User> userList42 = database40.users;
        java.util.ArrayList<user.User> userList43 = database40.users;
        database40.load("hi!");
        database.Database database47 = database.Database.getInstance("");
        database.Database database49 = database.Database.getInstance("hi!");
        user.User[] userArray50 = new user.User[] {};
        java.util.ArrayList<user.User> userList51 = new java.util.ArrayList<user.User>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<user.User>) userList51, userArray50);
        database49.users = userList51;
        database.Database database55 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList56 = database55.users;
        database49.users = userList56;
        database47.users = userList56;
        database40.users = userList56;
        database7.users = userList56;
        database.Database database62 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList63 = database62.users;
        java.util.ArrayList<user.User> userList64 = database62.users;
        java.util.ArrayList<user.User> userList65 = database62.users;
        database62.load("hi!");
        database.Database database69 = database.Database.getInstance("");
        database.Database database71 = database.Database.getInstance("hi!");
        user.User[] userArray72 = new user.User[] {};
        java.util.ArrayList<user.User> userList73 = new java.util.ArrayList<user.User>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<user.User>) userList73, userArray72);
        database71.users = userList73;
        database.Database database77 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList78 = database77.users;
        database71.users = userList78;
        database69.users = userList78;
        database62.users = userList78;
        database.Database database83 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList84 = database83.users;
        database.Database database86 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList87 = database86.users;
        database83.users = userList87;
        java.util.ArrayList<user.User> userList89 = database83.users;
        java.util.ArrayList<user.User> userList90 = database83.users;
        database83.load("hi!");
        java.util.ArrayList<user.User> userList93 = database83.users;
        database62.users = userList93;
        database7.users = userList93;
        database1.users = userList93;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database47);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userArray50);
        org.junit.Assert.assertArrayEquals(userArray50, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(database69);
        org.junit.Assert.assertNotNull(database71);
        org.junit.Assert.assertNotNull(userArray72);
        org.junit.Assert.assertArrayEquals(userArray72, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(database77);
        org.junit.Assert.assertNotNull(userList78);
        org.junit.Assert.assertNotNull(database83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(database86);
        org.junit.Assert.assertNotNull(userList87);
        org.junit.Assert.assertNotNull(userList89);
        org.junit.Assert.assertNotNull(userList90);
        org.junit.Assert.assertNotNull(userList93);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.load("hi!");
        database.Database database29 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList30 = database29.users;
        java.util.ArrayList<user.User> userList31 = database29.users;
        java.util.ArrayList<user.User> userList32 = database29.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        database34.users = userList38;
        database29.users = userList38;
        database.Database database42 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList43 = database42.users;
        java.util.ArrayList<user.User> userList44 = database42.users;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        java.util.ArrayList<user.User> userList48 = database46.users;
        database.Database database50 = database.Database.getInstance("hi!");
        user.User[] userArray51 = new user.User[] {};
        java.util.ArrayList<user.User> userList52 = new java.util.ArrayList<user.User>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<user.User>) userList52, userArray51);
        database50.users = userList52;
        database46.users = userList52;
        database42.users = userList52;
        database29.users = userList52;
        database.Database database59 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList60 = database59.users;
        java.util.ArrayList<user.User> userList61 = database59.users;
        java.util.ArrayList<user.User> userList62 = database59.users;
        database59.load("hi!");
        database.Database database66 = database.Database.getInstance("");
        database.Database database68 = database.Database.getInstance("hi!");
        user.User[] userArray69 = new user.User[] {};
        java.util.ArrayList<user.User> userList70 = new java.util.ArrayList<user.User>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<user.User>) userList70, userArray69);
        database68.users = userList70;
        database.Database database74 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList75 = database74.users;
        database68.users = userList75;
        database66.users = userList75;
        database59.users = userList75;
        java.util.ArrayList<user.User> userList79 = database59.users;
        database29.users = userList79;
        java.util.ArrayList<user.User> userList81 = database29.users;
        database1.users = userList81;
        java.util.ArrayList<user.User> userList83 = database1.users;
        java.lang.Class<?> wildcardClass84 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userArray51);
        org.junit.Assert.assertArrayEquals(userArray51, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(database68);
        org.junit.Assert.assertNotNull(userArray69);
        org.junit.Assert.assertArrayEquals(userArray69, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(userList79);
        org.junit.Assert.assertNotNull(userList81);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database15.users = userList22;
        database11.users = userList22;
        database11.load("hi!");
        java.util.ArrayList<user.User> userList27 = database11.users;
        database11.load("hi!");
        java.util.ArrayList<user.User> userList30 = database11.users;
        database1.users = userList30;
        database.Database database33 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList34 = database33.users;
        java.util.ArrayList<user.User> userList35 = database33.users;
        database.Database database37 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList38 = database37.users;
        java.util.ArrayList<user.User> userList39 = database37.users;
        java.util.ArrayList<user.User> userList40 = database37.users;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        database.Database database45 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList46 = database45.users;
        database42.users = userList46;
        database37.users = userList46;
        database37.update("hi!");
        java.util.ArrayList<user.User> userList51 = database37.users;
        database33.users = userList51;
        database.Database database54 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList55 = database54.users;
        java.util.ArrayList<user.User> userList56 = database54.users;
        java.util.ArrayList<user.User> userList57 = database54.users;
        database.Database database59 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList60 = database59.users;
        database.Database database62 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList63 = database62.users;
        database59.users = userList63;
        database54.users = userList63;
        database.Database database67 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList68 = database67.users;
        java.util.ArrayList<user.User> userList69 = database67.users;
        database.Database database71 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList72 = database71.users;
        java.util.ArrayList<user.User> userList73 = database71.users;
        database.Database database75 = database.Database.getInstance("hi!");
        user.User[] userArray76 = new user.User[] {};
        java.util.ArrayList<user.User> userList77 = new java.util.ArrayList<user.User>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<user.User>) userList77, userArray76);
        database75.users = userList77;
        database71.users = userList77;
        database67.users = userList77;
        database54.users = userList77;
        java.util.ArrayList<user.User> userList83 = database54.users;
        database33.users = userList83;
        database1.users = userList83;
        java.lang.Class<?> wildcardClass86 = userList83.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(database62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(database67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(userList69);
        org.junit.Assert.assertNotNull(database71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(userList73);
        org.junit.Assert.assertNotNull(database75);
        org.junit.Assert.assertNotNull(userArray76);
        org.junit.Assert.assertArrayEquals(userArray76, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.update("hi!");
        database.Database database11 = database.Database.getInstance("");
        database.Database database13 = database.Database.getInstance("hi!");
        user.User[] userArray14 = new user.User[] {};
        java.util.ArrayList<user.User> userList15 = new java.util.ArrayList<user.User>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<user.User>) userList15, userArray14);
        database13.users = userList15;
        database.Database database19 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList20 = database19.users;
        database13.users = userList20;
        database11.users = userList20;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database24.users = userList28;
        java.util.ArrayList<user.User> userList30 = database24.users;
        java.util.ArrayList<user.User> userList31 = database24.users;
        database24.load("hi!");
        java.util.ArrayList<user.User> userList34 = database24.users;
        database11.users = userList34;
        database1.users = userList34;
        database.Database database38 = database.Database.getInstance("hi!");
        user.User[] userArray39 = new user.User[] {};
        java.util.ArrayList<user.User> userList40 = new java.util.ArrayList<user.User>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<user.User>) userList40, userArray39);
        database38.users = userList40;
        database.Database database44 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList45 = database44.users;
        database38.users = userList45;
        database1.users = userList45;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userArray14);
        org.junit.Assert.assertArrayEquals(userArray14, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userArray39);
        org.junit.Assert.assertArrayEquals(userArray39, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(database44);
        org.junit.Assert.assertNotNull(userList45);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        java.util.ArrayList<user.User> userList12 = database10.users;
        java.util.ArrayList<user.User> userList13 = database10.users;
        database1.users = userList13;
        java.lang.Class<?> wildcardClass15 = userList13.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList32 = database31.users;
        java.util.ArrayList<user.User> userList33 = database31.users;
        java.util.ArrayList<user.User> userList34 = database31.users;
        database31.load("hi!");
        database.Database database38 = database.Database.getInstance("");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database38.users = userList47;
        database31.users = userList47;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database1.users = userList51;
        java.util.ArrayList<user.User> userList53 = database1.users;
        java.lang.Class<?> wildcardClass54 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        java.util.ArrayList<user.User> userList21 = database1.users;
        java.util.ArrayList<user.User> userList22 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList27 = database1.users;
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList27);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        java.util.ArrayList<user.User> userList51 = database1.users;
        java.util.ArrayList<user.User> userList52 = database1.users;
        java.util.ArrayList<user.User> userList53 = database1.users;
        java.lang.Class<?> wildcardClass54 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        database.Database database1 = database.Database.getInstance("hi!");
        database.Database database3 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList4 = database3.users;
        java.util.ArrayList<user.User> userList5 = database3.users;
        java.util.ArrayList<user.User> userList6 = database3.users;
        database3.load("hi!");
        database.Database database10 = database.Database.getInstance("");
        database.Database database12 = database.Database.getInstance("hi!");
        user.User[] userArray13 = new user.User[] {};
        java.util.ArrayList<user.User> userList14 = new java.util.ArrayList<user.User>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<user.User>) userList14, userArray13);
        database12.users = userList14;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database12.users = userList19;
        database10.users = userList19;
        database3.users = userList19;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database24.users = userList28;
        java.util.ArrayList<user.User> userList30 = database24.users;
        java.util.ArrayList<user.User> userList31 = database24.users;
        database3.users = userList31;
        database1.users = userList31;
        java.util.ArrayList<user.User> userList34 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userArray13);
        org.junit.Assert.assertArrayEquals(userArray13, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList34);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        java.lang.Class<?> wildcardClass26 = userList24.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        java.util.ArrayList<user.User> userList26 = database1.users;
        java.util.ArrayList<user.User> userList27 = database1.users;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList30 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList30);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot5 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = parkingSpot8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        java.util.ArrayList<user.User> userList38 = database1.users;
        database.Database database40 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList41 = database40.users;
        java.util.ArrayList<user.User> userList42 = database40.users;
        java.util.ArrayList<user.User> userList43 = database40.users;
        database40.load("hi!");
        database.Database database47 = database.Database.getInstance("");
        database.Database database49 = database.Database.getInstance("hi!");
        user.User[] userArray50 = new user.User[] {};
        java.util.ArrayList<user.User> userList51 = new java.util.ArrayList<user.User>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<user.User>) userList51, userArray50);
        database49.users = userList51;
        database.Database database55 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList56 = database55.users;
        database49.users = userList56;
        database47.users = userList56;
        database40.users = userList56;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database.Database database64 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList65 = database64.users;
        database61.users = userList65;
        java.util.ArrayList<user.User> userList67 = database61.users;
        java.util.ArrayList<user.User> userList68 = database61.users;
        database61.load("hi!");
        java.util.ArrayList<user.User> userList71 = database61.users;
        database40.users = userList71;
        database.Database database74 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList75 = database74.users;
        java.util.ArrayList<user.User> userList76 = database74.users;
        java.util.ArrayList<user.User> userList77 = database74.users;
        database40.users = userList77;
        database1.users = userList77;
        database1.update("hi!");
        database1.update("hi!");
        java.lang.Class<?> wildcardClass84 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database47);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userArray50);
        org.junit.Assert.assertArrayEquals(userArray50, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(userList76);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database25.users = userList29;
        database1.users = userList29;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        java.util.ArrayList<user.User> userList51 = database1.users;
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(userList51);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        database1.users = userList35;
        database1.update("hi!");
        database1.load("hi!");
        java.lang.Class<?> wildcardClass42 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot7 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        database.Database database13 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        java.util.ArrayList<user.User> userList16 = database13.users;
        database13.load("hi!");
        database13.load("hi!");
        java.util.ArrayList<user.User> userList21 = database13.users;
        database1.users = userList21;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList21);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        java.util.ArrayList<user.User> userList19 = database17.users;
        database.Database database21 = database.Database.getInstance("hi!");
        user.User[] userArray22 = new user.User[] {};
        java.util.ArrayList<user.User> userList23 = new java.util.ArrayList<user.User>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<user.User>) userList23, userArray22);
        database21.users = userList23;
        database17.users = userList23;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database28.users = userList32;
        java.util.ArrayList<user.User> userList34 = database28.users;
        java.util.ArrayList<user.User> userList35 = database28.users;
        database17.users = userList35;
        java.util.ArrayList<user.User> userList37 = database17.users;
        java.util.ArrayList<user.User> userList38 = database17.users;
        database17.update("hi!");
        database17.load("hi!");
        java.util.ArrayList<user.User> userList43 = database17.users;
        database1.users = userList43;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userArray22);
        org.junit.Assert.assertArrayEquals(userArray22, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(userList43);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        database.Database database12 = database.Database.getInstance("");
        database.Database database14 = database.Database.getInstance("hi!");
        user.User[] userArray15 = new user.User[] {};
        java.util.ArrayList<user.User> userList16 = new java.util.ArrayList<user.User>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<user.User>) userList16, userArray15);
        database14.users = userList16;
        database.Database database20 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList21 = database20.users;
        database14.users = userList21;
        database12.users = userList21;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database25.users = userList29;
        java.util.ArrayList<user.User> userList31 = database25.users;
        java.util.ArrayList<user.User> userList32 = database25.users;
        database25.load("hi!");
        java.util.ArrayList<user.User> userList35 = database25.users;
        database12.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database38.users = userList42;
        java.util.ArrayList<user.User> userList44 = database38.users;
        database38.load("hi!");
        java.util.ArrayList<user.User> userList47 = database38.users;
        database12.users = userList47;
        database1.users = userList47;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userArray15);
        org.junit.Assert.assertArrayEquals(userArray15, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList47);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database1.users = userList11;
        database1.update("hi!");
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = null;
        database1.users = userList10;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass15 = parkingSpot14.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        java.util.ArrayList<user.User> userList51 = database1.users;
        java.lang.Class<?> wildcardClass52 = userList51.getClass();
        org.junit.Assert.assertNotNull(database1);
// flaky "2) test0586(RegressionTest1)":         org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
// flaky "2) test0586(RegressionTest1)":         org.junit.Assert.assertNotNull(userList5);
// flaky "2) test0586(RegressionTest1)":         org.junit.Assert.assertNotNull(userList7);
// flaky "2) test0586(RegressionTest1)":         org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
// flaky "1) test0586(RegressionTest1)":         org.junit.Assert.assertNotNull(userList13);
// flaky "1) test0586(RegressionTest1)":         org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
// flaky "1) test0586(RegressionTest1)":         org.junit.Assert.assertNotNull(userList17);
// flaky "1) test0586(RegressionTest1)":         org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        java.lang.Class<?> wildcardClass38 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList14 = null;
        database1.users = userList14;
        database.Database database17 = database.Database.getInstance("hi!");
        user.User[] userArray18 = new user.User[] {};
        java.util.ArrayList<user.User> userList19 = new java.util.ArrayList<user.User>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<user.User>) userList19, userArray18);
        database17.users = userList19;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        database17.users = userList24;
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database27.users = userList34;
        database17.users = userList34;
        java.util.ArrayList<user.User> userList37 = database17.users;
        database1.users = userList37;
        java.util.ArrayList<user.User> userList39 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userArray18);
        org.junit.Assert.assertArrayEquals(userArray18, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList39);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        java.util.ArrayList<user.User> userList9 = database6.users;
        database6.load("hi!");
        database.Database database13 = database.Database.getInstance("");
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database15.users = userList22;
        database13.users = userList22;
        database6.users = userList22;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database27.users = userList31;
        java.util.ArrayList<user.User> userList33 = database27.users;
        java.util.ArrayList<user.User> userList34 = database27.users;
        database6.users = userList34;
        database1.users = userList34;
        database1.update("hi!");
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList32 = database31.users;
        java.util.ArrayList<user.User> userList33 = database31.users;
        java.util.ArrayList<user.User> userList34 = database31.users;
        database31.load("hi!");
        database.Database database38 = database.Database.getInstance("");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database38.users = userList47;
        database31.users = userList47;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        java.util.ArrayList<user.User> userList56 = database53.users;
        java.util.ArrayList<user.User> userList57 = database53.users;
        database.Database database59 = database.Database.getInstance("hi!");
        user.User[] userArray60 = new user.User[] {};
        java.util.ArrayList<user.User> userList61 = new java.util.ArrayList<user.User>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<user.User>) userList61, userArray60);
        database59.users = userList61;
        database53.users = userList61;
        database31.users = userList61;
        java.util.ArrayList<user.User> userList66 = database31.users;
        database1.users = userList66;
        java.util.ArrayList<user.User> userList68 = database1.users;
        java.util.ArrayList<user.User> userList69 = database1.users;
        java.lang.Class<?> wildcardClass70 = userList69.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userArray60);
        org.junit.Assert.assertArrayEquals(userArray60, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(userList66);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(userList69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database39.users = userList50;
        database1.users = userList50;
        database.Database database55 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList56 = database55.users;
        java.util.ArrayList<user.User> userList57 = database55.users;
        java.util.ArrayList<user.User> userList58 = database55.users;
        database.Database database60 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList61 = database60.users;
        database.Database database63 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList64 = database63.users;
        database60.users = userList64;
        database55.users = userList64;
        database55.update("hi!");
        java.util.ArrayList<user.User> userList69 = database55.users;
        java.util.ArrayList<user.User> userList70 = database55.users;
        java.util.ArrayList<user.User> userList71 = database55.users;
        database1.users = userList71;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(database60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(database63);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList69);
        org.junit.Assert.assertNotNull(userList70);
        org.junit.Assert.assertNotNull(userList71);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList28 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        java.lang.Class<?> wildcardClass33 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = parkingSpot10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass15 = parkingSpot14.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(100);
        java.lang.Class<?> wildcardClass19 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        java.util.ArrayList<user.User> userList21 = database1.users;
        java.util.ArrayList<user.User> userList22 = database1.users;
        java.lang.Class<?> wildcardClass23 = userList22.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        database1.users = userList35;
        database1.update("hi!");
        database1.load("hi!");
        database.Database database43 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList44 = database43.users;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database43.users = userList47;
        database1.users = userList47;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        java.util.ArrayList<user.User> userList21 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot23 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        java.util.ArrayList<user.User> userList51 = database1.users;
        java.util.ArrayList<user.User> userList52 = database1.users;
        java.util.ArrayList<user.User> userList53 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        database.Database database59 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList60 = database59.users;
        database1.users = userList60;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userList60);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        java.lang.Class<?> wildcardClass15 = userList12.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = null;
        database1.users = userList10;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList28 = database1.users;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList28);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        user.User[] userArray17 = new user.User[] {};
        java.util.ArrayList<user.User> userList18 = new java.util.ArrayList<user.User>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<user.User>) userList18, userArray17);
        database16.users = userList18;
        database12.users = userList18;
        database12.load("hi!");
        java.util.ArrayList<user.User> userList24 = database12.users;
        database1.users = userList24;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userArray17);
        org.junit.Assert.assertArrayEquals(userArray17, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(userList24);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot7 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        java.util.ArrayList<user.User> userList13 = database1.users;
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database15.users = userList22;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database15.users = userList31;
        database1.users = userList31;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database.Database database16 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database1.users = userList17;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList32 = database31.users;
        java.util.ArrayList<user.User> userList33 = database31.users;
        java.util.ArrayList<user.User> userList34 = database31.users;
        database31.load("hi!");
        database.Database database38 = database.Database.getInstance("");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database38.users = userList47;
        database31.users = userList47;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database1.users = userList51;
        java.util.ArrayList<user.User> userList53 = database1.users;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList53);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        database.Database database1 = database.Database.getInstance("hi!");
        database.Database database3 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList4 = database3.users;
        java.util.ArrayList<user.User> userList5 = database3.users;
        java.util.ArrayList<user.User> userList6 = database3.users;
        database3.load("hi!");
        database.Database database10 = database.Database.getInstance("");
        database.Database database12 = database.Database.getInstance("hi!");
        user.User[] userArray13 = new user.User[] {};
        java.util.ArrayList<user.User> userList14 = new java.util.ArrayList<user.User>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<user.User>) userList14, userArray13);
        database12.users = userList14;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database12.users = userList19;
        database10.users = userList19;
        database3.users = userList19;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database24.users = userList28;
        java.util.ArrayList<user.User> userList30 = database24.users;
        java.util.ArrayList<user.User> userList31 = database24.users;
        database3.users = userList31;
        database1.users = userList31;
        database1.update("hi!");
        database1.load("hi!");
        database1.load("hi!");
        database.Database database41 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList42 = database41.users;
        java.util.ArrayList<user.User> userList43 = database41.users;
        database.Database database45 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList46 = database45.users;
        java.util.ArrayList<user.User> userList47 = database45.users;
        database.Database database49 = database.Database.getInstance("hi!");
        user.User[] userArray50 = new user.User[] {};
        java.util.ArrayList<user.User> userList51 = new java.util.ArrayList<user.User>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<user.User>) userList51, userArray50);
        database49.users = userList51;
        database45.users = userList51;
        database41.users = userList51;
        java.util.ArrayList<user.User> userList56 = database41.users;
        database.Database database58 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList59 = database58.users;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database58.users = userList62;
        java.util.ArrayList<user.User> userList64 = database58.users;
        java.util.ArrayList<user.User> userList65 = database58.users;
        database.Database database67 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList68 = database67.users;
        java.util.ArrayList<user.User> userList69 = database67.users;
        java.util.ArrayList<user.User> userList70 = database67.users;
        database58.users = userList70;
        database41.users = userList70;
        database.Database database74 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList75 = database74.users;
        java.util.ArrayList<user.User> userList76 = database74.users;
        java.util.ArrayList<user.User> userList77 = database74.users;
        database74.load("hi!");
        database.Database database81 = database.Database.getInstance("");
        database.Database database83 = database.Database.getInstance("hi!");
        user.User[] userArray84 = new user.User[] {};
        java.util.ArrayList<user.User> userList85 = new java.util.ArrayList<user.User>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<user.User>) userList85, userArray84);
        database83.users = userList85;
        database.Database database89 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList90 = database89.users;
        database83.users = userList90;
        database81.users = userList90;
        database74.users = userList90;
        database41.users = userList90;
        database1.users = userList90;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userArray13);
        org.junit.Assert.assertArrayEquals(userArray13, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userArray50);
        org.junit.Assert.assertArrayEquals(userArray50, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(database67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(userList69);
        org.junit.Assert.assertNotNull(userList70);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(userList76);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(database81);
        org.junit.Assert.assertNotNull(database83);
        org.junit.Assert.assertNotNull(userArray84);
        org.junit.Assert.assertArrayEquals(userArray84, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(database89);
        org.junit.Assert.assertNotNull(userList90);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList9 = database1.users;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database11.users = userList15;
        java.util.ArrayList<user.User> userList17 = database11.users;
        database11.load("hi!");
        user.User[] userArray20 = new user.User[] {};
        java.util.ArrayList<user.User> userList21 = new java.util.ArrayList<user.User>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<user.User>) userList21, userArray20);
        database11.users = userList21;
        database11.update("hi!");
        database11.update("hi!");
        java.util.ArrayList<user.User> userList28 = database11.users;
        java.util.ArrayList<user.User> userList29 = database11.users;
        database1.users = userList29;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userArray20);
        org.junit.Assert.assertArrayEquals(userArray20, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        database1.update("hi!");
        java.util.ArrayList<user.User> userList12 = database1.users;
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList12);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database.Database database18 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        java.util.ArrayList<user.User> userList24 = database22.users;
        database.Database database26 = database.Database.getInstance("hi!");
        user.User[] userArray27 = new user.User[] {};
        java.util.ArrayList<user.User> userList28 = new java.util.ArrayList<user.User>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<user.User>) userList28, userArray27);
        database26.users = userList28;
        database22.users = userList28;
        database18.users = userList28;
        database5.users = userList28;
        database.Database database35 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList36 = database35.users;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database35.users = userList39;
        database5.users = userList39;
        java.util.ArrayList<user.User> userList42 = database5.users;
        database1.users = userList42;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userArray27);
        org.junit.Assert.assertArrayEquals(userArray27, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList42);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = null;
        database1.users = userList10;
        java.util.ArrayList<user.User> userList12 = database1.users;
        database.Database database14 = database.Database.getInstance("");
        database.Database database16 = database.Database.getInstance("hi!");
        user.User[] userArray17 = new user.User[] {};
        java.util.ArrayList<user.User> userList18 = new java.util.ArrayList<user.User>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<user.User>) userList18, userArray17);
        database16.users = userList18;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database16.users = userList23;
        database14.users = userList23;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database27.users = userList31;
        java.util.ArrayList<user.User> userList33 = database27.users;
        java.util.ArrayList<user.User> userList34 = database27.users;
        database27.load("hi!");
        java.util.ArrayList<user.User> userList37 = database27.users;
        database14.users = userList37;
        database.Database database40 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList41 = database40.users;
        java.util.ArrayList<user.User> userList42 = database40.users;
        java.util.ArrayList<user.User> userList43 = database40.users;
        java.util.ArrayList<user.User> userList44 = database40.users;
        database14.users = userList44;
        database1.users = userList44;
        java.lang.Class<?> wildcardClass47 = userList44.getClass();
        org.junit.Assert.assertNotNull(database1);
// flaky "3) test0620(RegressionTest1)":         org.junit.Assert.assertNull(userList2);
        org.junit.Assert.assertNotNull(database4);
// flaky "3) test0620(RegressionTest1)":         org.junit.Assert.assertNull(userList5);
// flaky "3) test0620(RegressionTest1)":         org.junit.Assert.assertNull(userList7);
        org.junit.Assert.assertNull(userList12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userArray17);
        org.junit.Assert.assertArrayEquals(userArray17, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database1.update("hi!");
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database33.users = userList37;
        java.util.ArrayList<user.User> userList39 = database33.users;
        java.util.ArrayList<user.User> userList40 = database33.users;
        java.util.ArrayList<user.User> userList41 = database33.users;
        database.Database database43 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList44 = database43.users;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database43.users = userList47;
        java.util.ArrayList<user.User> userList49 = database43.users;
        database43.update("hi!");
        java.util.ArrayList<user.User> userList52 = database43.users;
        database33.users = userList52;
        database33.update("hi!");
        java.util.ArrayList<user.User> userList56 = database33.users;
        java.util.ArrayList<user.User> userList57 = database33.users;
        database1.users = userList57;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database15.users = userList19;
        java.util.ArrayList<user.User> userList21 = database15.users;
        database15.load("hi!");
        database15.update("hi!");
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database15.users = userList29;
        database1.users = userList29;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        java.lang.Class<?> wildcardClass12 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.load("hi!");
        database.Database database29 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList30 = database29.users;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database29.users = userList33;
        java.util.ArrayList<user.User> userList35 = database29.users;
        database29.load("hi!");
        java.util.ArrayList<user.User> userList38 = database29.users;
        database1.users = userList38;
        database1.load("hi!");
        database.Database database43 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList44 = database43.users;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database43.users = userList47;
        java.util.ArrayList<user.User> userList49 = database43.users;
        database43.update("hi!");
        database.Database database53 = database.Database.getInstance("");
        database.Database database55 = database.Database.getInstance("hi!");
        user.User[] userArray56 = new user.User[] {};
        java.util.ArrayList<user.User> userList57 = new java.util.ArrayList<user.User>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<user.User>) userList57, userArray56);
        database55.users = userList57;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database55.users = userList62;
        database53.users = userList62;
        database.Database database66 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList67 = database66.users;
        database.Database database69 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList70 = database69.users;
        database66.users = userList70;
        java.util.ArrayList<user.User> userList72 = database66.users;
        java.util.ArrayList<user.User> userList73 = database66.users;
        database66.load("hi!");
        java.util.ArrayList<user.User> userList76 = database66.users;
        database53.users = userList76;
        database43.users = userList76;
        database.Database database80 = database.Database.getInstance("hi!");
        user.User[] userArray81 = new user.User[] {};
        java.util.ArrayList<user.User> userList82 = new java.util.ArrayList<user.User>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<user.User>) userList82, userArray81);
        database80.users = userList82;
        database.Database database86 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList87 = database86.users;
        database80.users = userList87;
        database43.users = userList87;
        database1.users = userList87;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userArray56);
        org.junit.Assert.assertArrayEquals(userArray56, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(database69);
        org.junit.Assert.assertNotNull(userList70);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(userList73);
        org.junit.Assert.assertNotNull(userList76);
        org.junit.Assert.assertNotNull(database80);
        org.junit.Assert.assertNotNull(userArray81);
        org.junit.Assert.assertArrayEquals(userArray81, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(database86);
        org.junit.Assert.assertNotNull(userList87);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database1.update("hi!");
        database.Database database7 = database.Database.getInstance("hi!");
        user.User[] userArray8 = new user.User[] {};
        java.util.ArrayList<user.User> userList9 = new java.util.ArrayList<user.User>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<user.User>) userList9, userArray8);
        database7.users = userList9;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database7.users = userList14;
        database.Database database17 = database.Database.getInstance("hi!");
        user.User[] userArray18 = new user.User[] {};
        java.util.ArrayList<user.User> userList19 = new java.util.ArrayList<user.User>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<user.User>) userList19, userArray18);
        database17.users = userList19;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        database17.users = userList24;
        database7.users = userList24;
        java.util.ArrayList<user.User> userList27 = database7.users;
        database7.load("hi!");
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        database7.users = userList35;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        java.util.ArrayList<user.User> userList42 = database39.users;
        database39.load("hi!");
        database.Database database46 = database.Database.getInstance("");
        database.Database database48 = database.Database.getInstance("hi!");
        user.User[] userArray49 = new user.User[] {};
        java.util.ArrayList<user.User> userList50 = new java.util.ArrayList<user.User>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<user.User>) userList50, userArray49);
        database48.users = userList50;
        database.Database database54 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList55 = database54.users;
        database48.users = userList55;
        database46.users = userList55;
        database39.users = userList55;
        java.util.ArrayList<user.User> userList59 = database39.users;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        java.util.ArrayList<user.User> userList63 = database61.users;
        java.util.ArrayList<user.User> userList64 = database61.users;
        java.util.ArrayList<user.User> userList65 = database61.users;
        database.Database database67 = database.Database.getInstance("hi!");
        user.User[] userArray68 = new user.User[] {};
        java.util.ArrayList<user.User> userList69 = new java.util.ArrayList<user.User>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<user.User>) userList69, userArray68);
        database67.users = userList69;
        database61.users = userList69;
        database39.users = userList69;
        database7.users = userList69;
        database.Database database76 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList77 = database76.users;
        database7.users = userList77;
        database1.users = userList77;
        java.util.ArrayList<user.User> userList80 = database1.users;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userArray8);
        org.junit.Assert.assertArrayEquals(userArray8, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userArray18);
        org.junit.Assert.assertArrayEquals(userArray18, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userArray49);
        org.junit.Assert.assertArrayEquals(userArray49, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(database54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(database67);
        org.junit.Assert.assertNotNull(userArray68);
        org.junit.Assert.assertArrayEquals(userArray68, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(database76);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(userList80);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        java.util.ArrayList<user.User> userList16 = database1.users;
        java.util.ArrayList<user.User> userList17 = database1.users;
        database.Database database19 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList20 = database19.users;
        java.util.ArrayList<user.User> userList21 = database19.users;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database23.users = userList29;
        database19.users = userList29;
        java.util.ArrayList<user.User> userList34 = database19.users;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        java.util.ArrayList<user.User> userList43 = database36.users;
        database.Database database45 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList46 = database45.users;
        java.util.ArrayList<user.User> userList47 = database45.users;
        java.util.ArrayList<user.User> userList48 = database45.users;
        database36.users = userList48;
        database19.users = userList48;
        database1.users = userList48;
        java.lang.Class<?> wildcardClass52 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        java.util.ArrayList<user.User> userList38 = database1.users;
        database.Database database40 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList41 = database40.users;
        java.util.ArrayList<user.User> userList42 = database40.users;
        java.util.ArrayList<user.User> userList43 = database40.users;
        database40.load("hi!");
        database.Database database47 = database.Database.getInstance("");
        database.Database database49 = database.Database.getInstance("hi!");
        user.User[] userArray50 = new user.User[] {};
        java.util.ArrayList<user.User> userList51 = new java.util.ArrayList<user.User>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<user.User>) userList51, userArray50);
        database49.users = userList51;
        database.Database database55 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList56 = database55.users;
        database49.users = userList56;
        database47.users = userList56;
        database40.users = userList56;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database.Database database64 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList65 = database64.users;
        database61.users = userList65;
        java.util.ArrayList<user.User> userList67 = database61.users;
        java.util.ArrayList<user.User> userList68 = database61.users;
        database61.load("hi!");
        java.util.ArrayList<user.User> userList71 = database61.users;
        database40.users = userList71;
        database.Database database74 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList75 = database74.users;
        java.util.ArrayList<user.User> userList76 = database74.users;
        java.util.ArrayList<user.User> userList77 = database74.users;
        database40.users = userList77;
        database1.users = userList77;
        database1.update("hi!");
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database47);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userArray50);
        org.junit.Assert.assertArrayEquals(userArray50, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(userList76);
        org.junit.Assert.assertNotNull(userList77);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        database.Database database24 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList25 = database24.users;
        java.util.ArrayList<user.User> userList26 = database24.users;
        java.util.ArrayList<user.User> userList27 = database24.users;
        database24.load("hi!");
        database24.load("hi!");
        java.util.ArrayList<user.User> userList32 = database24.users;
        java.util.ArrayList<user.User> userList33 = database24.users;
        database1.users = userList33;
        java.lang.Class<?> wildcardClass35 = userList33.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.util.ArrayList<user.User> userList5 = database1.users;
        database.Database database7 = database.Database.getInstance("hi!");
        user.User[] userArray8 = new user.User[] {};
        java.util.ArrayList<user.User> userList9 = new java.util.ArrayList<user.User>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<user.User>) userList9, userArray8);
        database7.users = userList9;
        database1.users = userList9;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        database1.update("hi!");
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userArray8);
        org.junit.Assert.assertArrayEquals(userArray8, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(userList15);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database22.users = userList26;
        java.util.ArrayList<user.User> userList28 = database22.users;
        java.util.ArrayList<user.User> userList29 = database22.users;
        database22.load("hi!");
        java.util.ArrayList<user.User> userList32 = database22.users;
        database1.users = userList32;
        database.Database database35 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList36 = database35.users;
        java.util.ArrayList<user.User> userList37 = database35.users;
        java.util.ArrayList<user.User> userList38 = database35.users;
        database1.users = userList38;
        database1.load("hi!");
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList38);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList9 = database1.users;
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        java.util.ArrayList<user.User> userList14 = database11.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database.Database database19 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList20 = database19.users;
        database16.users = userList20;
        database11.users = userList20;
        database.Database database24 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList25 = database24.users;
        java.util.ArrayList<user.User> userList26 = database24.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        java.util.ArrayList<user.User> userList30 = database28.users;
        database.Database database32 = database.Database.getInstance("hi!");
        user.User[] userArray33 = new user.User[] {};
        java.util.ArrayList<user.User> userList34 = new java.util.ArrayList<user.User>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<user.User>) userList34, userArray33);
        database32.users = userList34;
        database28.users = userList34;
        database24.users = userList34;
        database11.users = userList34;
        database.Database database41 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList42 = database41.users;
        java.util.ArrayList<user.User> userList43 = database41.users;
        java.util.ArrayList<user.User> userList44 = database41.users;
        database41.load("hi!");
        database.Database database48 = database.Database.getInstance("");
        database.Database database50 = database.Database.getInstance("hi!");
        user.User[] userArray51 = new user.User[] {};
        java.util.ArrayList<user.User> userList52 = new java.util.ArrayList<user.User>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<user.User>) userList52, userArray51);
        database50.users = userList52;
        database.Database database56 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList57 = database56.users;
        database50.users = userList57;
        database48.users = userList57;
        database41.users = userList57;
        java.util.ArrayList<user.User> userList61 = database41.users;
        database11.users = userList61;
        database1.users = userList61;
        java.lang.Class<?> wildcardClass64 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userArray33);
        org.junit.Assert.assertArrayEquals(userArray33, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userArray51);
        org.junit.Assert.assertArrayEquals(userArray51, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        java.util.ArrayList<user.User> userList31 = database27.users;
        database1.users = userList31;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        database34.users = userList38;
        java.util.ArrayList<user.User> userList40 = database34.users;
        java.util.ArrayList<user.User> userList41 = database34.users;
        database34.load("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database34.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        user.User[] userArray50 = new user.User[] {};
        java.util.ArrayList<user.User> userList51 = new java.util.ArrayList<user.User>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<user.User>) userList51, userArray50);
        database49.users = userList51;
        database.Database database55 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList56 = database55.users;
        database49.users = userList56;
        database34.users = userList56;
        database1.users = userList56;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userArray50);
        org.junit.Assert.assertArrayEquals(userArray50, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database22.users = userList26;
        java.util.ArrayList<user.User> userList28 = database22.users;
        java.util.ArrayList<user.User> userList29 = database22.users;
        database22.load("hi!");
        java.util.ArrayList<user.User> userList32 = database22.users;
        database1.users = userList32;
        java.lang.Class<?> wildcardClass34 = userList32.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        database1.update("hi!");
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        database1.users = userList15;
        database1.load("hi!");
        database.Database database20 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList21 = database20.users;
        java.util.ArrayList<user.User> userList22 = database20.users;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        java.util.ArrayList<user.User> userList26 = database24.users;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database24.users = userList30;
        database20.users = userList30;
        java.util.ArrayList<user.User> userList35 = database20.users;
        java.util.ArrayList<user.User> userList36 = database20.users;
        java.util.ArrayList<user.User> userList37 = database20.users;
        database1.users = userList37;
        java.lang.Class<?> wildcardClass39 = userList37.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) 1);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot5 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database1.users = userList11;
        java.util.ArrayList<user.User> userList14 = database1.users;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList14);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList7 = database1.users;
        database.Database database9 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList10 = database9.users;
        java.util.ArrayList<user.User> userList11 = database9.users;
        java.util.ArrayList<user.User> userList12 = database9.users;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        database9.users = userList18;
        database.Database database22 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList23 = database22.users;
        java.util.ArrayList<user.User> userList24 = database22.users;
        database.Database database26 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList27 = database26.users;
        java.util.ArrayList<user.User> userList28 = database26.users;
        database.Database database30 = database.Database.getInstance("hi!");
        user.User[] userArray31 = new user.User[] {};
        java.util.ArrayList<user.User> userList32 = new java.util.ArrayList<user.User>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<user.User>) userList32, userArray31);
        database30.users = userList32;
        database26.users = userList32;
        database22.users = userList32;
        database9.users = userList32;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        database39.users = userList43;
        database9.users = userList43;
        java.util.ArrayList<user.User> userList46 = database9.users;
        database1.users = userList46;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userArray31);
        org.junit.Assert.assertArrayEquals(userArray31, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList46);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot24 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot26 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
        org.junit.Assert.assertNull(parkingSpot24);
        org.junit.Assert.assertNull(parkingSpot26);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot7 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) 'a');
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database15.users = userList22;
        database11.users = userList22;
        database11.load("hi!");
        java.util.ArrayList<user.User> userList27 = database11.users;
        database11.load("hi!");
        java.util.ArrayList<user.User> userList30 = database11.users;
        database1.users = userList30;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList30);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        java.util.ArrayList<user.User> userList26 = database1.users;
        java.util.ArrayList<user.User> userList27 = database1.users;
        java.util.ArrayList<user.User> userList28 = database1.users;
        java.lang.Class<?> wildcardClass29 = userList28.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database.Database database18 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        java.util.ArrayList<user.User> userList24 = database22.users;
        database.Database database26 = database.Database.getInstance("hi!");
        user.User[] userArray27 = new user.User[] {};
        java.util.ArrayList<user.User> userList28 = new java.util.ArrayList<user.User>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<user.User>) userList28, userArray27);
        database26.users = userList28;
        database22.users = userList28;
        database18.users = userList28;
        database5.users = userList28;
        database.Database database35 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList36 = database35.users;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database35.users = userList39;
        database5.users = userList39;
        java.util.ArrayList<user.User> userList42 = database5.users;
        database1.users = userList42;
        java.lang.Class<?> wildcardClass44 = userList42.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userArray27);
        org.junit.Assert.assertArrayEquals(userArray27, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList17 = database1.users;
        java.util.ArrayList<user.User> userList18 = database1.users;
        java.lang.Class<?> wildcardClass19 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database39.users = userList50;
        database1.users = userList50;
        java.util.ArrayList<user.User> userList54 = database1.users;
        java.lang.Class<?> wildcardClass55 = userList54.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        java.util.ArrayList<user.User> userList38 = database1.users;
        database.Database database40 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList41 = database40.users;
        java.util.ArrayList<user.User> userList42 = database40.users;
        java.util.ArrayList<user.User> userList43 = database40.users;
        java.util.ArrayList<user.User> userList44 = database40.users;
        database.Database database46 = database.Database.getInstance("hi!");
        user.User[] userArray47 = new user.User[] {};
        java.util.ArrayList<user.User> userList48 = new java.util.ArrayList<user.User>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<user.User>) userList48, userArray47);
        database46.users = userList48;
        database40.users = userList48;
        database40.update("hi!");
        java.util.ArrayList<user.User> userList54 = database40.users;
        database1.users = userList54;
        java.lang.Class<?> wildcardClass56 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userArray47);
        org.junit.Assert.assertArrayEquals(userArray47, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.load("hi!");
        database.Database database16 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        java.util.ArrayList<user.User> userList19 = database16.users;
        database16.load("hi!");
        database16.load("hi!");
        java.util.ArrayList<user.User> userList24 = database16.users;
        database1.users = userList24;
        java.util.ArrayList<user.User> userList26 = database1.users;
        java.lang.Class<?> wildcardClass27 = userList26.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database1.update("hi!");
        database.Database database7 = database.Database.getInstance("hi!");
        user.User[] userArray8 = new user.User[] {};
        java.util.ArrayList<user.User> userList9 = new java.util.ArrayList<user.User>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<user.User>) userList9, userArray8);
        database7.users = userList9;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database7.users = userList14;
        database.Database database17 = database.Database.getInstance("hi!");
        user.User[] userArray18 = new user.User[] {};
        java.util.ArrayList<user.User> userList19 = new java.util.ArrayList<user.User>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<user.User>) userList19, userArray18);
        database17.users = userList19;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        database17.users = userList24;
        database7.users = userList24;
        java.util.ArrayList<user.User> userList27 = database7.users;
        database7.load("hi!");
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        database7.users = userList35;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        java.util.ArrayList<user.User> userList42 = database39.users;
        database39.load("hi!");
        database.Database database46 = database.Database.getInstance("");
        database.Database database48 = database.Database.getInstance("hi!");
        user.User[] userArray49 = new user.User[] {};
        java.util.ArrayList<user.User> userList50 = new java.util.ArrayList<user.User>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<user.User>) userList50, userArray49);
        database48.users = userList50;
        database.Database database54 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList55 = database54.users;
        database48.users = userList55;
        database46.users = userList55;
        database39.users = userList55;
        java.util.ArrayList<user.User> userList59 = database39.users;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        java.util.ArrayList<user.User> userList63 = database61.users;
        java.util.ArrayList<user.User> userList64 = database61.users;
        java.util.ArrayList<user.User> userList65 = database61.users;
        database.Database database67 = database.Database.getInstance("hi!");
        user.User[] userArray68 = new user.User[] {};
        java.util.ArrayList<user.User> userList69 = new java.util.ArrayList<user.User>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<user.User>) userList69, userArray68);
        database67.users = userList69;
        database61.users = userList69;
        database39.users = userList69;
        database7.users = userList69;
        database.Database database76 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList77 = database76.users;
        database7.users = userList77;
        database1.users = userList77;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userArray8);
        org.junit.Assert.assertArrayEquals(userArray8, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userArray18);
        org.junit.Assert.assertArrayEquals(userArray18, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userArray49);
        org.junit.Assert.assertArrayEquals(userArray49, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(database54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(database67);
        org.junit.Assert.assertNotNull(userArray68);
        org.junit.Assert.assertArrayEquals(userArray68, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(database76);
        org.junit.Assert.assertNotNull(userList77);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.load("hi!");
        database.Database database29 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList30 = database29.users;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database29.users = userList33;
        java.util.ArrayList<user.User> userList35 = database29.users;
        database29.load("hi!");
        user.User[] userArray38 = new user.User[] {};
        java.util.ArrayList<user.User> userList39 = new java.util.ArrayList<user.User>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<user.User>) userList39, userArray38);
        database29.users = userList39;
        java.util.ArrayList<user.User> userList42 = database29.users;
        database1.users = userList42;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userArray38);
        org.junit.Assert.assertArrayEquals(userArray38, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(userList42);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        java.util.ArrayList<user.User> userList9 = database6.users;
        database6.load("hi!");
        database6.load("hi!");
        java.util.ArrayList<user.User> userList14 = database6.users;
        database6.update("hi!");
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database6.users = userList25;
        database1.users = userList25;
        java.util.ArrayList<user.User> userList28 = database1.users;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList28);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        java.util.ArrayList<user.User> userList51 = database1.users;
        java.util.ArrayList<user.User> userList52 = database1.users;
        java.util.ArrayList<user.User> userList53 = database1.users;
        java.util.ArrayList<user.User> userList54 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList54);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        java.util.ArrayList<user.User> userList13 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList13);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        database.Database database12 = database.Database.getInstance("");
        database.Database database14 = database.Database.getInstance("hi!");
        user.User[] userArray15 = new user.User[] {};
        java.util.ArrayList<user.User> userList16 = new java.util.ArrayList<user.User>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<user.User>) userList16, userArray15);
        database14.users = userList16;
        database.Database database20 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList21 = database20.users;
        database14.users = userList21;
        database12.users = userList21;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database25.users = userList29;
        java.util.ArrayList<user.User> userList31 = database25.users;
        java.util.ArrayList<user.User> userList32 = database25.users;
        database25.load("hi!");
        java.util.ArrayList<user.User> userList35 = database25.users;
        database12.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database38.users = userList42;
        java.util.ArrayList<user.User> userList44 = database38.users;
        database38.load("hi!");
        java.util.ArrayList<user.User> userList47 = database38.users;
        database12.users = userList47;
        database1.users = userList47;
        java.util.ArrayList<user.User> userList50 = database1.users;
        java.util.ArrayList<user.User> userList51 = database1.users;
        java.lang.Class<?> wildcardClass52 = userList51.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userArray15);
        org.junit.Assert.assertArrayEquals(userArray15, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        java.util.ArrayList<user.User> userList15 = database12.users;
        java.util.ArrayList<user.User> userList16 = database12.users;
        java.util.ArrayList<user.User> userList17 = database12.users;
        database1.users = userList17;
        java.lang.Class<?> wildcardClass19 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        database.Database database17 = database.Database.getInstance("hi!");
        user.User[] userArray18 = new user.User[] {};
        java.util.ArrayList<user.User> userList19 = new java.util.ArrayList<user.User>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<user.User>) userList19, userArray18);
        database17.users = userList19;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        database17.users = userList24;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database.Database database31 = database.Database.getInstance("hi!");
        user.User[] userArray32 = new user.User[] {};
        java.util.ArrayList<user.User> userList33 = new java.util.ArrayList<user.User>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<user.User>) userList33, userArray32);
        database31.users = userList33;
        database27.users = userList33;
        database17.users = userList33;
        database1.users = userList33;
        database1.update("hi!");
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        database.Database database45 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList46 = database45.users;
        database42.users = userList46;
        java.util.ArrayList<user.User> userList48 = database42.users;
        database42.load("hi!");
        java.util.ArrayList<user.User> userList51 = database42.users;
        database.Database database53 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        database.Database database57 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList58 = database57.users;
        java.util.ArrayList<user.User> userList59 = database57.users;
        database.Database database61 = database.Database.getInstance("hi!");
        user.User[] userArray62 = new user.User[] {};
        java.util.ArrayList<user.User> userList63 = new java.util.ArrayList<user.User>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<user.User>) userList63, userArray62);
        database61.users = userList63;
        database57.users = userList63;
        database53.users = userList63;
        database.Database database69 = database.Database.getInstance("hi!");
        user.User[] userArray70 = new user.User[] {};
        java.util.ArrayList<user.User> userList71 = new java.util.ArrayList<user.User>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<user.User>) userList71, userArray70);
        database69.users = userList71;
        database.Database database75 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList76 = database75.users;
        database69.users = userList76;
        database.Database database79 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList80 = database79.users;
        java.util.ArrayList<user.User> userList81 = database79.users;
        database.Database database83 = database.Database.getInstance("hi!");
        user.User[] userArray84 = new user.User[] {};
        java.util.ArrayList<user.User> userList85 = new java.util.ArrayList<user.User>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<user.User>) userList85, userArray84);
        database83.users = userList85;
        database79.users = userList85;
        database69.users = userList85;
        database53.users = userList85;
        database42.users = userList85;
        java.util.ArrayList<user.User> userList92 = database42.users;
        java.util.ArrayList<user.User> userList93 = database42.users;
        java.util.ArrayList<user.User> userList94 = database42.users;
        database1.users = userList94;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userArray18);
        org.junit.Assert.assertArrayEquals(userArray18, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userArray32);
        org.junit.Assert.assertArrayEquals(userArray32, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(database57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userArray62);
        org.junit.Assert.assertArrayEquals(userArray62, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(database69);
        org.junit.Assert.assertNotNull(userArray70);
        org.junit.Assert.assertArrayEquals(userArray70, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(database75);
        org.junit.Assert.assertNotNull(userList76);
        org.junit.Assert.assertNotNull(database79);
        org.junit.Assert.assertNotNull(userList80);
        org.junit.Assert.assertNotNull(userList81);
        org.junit.Assert.assertNotNull(database83);
        org.junit.Assert.assertNotNull(userArray84);
        org.junit.Assert.assertArrayEquals(userArray84, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(userList92);
        org.junit.Assert.assertNotNull(userList93);
        org.junit.Assert.assertNotNull(userList94);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.lang.Class<?> wildcardClass16 = userList11.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList15);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot5 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        database1.users = userList35;
        database1.update("hi!");
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        database1.load("hi!");
        database.Database database54 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList55 = database54.users;
        database.Database database57 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList58 = database57.users;
        database54.users = userList58;
        java.util.ArrayList<user.User> userList60 = database54.users;
        java.util.ArrayList<user.User> userList61 = database54.users;
        database54.load("hi!");
        user.User[] userArray64 = new user.User[] {};
        java.util.ArrayList<user.User> userList65 = new java.util.ArrayList<user.User>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<user.User>) userList65, userArray64);
        database54.users = userList65;
        database1.users = userList65;
        java.lang.Class<?> wildcardClass69 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(database54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(database57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userArray64);
        org.junit.Assert.assertArrayEquals(userArray64, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        database1.update("hi!");
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList32 = database31.users;
        java.util.ArrayList<user.User> userList33 = database31.users;
        java.util.ArrayList<user.User> userList34 = database31.users;
        database31.load("hi!");
        database.Database database38 = database.Database.getInstance("");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database38.users = userList47;
        database31.users = userList47;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        java.util.ArrayList<user.User> userList56 = database53.users;
        java.util.ArrayList<user.User> userList57 = database53.users;
        database.Database database59 = database.Database.getInstance("hi!");
        user.User[] userArray60 = new user.User[] {};
        java.util.ArrayList<user.User> userList61 = new java.util.ArrayList<user.User>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<user.User>) userList61, userArray60);
        database59.users = userList61;
        database53.users = userList61;
        database31.users = userList61;
        java.util.ArrayList<user.User> userList66 = database31.users;
        database1.users = userList66;
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userArray60);
        org.junit.Assert.assertArrayEquals(userArray60, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(userList66);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot21 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot((-1));
        java.lang.Class<?> wildcardClass23 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database27.users = userList31;
        java.util.ArrayList<user.User> userList33 = database27.users;
        database27.load("hi!");
        java.util.ArrayList<user.User> userList36 = database27.users;
        database1.users = userList36;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList36);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database28.users = userList32;
        database22.users = userList32;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        database36.load("hi!");
        database36.update("hi!");
        database.Database database48 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList49 = database48.users;
        java.util.ArrayList<user.User> userList50 = database48.users;
        database36.users = userList50;
        database22.users = userList50;
        java.util.ArrayList<user.User> userList53 = database22.users;
        database1.users = userList53;
        java.util.ArrayList<user.User> userList55 = database1.users;
        database.Database database57 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList58 = database57.users;
        java.util.ArrayList<user.User> userList59 = database57.users;
        java.util.ArrayList<user.User> userList60 = database57.users;
        java.util.ArrayList<user.User> userList61 = database57.users;
        java.util.ArrayList<user.User> userList62 = database57.users;
        database1.users = userList62;
        java.util.ArrayList<user.User> userList64 = database1.users;
        user.User[] userArray65 = new user.User[] {};
        java.util.ArrayList<user.User> userList66 = new java.util.ArrayList<user.User>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<user.User>) userList66, userArray65);
        database1.users = userList66;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(database57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userArray65);
        org.junit.Assert.assertArrayEquals(userArray65, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList28 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList28);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList5 = database4.users;
        java.util.ArrayList<user.User> userList6 = database4.users;
        java.util.ArrayList<user.User> userList7 = database4.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database9.users = userList13;
        database4.users = userList13;
        database.Database database17 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList18 = database17.users;
        java.util.ArrayList<user.User> userList19 = database17.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        user.User[] userArray26 = new user.User[] {};
        java.util.ArrayList<user.User> userList27 = new java.util.ArrayList<user.User>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<user.User>) userList27, userArray26);
        database25.users = userList27;
        database21.users = userList27;
        database17.users = userList27;
        database4.users = userList27;
        database1.users = userList27;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userArray26);
        org.junit.Assert.assertArrayEquals(userArray26, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        database1.update("hi!");
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        database1.users = userList15;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database.Database database16 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database1.users = userList17;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        database.Database database13 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        java.util.ArrayList<user.User> userList16 = database13.users;
        database13.load("hi!");
        database13.load("hi!");
        java.util.ArrayList<user.User> userList21 = database13.users;
        database1.users = userList21;
        database.Database database24 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList25 = database24.users;
        java.util.ArrayList<user.User> userList26 = database24.users;
        java.util.ArrayList<user.User> userList27 = database24.users;
        database24.load("hi!");
        database.Database database31 = database.Database.getInstance("");
        database.Database database33 = database.Database.getInstance("hi!");
        user.User[] userArray34 = new user.User[] {};
        java.util.ArrayList<user.User> userList35 = new java.util.ArrayList<user.User>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<user.User>) userList35, userArray34);
        database33.users = userList35;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database33.users = userList40;
        database31.users = userList40;
        database24.users = userList40;
        database.Database database45 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList46 = database45.users;
        database.Database database48 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList49 = database48.users;
        database45.users = userList49;
        java.util.ArrayList<user.User> userList51 = database45.users;
        java.util.ArrayList<user.User> userList52 = database45.users;
        database45.load("hi!");
        java.util.ArrayList<user.User> userList55 = database45.users;
        database24.users = userList55;
        database1.users = userList55;
        java.lang.Class<?> wildcardClass58 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userArray34);
        org.junit.Assert.assertArrayEquals(userArray34, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.util.ArrayList<user.User> userList5 = database1.users;
        database.Database database7 = database.Database.getInstance("hi!");
        user.User[] userArray8 = new user.User[] {};
        java.util.ArrayList<user.User> userList9 = new java.util.ArrayList<user.User>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<user.User>) userList9, userArray8);
        database7.users = userList9;
        database1.users = userList9;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = null;
        database1.users = userList15;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userArray8);
        org.junit.Assert.assertArrayEquals(userArray8, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        database.Database database17 = database.Database.getInstance("hi!");
        user.User[] userArray18 = new user.User[] {};
        java.util.ArrayList<user.User> userList19 = new java.util.ArrayList<user.User>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<user.User>) userList19, userArray18);
        database17.users = userList19;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        database17.users = userList24;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database.Database database31 = database.Database.getInstance("hi!");
        user.User[] userArray32 = new user.User[] {};
        java.util.ArrayList<user.User> userList33 = new java.util.ArrayList<user.User>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<user.User>) userList33, userArray32);
        database31.users = userList33;
        database27.users = userList33;
        database17.users = userList33;
        database1.users = userList33;
        database.Database database40 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList41 = database40.users;
        java.util.ArrayList<user.User> userList42 = database40.users;
        java.util.ArrayList<user.User> userList43 = database40.users;
        java.util.ArrayList<user.User> userList44 = database40.users;
        database.Database database46 = database.Database.getInstance("hi!");
        user.User[] userArray47 = new user.User[] {};
        java.util.ArrayList<user.User> userList48 = new java.util.ArrayList<user.User>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<user.User>) userList48, userArray47);
        database46.users = userList48;
        database40.users = userList48;
        database40.update("hi!");
        java.util.ArrayList<user.User> userList54 = database40.users;
        database40.update("hi!");
        java.util.ArrayList<user.User> userList57 = database40.users;
        database1.users = userList57;
        java.lang.Class<?> wildcardClass59 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNull(userList2);
        org.junit.Assert.assertNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNull(userList6);
        org.junit.Assert.assertNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userArray18);
        org.junit.Assert.assertArrayEquals(userArray18, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userArray32);
        org.junit.Assert.assertArrayEquals(userArray32, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userArray47);
        org.junit.Assert.assertArrayEquals(userArray47, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass7 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        java.util.ArrayList<user.User> userList16 = database1.users;
        java.util.ArrayList<user.User> userList17 = database1.users;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList20 = database1.users;
        java.lang.Class<?> wildcardClass21 = userList20.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.load("hi!");
        database.Database database16 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        java.util.ArrayList<user.User> userList19 = database16.users;
        database16.load("hi!");
        database16.load("hi!");
        java.util.ArrayList<user.User> userList24 = database16.users;
        database1.users = userList24;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass28 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        java.util.ArrayList<user.User> userList13 = database1.users;
        database1.load("hi!");
        database.Database database17 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList18 = database17.users;
        java.util.ArrayList<user.User> userList19 = database17.users;
        java.util.ArrayList<user.User> userList20 = database17.users;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database22.users = userList26;
        database17.users = userList26;
        database17.update("hi!");
        java.util.ArrayList<user.User> userList31 = database17.users;
        java.util.ArrayList<user.User> userList32 = database17.users;
        database1.users = userList32;
        java.util.ArrayList<user.User> userList34 = database1.users;
        java.lang.Class<?> wildcardClass35 = userList34.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database.Database database16 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database1.users = userList17;
        java.util.ArrayList<user.User> userList19 = database1.users;
        java.util.ArrayList<user.User> userList20 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database.Database database23 = database.Database.getInstance("hi!");
        user.User[] userArray24 = new user.User[] {};
        java.util.ArrayList<user.User> userList25 = new java.util.ArrayList<user.User>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<user.User>) userList25, userArray24);
        database23.users = userList25;
        database.Database database29 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList30 = database29.users;
        database23.users = userList30;
        database.Database database33 = database.Database.getInstance("hi!");
        user.User[] userArray34 = new user.User[] {};
        java.util.ArrayList<user.User> userList35 = new java.util.ArrayList<user.User>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<user.User>) userList35, userArray34);
        database33.users = userList35;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database33.users = userList40;
        database23.users = userList40;
        java.util.ArrayList<user.User> userList43 = database23.users;
        database1.users = userList43;
        java.util.ArrayList<user.User> userList45 = database1.users;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userArray24);
        org.junit.Assert.assertArrayEquals(userArray24, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userArray34);
        org.junit.Assert.assertArrayEquals(userArray34, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList45);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database25.users = userList29;
        database1.users = userList29;
        database1.load("hi!");
        java.lang.Class<?> wildcardClass34 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        database.Database database13 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        java.util.ArrayList<user.User> userList16 = database13.users;
        database13.load("hi!");
        database13.load("hi!");
        java.util.ArrayList<user.User> userList21 = database13.users;
        database1.users = userList21;
        database1.load("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList27 = database1.users;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList27);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        database1.update("hi!");
        database1.load("hi!");
        database1.update("hi!");
        java.lang.Class<?> wildcardClass16 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database11.users = userList15;
        java.util.ArrayList<user.User> userList17 = database11.users;
        database11.update("hi!");
        java.util.ArrayList<user.User> userList20 = database11.users;
        database1.users = userList20;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass24 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database1.users = userList12;
        java.util.ArrayList<user.User> userList15 = database1.users;
        database.Database database17 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList18 = database17.users;
        java.util.ArrayList<user.User> userList19 = database17.users;
        java.util.ArrayList<user.User> userList20 = database17.users;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database22.users = userList26;
        database17.users = userList26;
        database17.update("hi!");
        java.util.ArrayList<user.User> userList31 = database17.users;
        java.util.ArrayList<user.User> userList32 = database17.users;
        java.util.ArrayList<user.User> userList33 = database17.users;
        database.Database database35 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList36 = database35.users;
        java.util.ArrayList<user.User> userList37 = database35.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database39.users = userList45;
        database35.users = userList45;
        java.util.ArrayList<user.User> userList50 = database35.users;
        database.Database database52 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList53 = database52.users;
        database.Database database55 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList56 = database55.users;
        database52.users = userList56;
        java.util.ArrayList<user.User> userList58 = database52.users;
        java.util.ArrayList<user.User> userList59 = database52.users;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        java.util.ArrayList<user.User> userList63 = database61.users;
        java.util.ArrayList<user.User> userList64 = database61.users;
        database52.users = userList64;
        database35.users = userList64;
        database17.users = userList64;
        database1.users = userList64;
        java.lang.Class<?> wildcardClass69 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(database52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        java.util.ArrayList<user.User> userList16 = database1.users;
        java.util.ArrayList<user.User> userList17 = database1.users;
        database.Database database19 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList20 = database19.users;
        java.util.ArrayList<user.User> userList21 = database19.users;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database23.users = userList29;
        database19.users = userList29;
        java.util.ArrayList<user.User> userList34 = database19.users;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        java.util.ArrayList<user.User> userList43 = database36.users;
        database.Database database45 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList46 = database45.users;
        java.util.ArrayList<user.User> userList47 = database45.users;
        java.util.ArrayList<user.User> userList48 = database45.users;
        database36.users = userList48;
        database19.users = userList48;
        database1.users = userList48;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList48);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) '4');
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database.Database database16 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database1.users = userList17;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.lang.Class<?> wildcardClass8 = userList7.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        java.util.ArrayList<user.User> userList17 = database15.users;
        database.Database database19 = database.Database.getInstance("hi!");
        user.User[] userArray20 = new user.User[] {};
        java.util.ArrayList<user.User> userList21 = new java.util.ArrayList<user.User>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<user.User>) userList21, userArray20);
        database19.users = userList21;
        database15.users = userList21;
        database5.users = userList21;
        database1.users = userList21;
        java.lang.Class<?> wildcardClass27 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userArray20);
        org.junit.Assert.assertArrayEquals(userArray20, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        java.util.ArrayList<user.User> userList19 = database17.users;
        database.Database database21 = database.Database.getInstance("hi!");
        user.User[] userArray22 = new user.User[] {};
        java.util.ArrayList<user.User> userList23 = new java.util.ArrayList<user.User>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<user.User>) userList23, userArray22);
        database21.users = userList23;
        database17.users = userList23;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database28.users = userList32;
        java.util.ArrayList<user.User> userList34 = database28.users;
        java.util.ArrayList<user.User> userList35 = database28.users;
        database17.users = userList35;
        java.util.ArrayList<user.User> userList37 = database17.users;
        java.util.ArrayList<user.User> userList38 = database17.users;
        database17.update("hi!");
        database17.load("hi!");
        java.util.ArrayList<user.User> userList43 = database17.users;
        database1.users = userList43;
        database.Database database46 = database.Database.getInstance("");
        database.Database database48 = database.Database.getInstance("hi!");
        user.User[] userArray49 = new user.User[] {};
        java.util.ArrayList<user.User> userList50 = new java.util.ArrayList<user.User>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<user.User>) userList50, userArray49);
        database48.users = userList50;
        database.Database database54 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList55 = database54.users;
        database48.users = userList55;
        database46.users = userList55;
        database.Database database59 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList60 = database59.users;
        database.Database database62 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList63 = database62.users;
        database59.users = userList63;
        java.util.ArrayList<user.User> userList65 = database59.users;
        java.util.ArrayList<user.User> userList66 = database59.users;
        database59.load("hi!");
        java.util.ArrayList<user.User> userList69 = database59.users;
        database46.users = userList69;
        java.util.ArrayList<user.User> userList71 = database46.users;
        java.util.ArrayList<user.User> userList72 = database46.users;
        database.Database database74 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList75 = database74.users;
        java.util.ArrayList<user.User> userList76 = database74.users;
        database.Database database78 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList79 = database78.users;
        java.util.ArrayList<user.User> userList80 = database78.users;
        java.util.ArrayList<user.User> userList81 = database78.users;
        database.Database database83 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList84 = database83.users;
        database.Database database86 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList87 = database86.users;
        database83.users = userList87;
        database78.users = userList87;
        database78.update("hi!");
        java.util.ArrayList<user.User> userList92 = database78.users;
        database74.users = userList92;
        database46.users = userList92;
        java.util.ArrayList<user.User> userList95 = database46.users;
        database1.users = userList95;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userArray22);
        org.junit.Assert.assertArrayEquals(userArray22, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userArray49);
        org.junit.Assert.assertArrayEquals(userArray49, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(database54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(database62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(userList66);
        org.junit.Assert.assertNotNull(userList69);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(userList76);
        org.junit.Assert.assertNotNull(database78);
        org.junit.Assert.assertNotNull(userList79);
        org.junit.Assert.assertNotNull(userList80);
        org.junit.Assert.assertNotNull(userList81);
        org.junit.Assert.assertNotNull(database83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(database86);
        org.junit.Assert.assertNotNull(userList87);
        org.junit.Assert.assertNotNull(userList92);
        org.junit.Assert.assertNotNull(userList95);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList32 = database31.users;
        java.util.ArrayList<user.User> userList33 = database31.users;
        java.util.ArrayList<user.User> userList34 = database31.users;
        database31.load("hi!");
        database.Database database38 = database.Database.getInstance("");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database38.users = userList47;
        database31.users = userList47;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database1.users = userList51;
        java.util.ArrayList<user.User> userList53 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList53);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        java.util.ArrayList<user.User> userList9 = database6.users;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database11.users = userList15;
        database6.users = userList15;
        database.Database database19 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList20 = database19.users;
        java.util.ArrayList<user.User> userList21 = database19.users;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database23.users = userList29;
        database19.users = userList29;
        database6.users = userList29;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        database6.users = userList40;
        database1.users = userList40;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        database.Database database24 = database.Database.getInstance("hi!");
        user.User[] userArray25 = new user.User[] {};
        java.util.ArrayList<user.User> userList26 = new java.util.ArrayList<user.User>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<user.User>) userList26, userArray25);
        database24.users = userList26;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database30.users = userList34;
        database24.users = userList34;
        java.util.ArrayList<user.User> userList37 = null;
        database24.users = userList37;
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database24.users = userList42;
        database1.users = userList42;
        database.Database database48 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList49 = database48.users;
        java.util.ArrayList<user.User> userList50 = database48.users;
        java.util.ArrayList<user.User> userList51 = database48.users;
        database48.load("hi!");
        database.Database database55 = database.Database.getInstance("");
        database.Database database57 = database.Database.getInstance("hi!");
        user.User[] userArray58 = new user.User[] {};
        java.util.ArrayList<user.User> userList59 = new java.util.ArrayList<user.User>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<user.User>) userList59, userArray58);
        database57.users = userList59;
        database.Database database63 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList64 = database63.users;
        database57.users = userList64;
        database55.users = userList64;
        database48.users = userList64;
        java.util.ArrayList<user.User> userList68 = database48.users;
        database1.users = userList68;
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userArray25);
        org.junit.Assert.assertArrayEquals(userArray25, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(database57);
        org.junit.Assert.assertNotNull(userArray58);
        org.junit.Assert.assertArrayEquals(userArray58, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(database63);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList68);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList9 = database1.users;
        database1.update("hi!");
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        java.util.ArrayList<user.User> userList19 = database13.users;
        java.util.ArrayList<user.User> userList20 = database13.users;
        database1.users = userList20;
        java.lang.Class<?> wildcardClass22 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.load("hi!");
        database.Database database16 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        java.util.ArrayList<user.User> userList19 = database16.users;
        database16.load("hi!");
        database16.load("hi!");
        java.util.ArrayList<user.User> userList24 = database16.users;
        database1.users = userList24;
        java.util.ArrayList<user.User> userList26 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList26);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList28 = database1.users;
        java.util.ArrayList<user.User> userList29 = database1.users;
        java.util.ArrayList<user.User> userList30 = database1.users;
        java.lang.Class<?> wildcardClass31 = userList30.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database1.load("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        java.lang.Class<?> wildcardClass16 = userList15.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot((int) 'a');
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = parkingSpot16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database28.users = userList32;
        database22.users = userList32;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        database36.load("hi!");
        database36.update("hi!");
        database.Database database48 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList49 = database48.users;
        java.util.ArrayList<user.User> userList50 = database48.users;
        database36.users = userList50;
        database22.users = userList50;
        java.util.ArrayList<user.User> userList53 = database22.users;
        database1.users = userList53;
        java.util.ArrayList<user.User> userList55 = database1.users;
        database.Database database57 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList58 = database57.users;
        java.util.ArrayList<user.User> userList59 = database57.users;
        java.util.ArrayList<user.User> userList60 = database57.users;
        java.util.ArrayList<user.User> userList61 = database57.users;
        java.util.ArrayList<user.User> userList62 = database57.users;
        database1.users = userList62;
        java.lang.Class<?> wildcardClass64 = userList62.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(database57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database1.users = userList11;
        database1.update("hi!");
        database1.update("hi!");
        java.util.ArrayList<user.User> userList18 = database1.users;
        java.util.ArrayList<user.User> userList19 = database1.users;
        java.lang.Class<?> wildcardClass20 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) '#');
        java.lang.Class<?> wildcardClass17 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList14 = database1.users;
        java.util.ArrayList<user.User> userList15 = database1.users;
        java.lang.Class<?> wildcardClass16 = userList15.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        database1.load("hi!");
        database.Database database26 = database.Database.getInstance("hi!");
        user.User[] userArray27 = new user.User[] {};
        java.util.ArrayList<user.User> userList28 = new java.util.ArrayList<user.User>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<user.User>) userList28, userArray27);
        database26.users = userList28;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database.Database database35 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList36 = database35.users;
        database32.users = userList36;
        database26.users = userList36;
        database.Database database40 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList41 = database40.users;
        database.Database database43 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList44 = database43.users;
        database40.users = userList44;
        java.util.ArrayList<user.User> userList46 = database40.users;
        database40.load("hi!");
        database40.update("hi!");
        database.Database database52 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList53 = database52.users;
        java.util.ArrayList<user.User> userList54 = database52.users;
        database40.users = userList54;
        database26.users = userList54;
        java.util.ArrayList<user.User> userList57 = database26.users;
        java.util.ArrayList<user.User> userList58 = database26.users;
        database1.users = userList58;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList62 = database1.users;
        java.util.ArrayList<user.User> userList63 = database1.users;
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userArray27);
        org.junit.Assert.assertArrayEquals(userArray27, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userList63);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList9 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList9);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        java.util.ArrayList<user.User> userList51 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(userList51);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot24 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass25 = parkingSpot24.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
        org.junit.Assert.assertNull(parkingSpot24);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        java.util.ArrayList<user.User> userList43 = database36.users;
        database25.users = userList43;
        java.util.ArrayList<user.User> userList45 = database25.users;
        database25.load("hi!");
        database.Database database49 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList50 = database49.users;
        java.util.ArrayList<user.User> userList51 = database49.users;
        database.Database database53 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        java.util.ArrayList<user.User> userList56 = database53.users;
        database.Database database58 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList59 = database58.users;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database58.users = userList62;
        database53.users = userList62;
        database.Database database66 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList67 = database66.users;
        java.util.ArrayList<user.User> userList68 = database66.users;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        java.util.ArrayList<user.User> userList72 = database70.users;
        database.Database database74 = database.Database.getInstance("hi!");
        user.User[] userArray75 = new user.User[] {};
        java.util.ArrayList<user.User> userList76 = new java.util.ArrayList<user.User>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<user.User>) userList76, userArray75);
        database74.users = userList76;
        database70.users = userList76;
        database66.users = userList76;
        database53.users = userList76;
        database.Database database83 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList84 = database83.users;
        database.Database database86 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList87 = database86.users;
        database83.users = userList87;
        database53.users = userList87;
        java.util.ArrayList<user.User> userList90 = database53.users;
        database49.users = userList90;
        database25.users = userList90;
        database1.users = userList90;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList96 = database1.users;
        java.util.ArrayList<user.User> userList97 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userArray75);
        org.junit.Assert.assertArrayEquals(userArray75, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(database83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(database86);
        org.junit.Assert.assertNotNull(userList87);
        org.junit.Assert.assertNotNull(userList90);
        org.junit.Assert.assertNotNull(userList96);
        org.junit.Assert.assertNotNull(userList97);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList32 = database31.users;
        java.util.ArrayList<user.User> userList33 = database31.users;
        java.util.ArrayList<user.User> userList34 = database31.users;
        database31.load("hi!");
        database.Database database38 = database.Database.getInstance("");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database38.users = userList47;
        database31.users = userList47;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database1.users = userList51;
        java.util.ArrayList<user.User> userList53 = database1.users;
        java.util.ArrayList<user.User> userList54 = database1.users;
        database.Database database56 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList57 = database56.users;
        java.util.ArrayList<user.User> userList58 = database56.users;
        database.Database database60 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList61 = database60.users;
        java.util.ArrayList<user.User> userList62 = database60.users;
        database.Database database64 = database.Database.getInstance("hi!");
        user.User[] userArray65 = new user.User[] {};
        java.util.ArrayList<user.User> userList66 = new java.util.ArrayList<user.User>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<user.User>) userList66, userArray65);
        database64.users = userList66;
        database60.users = userList66;
        database56.users = userList66;
        java.util.ArrayList<user.User> userList71 = database56.users;
        database.Database database73 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList74 = database73.users;
        database.Database database76 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList77 = database76.users;
        database73.users = userList77;
        java.util.ArrayList<user.User> userList79 = database73.users;
        java.util.ArrayList<user.User> userList80 = database73.users;
        database.Database database82 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList83 = database82.users;
        java.util.ArrayList<user.User> userList84 = database82.users;
        java.util.ArrayList<user.User> userList85 = database82.users;
        database73.users = userList85;
        database56.users = userList85;
        database1.users = userList85;
        java.lang.Class<?> wildcardClass89 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(database60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userArray65);
        org.junit.Assert.assertArrayEquals(userArray65, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(database73);
        org.junit.Assert.assertNotNull(userList74);
        org.junit.Assert.assertNotNull(database76);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(userList79);
        org.junit.Assert.assertNotNull(userList80);
        org.junit.Assert.assertNotNull(database82);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(userList85);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.load("hi!");
        database.Database database29 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList30 = database29.users;
        java.util.ArrayList<user.User> userList31 = database29.users;
        database.Database database33 = database.Database.getInstance("hi!");
        user.User[] userArray34 = new user.User[] {};
        java.util.ArrayList<user.User> userList35 = new java.util.ArrayList<user.User>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<user.User>) userList35, userArray34);
        database33.users = userList35;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database33.users = userList40;
        database29.users = userList40;
        database.Database database44 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList45 = database44.users;
        database29.users = userList45;
        java.util.ArrayList<user.User> userList47 = database29.users;
        java.util.ArrayList<user.User> userList48 = database29.users;
        database1.users = userList48;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userArray34);
        org.junit.Assert.assertArrayEquals(userArray34, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database44);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList48);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 1);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database25.users = userList29;
        database1.users = userList29;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database33.users = userList37;
        java.util.ArrayList<user.User> userList39 = database33.users;
        java.util.ArrayList<user.User> userList40 = database33.users;
        database1.users = userList40;
        java.lang.Class<?> wildcardClass42 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database6.users = userList12;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database.Database database20 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList21 = database20.users;
        database17.users = userList21;
        java.util.ArrayList<user.User> userList23 = database17.users;
        java.util.ArrayList<user.User> userList24 = database17.users;
        database6.users = userList24;
        database6.load("hi!");
        database6.load("hi!");
        database.Database database31 = database.Database.getInstance("hi!");
        user.User[] userArray32 = new user.User[] {};
        java.util.ArrayList<user.User> userList33 = new java.util.ArrayList<user.User>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<user.User>) userList33, userArray32);
        database31.users = userList33;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        database31.users = userList38;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        java.util.ArrayList<user.User> userList43 = database41.users;
        database.Database database45 = database.Database.getInstance("hi!");
        user.User[] userArray46 = new user.User[] {};
        java.util.ArrayList<user.User> userList47 = new java.util.ArrayList<user.User>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<user.User>) userList47, userArray46);
        database45.users = userList47;
        database41.users = userList47;
        database31.users = userList47;
        database6.users = userList47;
        database1.users = userList47;
        database1.update("hi!");
        database.Database database57 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList58 = database57.users;
        java.util.ArrayList<user.User> userList59 = database57.users;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        java.util.ArrayList<user.User> userList63 = database61.users;
        database.Database database65 = database.Database.getInstance("hi!");
        user.User[] userArray66 = new user.User[] {};
        java.util.ArrayList<user.User> userList67 = new java.util.ArrayList<user.User>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<user.User>) userList67, userArray66);
        database65.users = userList67;
        database61.users = userList67;
        database57.users = userList67;
        java.util.ArrayList<user.User> userList72 = database57.users;
        database.Database database74 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList75 = database74.users;
        database.Database database77 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList78 = database77.users;
        database74.users = userList78;
        java.util.ArrayList<user.User> userList80 = database74.users;
        java.util.ArrayList<user.User> userList81 = database74.users;
        database.Database database83 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList84 = database83.users;
        java.util.ArrayList<user.User> userList85 = database83.users;
        java.util.ArrayList<user.User> userList86 = database83.users;
        database74.users = userList86;
        database57.users = userList86;
        database57.update("hi!");
        java.util.ArrayList<user.User> userList91 = database57.users;
        database1.users = userList91;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userArray32);
        org.junit.Assert.assertArrayEquals(userArray32, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userArray46);
        org.junit.Assert.assertArrayEquals(userArray46, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(database57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(database65);
        org.junit.Assert.assertNotNull(userArray66);
        org.junit.Assert.assertArrayEquals(userArray66, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(database77);
        org.junit.Assert.assertNotNull(userList78);
        org.junit.Assert.assertNotNull(userList80);
        org.junit.Assert.assertNotNull(userList81);
        org.junit.Assert.assertNotNull(database83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(userList85);
        org.junit.Assert.assertNotNull(userList86);
        org.junit.Assert.assertNotNull(userList91);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot23 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        database1.load("hi!");
        database1.update("hi!");
        java.util.ArrayList<user.User> userList18 = database1.users;
        java.util.ArrayList<user.User> userList19 = database1.users;
        java.lang.Class<?> wildcardClass20 = userList19.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList17 = database1.users;
        database.Database database19 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList20 = database19.users;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database19.users = userList23;
        java.util.ArrayList<user.User> userList25 = database19.users;
        database19.load("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database19.users = userList29;
        database19.update("hi!");
        database19.update("hi!");
        java.util.ArrayList<user.User> userList36 = database19.users;
        database1.users = userList36;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(userList36);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database.Database database10 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList11 = database10.users;
        java.util.ArrayList<user.User> userList12 = database10.users;
        java.util.ArrayList<user.User> userList13 = database10.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database15.users = userList19;
        database10.users = userList19;
        database.Database database23 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database.Database database31 = database.Database.getInstance("hi!");
        user.User[] userArray32 = new user.User[] {};
        java.util.ArrayList<user.User> userList33 = new java.util.ArrayList<user.User>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<user.User>) userList33, userArray32);
        database31.users = userList33;
        database27.users = userList33;
        database23.users = userList33;
        database10.users = userList33;
        database1.users = userList33;
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userArray32);
        org.junit.Assert.assertArrayEquals(userArray32, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        java.util.ArrayList<user.User> userList17 = database1.users;
        java.util.ArrayList<user.User> userList18 = database1.users;
        database.Database database20 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList21 = database20.users;
        java.util.ArrayList<user.User> userList22 = database20.users;
        java.util.ArrayList<user.User> userList23 = database20.users;
        database20.load("hi!");
        database.Database database27 = database.Database.getInstance("");
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database.Database database35 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList36 = database35.users;
        database29.users = userList36;
        database27.users = userList36;
        database20.users = userList36;
        java.util.ArrayList<user.User> userList40 = database20.users;
        database20.update("hi!");
        database20.load("hi!");
        java.util.ArrayList<user.User> userList45 = database20.users;
        database1.users = userList45;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList45);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        database.Database database10 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList11 = database10.users;
        java.util.ArrayList<user.User> userList12 = database10.users;
        java.util.ArrayList<user.User> userList13 = database10.users;
        database10.load("hi!");
        database.Database database17 = database.Database.getInstance("");
        database.Database database19 = database.Database.getInstance("hi!");
        user.User[] userArray20 = new user.User[] {};
        java.util.ArrayList<user.User> userList21 = new java.util.ArrayList<user.User>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<user.User>) userList21, userArray20);
        database19.users = userList21;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database19.users = userList26;
        database17.users = userList26;
        database10.users = userList26;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        java.util.ArrayList<user.User> userList37 = database31.users;
        java.util.ArrayList<user.User> userList38 = database31.users;
        database10.users = userList38;
        database1.users = userList38;
        database.Database database42 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList43 = database42.users;
        database1.users = userList43;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userArray20);
        org.junit.Assert.assertArrayEquals(userArray20, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database28.users = userList32;
        database22.users = userList32;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        database36.load("hi!");
        database36.update("hi!");
        database.Database database48 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList49 = database48.users;
        java.util.ArrayList<user.User> userList50 = database48.users;
        database36.users = userList50;
        database22.users = userList50;
        java.util.ArrayList<user.User> userList53 = database22.users;
        database1.users = userList53;
        java.util.ArrayList<user.User> userList55 = database1.users;
        database.Database database57 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList58 = database57.users;
        java.util.ArrayList<user.User> userList59 = database57.users;
        java.util.ArrayList<user.User> userList60 = database57.users;
        java.util.ArrayList<user.User> userList61 = database57.users;
        java.util.ArrayList<user.User> userList62 = database57.users;
        database1.users = userList62;
        java.util.ArrayList<user.User> userList64 = database1.users;
        java.util.ArrayList<user.User> userList65 = database1.users;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(database57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList65);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList26 = database1.users;
        java.lang.Class<?> wildcardClass27 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.load("hi!");
        database.Database database29 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList30 = database29.users;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database29.users = userList33;
        java.util.ArrayList<user.User> userList35 = database29.users;
        database29.load("hi!");
        user.User[] userArray38 = new user.User[] {};
        java.util.ArrayList<user.User> userList39 = new java.util.ArrayList<user.User>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<user.User>) userList39, userArray38);
        database29.users = userList39;
        java.util.ArrayList<user.User> userList42 = database29.users;
        database1.users = userList42;
        database.Database database45 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList46 = database45.users;
        database.Database database48 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList49 = database48.users;
        database45.users = userList49;
        java.util.ArrayList<user.User> userList51 = database45.users;
        database45.load("hi!");
        java.util.ArrayList<user.User> userList54 = database45.users;
        database.Database database56 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList57 = database56.users;
        java.util.ArrayList<user.User> userList58 = database56.users;
        database.Database database60 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList61 = database60.users;
        java.util.ArrayList<user.User> userList62 = database60.users;
        database.Database database64 = database.Database.getInstance("hi!");
        user.User[] userArray65 = new user.User[] {};
        java.util.ArrayList<user.User> userList66 = new java.util.ArrayList<user.User>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<user.User>) userList66, userArray65);
        database64.users = userList66;
        database60.users = userList66;
        database56.users = userList66;
        database.Database database72 = database.Database.getInstance("hi!");
        user.User[] userArray73 = new user.User[] {};
        java.util.ArrayList<user.User> userList74 = new java.util.ArrayList<user.User>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<user.User>) userList74, userArray73);
        database72.users = userList74;
        database.Database database78 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList79 = database78.users;
        database72.users = userList79;
        database.Database database82 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList83 = database82.users;
        java.util.ArrayList<user.User> userList84 = database82.users;
        database.Database database86 = database.Database.getInstance("hi!");
        user.User[] userArray87 = new user.User[] {};
        java.util.ArrayList<user.User> userList88 = new java.util.ArrayList<user.User>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<user.User>) userList88, userArray87);
        database86.users = userList88;
        database82.users = userList88;
        database72.users = userList88;
        database56.users = userList88;
        database45.users = userList88;
        java.util.ArrayList<user.User> userList95 = database45.users;
        java.util.ArrayList<user.User> userList96 = database45.users;
        database1.users = userList96;
        java.lang.Class<?> wildcardClass98 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userArray38);
        org.junit.Assert.assertArrayEquals(userArray38, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(database60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userArray65);
        org.junit.Assert.assertArrayEquals(userArray65, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(database72);
        org.junit.Assert.assertNotNull(userArray73);
        org.junit.Assert.assertArrayEquals(userArray73, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(database78);
        org.junit.Assert.assertNotNull(userList79);
        org.junit.Assert.assertNotNull(database82);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(database86);
        org.junit.Assert.assertNotNull(userArray87);
        org.junit.Assert.assertArrayEquals(userArray87, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(userList95);
        org.junit.Assert.assertNotNull(userList96);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = parkingSpot10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = null;
        database1.users = userList10;
        java.lang.Class<?> wildcardClass12 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database.Database database23 = database.Database.getInstance("");
        database.Database database25 = database.Database.getInstance("hi!");
        user.User[] userArray26 = new user.User[] {};
        java.util.ArrayList<user.User> userList27 = new java.util.ArrayList<user.User>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<user.User>) userList27, userArray26);
        database25.users = userList27;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database25.users = userList32;
        database23.users = userList32;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        java.util.ArrayList<user.User> userList43 = database36.users;
        database36.load("hi!");
        java.util.ArrayList<user.User> userList46 = database36.users;
        database23.users = userList46;
        database1.users = userList46;
        database.Database database50 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList51 = database50.users;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        database50.users = userList54;
        java.util.ArrayList<user.User> userList56 = database50.users;
        java.util.ArrayList<user.User> userList57 = database50.users;
        java.util.ArrayList<user.User> userList58 = database50.users;
        database.Database database60 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList61 = database60.users;
        database.Database database63 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList64 = database63.users;
        database60.users = userList64;
        java.util.ArrayList<user.User> userList66 = database60.users;
        database60.update("hi!");
        java.util.ArrayList<user.User> userList69 = database60.users;
        database50.users = userList69;
        database1.users = userList69;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userArray26);
        org.junit.Assert.assertArrayEquals(userArray26, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(database60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(database63);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList66);
        org.junit.Assert.assertNotNull(userList69);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        java.util.ArrayList<user.User> userList28 = database25.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database30.users = userList34;
        database25.users = userList34;
        database.Database database38 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        java.util.ArrayList<user.User> userList44 = database42.users;
        database.Database database46 = database.Database.getInstance("hi!");
        user.User[] userArray47 = new user.User[] {};
        java.util.ArrayList<user.User> userList48 = new java.util.ArrayList<user.User>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<user.User>) userList48, userArray47);
        database46.users = userList48;
        database42.users = userList48;
        database38.users = userList48;
        database25.users = userList48;
        database.Database database55 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList56 = database55.users;
        java.util.ArrayList<user.User> userList57 = database55.users;
        java.util.ArrayList<user.User> userList58 = database55.users;
        database55.load("hi!");
        database.Database database62 = database.Database.getInstance("");
        database.Database database64 = database.Database.getInstance("hi!");
        user.User[] userArray65 = new user.User[] {};
        java.util.ArrayList<user.User> userList66 = new java.util.ArrayList<user.User>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<user.User>) userList66, userArray65);
        database64.users = userList66;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        database64.users = userList71;
        database62.users = userList71;
        database55.users = userList71;
        java.util.ArrayList<user.User> userList75 = database55.users;
        database25.users = userList75;
        database1.users = userList75;
        database1.update("hi!");
        database.Database database81 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList82 = database81.users;
        java.util.ArrayList<user.User> userList83 = database81.users;
        database.Database database85 = database.Database.getInstance("hi!");
        user.User[] userArray86 = new user.User[] {};
        java.util.ArrayList<user.User> userList87 = new java.util.ArrayList<user.User>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<user.User>) userList87, userArray86);
        database85.users = userList87;
        database81.users = userList87;
        database81.load("hi!");
        java.util.ArrayList<user.User> userList93 = database81.users;
        database1.users = userList93;
        java.util.ArrayList<user.User> userList95 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userArray47);
        org.junit.Assert.assertArrayEquals(userArray47, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(database62);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userArray65);
        org.junit.Assert.assertArrayEquals(userArray65, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(database81);
        org.junit.Assert.assertNotNull(userList82);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(database85);
        org.junit.Assert.assertNotNull(userArray86);
        org.junit.Assert.assertArrayEquals(userArray86, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(userList93);
        org.junit.Assert.assertNotNull(userList95);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList30 = database29.users;
        java.util.ArrayList<user.User> userList31 = database29.users;
        java.util.ArrayList<user.User> userList32 = database29.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        database34.users = userList38;
        database29.users = userList38;
        database.Database database42 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList43 = database42.users;
        java.util.ArrayList<user.User> userList44 = database42.users;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        java.util.ArrayList<user.User> userList48 = database46.users;
        database.Database database50 = database.Database.getInstance("hi!");
        user.User[] userArray51 = new user.User[] {};
        java.util.ArrayList<user.User> userList52 = new java.util.ArrayList<user.User>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<user.User>) userList52, userArray51);
        database50.users = userList52;
        database46.users = userList52;
        database42.users = userList52;
        database29.users = userList52;
        database.Database database59 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList60 = database59.users;
        database.Database database62 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList63 = database62.users;
        database59.users = userList63;
        database29.users = userList63;
        java.util.ArrayList<user.User> userList66 = database29.users;
        database25.users = userList66;
        database1.users = userList66;
        database.Database database70 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList71 = database70.users;
        java.util.ArrayList<user.User> userList72 = database70.users;
        java.util.ArrayList<user.User> userList73 = database70.users;
        database70.load("hi!");
        database70.load("hi!");
        java.util.ArrayList<user.User> userList78 = database70.users;
        database1.users = userList78;
        java.util.ArrayList<user.User> userList80 = null;
        database1.users = userList80;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userArray51);
        org.junit.Assert.assertArrayEquals(userArray51, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(database62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(userList66);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(userList73);
        org.junit.Assert.assertNotNull(userList78);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.load("hi!");
// flaky "4) test0751(RegressionTest1)":         database1.update("hi!");
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
// flaky "4) test0751(RegressionTest1)":         org.junit.Assert.assertNotNull(userList2);
// flaky "4) test0751(RegressionTest1)":         org.junit.Assert.assertNotNull(userList3);
// flaky "3) test0751(RegressionTest1)":         org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
// flaky "2) test0751(RegressionTest1)":         org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
// flaky "2) test0751(RegressionTest1)":         org.junit.Assert.assertNotNull(userList10);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) 0);
        java.lang.Class<?> wildcardClass19 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot7 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database6.users = userList12;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database.Database database20 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList21 = database20.users;
        database17.users = userList21;
        java.util.ArrayList<user.User> userList23 = database17.users;
        java.util.ArrayList<user.User> userList24 = database17.users;
        database6.users = userList24;
        database6.load("hi!");
        database6.load("hi!");
        database.Database database31 = database.Database.getInstance("hi!");
        user.User[] userArray32 = new user.User[] {};
        java.util.ArrayList<user.User> userList33 = new java.util.ArrayList<user.User>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<user.User>) userList33, userArray32);
        database31.users = userList33;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        database31.users = userList38;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        java.util.ArrayList<user.User> userList43 = database41.users;
        database.Database database45 = database.Database.getInstance("hi!");
        user.User[] userArray46 = new user.User[] {};
        java.util.ArrayList<user.User> userList47 = new java.util.ArrayList<user.User>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<user.User>) userList47, userArray46);
        database45.users = userList47;
        database41.users = userList47;
        database31.users = userList47;
        database6.users = userList47;
        database1.users = userList47;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass56 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
// flaky "5) test0755(RegressionTest1)":         org.junit.Assert.assertNotNull(userList2);
// flaky "5) test0755(RegressionTest1)":         org.junit.Assert.assertNotNull(userList3);
// flaky "5) test0755(RegressionTest1)":         org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
// flaky "4) test0755(RegressionTest1)":         org.junit.Assert.assertNotNull(userList7);
// flaky "3) test0755(RegressionTest1)":         org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userArray32);
        org.junit.Assert.assertArrayEquals(userArray32, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userArray46);
        org.junit.Assert.assertArrayEquals(userArray46, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        database1.update("hi!");
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        database1.users = userList15;
        database.Database database18 = database.Database.getInstance("hi!");
        user.User[] userArray19 = new user.User[] {};
        java.util.ArrayList<user.User> userList20 = new java.util.ArrayList<user.User>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<user.User>) userList20, userArray19);
        database18.users = userList20;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database24.users = userList28;
        database18.users = userList28;
        java.util.ArrayList<user.User> userList31 = null;
        database18.users = userList31;
        database.Database database34 = database.Database.getInstance("hi!");
        user.User[] userArray35 = new user.User[] {};
        java.util.ArrayList<user.User> userList36 = new java.util.ArrayList<user.User>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<user.User>) userList36, userArray35);
        database34.users = userList36;
        database18.users = userList36;
        database1.users = userList36;
        java.util.ArrayList<user.User> userList41 = database1.users;
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userArray19);
        org.junit.Assert.assertArrayEquals(userArray19, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userArray35);
        org.junit.Assert.assertArrayEquals(userArray35, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(userList41);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot((int) (short) 1);
        java.lang.Class<?> wildcardClass23 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot23 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList32 = database31.users;
        java.util.ArrayList<user.User> userList33 = database31.users;
        java.util.ArrayList<user.User> userList34 = database31.users;
        database31.load("hi!");
        database.Database database38 = database.Database.getInstance("");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database38.users = userList47;
        database31.users = userList47;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database1.users = userList51;
        java.util.ArrayList<user.User> userList53 = database1.users;
        java.util.ArrayList<user.User> userList54 = database1.users;
        database.Database database56 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList57 = database56.users;
        java.util.ArrayList<user.User> userList58 = database56.users;
        database.Database database60 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList61 = database60.users;
        java.util.ArrayList<user.User> userList62 = database60.users;
        database.Database database64 = database.Database.getInstance("hi!");
        user.User[] userArray65 = new user.User[] {};
        java.util.ArrayList<user.User> userList66 = new java.util.ArrayList<user.User>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<user.User>) userList66, userArray65);
        database64.users = userList66;
        database60.users = userList66;
        database56.users = userList66;
        java.util.ArrayList<user.User> userList71 = database56.users;
        database.Database database73 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList74 = database73.users;
        database.Database database76 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList77 = database76.users;
        database73.users = userList77;
        java.util.ArrayList<user.User> userList79 = database73.users;
        java.util.ArrayList<user.User> userList80 = database73.users;
        database.Database database82 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList83 = database82.users;
        java.util.ArrayList<user.User> userList84 = database82.users;
        java.util.ArrayList<user.User> userList85 = database82.users;
        database73.users = userList85;
        database56.users = userList85;
        database1.users = userList85;
        java.util.ArrayList<user.User> userList89 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(database60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userArray65);
        org.junit.Assert.assertArrayEquals(userArray65, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(database73);
        org.junit.Assert.assertNotNull(userList74);
        org.junit.Assert.assertNotNull(database76);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(userList79);
        org.junit.Assert.assertNotNull(userList80);
        org.junit.Assert.assertNotNull(database82);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(userList85);
        org.junit.Assert.assertNotNull(userList89);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.load("hi!");
        database.Database database29 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList30 = database29.users;
        java.util.ArrayList<user.User> userList31 = database29.users;
        java.util.ArrayList<user.User> userList32 = database29.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        database34.users = userList38;
        database29.users = userList38;
        database.Database database42 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList43 = database42.users;
        java.util.ArrayList<user.User> userList44 = database42.users;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        java.util.ArrayList<user.User> userList48 = database46.users;
        database.Database database50 = database.Database.getInstance("hi!");
        user.User[] userArray51 = new user.User[] {};
        java.util.ArrayList<user.User> userList52 = new java.util.ArrayList<user.User>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<user.User>) userList52, userArray51);
        database50.users = userList52;
        database46.users = userList52;
        database42.users = userList52;
        database29.users = userList52;
        database.Database database59 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList60 = database59.users;
        java.util.ArrayList<user.User> userList61 = database59.users;
        java.util.ArrayList<user.User> userList62 = database59.users;
        database59.load("hi!");
        database.Database database66 = database.Database.getInstance("");
        database.Database database68 = database.Database.getInstance("hi!");
        user.User[] userArray69 = new user.User[] {};
        java.util.ArrayList<user.User> userList70 = new java.util.ArrayList<user.User>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<user.User>) userList70, userArray69);
        database68.users = userList70;
        database.Database database74 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList75 = database74.users;
        database68.users = userList75;
        database66.users = userList75;
        database59.users = userList75;
        java.util.ArrayList<user.User> userList79 = database59.users;
        database29.users = userList79;
        java.util.ArrayList<user.User> userList81 = database29.users;
        database1.users = userList81;
        java.util.ArrayList<user.User> userList83 = database1.users;
        java.util.ArrayList<user.User> userList84 = database1.users;
        java.util.ArrayList<user.User> userList85 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userArray51);
        org.junit.Assert.assertArrayEquals(userArray51, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(database68);
        org.junit.Assert.assertNotNull(userArray69);
        org.junit.Assert.assertArrayEquals(userArray69, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(userList79);
        org.junit.Assert.assertNotNull(userList81);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(userList85);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        java.util.ArrayList<user.User> userList21 = database1.users;
        java.util.ArrayList<user.User> userList22 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList22);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList17 = database1.users;
        database.Database database19 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList20 = database19.users;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database19.users = userList23;
        java.util.ArrayList<user.User> userList25 = database19.users;
        database19.load("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database19.users = userList29;
        database19.update("hi!");
        database19.update("hi!");
        java.util.ArrayList<user.User> userList36 = database19.users;
        database1.users = userList36;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(userList36);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        database.Database database24 = database.Database.getInstance("hi!");
        user.User[] userArray25 = new user.User[] {};
        java.util.ArrayList<user.User> userList26 = new java.util.ArrayList<user.User>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<user.User>) userList26, userArray25);
        database24.users = userList26;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database30.users = userList34;
        database24.users = userList34;
        java.util.ArrayList<user.User> userList37 = null;
        database24.users = userList37;
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database24.users = userList42;
        database1.users = userList42;
        database.Database database48 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList49 = database48.users;
        java.util.ArrayList<user.User> userList50 = database48.users;
        java.util.ArrayList<user.User> userList51 = database48.users;
        database48.load("hi!");
        database.Database database55 = database.Database.getInstance("");
        database.Database database57 = database.Database.getInstance("hi!");
        user.User[] userArray58 = new user.User[] {};
        java.util.ArrayList<user.User> userList59 = new java.util.ArrayList<user.User>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<user.User>) userList59, userArray58);
        database57.users = userList59;
        database.Database database63 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList64 = database63.users;
        database57.users = userList64;
        database55.users = userList64;
        database48.users = userList64;
        java.util.ArrayList<user.User> userList68 = database48.users;
        database1.users = userList68;
        java.lang.Class<?> wildcardClass70 = userList68.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userArray25);
        org.junit.Assert.assertArrayEquals(userArray25, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(database57);
        org.junit.Assert.assertNotNull(userArray58);
        org.junit.Assert.assertArrayEquals(userArray58, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(database63);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList23 = database1.users;
        java.lang.Class<?> wildcardClass24 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        java.util.ArrayList<user.User> userList21 = database1.users;
        java.util.ArrayList<user.User> userList22 = database1.users;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList25 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList25);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database15.users = userList19;
        java.util.ArrayList<user.User> userList21 = database15.users;
        database15.load("hi!");
        database15.update("hi!");
        java.util.ArrayList<user.User> userList26 = database15.users;
        database1.users = userList26;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList26);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database39.users = userList50;
        database1.users = userList50;
        database.Database database55 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList56 = database55.users;
        java.util.ArrayList<user.User> userList57 = database55.users;
        java.util.ArrayList<user.User> userList58 = database55.users;
        database.Database database60 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList61 = database60.users;
        database.Database database63 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList64 = database63.users;
        database60.users = userList64;
        database55.users = userList64;
        database55.update("hi!");
        java.util.ArrayList<user.User> userList69 = database55.users;
        java.util.ArrayList<user.User> userList70 = database55.users;
        java.util.ArrayList<user.User> userList71 = database55.users;
        database1.users = userList71;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(database60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(database63);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList69);
        org.junit.Assert.assertNotNull(userList70);
        org.junit.Assert.assertNotNull(userList71);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) 10);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database6.users = userList12;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database.Database database20 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList21 = database20.users;
        database17.users = userList21;
        java.util.ArrayList<user.User> userList23 = database17.users;
        java.util.ArrayList<user.User> userList24 = database17.users;
        database6.users = userList24;
        database6.load("hi!");
        database6.load("hi!");
        database.Database database31 = database.Database.getInstance("hi!");
        user.User[] userArray32 = new user.User[] {};
        java.util.ArrayList<user.User> userList33 = new java.util.ArrayList<user.User>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<user.User>) userList33, userArray32);
        database31.users = userList33;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        database31.users = userList38;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        java.util.ArrayList<user.User> userList43 = database41.users;
        database.Database database45 = database.Database.getInstance("hi!");
        user.User[] userArray46 = new user.User[] {};
        java.util.ArrayList<user.User> userList47 = new java.util.ArrayList<user.User>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<user.User>) userList47, userArray46);
        database45.users = userList47;
        database41.users = userList47;
        database31.users = userList47;
        database6.users = userList47;
        database1.users = userList47;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userArray32);
        org.junit.Assert.assertArrayEquals(userArray32, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userArray46);
        org.junit.Assert.assertArrayEquals(userArray46, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList13 = database1.users;
        database1.update("hi!");
        database1.update("hi!");
        java.util.ArrayList<user.User> userList18 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList18);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        java.util.ArrayList<user.User> userList21 = database1.users;
        java.util.ArrayList<user.User> userList22 = database1.users;
        java.lang.Class<?> wildcardClass23 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database11.users = userList15;
        java.util.ArrayList<user.User> userList17 = database11.users;
        database11.load("hi!");
        database11.update("hi!");
        java.util.ArrayList<user.User> userList22 = database11.users;
        database1.users = userList22;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database25.users = userList29;
        java.util.ArrayList<user.User> userList31 = database25.users;
        java.util.ArrayList<user.User> userList32 = database25.users;
        java.util.ArrayList<user.User> userList33 = database25.users;
        database.Database database35 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList36 = database35.users;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database35.users = userList39;
        java.util.ArrayList<user.User> userList41 = database35.users;
        database35.load("hi!");
        database35.update("hi!");
        java.util.ArrayList<user.User> userList46 = database35.users;
        database25.users = userList46;
        database1.users = userList46;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList46);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot23 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database22.users = userList26;
        java.util.ArrayList<user.User> userList28 = database22.users;
        java.util.ArrayList<user.User> userList29 = database22.users;
        database22.load("hi!");
        java.util.ArrayList<user.User> userList32 = database22.users;
        database1.users = userList32;
        java.lang.Class<?> wildcardClass34 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        database1.users = userList35;
        database1.update("hi!");
        database.Database database41 = database.Database.getInstance("hi!");
        user.User[] userArray42 = new user.User[] {};
        java.util.ArrayList<user.User> userList43 = new java.util.ArrayList<user.User>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<user.User>) userList43, userArray42);
        database41.users = userList43;
        java.util.ArrayList<user.User> userList46 = database41.users;
        database41.update("hi!");
        database41.load("hi!");
        database.Database database52 = database.Database.getInstance("");
        database.Database database54 = database.Database.getInstance("hi!");
        user.User[] userArray55 = new user.User[] {};
        java.util.ArrayList<user.User> userList56 = new java.util.ArrayList<user.User>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<user.User>) userList56, userArray55);
        database54.users = userList56;
        database.Database database60 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList61 = database60.users;
        database54.users = userList61;
        database52.users = userList61;
        database.Database database65 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList66 = database65.users;
        database.Database database68 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList69 = database68.users;
        database65.users = userList69;
        java.util.ArrayList<user.User> userList71 = database65.users;
        java.util.ArrayList<user.User> userList72 = database65.users;
        database65.load("hi!");
        java.util.ArrayList<user.User> userList75 = database65.users;
        database52.users = userList75;
        database.Database database78 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList79 = database78.users;
        database.Database database81 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList82 = database81.users;
        database78.users = userList82;
        java.util.ArrayList<user.User> userList84 = database78.users;
        database78.load("hi!");
        java.util.ArrayList<user.User> userList87 = database78.users;
        database52.users = userList87;
        database41.users = userList87;
        java.util.ArrayList<user.User> userList90 = database41.users;
        database1.users = userList90;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userArray42);
        org.junit.Assert.assertArrayEquals(userArray42, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database52);
        org.junit.Assert.assertNotNull(database54);
        org.junit.Assert.assertNotNull(userArray55);
        org.junit.Assert.assertArrayEquals(userArray55, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(database60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(database65);
        org.junit.Assert.assertNotNull(userList66);
        org.junit.Assert.assertNotNull(database68);
        org.junit.Assert.assertNotNull(userList69);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(database78);
        org.junit.Assert.assertNotNull(userList79);
        org.junit.Assert.assertNotNull(database81);
        org.junit.Assert.assertNotNull(userList82);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(userList87);
        org.junit.Assert.assertNotNull(userList90);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(100);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.load("hi!");
        database.Database database29 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList30 = database29.users;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database29.users = userList33;
        java.util.ArrayList<user.User> userList35 = database29.users;
        database29.load("hi!");
        java.util.ArrayList<user.User> userList38 = database29.users;
        database1.users = userList38;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList42 = null;
        database1.users = userList42;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.iterator()\" because \"this.users\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList38);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        database18.users = userList30;
        database1.users = userList30;
        database1.update("hi!");
        database1.load("hi!");
        database.Database database38 = database.Database.getInstance("hi!");
        user.User[] userArray39 = new user.User[] {};
        java.util.ArrayList<user.User> userList40 = new java.util.ArrayList<user.User>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<user.User>) userList40, userArray39);
        database38.users = userList40;
        java.util.ArrayList<user.User> userList43 = database38.users;
        database38.update("hi!");
        java.util.ArrayList<user.User> userList46 = database38.users;
        database1.users = userList46;
        database1.update("hi!");
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
// flaky "6) test0785(RegressionTest1)":         org.junit.Assert.assertNotNull(userList2);
// flaky "6) test0785(RegressionTest1)":         org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
// flaky "6) test0785(RegressionTest1)":         org.junit.Assert.assertNotNull(userList6);
// flaky "5) test0785(RegressionTest1)":         org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userArray39);
        org.junit.Assert.assertArrayEquals(userArray39, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList46);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        java.util.ArrayList<user.User> userList51 = database1.users;
        database1.load("hi!");
        database.Database database55 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList56 = database55.users;
        database.Database database58 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList59 = database58.users;
        database55.users = userList59;
        java.util.ArrayList<user.User> userList61 = database55.users;
        database55.load("hi!");
        java.util.ArrayList<user.User> userList64 = database55.users;
        database.Database database66 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList67 = database66.users;
        java.util.ArrayList<user.User> userList68 = database66.users;
        java.util.ArrayList<user.User> userList69 = database66.users;
        java.util.ArrayList<user.User> userList70 = database66.users;
        java.util.ArrayList<user.User> userList71 = database66.users;
        database55.users = userList71;
        database1.users = userList71;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(userList69);
        org.junit.Assert.assertNotNull(userList70);
        org.junit.Assert.assertNotNull(userList71);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        database1.update("hi!");
        database.Database database29 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList30 = database29.users;
        java.util.ArrayList<user.User> userList31 = database29.users;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        java.util.ArrayList<user.User> userList35 = database33.users;
        database.Database database37 = database.Database.getInstance("hi!");
        user.User[] userArray38 = new user.User[] {};
        java.util.ArrayList<user.User> userList39 = new java.util.ArrayList<user.User>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<user.User>) userList39, userArray38);
        database37.users = userList39;
        database33.users = userList39;
        database29.users = userList39;
        java.util.ArrayList<user.User> userList44 = database29.users;
        database1.users = userList44;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userArray38);
        org.junit.Assert.assertArrayEquals(userArray38, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(userList44);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database22.users = userList26;
        java.util.ArrayList<user.User> userList28 = database22.users;
        java.util.ArrayList<user.User> userList29 = database22.users;
        database22.load("hi!");
        java.util.ArrayList<user.User> userList32 = database22.users;
        database1.users = userList32;
        java.util.ArrayList<user.User> userList34 = database1.users;
        database.Database database36 = database.Database.getInstance("hi!");
        user.User[] userArray37 = new user.User[] {};
        java.util.ArrayList<user.User> userList38 = new java.util.ArrayList<user.User>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<user.User>) userList38, userArray37);
        database36.users = userList38;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        database.Database database45 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList46 = database45.users;
        database42.users = userList46;
        database36.users = userList46;
        java.util.ArrayList<user.User> userList49 = database36.users;
        database1.users = userList49;
        database.Database database52 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList53 = database52.users;
        database.Database database55 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList56 = database55.users;
        database52.users = userList56;
        java.util.ArrayList<user.User> userList58 = database52.users;
        database52.load("hi!");
        database52.update("hi!");
        database.Database database64 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList65 = database64.users;
        java.util.ArrayList<user.User> userList66 = database64.users;
        database52.users = userList66;
        database52.load("hi!");
        database.Database database71 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList72 = database71.users;
        java.util.ArrayList<user.User> userList73 = database71.users;
        database.Database database75 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList76 = database75.users;
        java.util.ArrayList<user.User> userList77 = database75.users;
        database.Database database79 = database.Database.getInstance("hi!");
        user.User[] userArray80 = new user.User[] {};
        java.util.ArrayList<user.User> userList81 = new java.util.ArrayList<user.User>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<user.User>) userList81, userArray80);
        database79.users = userList81;
        database75.users = userList81;
        database71.users = userList81;
        java.util.ArrayList<user.User> userList86 = database71.users;
        java.util.ArrayList<user.User> userList87 = database71.users;
        java.util.ArrayList<user.User> userList88 = database71.users;
        database52.users = userList88;
        database1.users = userList88;
        java.util.ArrayList<user.User> userList91 = database1.users;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userArray37);
        org.junit.Assert.assertArrayEquals(userArray37, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(database52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(userList66);
        org.junit.Assert.assertNotNull(database71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(userList73);
        org.junit.Assert.assertNotNull(database75);
        org.junit.Assert.assertNotNull(userList76);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(database79);
        org.junit.Assert.assertNotNull(userArray80);
        org.junit.Assert.assertArrayEquals(userArray80, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(userList86);
        org.junit.Assert.assertNotNull(userList87);
        org.junit.Assert.assertNotNull(userList88);
        org.junit.Assert.assertNotNull(userList91);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot24 = databaseSingleton0.getParkingSpot(10);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
        org.junit.Assert.assertNull(parkingSpot24);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        java.util.ArrayList<user.User> userList51 = database1.users;
        java.util.ArrayList<user.User> userList52 = database1.users;
        java.util.ArrayList<user.User> userList53 = database1.users;
        java.util.ArrayList<user.User> userList54 = database1.users;
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList54);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.update("hi!");
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        java.util.ArrayList<user.User> userList17 = database15.users;
        database.Database database19 = database.Database.getInstance("hi!");
        user.User[] userArray20 = new user.User[] {};
        java.util.ArrayList<user.User> userList21 = new java.util.ArrayList<user.User>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<user.User>) userList21, userArray20);
        database19.users = userList21;
        database15.users = userList21;
        database11.users = userList21;
        database1.users = userList21;
        database1.update("hi!");
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userArray20);
        org.junit.Assert.assertArrayEquals(userArray20, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 1);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot(0);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        java.util.ArrayList<user.User> userList28 = database25.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database30.users = userList34;
        database25.users = userList34;
        database.Database database38 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        java.util.ArrayList<user.User> userList44 = database42.users;
        database.Database database46 = database.Database.getInstance("hi!");
        user.User[] userArray47 = new user.User[] {};
        java.util.ArrayList<user.User> userList48 = new java.util.ArrayList<user.User>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<user.User>) userList48, userArray47);
        database46.users = userList48;
        database42.users = userList48;
        database38.users = userList48;
        database25.users = userList48;
        database.Database database55 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList56 = database55.users;
        java.util.ArrayList<user.User> userList57 = database55.users;
        java.util.ArrayList<user.User> userList58 = database55.users;
        database55.load("hi!");
        database.Database database62 = database.Database.getInstance("");
        database.Database database64 = database.Database.getInstance("hi!");
        user.User[] userArray65 = new user.User[] {};
        java.util.ArrayList<user.User> userList66 = new java.util.ArrayList<user.User>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<user.User>) userList66, userArray65);
        database64.users = userList66;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        database64.users = userList71;
        database62.users = userList71;
        database55.users = userList71;
        java.util.ArrayList<user.User> userList75 = database55.users;
        database25.users = userList75;
        database1.users = userList75;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userArray47);
        org.junit.Assert.assertArrayEquals(userArray47, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(database62);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userArray65);
        org.junit.Assert.assertArrayEquals(userArray65, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList75);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        java.util.ArrayList<user.User> userList43 = database36.users;
        database25.users = userList43;
        java.util.ArrayList<user.User> userList45 = database25.users;
        database25.load("hi!");
        database.Database database49 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList50 = database49.users;
        java.util.ArrayList<user.User> userList51 = database49.users;
        database.Database database53 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        java.util.ArrayList<user.User> userList56 = database53.users;
        database.Database database58 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList59 = database58.users;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database58.users = userList62;
        database53.users = userList62;
        database.Database database66 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList67 = database66.users;
        java.util.ArrayList<user.User> userList68 = database66.users;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        java.util.ArrayList<user.User> userList72 = database70.users;
        database.Database database74 = database.Database.getInstance("hi!");
        user.User[] userArray75 = new user.User[] {};
        java.util.ArrayList<user.User> userList76 = new java.util.ArrayList<user.User>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<user.User>) userList76, userArray75);
        database74.users = userList76;
        database70.users = userList76;
        database66.users = userList76;
        database53.users = userList76;
        database.Database database83 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList84 = database83.users;
        database.Database database86 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList87 = database86.users;
        database83.users = userList87;
        database53.users = userList87;
        java.util.ArrayList<user.User> userList90 = database53.users;
        database49.users = userList90;
        database25.users = userList90;
        database1.users = userList90;
        database1.update("hi!");
        database1.update("hi!");
        java.util.ArrayList<user.User> userList98 = null;
        database1.users = userList98;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userArray75);
        org.junit.Assert.assertArrayEquals(userArray75, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(database83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(database86);
        org.junit.Assert.assertNotNull(userList87);
        org.junit.Assert.assertNotNull(userList90);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
// flaky "7) test0798(RegressionTest1)":         database1.update("hi!");
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        database1.users = userList15;
        database.Database database18 = database.Database.getInstance("hi!");
        user.User[] userArray19 = new user.User[] {};
        java.util.ArrayList<user.User> userList20 = new java.util.ArrayList<user.User>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<user.User>) userList20, userArray19);
        database18.users = userList20;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database24.users = userList28;
        database18.users = userList28;
        java.util.ArrayList<user.User> userList31 = null;
        database18.users = userList31;
        database.Database database34 = database.Database.getInstance("hi!");
        user.User[] userArray35 = new user.User[] {};
        java.util.ArrayList<user.User> userList36 = new java.util.ArrayList<user.User>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<user.User>) userList36, userArray35);
        database34.users = userList36;
        database18.users = userList36;
        database1.users = userList36;
        java.util.ArrayList<user.User> userList41 = database1.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        java.util.ArrayList<user.User> userList48 = database43.users;
        database43.update("hi!");
        database43.update("hi!");
        database43.load("hi!");
        database.Database database56 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList57 = database56.users;
        database.Database database59 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList60 = database59.users;
        database56.users = userList60;
        java.util.ArrayList<user.User> userList62 = database56.users;
        java.util.ArrayList<user.User> userList63 = database56.users;
        database56.load("hi!");
        java.util.ArrayList<user.User> userList66 = database56.users;
        database.Database database68 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList69 = database68.users;
        java.util.ArrayList<user.User> userList70 = database68.users;
        java.util.ArrayList<user.User> userList71 = database68.users;
        database68.load("hi!");
        database68.load("hi!");
        java.util.ArrayList<user.User> userList76 = database68.users;
        database56.users = userList76;
        database43.users = userList76;
        database1.users = userList76;
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
// flaky "7) test0798(RegressionTest1)":         org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
// flaky "7) test0798(RegressionTest1)":         org.junit.Assert.assertNotNull(userList5);
// flaky "6) test0798(RegressionTest1)":         org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database13);
// flaky "4) test0798(RegressionTest1)":         org.junit.Assert.assertNotNull(userList14);
// flaky "3) test0798(RegressionTest1)":         org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userArray19);
        org.junit.Assert.assertArrayEquals(userArray19, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userArray35);
        org.junit.Assert.assertArrayEquals(userArray35, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(userList66);
        org.junit.Assert.assertNotNull(database68);
        org.junit.Assert.assertNotNull(userList69);
        org.junit.Assert.assertNotNull(userList70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList76);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database1.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        user.User[] userArray17 = new user.User[] {};
        java.util.ArrayList<user.User> userList18 = new java.util.ArrayList<user.User>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<user.User>) userList18, userArray17);
        database16.users = userList18;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database16.users = userList23;
        database1.users = userList23;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
// flaky "8) test0800(RegressionTest1)":         org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userArray17);
        org.junit.Assert.assertArrayEquals(userArray17, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        java.util.ArrayList<user.User> userList14 = database11.users;
        database11.load("hi!");
        database.Database database18 = database.Database.getInstance("");
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database.Database database26 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList27 = database26.users;
        database20.users = userList27;
        database18.users = userList27;
        database11.users = userList27;
        java.util.ArrayList<user.User> userList31 = database11.users;
        database.Database database33 = database.Database.getInstance("hi!");
        user.User[] userArray34 = new user.User[] {};
        java.util.ArrayList<user.User> userList35 = new java.util.ArrayList<user.User>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<user.User>) userList35, userArray34);
        database33.users = userList35;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database33.users = userList40;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database33.users = userList50;
        java.util.ArrayList<user.User> userList53 = database33.users;
        database11.users = userList53;
        database1.users = userList53;
        java.lang.Class<?> wildcardClass56 = userList53.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userArray34);
        org.junit.Assert.assertArrayEquals(userArray34, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot21 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        database.Database database24 = database.Database.getInstance("hi!");
        user.User[] userArray25 = new user.User[] {};
        java.util.ArrayList<user.User> userList26 = new java.util.ArrayList<user.User>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<user.User>) userList26, userArray25);
        database24.users = userList26;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database30.users = userList34;
        database24.users = userList34;
        java.util.ArrayList<user.User> userList37 = null;
        database24.users = userList37;
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database24.users = userList42;
        database1.users = userList42;
        database.Database database48 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList49 = database48.users;
        java.util.ArrayList<user.User> userList50 = database48.users;
        java.util.ArrayList<user.User> userList51 = database48.users;
        database48.load("hi!");
        database.Database database55 = database.Database.getInstance("");
        database.Database database57 = database.Database.getInstance("hi!");
        user.User[] userArray58 = new user.User[] {};
        java.util.ArrayList<user.User> userList59 = new java.util.ArrayList<user.User>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<user.User>) userList59, userArray58);
        database57.users = userList59;
        database.Database database63 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList64 = database63.users;
        database57.users = userList64;
        database55.users = userList64;
        database48.users = userList64;
        java.util.ArrayList<user.User> userList68 = database48.users;
        database1.users = userList68;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userArray25);
        org.junit.Assert.assertArrayEquals(userArray25, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(database57);
        org.junit.Assert.assertNotNull(userArray58);
        org.junit.Assert.assertArrayEquals(userArray58, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(database63);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList68);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        java.util.ArrayList<user.User> userList16 = database1.users;
        java.util.ArrayList<user.User> userList17 = database1.users;
        database.Database database19 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList20 = database19.users;
        java.util.ArrayList<user.User> userList21 = database19.users;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database23.users = userList29;
        database19.users = userList29;
        java.util.ArrayList<user.User> userList34 = database19.users;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        java.util.ArrayList<user.User> userList43 = database36.users;
        database.Database database45 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList46 = database45.users;
        java.util.ArrayList<user.User> userList47 = database45.users;
        java.util.ArrayList<user.User> userList48 = database45.users;
        database36.users = userList48;
        database19.users = userList48;
        database1.users = userList48;
        database1.update("hi!");
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList48);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList9 = database1.users;
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        java.util.ArrayList<user.User> userList14 = database11.users;
        database11.load("hi!");
        database11.load("hi!");
        java.util.ArrayList<user.User> userList19 = database11.users;
        database1.users = userList19;
        java.util.ArrayList<user.User> userList21 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database1.update("hi!");
        database.Database database7 = database.Database.getInstance("hi!");
        user.User[] userArray8 = new user.User[] {};
        java.util.ArrayList<user.User> userList9 = new java.util.ArrayList<user.User>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<user.User>) userList9, userArray8);
        database7.users = userList9;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database7.users = userList14;
        database.Database database17 = database.Database.getInstance("hi!");
        user.User[] userArray18 = new user.User[] {};
        java.util.ArrayList<user.User> userList19 = new java.util.ArrayList<user.User>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<user.User>) userList19, userArray18);
        database17.users = userList19;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        database17.users = userList24;
        database7.users = userList24;
        java.util.ArrayList<user.User> userList27 = database7.users;
        database7.load("hi!");
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        database7.users = userList35;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        java.util.ArrayList<user.User> userList42 = database39.users;
        database39.load("hi!");
        database.Database database46 = database.Database.getInstance("");
        database.Database database48 = database.Database.getInstance("hi!");
        user.User[] userArray49 = new user.User[] {};
        java.util.ArrayList<user.User> userList50 = new java.util.ArrayList<user.User>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<user.User>) userList50, userArray49);
        database48.users = userList50;
        database.Database database54 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList55 = database54.users;
        database48.users = userList55;
        database46.users = userList55;
        database39.users = userList55;
        java.util.ArrayList<user.User> userList59 = database39.users;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        java.util.ArrayList<user.User> userList63 = database61.users;
        java.util.ArrayList<user.User> userList64 = database61.users;
        java.util.ArrayList<user.User> userList65 = database61.users;
        database.Database database67 = database.Database.getInstance("hi!");
        user.User[] userArray68 = new user.User[] {};
        java.util.ArrayList<user.User> userList69 = new java.util.ArrayList<user.User>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<user.User>) userList69, userArray68);
        database67.users = userList69;
        database61.users = userList69;
        database39.users = userList69;
        database7.users = userList69;
        database.Database database76 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList77 = database76.users;
        database7.users = userList77;
        database1.users = userList77;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList82 = database1.users;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userArray8);
        org.junit.Assert.assertArrayEquals(userArray8, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userArray18);
        org.junit.Assert.assertArrayEquals(userArray18, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userArray49);
        org.junit.Assert.assertArrayEquals(userArray49, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(database54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(database67);
        org.junit.Assert.assertNotNull(userArray68);
        org.junit.Assert.assertArrayEquals(userArray68, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(database76);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(userList82);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        java.util.ArrayList<user.User> userList13 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("hi!");
        user.User[] userArray19 = new user.User[] {};
        java.util.ArrayList<user.User> userList20 = new java.util.ArrayList<user.User>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<user.User>) userList20, userArray19);
        database18.users = userList20;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database18.users = userList25;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database18.users = userList35;
        java.util.ArrayList<user.User> userList38 = database18.users;
        database18.load("hi!");
        database18.load("hi!");
        database18.update("hi!");
        database.Database database46 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList47 = database46.users;
        java.util.ArrayList<user.User> userList48 = database46.users;
        database.Database database50 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList51 = database50.users;
        java.util.ArrayList<user.User> userList52 = database50.users;
        database.Database database54 = database.Database.getInstance("hi!");
        user.User[] userArray55 = new user.User[] {};
        java.util.ArrayList<user.User> userList56 = new java.util.ArrayList<user.User>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<user.User>) userList56, userArray55);
        database54.users = userList56;
        database50.users = userList56;
        database46.users = userList56;
        java.util.ArrayList<user.User> userList61 = database46.users;
        database18.users = userList61;
        database1.users = userList61;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userArray19);
        org.junit.Assert.assertArrayEquals(userArray19, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(database54);
        org.junit.Assert.assertNotNull(userArray55);
        org.junit.Assert.assertArrayEquals(userArray55, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(userList61);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) 1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) ' ');
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList28 = database1.users;
        java.util.ArrayList<user.User> userList29 = database1.users;
        java.util.ArrayList<user.User> userList30 = database1.users;
        java.lang.Class<?> wildcardClass31 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database6.users = userList12;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database.Database database20 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList21 = database20.users;
        database17.users = userList21;
        java.util.ArrayList<user.User> userList23 = database17.users;
        java.util.ArrayList<user.User> userList24 = database17.users;
        database6.users = userList24;
        database6.load("hi!");
        database6.load("hi!");
        database.Database database31 = database.Database.getInstance("hi!");
        user.User[] userArray32 = new user.User[] {};
        java.util.ArrayList<user.User> userList33 = new java.util.ArrayList<user.User>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<user.User>) userList33, userArray32);
        database31.users = userList33;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        database31.users = userList38;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        java.util.ArrayList<user.User> userList43 = database41.users;
        database.Database database45 = database.Database.getInstance("hi!");
        user.User[] userArray46 = new user.User[] {};
        java.util.ArrayList<user.User> userList47 = new java.util.ArrayList<user.User>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<user.User>) userList47, userArray46);
        database45.users = userList47;
        database41.users = userList47;
        database31.users = userList47;
        database6.users = userList47;
        database1.users = userList47;
        java.util.ArrayList<user.User> userList54 = database1.users;
        java.util.ArrayList<user.User> userList55 = database1.users;
        java.util.ArrayList<user.User> userList56 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userArray32);
        org.junit.Assert.assertArrayEquals(userArray32, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userArray46);
        org.junit.Assert.assertArrayEquals(userArray46, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        database.Database database12 = database.Database.getInstance("");
        database.Database database14 = database.Database.getInstance("hi!");
        user.User[] userArray15 = new user.User[] {};
        java.util.ArrayList<user.User> userList16 = new java.util.ArrayList<user.User>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<user.User>) userList16, userArray15);
        database14.users = userList16;
        database.Database database20 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList21 = database20.users;
        database14.users = userList21;
        database12.users = userList21;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database25.users = userList29;
        java.util.ArrayList<user.User> userList31 = database25.users;
        java.util.ArrayList<user.User> userList32 = database25.users;
        database25.load("hi!");
        java.util.ArrayList<user.User> userList35 = database25.users;
        database12.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database38.users = userList42;
        java.util.ArrayList<user.User> userList44 = database38.users;
        database38.load("hi!");
        java.util.ArrayList<user.User> userList47 = database38.users;
        database12.users = userList47;
        database1.users = userList47;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList52 = database1.users;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userArray15);
        org.junit.Assert.assertArrayEquals(userArray15, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList52);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        user.User[] userArray17 = new user.User[] {};
        java.util.ArrayList<user.User> userList18 = new java.util.ArrayList<user.User>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<user.User>) userList18, userArray17);
        database16.users = userList18;
        database12.users = userList18;
        database12.load("hi!");
        java.util.ArrayList<user.User> userList24 = database12.users;
        database1.users = userList24;
        database1.load("hi!");
        database1.load("hi!");
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userArray17);
        org.junit.Assert.assertArrayEquals(userArray17, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(userList24);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList9 = database1.users;
        java.util.ArrayList<user.User> userList10 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        database.Database database12 = database.Database.getInstance("");
        database.Database database14 = database.Database.getInstance("hi!");
        user.User[] userArray15 = new user.User[] {};
        java.util.ArrayList<user.User> userList16 = new java.util.ArrayList<user.User>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<user.User>) userList16, userArray15);
        database14.users = userList16;
        database.Database database20 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList21 = database20.users;
        database14.users = userList21;
        database12.users = userList21;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database25.users = userList29;
        java.util.ArrayList<user.User> userList31 = database25.users;
        java.util.ArrayList<user.User> userList32 = database25.users;
        database25.load("hi!");
        java.util.ArrayList<user.User> userList35 = database25.users;
        database12.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database38.users = userList42;
        java.util.ArrayList<user.User> userList44 = database38.users;
        database38.load("hi!");
        java.util.ArrayList<user.User> userList47 = database38.users;
        database12.users = userList47;
        database1.users = userList47;
        database1.load("hi!");
        database.Database database53 = database.Database.getInstance("hi!");
        user.User[] userArray54 = new user.User[] {};
        java.util.ArrayList<user.User> userList55 = new java.util.ArrayList<user.User>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<user.User>) userList55, userArray54);
        database53.users = userList55;
        database.Database database59 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList60 = database59.users;
        database53.users = userList60;
        database.Database database63 = database.Database.getInstance("hi!");
        user.User[] userArray64 = new user.User[] {};
        java.util.ArrayList<user.User> userList65 = new java.util.ArrayList<user.User>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<user.User>) userList65, userArray64);
        database63.users = userList65;
        database.Database database69 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList70 = database69.users;
        database63.users = userList70;
        database53.users = userList70;
        database1.users = userList70;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userArray15);
        org.junit.Assert.assertArrayEquals(userArray15, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userArray54);
        org.junit.Assert.assertArrayEquals(userArray54, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(database63);
        org.junit.Assert.assertNotNull(userArray64);
        org.junit.Assert.assertArrayEquals(userArray64, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(database69);
        org.junit.Assert.assertNotNull(userList70);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        java.util.ArrayList<user.User> userList51 = database1.users;
        java.util.ArrayList<user.User> userList52 = database1.users;
        java.util.ArrayList<user.User> userList53 = database1.users;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass56 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database15.users = userList22;
        database11.users = userList22;
        database11.load("hi!");
        java.util.ArrayList<user.User> userList27 = database11.users;
        database11.load("hi!");
        java.util.ArrayList<user.User> userList30 = database11.users;
        database1.users = userList30;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        java.util.ArrayList<user.User> userList35 = database33.users;
        java.util.ArrayList<user.User> userList36 = database33.users;
        java.util.ArrayList<user.User> userList37 = database33.users;
        database1.users = userList37;
        database1.update("hi!");
        database.Database database42 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList43 = database42.users;
        java.util.ArrayList<user.User> userList44 = database42.users;
        java.util.ArrayList<user.User> userList45 = database42.users;
        database42.load("hi!");
        database.Database database49 = database.Database.getInstance("");
        database.Database database51 = database.Database.getInstance("hi!");
        user.User[] userArray52 = new user.User[] {};
        java.util.ArrayList<user.User> userList53 = new java.util.ArrayList<user.User>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<user.User>) userList53, userArray52);
        database51.users = userList53;
        database.Database database57 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList58 = database57.users;
        database51.users = userList58;
        database49.users = userList58;
        database42.users = userList58;
        database1.users = userList58;
        java.lang.Class<?> wildcardClass63 = userList58.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(database51);
        org.junit.Assert.assertNotNull(userArray52);
        org.junit.Assert.assertArrayEquals(userArray52, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(database57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database15.users = userList22;
        database11.users = userList22;
        database11.load("hi!");
        java.util.ArrayList<user.User> userList27 = database11.users;
        database11.load("hi!");
        java.util.ArrayList<user.User> userList30 = database11.users;
        database1.users = userList30;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        java.util.ArrayList<user.User> userList35 = database33.users;
        java.util.ArrayList<user.User> userList36 = database33.users;
        java.util.ArrayList<user.User> userList37 = database33.users;
        database1.users = userList37;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        database1.update("hi!");
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        java.util.ArrayList<user.User> userList16 = database13.users;
        database.Database database18 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        java.util.ArrayList<user.User> userList21 = database18.users;
        database18.load("hi!");
        database.Database database25 = database.Database.getInstance("");
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database27.users = userList34;
        database25.users = userList34;
        database18.users = userList34;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        database39.users = userList43;
        java.util.ArrayList<user.User> userList45 = database39.users;
        java.util.ArrayList<user.User> userList46 = database39.users;
        database18.users = userList46;
        database13.users = userList46;
        database1.users = userList46;
        database1.load("hi!");
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        database.Database database56 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList57 = database56.users;
        database53.users = userList57;
        java.util.ArrayList<user.User> userList59 = database53.users;
        java.util.ArrayList<user.User> userList60 = database53.users;
        java.util.ArrayList<user.User> userList61 = database53.users;
        java.util.ArrayList<user.User> userList62 = database53.users;
        database1.users = userList62;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userList62);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList28 = database1.users;
        java.util.ArrayList<user.User> userList29 = database1.users;
        java.util.ArrayList<user.User> userList30 = database1.users;
        database1.load("hi!");
        database.Database database34 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList35 = database34.users;
        java.util.ArrayList<user.User> userList36 = database34.users;
        java.util.ArrayList<user.User> userList37 = database34.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        database39.users = userList43;
        database34.users = userList43;
        database.Database database47 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList48 = database47.users;
        java.util.ArrayList<user.User> userList49 = database47.users;
        database.Database database51 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList52 = database51.users;
        java.util.ArrayList<user.User> userList53 = database51.users;
        database.Database database55 = database.Database.getInstance("hi!");
        user.User[] userArray56 = new user.User[] {};
        java.util.ArrayList<user.User> userList57 = new java.util.ArrayList<user.User>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<user.User>) userList57, userArray56);
        database55.users = userList57;
        database51.users = userList57;
        database47.users = userList57;
        database34.users = userList57;
        database1.users = userList57;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(database51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userArray56);
        org.junit.Assert.assertArrayEquals(userArray56, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) 1);
        java.lang.Class<?> wildcardClass13 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database.Database database18 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        java.util.ArrayList<user.User> userList24 = database22.users;
        database.Database database26 = database.Database.getInstance("hi!");
        user.User[] userArray27 = new user.User[] {};
        java.util.ArrayList<user.User> userList28 = new java.util.ArrayList<user.User>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<user.User>) userList28, userArray27);
        database26.users = userList28;
        database22.users = userList28;
        database18.users = userList28;
        database5.users = userList28;
        database.Database database35 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList36 = database35.users;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database35.users = userList39;
        database5.users = userList39;
        java.util.ArrayList<user.User> userList42 = database5.users;
        database1.users = userList42;
        database.Database database45 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList46 = database45.users;
        java.util.ArrayList<user.User> userList47 = database45.users;
        java.util.ArrayList<user.User> userList48 = database45.users;
        database.Database database50 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList51 = database50.users;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        database50.users = userList54;
        database45.users = userList54;
        java.util.ArrayList<user.User> userList57 = database45.users;
        database1.users = userList57;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList61 = database1.users;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userArray27);
        org.junit.Assert.assertArrayEquals(userArray27, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList61);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        java.lang.Class<?> wildcardClass11 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        database1.load("hi!");
        database.Database database54 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList55 = database54.users;
        database.Database database57 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList58 = database57.users;
        database54.users = userList58;
        java.util.ArrayList<user.User> userList60 = database54.users;
        java.util.ArrayList<user.User> userList61 = database54.users;
        database54.load("hi!");
        user.User[] userArray64 = new user.User[] {};
        java.util.ArrayList<user.User> userList65 = new java.util.ArrayList<user.User>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<user.User>) userList65, userArray64);
        database54.users = userList65;
        database1.users = userList65;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass71 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(database54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(database57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userArray64);
        org.junit.Assert.assertArrayEquals(userArray64, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.util.ArrayList<user.User> userList5 = database1.users;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database.Database database8 = database.Database.getInstance("hi!");
        user.User[] userArray9 = new user.User[] {};
        java.util.ArrayList<user.User> userList10 = new java.util.ArrayList<user.User>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<user.User>) userList10, userArray9);
        database8.users = userList10;
        java.util.ArrayList<user.User> userList13 = database8.users;
        database1.users = userList13;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userArray9);
        org.junit.Assert.assertArrayEquals(userArray9, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(userList13);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database15.users = userList19;
        java.util.ArrayList<user.User> userList21 = database15.users;
        database15.load("hi!");
        database15.update("hi!");
        java.util.ArrayList<user.User> userList26 = database15.users;
        database1.users = userList26;
        java.lang.Class<?> wildcardClass28 = userList26.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) (short) 0);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList9 = database1.users;
        database1.update("hi!");
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        java.util.ArrayList<user.User> userList19 = database13.users;
        java.util.ArrayList<user.User> userList20 = database13.users;
        database1.users = userList20;
        java.util.ArrayList<user.User> userList22 = database1.users;
        java.lang.Class<?> wildcardClass23 = userList22.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 100);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot24 = databaseSingleton0.getParkingSpot((int) '#');
        java.lang.Class<?> wildcardClass25 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
        org.junit.Assert.assertNull(parkingSpot24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database1.load("hi!");
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList23 = database14.users;
        database1.users = userList23;
        java.lang.Class<?> wildcardClass25 = userList23.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        database1.load("hi!");
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database21.users = userList25;
        database15.users = userList25;
        java.util.ArrayList<user.User> userList28 = null;
        database15.users = userList28;
        database.Database database31 = database.Database.getInstance("hi!");
        user.User[] userArray32 = new user.User[] {};
        java.util.ArrayList<user.User> userList33 = new java.util.ArrayList<user.User>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<user.User>) userList33, userArray32);
        database31.users = userList33;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        database31.users = userList38;
        database.Database database41 = database.Database.getInstance("hi!");
        user.User[] userArray42 = new user.User[] {};
        java.util.ArrayList<user.User> userList43 = new java.util.ArrayList<user.User>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<user.User>) userList43, userArray42);
        database41.users = userList43;
        database.Database database47 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList48 = database47.users;
        database41.users = userList48;
        database31.users = userList48;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database15.users = userList51;
        database1.users = userList51;
        java.lang.Class<?> wildcardClass54 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userArray32);
        org.junit.Assert.assertArrayEquals(userArray32, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userArray42);
        org.junit.Assert.assertArrayEquals(userArray42, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(database47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        java.util.ArrayList<user.User> userList9 = database6.users;
        database6.load("hi!");
        database6.load("hi!");
        java.util.ArrayList<user.User> userList14 = database6.users;
        database6.update("hi!");
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database6.users = userList25;
        database1.users = userList25;
        java.lang.Class<?> wildcardClass28 = userList25.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList12 = database1.users;
        java.util.ArrayList<user.User> userList13 = database1.users;
        database.Database database15 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList16 = database15.users;
        java.util.ArrayList<user.User> userList17 = database15.users;
        java.util.ArrayList<user.User> userList18 = database15.users;
        database15.load("hi!");
        database.Database database22 = database.Database.getInstance("");
        database.Database database24 = database.Database.getInstance("hi!");
        user.User[] userArray25 = new user.User[] {};
        java.util.ArrayList<user.User> userList26 = new java.util.ArrayList<user.User>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<user.User>) userList26, userArray25);
        database24.users = userList26;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database24.users = userList31;
        database22.users = userList31;
        database15.users = userList31;
        database15.load("hi!");
        database15.load("hi!");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        java.util.ArrayList<user.User> userList45 = database40.users;
        database40.update("hi!");
        database.Database database49 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList50 = database49.users;
        java.util.ArrayList<user.User> userList51 = database49.users;
        java.util.ArrayList<user.User> userList52 = database49.users;
        database49.load("hi!");
        database.Database database56 = database.Database.getInstance("");
        database.Database database58 = database.Database.getInstance("hi!");
        user.User[] userArray59 = new user.User[] {};
        java.util.ArrayList<user.User> userList60 = new java.util.ArrayList<user.User>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<user.User>) userList60, userArray59);
        database58.users = userList60;
        database.Database database64 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList65 = database64.users;
        database58.users = userList65;
        database56.users = userList65;
        database49.users = userList65;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        database.Database database73 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList74 = database73.users;
        database70.users = userList74;
        java.util.ArrayList<user.User> userList76 = database70.users;
        java.util.ArrayList<user.User> userList77 = database70.users;
        database49.users = userList77;
        database40.users = userList77;
        database.Database database81 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList82 = database81.users;
        database40.users = userList82;
        java.util.ArrayList<user.User> userList84 = database40.users;
        database15.users = userList84;
        database1.users = userList84;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userArray25);
        org.junit.Assert.assertArrayEquals(userArray25, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(userArray59);
        org.junit.Assert.assertArrayEquals(userArray59, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(database73);
        org.junit.Assert.assertNotNull(userList74);
        org.junit.Assert.assertNotNull(userList76);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(database81);
        org.junit.Assert.assertNotNull(userList82);
        org.junit.Assert.assertNotNull(userList84);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        database1.load("hi!");
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database21.users = userList25;
        database15.users = userList25;
        java.util.ArrayList<user.User> userList28 = null;
        database15.users = userList28;
        database.Database database31 = database.Database.getInstance("hi!");
        user.User[] userArray32 = new user.User[] {};
        java.util.ArrayList<user.User> userList33 = new java.util.ArrayList<user.User>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<user.User>) userList33, userArray32);
        database31.users = userList33;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        database31.users = userList38;
        database.Database database41 = database.Database.getInstance("hi!");
        user.User[] userArray42 = new user.User[] {};
        java.util.ArrayList<user.User> userList43 = new java.util.ArrayList<user.User>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<user.User>) userList43, userArray42);
        database41.users = userList43;
        database.Database database47 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList48 = database47.users;
        database41.users = userList48;
        database31.users = userList48;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database15.users = userList51;
        database1.users = userList51;
        database.Database database55 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList56 = database55.users;
        java.util.ArrayList<user.User> userList57 = database55.users;
        java.util.ArrayList<user.User> userList58 = database55.users;
        database55.load("hi!");
        database55.load("hi!");
        java.util.ArrayList<user.User> userList63 = database55.users;
        database55.update("hi!");
        database.Database database67 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList68 = database67.users;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        database67.users = userList71;
        java.util.ArrayList<user.User> userList73 = database67.users;
        java.util.ArrayList<user.User> userList74 = database67.users;
        database55.users = userList74;
        java.util.ArrayList<user.User> userList76 = database55.users;
        database1.users = userList76;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userArray32);
        org.junit.Assert.assertArrayEquals(userArray32, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userArray42);
        org.junit.Assert.assertArrayEquals(userArray42, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(database47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(database67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList73);
        org.junit.Assert.assertNotNull(userList74);
        org.junit.Assert.assertNotNull(userList76);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.update("hi!");
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        java.util.ArrayList<user.User> userList17 = database15.users;
        database.Database database19 = database.Database.getInstance("hi!");
        user.User[] userArray20 = new user.User[] {};
        java.util.ArrayList<user.User> userList21 = new java.util.ArrayList<user.User>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<user.User>) userList21, userArray20);
        database19.users = userList21;
        database15.users = userList21;
        database11.users = userList21;
        database1.users = userList21;
        java.util.ArrayList<user.User> userList27 = database1.users;
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userArray20);
        org.junit.Assert.assertArrayEquals(userArray20, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(userList27);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        java.util.ArrayList<user.User> userList28 = database25.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database30.users = userList34;
        database25.users = userList34;
        database.Database database38 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        java.util.ArrayList<user.User> userList44 = database42.users;
        database.Database database46 = database.Database.getInstance("hi!");
        user.User[] userArray47 = new user.User[] {};
        java.util.ArrayList<user.User> userList48 = new java.util.ArrayList<user.User>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<user.User>) userList48, userArray47);
        database46.users = userList48;
        database42.users = userList48;
        database38.users = userList48;
        database25.users = userList48;
        database.Database database55 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList56 = database55.users;
        java.util.ArrayList<user.User> userList57 = database55.users;
        java.util.ArrayList<user.User> userList58 = database55.users;
        database55.load("hi!");
        database.Database database62 = database.Database.getInstance("");
        database.Database database64 = database.Database.getInstance("hi!");
        user.User[] userArray65 = new user.User[] {};
        java.util.ArrayList<user.User> userList66 = new java.util.ArrayList<user.User>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<user.User>) userList66, userArray65);
        database64.users = userList66;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        database64.users = userList71;
        database62.users = userList71;
        database55.users = userList71;
        java.util.ArrayList<user.User> userList75 = database55.users;
        database25.users = userList75;
        database1.users = userList75;
        database1.update("hi!");
        database.Database database81 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList82 = database81.users;
        java.util.ArrayList<user.User> userList83 = database81.users;
        java.util.ArrayList<user.User> userList84 = database81.users;
        database81.update("hi!");
        java.util.ArrayList<user.User> userList87 = database81.users;
        database1.users = userList87;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userArray47);
        org.junit.Assert.assertArrayEquals(userArray47, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(database62);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userArray65);
        org.junit.Assert.assertArrayEquals(userArray65, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(database81);
        org.junit.Assert.assertNotNull(userList82);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(userList87);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot3 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList14 = null;
        database1.users = userList14;
        database.Database database17 = database.Database.getInstance("hi!");
        user.User[] userArray18 = new user.User[] {};
        java.util.ArrayList<user.User> userList19 = new java.util.ArrayList<user.User>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<user.User>) userList19, userArray18);
        database17.users = userList19;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        database17.users = userList24;
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database27.users = userList34;
        database17.users = userList34;
        java.util.ArrayList<user.User> userList37 = database17.users;
        database1.users = userList37;
        java.util.ArrayList<user.User> userList39 = database1.users;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList42 = database1.users;
        java.lang.Class<?> wildcardClass43 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userArray18);
        org.junit.Assert.assertArrayEquals(userArray18, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass18 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database39.users = userList50;
        database1.users = userList50;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList56 = database1.users;
        java.lang.Class<?> wildcardClass57 = userList56.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot13 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.util.ArrayList<user.User> userList5 = database1.users;
        java.util.ArrayList<user.User> userList6 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList6);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        java.util.ArrayList<user.User> userList13 = database1.users;
        database1.update("hi!");
        database1.update("hi!");
        java.lang.Class<?> wildcardClass18 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database11.users = userList15;
        java.util.ArrayList<user.User> userList17 = database11.users;
        database11.load("hi!");
        database11.update("hi!");
        java.util.ArrayList<user.User> userList22 = database11.users;
        database1.users = userList22;
        database.Database database25 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList30 = database29.users;
        java.util.ArrayList<user.User> userList31 = database29.users;
        database.Database database33 = database.Database.getInstance("hi!");
        user.User[] userArray34 = new user.User[] {};
        java.util.ArrayList<user.User> userList35 = new java.util.ArrayList<user.User>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<user.User>) userList35, userArray34);
        database33.users = userList35;
        database29.users = userList35;
        database25.users = userList35;
        java.util.ArrayList<user.User> userList40 = database25.users;
        database1.users = userList40;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userArray34);
        org.junit.Assert.assertArrayEquals(userArray34, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(userList40);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList9 = database1.users;
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        java.util.ArrayList<user.User> userList14 = database11.users;
        database11.load("hi!");
        database11.load("hi!");
        java.util.ArrayList<user.User> userList19 = database11.users;
        database1.users = userList19;
        java.util.ArrayList<user.User> userList21 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        database.Database database1 = database.Database.getInstance("hi!");
        database.Database database3 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList4 = database3.users;
        java.util.ArrayList<user.User> userList5 = database3.users;
        java.util.ArrayList<user.User> userList6 = database3.users;
        database3.load("hi!");
        database.Database database10 = database.Database.getInstance("");
        database.Database database12 = database.Database.getInstance("hi!");
        user.User[] userArray13 = new user.User[] {};
        java.util.ArrayList<user.User> userList14 = new java.util.ArrayList<user.User>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<user.User>) userList14, userArray13);
        database12.users = userList14;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database12.users = userList19;
        database10.users = userList19;
        database3.users = userList19;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database24.users = userList28;
        java.util.ArrayList<user.User> userList30 = database24.users;
        java.util.ArrayList<user.User> userList31 = database24.users;
        database3.users = userList31;
        database1.users = userList31;
        java.util.ArrayList<user.User> userList34 = database1.users;
        java.util.ArrayList<user.User> userList35 = database1.users;
        java.lang.Class<?> wildcardClass36 = userList35.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userArray13);
        org.junit.Assert.assertArrayEquals(userArray13, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot((-1));
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList13 = database1.users;
        database1.update("hi!");
        database1.update("hi!");
        java.util.ArrayList<user.User> userList18 = database1.users;
        java.lang.Class<?> wildcardClass19 = userList18.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database1.load("hi!");
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database33.users = userList37;
        java.util.ArrayList<user.User> userList39 = database33.users;
        java.util.ArrayList<user.User> userList40 = database33.users;
        database33.load("hi!");
        java.util.ArrayList<user.User> userList43 = database33.users;
        java.util.ArrayList<user.User> userList44 = database33.users;
        database1.users = userList44;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 10);
        java.lang.Class<?> wildcardClass11 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        database.Database database1 = database.Database.getInstance("hi!");
        database.Database database3 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList4 = database3.users;
        java.util.ArrayList<user.User> userList5 = database3.users;
        java.util.ArrayList<user.User> userList6 = database3.users;
        database3.load("hi!");
        database.Database database10 = database.Database.getInstance("");
        database.Database database12 = database.Database.getInstance("hi!");
        user.User[] userArray13 = new user.User[] {};
        java.util.ArrayList<user.User> userList14 = new java.util.ArrayList<user.User>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<user.User>) userList14, userArray13);
        database12.users = userList14;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database12.users = userList19;
        database10.users = userList19;
        database3.users = userList19;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database24.users = userList28;
        java.util.ArrayList<user.User> userList30 = database24.users;
        java.util.ArrayList<user.User> userList31 = database24.users;
        database3.users = userList31;
        database1.users = userList31;
        java.util.ArrayList<user.User> userList34 = database1.users;
        java.lang.Class<?> wildcardClass35 = userList34.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userArray13);
        org.junit.Assert.assertArrayEquals(userArray13, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot(100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass21 = parkingSpot20.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        database.Database database13 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        java.util.ArrayList<user.User> userList16 = database13.users;
        database13.load("hi!");
        database13.load("hi!");
        java.util.ArrayList<user.User> userList21 = database13.users;
        database1.users = userList21;
        database1.load("hi!");
        database1.update("hi!");
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList21);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        java.util.ArrayList<user.User> userList51 = database1.users;
        java.util.ArrayList<user.User> userList52 = database1.users;
        java.util.ArrayList<user.User> userList53 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList53);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList13 = database1.users;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList13);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        database1.update("hi!");
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        database1.users = userList15;
        database.Database database18 = database.Database.getInstance("hi!");
        user.User[] userArray19 = new user.User[] {};
        java.util.ArrayList<user.User> userList20 = new java.util.ArrayList<user.User>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<user.User>) userList20, userArray19);
        database18.users = userList20;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database24.users = userList28;
        database18.users = userList28;
        java.util.ArrayList<user.User> userList31 = null;
        database18.users = userList31;
        database.Database database34 = database.Database.getInstance("hi!");
        user.User[] userArray35 = new user.User[] {};
        java.util.ArrayList<user.User> userList36 = new java.util.ArrayList<user.User>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<user.User>) userList36, userArray35);
        database34.users = userList36;
        database18.users = userList36;
        database1.users = userList36;
        java.util.ArrayList<user.User> userList41 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userArray19);
        org.junit.Assert.assertArrayEquals(userArray19, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userArray35);
        org.junit.Assert.assertArrayEquals(userArray35, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(userList41);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList5 = database4.users;
        java.util.ArrayList<user.User> userList6 = database4.users;
        java.util.ArrayList<user.User> userList7 = database4.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database9.users = userList13;
        database4.users = userList13;
        database.Database database17 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList18 = database17.users;
        java.util.ArrayList<user.User> userList19 = database17.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        user.User[] userArray26 = new user.User[] {};
        java.util.ArrayList<user.User> userList27 = new java.util.ArrayList<user.User>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<user.User>) userList27, userArray26);
        database25.users = userList27;
        database21.users = userList27;
        database17.users = userList27;
        database4.users = userList27;
        database1.users = userList27;
        database1.update("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList38 = database1.users;
        java.lang.Class<?> wildcardClass39 = userList38.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userArray26);
        org.junit.Assert.assertArrayEquals(userArray26, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        java.util.ArrayList<user.User> userList16 = database1.users;
        java.util.ArrayList<user.User> userList17 = database1.users;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList20 = database1.users;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database23.users = userList29;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        database34.users = userList38;
        java.util.ArrayList<user.User> userList40 = database34.users;
        java.util.ArrayList<user.User> userList41 = database34.users;
        database23.users = userList41;
        java.util.ArrayList<user.User> userList43 = database23.users;
        database23.load("hi!");
        database.Database database47 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList48 = database47.users;
        java.util.ArrayList<user.User> userList49 = database47.users;
        database.Database database51 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList52 = database51.users;
        java.util.ArrayList<user.User> userList53 = database51.users;
        java.util.ArrayList<user.User> userList54 = database51.users;
        database.Database database56 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList57 = database56.users;
        database.Database database59 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList60 = database59.users;
        database56.users = userList60;
        database51.users = userList60;
        database.Database database64 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList65 = database64.users;
        java.util.ArrayList<user.User> userList66 = database64.users;
        database.Database database68 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList69 = database68.users;
        java.util.ArrayList<user.User> userList70 = database68.users;
        database.Database database72 = database.Database.getInstance("hi!");
        user.User[] userArray73 = new user.User[] {};
        java.util.ArrayList<user.User> userList74 = new java.util.ArrayList<user.User>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<user.User>) userList74, userArray73);
        database72.users = userList74;
        database68.users = userList74;
        database64.users = userList74;
        database51.users = userList74;
        database.Database database81 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList82 = database81.users;
        database.Database database84 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList85 = database84.users;
        database81.users = userList85;
        database51.users = userList85;
        java.util.ArrayList<user.User> userList88 = database51.users;
        database47.users = userList88;
        database23.users = userList88;
        java.util.ArrayList<user.User> userList91 = database23.users;
        database1.users = userList91;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(database51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(userList66);
        org.junit.Assert.assertNotNull(database68);
        org.junit.Assert.assertNotNull(userList69);
        org.junit.Assert.assertNotNull(userList70);
        org.junit.Assert.assertNotNull(database72);
        org.junit.Assert.assertNotNull(userArray73);
        org.junit.Assert.assertArrayEquals(userArray73, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(database81);
        org.junit.Assert.assertNotNull(userList82);
        org.junit.Assert.assertNotNull(database84);
        org.junit.Assert.assertNotNull(userList85);
        org.junit.Assert.assertNotNull(userList88);
        org.junit.Assert.assertNotNull(userList91);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList28 = database1.users;
        java.util.ArrayList<user.User> userList29 = database1.users;
        java.util.ArrayList<user.User> userList30 = database1.users;
        java.util.ArrayList<user.User> userList31 = database1.users;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database33.users = userList37;
        java.util.ArrayList<user.User> userList39 = database33.users;
        database33.load("hi!");
        java.util.ArrayList<user.User> userList42 = database33.users;
        database.Database database44 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList45 = database44.users;
        java.util.ArrayList<user.User> userList46 = database44.users;
        database.Database database48 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList49 = database48.users;
        java.util.ArrayList<user.User> userList50 = database48.users;
        database.Database database52 = database.Database.getInstance("hi!");
        user.User[] userArray53 = new user.User[] {};
        java.util.ArrayList<user.User> userList54 = new java.util.ArrayList<user.User>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<user.User>) userList54, userArray53);
        database52.users = userList54;
        database48.users = userList54;
        database44.users = userList54;
        database.Database database60 = database.Database.getInstance("hi!");
        user.User[] userArray61 = new user.User[] {};
        java.util.ArrayList<user.User> userList62 = new java.util.ArrayList<user.User>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<user.User>) userList62, userArray61);
        database60.users = userList62;
        database.Database database66 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList67 = database66.users;
        database60.users = userList67;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        java.util.ArrayList<user.User> userList72 = database70.users;
        database.Database database74 = database.Database.getInstance("hi!");
        user.User[] userArray75 = new user.User[] {};
        java.util.ArrayList<user.User> userList76 = new java.util.ArrayList<user.User>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<user.User>) userList76, userArray75);
        database74.users = userList76;
        database70.users = userList76;
        database60.users = userList76;
        database44.users = userList76;
        database33.users = userList76;
        database1.users = userList76;
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database44);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(database52);
        org.junit.Assert.assertNotNull(userArray53);
        org.junit.Assert.assertArrayEquals(userArray53, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(database60);
        org.junit.Assert.assertNotNull(userArray61);
        org.junit.Assert.assertArrayEquals(userArray61, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userArray75);
        org.junit.Assert.assertArrayEquals(userArray75, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList5 = database4.users;
        java.util.ArrayList<user.User> userList6 = database4.users;
        java.util.ArrayList<user.User> userList7 = database4.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database9.users = userList13;
        database4.users = userList13;
        database.Database database17 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList18 = database17.users;
        java.util.ArrayList<user.User> userList19 = database17.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        user.User[] userArray26 = new user.User[] {};
        java.util.ArrayList<user.User> userList27 = new java.util.ArrayList<user.User>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<user.User>) userList27, userArray26);
        database25.users = userList27;
        database21.users = userList27;
        database17.users = userList27;
        database4.users = userList27;
        database1.users = userList27;
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userArray26);
        org.junit.Assert.assertArrayEquals(userArray26, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList14 = null;
        database1.users = userList14;
        database.Database database17 = database.Database.getInstance("hi!");
        user.User[] userArray18 = new user.User[] {};
        java.util.ArrayList<user.User> userList19 = new java.util.ArrayList<user.User>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<user.User>) userList19, userArray18);
        database17.users = userList19;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        database17.users = userList24;
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database27.users = userList34;
        database17.users = userList34;
        java.util.ArrayList<user.User> userList37 = database17.users;
        database1.users = userList37;
        java.util.ArrayList<user.User> userList39 = database1.users;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass42 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userArray18);
        org.junit.Assert.assertArrayEquals(userArray18, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database15.users = userList19;
        java.util.ArrayList<user.User> userList21 = database15.users;
        database15.load("hi!");
        database15.update("hi!");
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database15.users = userList29;
        database1.users = userList29;
        java.lang.Class<?> wildcardClass32 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        java.util.ArrayList<user.User> userList51 = database1.users;
        java.util.ArrayList<user.User> userList52 = database1.users;
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList52);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 0);
        java.lang.Class<?> wildcardClass13 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        java.util.ArrayList<user.User> userList13 = database1.users;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        java.util.ArrayList<user.User> userList21 = database18.users;
        database18.update("hi!");
        database18.update("hi!");
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database.Database database31 = database.Database.getInstance("hi!");
        user.User[] userArray32 = new user.User[] {};
        java.util.ArrayList<user.User> userList33 = new java.util.ArrayList<user.User>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<user.User>) userList33, userArray32);
        database31.users = userList33;
        database27.users = userList33;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database38.users = userList42;
        java.util.ArrayList<user.User> userList44 = database38.users;
        java.util.ArrayList<user.User> userList45 = database38.users;
        database27.users = userList45;
        java.util.ArrayList<user.User> userList47 = database27.users;
        java.util.ArrayList<user.User> userList48 = database27.users;
        database27.update("hi!");
        database27.update("hi!");
        database.Database database54 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList55 = database54.users;
        java.util.ArrayList<user.User> userList56 = database54.users;
        java.util.ArrayList<user.User> userList57 = database54.users;
        database.Database database59 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList60 = database59.users;
        database.Database database62 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList63 = database62.users;
        database59.users = userList63;
        database54.users = userList63;
        database54.update("hi!");
        java.util.ArrayList<user.User> userList68 = database54.users;
        java.util.ArrayList<user.User> userList69 = database54.users;
        java.util.ArrayList<user.User> userList70 = database54.users;
        database54.update("hi!");
        java.util.ArrayList<user.User> userList73 = database54.users;
        java.util.ArrayList<user.User> userList74 = database54.users;
        database27.users = userList74;
        database18.users = userList74;
        database1.users = userList74;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userArray32);
        org.junit.Assert.assertArrayEquals(userArray32, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(database54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(database62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(userList69);
        org.junit.Assert.assertNotNull(userList70);
        org.junit.Assert.assertNotNull(userList73);
        org.junit.Assert.assertNotNull(userList74);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database39.users = userList50;
        database1.users = userList50;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList56 = database1.users;
        database.Database database58 = database.Database.getInstance("");
        database.Database database60 = database.Database.getInstance("hi!");
        user.User[] userArray61 = new user.User[] {};
        java.util.ArrayList<user.User> userList62 = new java.util.ArrayList<user.User>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<user.User>) userList62, userArray61);
        database60.users = userList62;
        database.Database database66 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList67 = database66.users;
        database60.users = userList67;
        database58.users = userList67;
        database.Database database71 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList72 = database71.users;
        database.Database database74 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList75 = database74.users;
        database71.users = userList75;
        java.util.ArrayList<user.User> userList77 = database71.users;
        java.util.ArrayList<user.User> userList78 = database71.users;
        database71.load("hi!");
        java.util.ArrayList<user.User> userList81 = database71.users;
        database58.users = userList81;
        database1.users = userList81;
        java.lang.Class<?> wildcardClass84 = userList81.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(database60);
        org.junit.Assert.assertNotNull(userArray61);
        org.junit.Assert.assertArrayEquals(userArray61, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(database71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(userList78);
        org.junit.Assert.assertNotNull(userList81);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.util.ArrayList<user.User> userList5 = database1.users;
        database.Database database7 = database.Database.getInstance("hi!");
        user.User[] userArray8 = new user.User[] {};
        java.util.ArrayList<user.User> userList9 = new java.util.ArrayList<user.User>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<user.User>) userList9, userArray8);
        database7.users = userList9;
        database1.users = userList9;
        database1.update("hi!");
        database.Database database16 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database.Database database26 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList27 = database26.users;
        database20.users = userList27;
        database16.users = userList27;
        database16.load("hi!");
        java.util.ArrayList<user.User> userList32 = database16.users;
        java.util.ArrayList<user.User> userList33 = database16.users;
        database1.users = userList33;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        java.util.ArrayList<user.User> userList43 = database36.users;
        database36.load("hi!");
        user.User[] userArray46 = new user.User[] {};
        java.util.ArrayList<user.User> userList47 = new java.util.ArrayList<user.User>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<user.User>) userList47, userArray46);
        database36.users = userList47;
        java.util.ArrayList<user.User> userList50 = database36.users;
        database1.users = userList50;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userArray8);
        org.junit.Assert.assertArrayEquals(userArray8, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userArray46);
        org.junit.Assert.assertArrayEquals(userArray46, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(userList50);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        java.util.ArrayList<user.User> userList5 = database1.users;
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList11 = database1.users;
        java.util.ArrayList<user.User> userList12 = database1.users;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass15 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database15.users = userList19;
        java.util.ArrayList<user.User> userList21 = database15.users;
        database15.load("hi!");
        database15.update("hi!");
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database15.users = userList29;
        database1.users = userList29;
        java.util.ArrayList<user.User> userList32 = database1.users;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList17 = database1.users;
        java.util.ArrayList<user.User> userList18 = database1.users;
        database.Database database20 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList21 = database20.users;
        java.util.ArrayList<user.User> userList22 = database20.users;
        database.Database database24 = database.Database.getInstance("hi!");
        user.User[] userArray25 = new user.User[] {};
        java.util.ArrayList<user.User> userList26 = new java.util.ArrayList<user.User>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<user.User>) userList26, userArray25);
        database24.users = userList26;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database24.users = userList31;
        database20.users = userList31;
        database20.load("hi!");
        java.util.ArrayList<user.User> userList36 = database20.users;
        java.util.ArrayList<user.User> userList37 = database20.users;
        database1.users = userList37;
        java.util.ArrayList<user.User> userList39 = database1.users;
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userArray25);
        org.junit.Assert.assertArrayEquals(userArray25, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList39);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database11.users = userList17;
        database1.users = userList17;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database25.users = userList29;
        java.util.ArrayList<user.User> userList31 = database25.users;
        database.Database database33 = database.Database.getInstance("");
        database.Database database35 = database.Database.getInstance("hi!");
        user.User[] userArray36 = new user.User[] {};
        java.util.ArrayList<user.User> userList37 = new java.util.ArrayList<user.User>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<user.User>) userList37, userArray36);
        database35.users = userList37;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database35.users = userList42;
        database33.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database46.users = userList50;
        java.util.ArrayList<user.User> userList52 = database46.users;
        java.util.ArrayList<user.User> userList53 = database46.users;
        database46.load("hi!");
        java.util.ArrayList<user.User> userList56 = database46.users;
        database33.users = userList56;
        database.Database database59 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList60 = database59.users;
        java.util.ArrayList<user.User> userList61 = database59.users;
        java.util.ArrayList<user.User> userList62 = database59.users;
        java.util.ArrayList<user.User> userList63 = database59.users;
        database33.users = userList63;
        database25.users = userList63;
        database.Database database67 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList68 = database67.users;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        database67.users = userList71;
        java.util.ArrayList<user.User> userList73 = database67.users;
        database67.load("hi!");
        user.User[] userArray76 = new user.User[] {};
        java.util.ArrayList<user.User> userList77 = new java.util.ArrayList<user.User>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<user.User>) userList77, userArray76);
        database67.users = userList77;
        database67.update("hi!");
        database67.update("hi!");
        java.util.ArrayList<user.User> userList84 = database67.users;
        database25.users = userList84;
        java.util.ArrayList<user.User> userList86 = database25.users;
        database1.users = userList86;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userArray36);
        org.junit.Assert.assertArrayEquals(userArray36, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(database67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList73);
        org.junit.Assert.assertNotNull(userArray76);
        org.junit.Assert.assertArrayEquals(userArray76, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(userList86);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot24 = databaseSingleton0.getParkingSpot(0);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
        org.junit.Assert.assertNull(parkingSpot24);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) 10);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.update("hi!");
        database.Database database11 = database.Database.getInstance("");
        database.Database database13 = database.Database.getInstance("hi!");
        user.User[] userArray14 = new user.User[] {};
        java.util.ArrayList<user.User> userList15 = new java.util.ArrayList<user.User>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<user.User>) userList15, userArray14);
        database13.users = userList15;
        database.Database database19 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList20 = database19.users;
        database13.users = userList20;
        database11.users = userList20;
        database.Database database24 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList25 = database24.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database24.users = userList28;
        java.util.ArrayList<user.User> userList30 = database24.users;
        java.util.ArrayList<user.User> userList31 = database24.users;
        database24.load("hi!");
        java.util.ArrayList<user.User> userList34 = database24.users;
        database11.users = userList34;
        database1.users = userList34;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database38.users = userList42;
        java.util.ArrayList<user.User> userList44 = database38.users;
        java.util.ArrayList<user.User> userList45 = database38.users;
        java.util.ArrayList<user.User> userList46 = database38.users;
        database38.update("hi!");
        database.Database database50 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList51 = database50.users;
        java.util.ArrayList<user.User> userList52 = database50.users;
        java.util.ArrayList<user.User> userList53 = database50.users;
        database.Database database55 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList56 = database55.users;
        java.util.ArrayList<user.User> userList57 = database55.users;
        java.util.ArrayList<user.User> userList58 = database55.users;
        database55.load("hi!");
        database.Database database62 = database.Database.getInstance("");
        database.Database database64 = database.Database.getInstance("hi!");
        user.User[] userArray65 = new user.User[] {};
        java.util.ArrayList<user.User> userList66 = new java.util.ArrayList<user.User>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<user.User>) userList66, userArray65);
        database64.users = userList66;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        database64.users = userList71;
        database62.users = userList71;
        database55.users = userList71;
        database.Database database76 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList77 = database76.users;
        database.Database database79 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList80 = database79.users;
        database76.users = userList80;
        java.util.ArrayList<user.User> userList82 = database76.users;
        java.util.ArrayList<user.User> userList83 = database76.users;
        database55.users = userList83;
        database50.users = userList83;
        database38.users = userList83;
        database1.users = userList83;
        java.util.ArrayList<user.User> userList88 = database1.users;
        java.lang.Class<?> wildcardClass89 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userArray14);
        org.junit.Assert.assertArrayEquals(userArray14, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(database62);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userArray65);
        org.junit.Assert.assertArrayEquals(userArray65, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(database76);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(database79);
        org.junit.Assert.assertNotNull(userList80);
        org.junit.Assert.assertNotNull(userList82);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(userList88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        java.util.ArrayList<user.User> userList26 = database1.users;
        java.util.ArrayList<user.User> userList27 = database1.users;
        java.lang.Class<?> wildcardClass28 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        java.util.ArrayList<user.User> userList14 = database11.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database27.users = userList31;
        java.util.ArrayList<user.User> userList33 = database27.users;
        java.util.ArrayList<user.User> userList34 = database27.users;
        database16.users = userList34;
        database16.load("hi!");
        database16.load("hi!");
        database.Database database41 = database.Database.getInstance("hi!");
        user.User[] userArray42 = new user.User[] {};
        java.util.ArrayList<user.User> userList43 = new java.util.ArrayList<user.User>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<user.User>) userList43, userArray42);
        database41.users = userList43;
        database.Database database47 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList48 = database47.users;
        database41.users = userList48;
        database.Database database51 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList52 = database51.users;
        java.util.ArrayList<user.User> userList53 = database51.users;
        database.Database database55 = database.Database.getInstance("hi!");
        user.User[] userArray56 = new user.User[] {};
        java.util.ArrayList<user.User> userList57 = new java.util.ArrayList<user.User>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<user.User>) userList57, userArray56);
        database55.users = userList57;
        database51.users = userList57;
        database41.users = userList57;
        database16.users = userList57;
        database11.users = userList57;
        database1.users = userList57;
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userArray42);
        org.junit.Assert.assertArrayEquals(userArray42, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(database47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(database51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userArray56);
        org.junit.Assert.assertArrayEquals(userArray56, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 1);
        java.lang.Class<?> wildcardClass11 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        java.util.ArrayList<user.User> userList43 = database36.users;
        database25.users = userList43;
        java.util.ArrayList<user.User> userList45 = database25.users;
        database25.load("hi!");
        database.Database database49 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList50 = database49.users;
        java.util.ArrayList<user.User> userList51 = database49.users;
        database.Database database53 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        java.util.ArrayList<user.User> userList56 = database53.users;
        database.Database database58 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList59 = database58.users;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database58.users = userList62;
        database53.users = userList62;
        database.Database database66 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList67 = database66.users;
        java.util.ArrayList<user.User> userList68 = database66.users;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        java.util.ArrayList<user.User> userList72 = database70.users;
        database.Database database74 = database.Database.getInstance("hi!");
        user.User[] userArray75 = new user.User[] {};
        java.util.ArrayList<user.User> userList76 = new java.util.ArrayList<user.User>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<user.User>) userList76, userArray75);
        database74.users = userList76;
        database70.users = userList76;
        database66.users = userList76;
        database53.users = userList76;
        database.Database database83 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList84 = database83.users;
        database.Database database86 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList87 = database86.users;
        database83.users = userList87;
        database53.users = userList87;
        java.util.ArrayList<user.User> userList90 = database53.users;
        database49.users = userList90;
        database25.users = userList90;
        database1.users = userList90;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList96 = database1.users;
        java.util.ArrayList<user.User> userList97 = database1.users;
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userArray75);
        org.junit.Assert.assertArrayEquals(userArray75, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(database83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(database86);
        org.junit.Assert.assertNotNull(userList87);
        org.junit.Assert.assertNotNull(userList90);
        org.junit.Assert.assertNotNull(userList96);
        org.junit.Assert.assertNotNull(userList97);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database22.users = userList26;
        java.util.ArrayList<user.User> userList28 = database22.users;
        java.util.ArrayList<user.User> userList29 = database22.users;
        database22.load("hi!");
        java.util.ArrayList<user.User> userList32 = database22.users;
        database1.users = userList32;
        java.util.ArrayList<user.User> userList34 = database1.users;
        java.util.ArrayList<user.User> userList35 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
// flaky "9) test0903(RegressionTest1)":         org.junit.Assert.assertNull(userList2);
// flaky "8) test0903(RegressionTest1)":         org.junit.Assert.assertNull(userList3);
// flaky "8) test0903(RegressionTest1)":         org.junit.Assert.assertNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(userList35);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        database.Database database12 = database.Database.getInstance("");
        database.Database database14 = database.Database.getInstance("hi!");
        user.User[] userArray15 = new user.User[] {};
        java.util.ArrayList<user.User> userList16 = new java.util.ArrayList<user.User>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<user.User>) userList16, userArray15);
        database14.users = userList16;
        database.Database database20 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList21 = database20.users;
        database14.users = userList21;
        database12.users = userList21;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database25.users = userList29;
        java.util.ArrayList<user.User> userList31 = database25.users;
        java.util.ArrayList<user.User> userList32 = database25.users;
        database25.load("hi!");
        java.util.ArrayList<user.User> userList35 = database25.users;
        database12.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database38.users = userList42;
        java.util.ArrayList<user.User> userList44 = database38.users;
        database38.load("hi!");
        java.util.ArrayList<user.User> userList47 = database38.users;
        database12.users = userList47;
        database1.users = userList47;
        database.Database database51 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList52 = database51.users;
        java.util.ArrayList<user.User> userList53 = database51.users;
        database.Database database55 = database.Database.getInstance("hi!");
        user.User[] userArray56 = new user.User[] {};
        java.util.ArrayList<user.User> userList57 = new java.util.ArrayList<user.User>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<user.User>) userList57, userArray56);
        database55.users = userList57;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database55.users = userList62;
        database51.users = userList62;
        database.Database database66 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList67 = database66.users;
        java.util.ArrayList<user.User> userList68 = database66.users;
        database.Database database70 = database.Database.getInstance("hi!");
        user.User[] userArray71 = new user.User[] {};
        java.util.ArrayList<user.User> userList72 = new java.util.ArrayList<user.User>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<user.User>) userList72, userArray71);
        database70.users = userList72;
        database66.users = userList72;
        database.Database database77 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList78 = database77.users;
        database.Database database80 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList81 = database80.users;
        database77.users = userList81;
        java.util.ArrayList<user.User> userList83 = database77.users;
        java.util.ArrayList<user.User> userList84 = database77.users;
        database66.users = userList84;
        database51.users = userList84;
        database1.users = userList84;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass90 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userArray15);
        org.junit.Assert.assertArrayEquals(userArray15, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(database51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userArray56);
        org.junit.Assert.assertArrayEquals(userArray56, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userArray71);
        org.junit.Assert.assertArrayEquals(userArray71, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(database77);
        org.junit.Assert.assertNotNull(userList78);
        org.junit.Assert.assertNotNull(database80);
        org.junit.Assert.assertNotNull(userList81);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database1.load("hi!");
        database1.load("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList17 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(userList17);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) 1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) '#');
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database15.users = userList22;
        database11.users = userList22;
        database11.load("hi!");
        java.util.ArrayList<user.User> userList27 = database11.users;
        database11.load("hi!");
        java.util.ArrayList<user.User> userList30 = database11.users;
        database1.users = userList30;
        database.Database database33 = database.Database.getInstance("hi!");
        user.User[] userArray34 = new user.User[] {};
        java.util.ArrayList<user.User> userList35 = new java.util.ArrayList<user.User>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<user.User>) userList35, userArray34);
        database33.users = userList35;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        database39.users = userList43;
        database33.users = userList43;
        database.Database database47 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList48 = database47.users;
        database.Database database50 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList51 = database50.users;
        database47.users = userList51;
        java.util.ArrayList<user.User> userList53 = database47.users;
        database47.load("hi!");
        database47.update("hi!");
        database.Database database59 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList60 = database59.users;
        java.util.ArrayList<user.User> userList61 = database59.users;
        database47.users = userList61;
        database33.users = userList61;
        database1.users = userList61;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userArray34);
        org.junit.Assert.assertArrayEquals(userArray34, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(userList61);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        database.Database database1 = database.Database.getInstance("hi!");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database.Database database13 = database.Database.getInstance("hi!");
        user.User[] userArray14 = new user.User[] {};
        java.util.ArrayList<user.User> userList15 = new java.util.ArrayList<user.User>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<user.User>) userList15, userArray14);
        database13.users = userList15;
        database.Database database19 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList20 = database19.users;
        database13.users = userList20;
        database3.users = userList20;
        java.util.ArrayList<user.User> userList23 = database3.users;
        database3.load("hi!");
        database3.update("hi!");
        database3.update("hi!");
        java.util.ArrayList<user.User> userList30 = database3.users;
        database1.users = userList30;
        database1.load("hi!");
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userArray14);
        org.junit.Assert.assertArrayEquals(userArray14, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList30);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        database.Database database22 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList23 = database22.users;
        java.util.ArrayList<user.User> userList24 = database22.users;
        database.Database database26 = database.Database.getInstance("hi!");
        user.User[] userArray27 = new user.User[] {};
        java.util.ArrayList<user.User> userList28 = new java.util.ArrayList<user.User>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<user.User>) userList28, userArray27);
        database26.users = userList28;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database26.users = userList33;
        database22.users = userList33;
        database22.load("hi!");
        java.util.ArrayList<user.User> userList38 = database22.users;
        database1.users = userList38;
        java.lang.Class<?> wildcardClass40 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userArray27);
        org.junit.Assert.assertArrayEquals(userArray27, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot11 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList12 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList12);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database22.users = userList26;
        java.util.ArrayList<user.User> userList28 = database22.users;
        java.util.ArrayList<user.User> userList29 = database22.users;
        database1.users = userList29;
        java.lang.Class<?> wildcardClass31 = userList29.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database1.users = userList16;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList4 = database3.users;
        java.util.ArrayList<user.User> userList5 = database3.users;
        database.Database database7 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList8 = database7.users;
        java.util.ArrayList<user.User> userList9 = database7.users;
        java.util.ArrayList<user.User> userList10 = database7.users;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        database7.users = userList16;
        database7.update("hi!");
        java.util.ArrayList<user.User> userList21 = database7.users;
        database3.users = userList21;
        database.Database database24 = database.Database.getInstance("hi!");
        user.User[] userArray25 = new user.User[] {};
        java.util.ArrayList<user.User> userList26 = new java.util.ArrayList<user.User>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<user.User>) userList26, userArray25);
        database24.users = userList26;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database30.users = userList34;
        database24.users = userList34;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database38.users = userList42;
        java.util.ArrayList<user.User> userList44 = database38.users;
        database38.load("hi!");
        database38.update("hi!");
        database.Database database50 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList51 = database50.users;
        java.util.ArrayList<user.User> userList52 = database50.users;
        database38.users = userList52;
        database24.users = userList52;
        java.util.ArrayList<user.User> userList55 = database24.users;
        database3.users = userList55;
        java.util.ArrayList<user.User> userList57 = database3.users;
        database1.users = userList57;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(userArray25);
        org.junit.Assert.assertArrayEquals(userArray25, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList57);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database28.users = userList32;
        database22.users = userList32;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        database36.load("hi!");
        database36.update("hi!");
        database.Database database48 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList49 = database48.users;
        java.util.ArrayList<user.User> userList50 = database48.users;
        database36.users = userList50;
        database22.users = userList50;
        java.util.ArrayList<user.User> userList53 = database22.users;
        database1.users = userList53;
        java.util.ArrayList<user.User> userList55 = database1.users;
        database.Database database57 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList58 = database57.users;
        java.util.ArrayList<user.User> userList59 = database57.users;
        java.util.ArrayList<user.User> userList60 = database57.users;
        java.util.ArrayList<user.User> userList61 = database57.users;
        java.util.ArrayList<user.User> userList62 = database57.users;
        database1.users = userList62;
        java.util.ArrayList<user.User> userList64 = database1.users;
        user.User[] userArray65 = new user.User[] {};
        java.util.ArrayList<user.User> userList66 = new java.util.ArrayList<user.User>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<user.User>) userList66, userArray65);
        database1.users = userList66;
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(database57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userArray65);
        org.junit.Assert.assertArrayEquals(userArray65, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        database1.load("hi!");
        database.Database database17 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList18 = database17.users;
        java.util.ArrayList<user.User> userList19 = database17.users;
        java.util.ArrayList<user.User> userList20 = database17.users;
        database17.load("hi!");
        database.Database database24 = database.Database.getInstance("");
        database.Database database26 = database.Database.getInstance("hi!");
        user.User[] userArray27 = new user.User[] {};
        java.util.ArrayList<user.User> userList28 = new java.util.ArrayList<user.User>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<user.User>) userList28, userArray27);
        database26.users = userList28;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database26.users = userList33;
        database24.users = userList33;
        database17.users = userList33;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database38.users = userList42;
        java.util.ArrayList<user.User> userList44 = database38.users;
        java.util.ArrayList<user.User> userList45 = database38.users;
        database38.load("hi!");
        java.util.ArrayList<user.User> userList48 = database38.users;
        database17.users = userList48;
        database.Database database51 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList52 = database51.users;
        java.util.ArrayList<user.User> userList53 = database51.users;
        java.util.ArrayList<user.User> userList54 = database51.users;
        database51.load("hi!");
        database.Database database58 = database.Database.getInstance("");
        database.Database database60 = database.Database.getInstance("hi!");
        user.User[] userArray61 = new user.User[] {};
        java.util.ArrayList<user.User> userList62 = new java.util.ArrayList<user.User>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<user.User>) userList62, userArray61);
        database60.users = userList62;
        database.Database database66 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList67 = database66.users;
        database60.users = userList67;
        database58.users = userList67;
        database51.users = userList67;
        database.Database database72 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList73 = database72.users;
        database.Database database75 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList76 = database75.users;
        database72.users = userList76;
        java.util.ArrayList<user.User> userList78 = database72.users;
        java.util.ArrayList<user.User> userList79 = database72.users;
        database72.load("hi!");
        java.util.ArrayList<user.User> userList82 = database72.users;
        database51.users = userList82;
        java.util.ArrayList<user.User> userList84 = database51.users;
        database17.users = userList84;
        database1.users = userList84;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database24);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userArray27);
        org.junit.Assert.assertArrayEquals(userArray27, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(database51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(database60);
        org.junit.Assert.assertNotNull(userArray61);
        org.junit.Assert.assertArrayEquals(userArray61, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(database72);
        org.junit.Assert.assertNotNull(userList73);
        org.junit.Assert.assertNotNull(database75);
        org.junit.Assert.assertNotNull(userList76);
        org.junit.Assert.assertNotNull(userList78);
        org.junit.Assert.assertNotNull(userList79);
        org.junit.Assert.assertNotNull(userList82);
        org.junit.Assert.assertNotNull(userList84);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database15.users = userList19;
        java.util.ArrayList<user.User> userList21 = database15.users;
        database15.load("hi!");
        database15.update("hi!");
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        database15.users = userList29;
        database1.users = userList29;
        java.lang.Class<?> wildcardClass32 = userList29.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database15.users = userList22;
        database11.users = userList22;
        database11.load("hi!");
        java.util.ArrayList<user.User> userList27 = database11.users;
        database11.load("hi!");
        java.util.ArrayList<user.User> userList30 = database11.users;
        database1.users = userList30;
        java.lang.Class<?> wildcardClass32 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        database1.update("hi!");
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        java.util.ArrayList<user.User> userList16 = database13.users;
        database.Database database18 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        java.util.ArrayList<user.User> userList21 = database18.users;
        database18.load("hi!");
        database.Database database25 = database.Database.getInstance("");
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database27.users = userList34;
        database25.users = userList34;
        database18.users = userList34;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        database39.users = userList43;
        java.util.ArrayList<user.User> userList45 = database39.users;
        java.util.ArrayList<user.User> userList46 = database39.users;
        database18.users = userList46;
        database13.users = userList46;
        database1.users = userList46;
        database1.load("hi!");
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        database.Database database56 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList57 = database56.users;
        database53.users = userList57;
        java.util.ArrayList<user.User> userList59 = database53.users;
        java.util.ArrayList<user.User> userList60 = database53.users;
        database1.users = userList60;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(userList60);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database39.users = userList50;
        database1.users = userList50;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList56 = database1.users;
        database.Database database58 = database.Database.getInstance("");
        database.Database database60 = database.Database.getInstance("hi!");
        user.User[] userArray61 = new user.User[] {};
        java.util.ArrayList<user.User> userList62 = new java.util.ArrayList<user.User>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<user.User>) userList62, userArray61);
        database60.users = userList62;
        database.Database database66 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList67 = database66.users;
        database60.users = userList67;
        database58.users = userList67;
        database.Database database71 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList72 = database71.users;
        database.Database database74 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList75 = database74.users;
        database71.users = userList75;
        java.util.ArrayList<user.User> userList77 = database71.users;
        java.util.ArrayList<user.User> userList78 = database71.users;
        database71.load("hi!");
        java.util.ArrayList<user.User> userList81 = database71.users;
        database58.users = userList81;
        database1.users = userList81;
        database.Database database85 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList86 = database85.users;
        java.util.ArrayList<user.User> userList87 = database85.users;
        java.util.ArrayList<user.User> userList88 = database85.users;
        database85.update("hi!");
        java.util.ArrayList<user.User> userList91 = database85.users;
        database1.users = userList91;
        java.lang.Class<?> wildcardClass93 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(database60);
        org.junit.Assert.assertNotNull(userArray61);
        org.junit.Assert.assertArrayEquals(userArray61, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(database71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(userList78);
        org.junit.Assert.assertNotNull(userList81);
        org.junit.Assert.assertNotNull(database85);
        org.junit.Assert.assertNotNull(userList86);
        org.junit.Assert.assertNotNull(userList87);
        org.junit.Assert.assertNotNull(userList88);
        org.junit.Assert.assertNotNull(userList91);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        java.util.ArrayList<user.User> userList9 = database6.users;
        database6.load("hi!");
        database.Database database13 = database.Database.getInstance("");
        database.Database database15 = database.Database.getInstance("hi!");
        user.User[] userArray16 = new user.User[] {};
        java.util.ArrayList<user.User> userList17 = new java.util.ArrayList<user.User>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<user.User>) userList17, userArray16);
        database15.users = userList17;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database15.users = userList22;
        database13.users = userList22;
        database6.users = userList22;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database27.users = userList31;
        java.util.ArrayList<user.User> userList33 = database27.users;
        java.util.ArrayList<user.User> userList34 = database27.users;
        database6.users = userList34;
        database1.users = userList34;
        database1.update("hi!");
        database1.update("hi!");
        java.util.ArrayList<user.User> userList41 = database1.users;
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userArray16);
        org.junit.Assert.assertArrayEquals(userArray16, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(userList41);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        java.util.ArrayList<user.User> userList30 = database1.users;
        java.util.ArrayList<user.User> userList31 = database1.users;
        java.util.ArrayList<user.User> userList32 = database1.users;
        java.util.ArrayList<user.User> userList33 = database1.users;
        java.lang.Class<?> wildcardClass34 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        database.Database database12 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database12.users = userList22;
        database.Database database28 = database.Database.getInstance("hi!");
        user.User[] userArray29 = new user.User[] {};
        java.util.ArrayList<user.User> userList30 = new java.util.ArrayList<user.User>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<user.User>) userList30, userArray29);
        database28.users = userList30;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database28.users = userList35;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database38.users = userList44;
        database28.users = userList44;
        database12.users = userList44;
        database1.users = userList44;
        java.lang.Class<?> wildcardClass51 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userArray29);
        org.junit.Assert.assertArrayEquals(userArray29, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(0);
        java.lang.Class<?> wildcardClass19 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot23 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(10);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = null;
        database1.users = userList10;
        database1.load("hi!");
        database1.load("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList32 = database31.users;
        java.util.ArrayList<user.User> userList33 = database31.users;
        java.util.ArrayList<user.User> userList34 = database31.users;
        database31.load("hi!");
        database.Database database38 = database.Database.getInstance("");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database38.users = userList47;
        database31.users = userList47;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        java.util.ArrayList<user.User> userList56 = database53.users;
        java.util.ArrayList<user.User> userList57 = database53.users;
        database.Database database59 = database.Database.getInstance("hi!");
        user.User[] userArray60 = new user.User[] {};
        java.util.ArrayList<user.User> userList61 = new java.util.ArrayList<user.User>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<user.User>) userList61, userArray60);
        database59.users = userList61;
        database53.users = userList61;
        database31.users = userList61;
        java.util.ArrayList<user.User> userList66 = database31.users;
        database1.users = userList66;
        database.Database database69 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList70 = database69.users;
        java.util.ArrayList<user.User> userList71 = database69.users;
        java.util.ArrayList<user.User> userList72 = database69.users;
        java.util.ArrayList<user.User> userList73 = database69.users;
        database.Database database75 = database.Database.getInstance("hi!");
        user.User[] userArray76 = new user.User[] {};
        java.util.ArrayList<user.User> userList77 = new java.util.ArrayList<user.User>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<user.User>) userList77, userArray76);
        database75.users = userList77;
        database69.users = userList77;
        database1.users = userList77;
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
// flaky "10) test0932(RegressionTest1)":         org.junit.Assert.assertNotNull(userList2);
// flaky "9) test0932(RegressionTest1)":         org.junit.Assert.assertNotNull(userList3);
// flaky "9) test0932(RegressionTest1)":         org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
// flaky "7) test0932(RegressionTest1)":         org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
// flaky "5) test0932(RegressionTest1)":         org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
// flaky "4) test0932(RegressionTest1)":         org.junit.Assert.assertNotNull(userList15);
// flaky "2) test0932(RegressionTest1)":         org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
// flaky "2) test0932(RegressionTest1)":         org.junit.Assert.assertNotNull(userList19);
// flaky "1) test0932(RegressionTest1)":         org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userArray60);
        org.junit.Assert.assertArrayEquals(userArray60, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(userList66);
        org.junit.Assert.assertNotNull(database69);
        org.junit.Assert.assertNotNull(userList70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(userList73);
        org.junit.Assert.assertNotNull(database75);
        org.junit.Assert.assertNotNull(userArray76);
        org.junit.Assert.assertArrayEquals(userArray76, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) 1);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) '#');
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.update("hi!");
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        java.util.ArrayList<user.User> userList17 = database15.users;
        database.Database database19 = database.Database.getInstance("hi!");
        user.User[] userArray20 = new user.User[] {};
        java.util.ArrayList<user.User> userList21 = new java.util.ArrayList<user.User>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<user.User>) userList21, userArray20);
        database19.users = userList21;
        database15.users = userList21;
        database11.users = userList21;
        database1.users = userList21;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList29 = database1.users;
        java.util.ArrayList<user.User> userList30 = database1.users;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userArray20);
        org.junit.Assert.assertArrayEquals(userArray20, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        database18.users = userList30;
        database1.users = userList30;
        database.Database database34 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList35 = database34.users;
        java.util.ArrayList<user.User> userList36 = database34.users;
        java.util.ArrayList<user.User> userList37 = database34.users;
        database34.load("hi!");
        database.Database database41 = database.Database.getInstance("");
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database41.users = userList50;
        database34.users = userList50;
        database1.users = userList50;
        database.Database database56 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList57 = database56.users;
        java.util.ArrayList<user.User> userList58 = database56.users;
        java.util.ArrayList<user.User> userList59 = database56.users;
        database56.load("hi!");
        database.Database database63 = database.Database.getInstance("");
        database.Database database65 = database.Database.getInstance("hi!");
        user.User[] userArray66 = new user.User[] {};
        java.util.ArrayList<user.User> userList67 = new java.util.ArrayList<user.User>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<user.User>) userList67, userArray66);
        database65.users = userList67;
        database.Database database71 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList72 = database71.users;
        database65.users = userList72;
        database63.users = userList72;
        database56.users = userList72;
        database.Database database77 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList78 = database77.users;
        database.Database database80 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList81 = database80.users;
        database77.users = userList81;
        java.util.ArrayList<user.User> userList83 = database77.users;
        java.util.ArrayList<user.User> userList84 = database77.users;
        database77.load("hi!");
        java.util.ArrayList<user.User> userList87 = database77.users;
        database56.users = userList87;
        database1.users = userList87;
        java.util.ArrayList<user.User> userList90 = database1.users;
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database63);
        org.junit.Assert.assertNotNull(database65);
        org.junit.Assert.assertNotNull(userArray66);
        org.junit.Assert.assertArrayEquals(userArray66, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(database71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database77);
        org.junit.Assert.assertNotNull(userList78);
        org.junit.Assert.assertNotNull(database80);
        org.junit.Assert.assertNotNull(userList81);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(userList87);
        org.junit.Assert.assertNotNull(userList90);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database22.users = userList29;
        database.Database database32 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList33 = database32.users;
        java.util.ArrayList<user.User> userList34 = database32.users;
        database.Database database36 = database.Database.getInstance("hi!");
        user.User[] userArray37 = new user.User[] {};
        java.util.ArrayList<user.User> userList38 = new java.util.ArrayList<user.User>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<user.User>) userList38, userArray37);
        database36.users = userList38;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        database36.users = userList43;
        database32.users = userList43;
        database32.load("hi!");
        java.util.ArrayList<user.User> userList48 = database32.users;
        database32.load("hi!");
        java.util.ArrayList<user.User> userList51 = database32.users;
        database22.users = userList51;
        database1.users = userList51;
        database.Database database55 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList56 = database55.users;
        database.Database database58 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList59 = database58.users;
        database55.users = userList59;
        java.util.ArrayList<user.User> userList61 = database55.users;
        java.util.ArrayList<user.User> userList62 = database55.users;
        database55.load("hi!");
        user.User[] userArray65 = new user.User[] {};
        java.util.ArrayList<user.User> userList66 = new java.util.ArrayList<user.User>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<user.User>) userList66, userArray65);
        database55.users = userList66;
        java.util.ArrayList<user.User> userList69 = database55.users;
        database55.load("hi!");
        java.util.ArrayList<user.User> userList72 = database55.users;
        database1.users = userList72;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userArray37);
        org.junit.Assert.assertArrayEquals(userArray37, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userArray65);
        org.junit.Assert.assertArrayEquals(userArray65, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(userList69);
        org.junit.Assert.assertNotNull(userList72);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        java.util.ArrayList<user.User> userList18 = database16.users;
        database.Database database20 = database.Database.getInstance("hi!");
        user.User[] userArray21 = new user.User[] {};
        java.util.ArrayList<user.User> userList22 = new java.util.ArrayList<user.User>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<user.User>) userList22, userArray21);
        database20.users = userList22;
        database16.users = userList22;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database27.users = userList31;
        java.util.ArrayList<user.User> userList33 = database27.users;
        java.util.ArrayList<user.User> userList34 = database27.users;
        database16.users = userList34;
        database1.users = userList34;
        java.lang.Class<?> wildcardClass37 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(database20);
        org.junit.Assert.assertNotNull(userArray21);
        org.junit.Assert.assertArrayEquals(userArray21, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList14 = null;
        database1.users = userList14;
        java.util.ArrayList<user.User> userList16 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.iterator()\" because \"this.users\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNull(userList16);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList10 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
// flaky "11) test0942(RegressionTest1)":         org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
// flaky "10) test0942(RegressionTest1)":         org.junit.Assert.assertNotNull(userList5);
// flaky "10) test0942(RegressionTest1)":         org.junit.Assert.assertNotNull(userList7);
// flaky "8) test0942(RegressionTest1)":         org.junit.Assert.assertNotNull(userList10);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        database.Database database21 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList22 = database21.users;
        database18.users = userList22;
        java.util.ArrayList<user.User> userList24 = database18.users;
        java.util.ArrayList<user.User> userList25 = database18.users;
        database.Database database27 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList28 = database27.users;
        java.util.ArrayList<user.User> userList29 = database27.users;
        java.util.ArrayList<user.User> userList30 = database27.users;
        database18.users = userList30;
        database1.users = userList30;
        database1.update("hi!");
        database1.load("hi!");
        database.Database database38 = database.Database.getInstance("hi!");
        user.User[] userArray39 = new user.User[] {};
        java.util.ArrayList<user.User> userList40 = new java.util.ArrayList<user.User>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<user.User>) userList40, userArray39);
        database38.users = userList40;
        java.util.ArrayList<user.User> userList43 = database38.users;
        database38.update("hi!");
        java.util.ArrayList<user.User> userList46 = database38.users;
        database1.users = userList46;
        database.Database database49 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList50 = database49.users;
        java.util.ArrayList<user.User> userList51 = database49.users;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        database.Database database57 = database.Database.getInstance("hi!");
        user.User[] userArray58 = new user.User[] {};
        java.util.ArrayList<user.User> userList59 = new java.util.ArrayList<user.User>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<user.User>) userList59, userArray58);
        database57.users = userList59;
        database53.users = userList59;
        database49.users = userList59;
        java.util.ArrayList<user.User> userList64 = database49.users;
        java.util.ArrayList<user.User> userList65 = database49.users;
        database1.users = userList65;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
// flaky "12) test0944(RegressionTest1)":         org.junit.Assert.assertNotNull(userList2);
// flaky "11) test0944(RegressionTest1)":         org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
// flaky "11) test0944(RegressionTest1)":         org.junit.Assert.assertNotNull(userList6);
// flaky "9) test0944(RegressionTest1)":         org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userArray39);
        org.junit.Assert.assertArrayEquals(userArray39, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(database57);
        org.junit.Assert.assertNotNull(userArray58);
        org.junit.Assert.assertArrayEquals(userArray58, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(userList64);
        org.junit.Assert.assertNotNull(userList65);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList32 = database31.users;
        java.util.ArrayList<user.User> userList33 = database31.users;
        java.util.ArrayList<user.User> userList34 = database31.users;
        database31.load("hi!");
        database.Database database38 = database.Database.getInstance("");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database38.users = userList47;
        database31.users = userList47;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database1.users = userList51;
        java.util.ArrayList<user.User> userList53 = database1.users;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList56 = database1.users;
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList56);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.update("hi!");
        database1.load("hi!");
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database33.users = userList37;
        database27.users = userList37;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database.Database database44 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList45 = database44.users;
        database41.users = userList45;
        java.util.ArrayList<user.User> userList47 = database41.users;
        database41.load("hi!");
        database41.update("hi!");
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        database41.users = userList55;
        database27.users = userList55;
        java.util.ArrayList<user.User> userList58 = database27.users;
        java.util.ArrayList<user.User> userList59 = database27.users;
        database1.users = userList59;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database44);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userList59);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        java.util.ArrayList<user.User> userList15 = database1.users;
        java.util.ArrayList<user.User> userList16 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database25.users = userList29;
        database1.users = userList29;
        database.Database database33 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList34 = database33.users;
        java.util.ArrayList<user.User> userList35 = database33.users;
        java.util.ArrayList<user.User> userList36 = database33.users;
        database33.load("hi!");
        database.Database database40 = database.Database.getInstance("");
        database.Database database42 = database.Database.getInstance("hi!");
        user.User[] userArray43 = new user.User[] {};
        java.util.ArrayList<user.User> userList44 = new java.util.ArrayList<user.User>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<user.User>) userList44, userArray43);
        database42.users = userList44;
        database.Database database48 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList49 = database48.users;
        database42.users = userList49;
        database40.users = userList49;
        database33.users = userList49;
        java.util.ArrayList<user.User> userList53 = database33.users;
        database.Database database55 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList56 = database55.users;
        java.util.ArrayList<user.User> userList57 = database55.users;
        java.util.ArrayList<user.User> userList58 = database55.users;
        java.util.ArrayList<user.User> userList59 = database55.users;
        database.Database database61 = database.Database.getInstance("hi!");
        user.User[] userArray62 = new user.User[] {};
        java.util.ArrayList<user.User> userList63 = new java.util.ArrayList<user.User>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<user.User>) userList63, userArray62);
        database61.users = userList63;
        database55.users = userList63;
        database33.users = userList63;
        database1.users = userList63;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        database1.users = userList71;
        java.util.ArrayList<user.User> userList73 = database1.users;
        java.lang.Class<?> wildcardClass74 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userArray43);
        org.junit.Assert.assertArrayEquals(userArray43, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(database48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userArray62);
        org.junit.Assert.assertArrayEquals(userArray62, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        java.util.ArrayList<user.User> userList28 = database25.users;
        database.Database database30 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList31 = database30.users;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database30.users = userList34;
        database25.users = userList34;
        database.Database database38 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList39 = database38.users;
        java.util.ArrayList<user.User> userList40 = database38.users;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        java.util.ArrayList<user.User> userList44 = database42.users;
        database.Database database46 = database.Database.getInstance("hi!");
        user.User[] userArray47 = new user.User[] {};
        java.util.ArrayList<user.User> userList48 = new java.util.ArrayList<user.User>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<user.User>) userList48, userArray47);
        database46.users = userList48;
        database42.users = userList48;
        database38.users = userList48;
        database25.users = userList48;
        database.Database database55 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList56 = database55.users;
        java.util.ArrayList<user.User> userList57 = database55.users;
        java.util.ArrayList<user.User> userList58 = database55.users;
        database55.load("hi!");
        database.Database database62 = database.Database.getInstance("");
        database.Database database64 = database.Database.getInstance("hi!");
        user.User[] userArray65 = new user.User[] {};
        java.util.ArrayList<user.User> userList66 = new java.util.ArrayList<user.User>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<user.User>) userList66, userArray65);
        database64.users = userList66;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        database64.users = userList71;
        database62.users = userList71;
        database55.users = userList71;
        java.util.ArrayList<user.User> userList75 = database55.users;
        database25.users = userList75;
        database1.users = userList75;
        database1.update("hi!");
        java.lang.Class<?> wildcardClass80 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userArray47);
        org.junit.Assert.assertArrayEquals(userArray47, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(database62);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userArray65);
        org.junit.Assert.assertArrayEquals(userArray65, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        java.util.ArrayList<user.User> userList38 = database1.users;
        database.Database database40 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList41 = database40.users;
        java.util.ArrayList<user.User> userList42 = database40.users;
        java.util.ArrayList<user.User> userList43 = database40.users;
        database40.load("hi!");
        database.Database database47 = database.Database.getInstance("");
        database.Database database49 = database.Database.getInstance("hi!");
        user.User[] userArray50 = new user.User[] {};
        java.util.ArrayList<user.User> userList51 = new java.util.ArrayList<user.User>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<user.User>) userList51, userArray50);
        database49.users = userList51;
        database.Database database55 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList56 = database55.users;
        database49.users = userList56;
        database47.users = userList56;
        database40.users = userList56;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database.Database database64 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList65 = database64.users;
        database61.users = userList65;
        java.util.ArrayList<user.User> userList67 = database61.users;
        java.util.ArrayList<user.User> userList68 = database61.users;
        database61.load("hi!");
        java.util.ArrayList<user.User> userList71 = database61.users;
        database40.users = userList71;
        database.Database database74 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList75 = database74.users;
        java.util.ArrayList<user.User> userList76 = database74.users;
        java.util.ArrayList<user.User> userList77 = database74.users;
        database40.users = userList77;
        database1.users = userList77;
        java.lang.Class<?> wildcardClass80 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database47);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userArray50);
        org.junit.Assert.assertArrayEquals(userArray50, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userList65);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(userList76);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        java.util.ArrayList<user.User> userList26 = database1.users;
        java.util.ArrayList<user.User> userList27 = database1.users;
        database.Database database29 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList30 = database29.users;
        java.util.ArrayList<user.User> userList31 = database29.users;
        database.Database database33 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList34 = database33.users;
        java.util.ArrayList<user.User> userList35 = database33.users;
        java.util.ArrayList<user.User> userList36 = database33.users;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        database38.users = userList42;
        database33.users = userList42;
        database33.update("hi!");
        java.util.ArrayList<user.User> userList47 = database33.users;
        database29.users = userList47;
        database1.users = userList47;
        java.util.ArrayList<user.User> userList50 = database1.users;
        database.Database database52 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList53 = database52.users;
        database.Database database55 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList56 = database55.users;
        database52.users = userList56;
        java.util.ArrayList<user.User> userList58 = database52.users;
        database52.load("hi!");
        user.User[] userArray61 = new user.User[] {};
        java.util.ArrayList<user.User> userList62 = new java.util.ArrayList<user.User>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<user.User>) userList62, userArray61);
        database52.users = userList62;
        database52.update("hi!");
        database52.update("hi!");
        java.util.ArrayList<user.User> userList69 = database52.users;
        java.util.ArrayList<user.User> userList70 = database52.users;
        database52.update("hi!");
        database.Database database74 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList75 = database74.users;
        java.util.ArrayList<user.User> userList76 = database74.users;
        database.Database database78 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList79 = database78.users;
        java.util.ArrayList<user.User> userList80 = database78.users;
        database.Database database82 = database.Database.getInstance("hi!");
        user.User[] userArray83 = new user.User[] {};
        java.util.ArrayList<user.User> userList84 = new java.util.ArrayList<user.User>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<user.User>) userList84, userArray83);
        database82.users = userList84;
        database78.users = userList84;
        database74.users = userList84;
        database74.update("hi!");
        java.util.ArrayList<user.User> userList91 = database74.users;
        database52.users = userList91;
        database1.users = userList91;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(database52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userArray61);
        org.junit.Assert.assertArrayEquals(userArray61, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(userList69);
        org.junit.Assert.assertNotNull(userList70);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(userList76);
        org.junit.Assert.assertNotNull(database78);
        org.junit.Assert.assertNotNull(userList79);
        org.junit.Assert.assertNotNull(userList80);
        org.junit.Assert.assertNotNull(database82);
        org.junit.Assert.assertNotNull(userArray83);
        org.junit.Assert.assertArrayEquals(userArray83, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(userList91);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList28 = database1.users;
        java.util.ArrayList<user.User> userList29 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot24 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot26 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot27 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
        org.junit.Assert.assertNull(parkingSpot24);
        org.junit.Assert.assertNull(parkingSpot26);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        java.util.ArrayList<user.User> userList42 = database36.users;
        java.util.ArrayList<user.User> userList43 = database36.users;
        database25.users = userList43;
        java.util.ArrayList<user.User> userList45 = database25.users;
        database25.load("hi!");
        database.Database database49 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList50 = database49.users;
        java.util.ArrayList<user.User> userList51 = database49.users;
        database.Database database53 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList54 = database53.users;
        java.util.ArrayList<user.User> userList55 = database53.users;
        java.util.ArrayList<user.User> userList56 = database53.users;
        database.Database database58 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList59 = database58.users;
        database.Database database61 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList62 = database61.users;
        database58.users = userList62;
        database53.users = userList62;
        database.Database database66 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList67 = database66.users;
        java.util.ArrayList<user.User> userList68 = database66.users;
        database.Database database70 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList71 = database70.users;
        java.util.ArrayList<user.User> userList72 = database70.users;
        database.Database database74 = database.Database.getInstance("hi!");
        user.User[] userArray75 = new user.User[] {};
        java.util.ArrayList<user.User> userList76 = new java.util.ArrayList<user.User>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<user.User>) userList76, userArray75);
        database74.users = userList76;
        database70.users = userList76;
        database66.users = userList76;
        database53.users = userList76;
        database.Database database83 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList84 = database83.users;
        database.Database database86 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList87 = database86.users;
        database83.users = userList87;
        database53.users = userList87;
        java.util.ArrayList<user.User> userList90 = database53.users;
        database49.users = userList90;
        database25.users = userList90;
        database1.users = userList90;
        database1.update("hi!");
        database1.update("hi!");
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(database61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userArray75);
        org.junit.Assert.assertArrayEquals(userArray75, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(database83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(database86);
        org.junit.Assert.assertNotNull(userList87);
        org.junit.Assert.assertNotNull(userList90);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        database1.users = userList35;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database39.users = userList45;
        database39.load("hi!");
        java.util.ArrayList<user.User> userList51 = database39.users;
        database39.update("hi!");
        database39.update("hi!");
        java.util.ArrayList<user.User> userList56 = database39.users;
        database1.users = userList56;
        java.lang.Class<?> wildcardClass58 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList15 = database1.users;
        java.util.ArrayList<user.User> userList16 = database1.users;
        java.util.ArrayList<user.User> userList17 = database1.users;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList20 = database1.users;
        java.lang.Class<?> wildcardClass21 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database5.update("hi!");
        java.util.ArrayList<user.User> userList19 = database5.users;
        database1.users = userList19;
        database1.load("hi!");
        database1.load("hi!");
        database.Database database26 = database.Database.getInstance("hi!");
        user.User[] userArray27 = new user.User[] {};
        java.util.ArrayList<user.User> userList28 = new java.util.ArrayList<user.User>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<user.User>) userList28, userArray27);
        database26.users = userList28;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database.Database database35 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList36 = database35.users;
        database32.users = userList36;
        database26.users = userList36;
        database.Database database40 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList41 = database40.users;
        database.Database database43 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList44 = database43.users;
        database40.users = userList44;
        java.util.ArrayList<user.User> userList46 = database40.users;
        database40.load("hi!");
        database40.update("hi!");
        database.Database database52 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList53 = database52.users;
        java.util.ArrayList<user.User> userList54 = database52.users;
        database40.users = userList54;
        database26.users = userList54;
        java.util.ArrayList<user.User> userList57 = database26.users;
        java.util.ArrayList<user.User> userList58 = database26.users;
        database1.users = userList58;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList62 = database1.users;
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userArray27);
        org.junit.Assert.assertArrayEquals(userArray27, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(userList62);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        java.lang.Class<?> wildcardClass9 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.load("hi!");
        database1.update("hi!");
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        database1.users = userList15;
        java.lang.Class<?> wildcardClass17 = userList15.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        database1.load("hi!");
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        java.util.ArrayList<user.User> userList14 = database12.users;
        database.Database database16 = database.Database.getInstance("hi!");
        user.User[] userArray17 = new user.User[] {};
        java.util.ArrayList<user.User> userList18 = new java.util.ArrayList<user.User>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<user.User>) userList18, userArray17);
        database16.users = userList18;
        database12.users = userList18;
        database12.load("hi!");
        java.util.ArrayList<user.User> userList24 = database12.users;
        database1.users = userList24;
        java.util.ArrayList<user.User> userList26 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userArray17);
        org.junit.Assert.assertArrayEquals(userArray17, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList26);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) '4');
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        java.util.ArrayList<user.User> userList26 = database1.users;
        java.util.ArrayList<user.User> userList27 = database1.users;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList30 = database1.users;
        java.lang.Class<?> wildcardClass31 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((-1));
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot21 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        database1.update("hi!");
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        java.util.ArrayList<user.User> userList15 = database13.users;
        java.util.ArrayList<user.User> userList16 = database13.users;
        database.Database database18 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        java.util.ArrayList<user.User> userList21 = database18.users;
        database18.load("hi!");
        database.Database database25 = database.Database.getInstance("");
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database.Database database33 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList34 = database33.users;
        database27.users = userList34;
        database25.users = userList34;
        database18.users = userList34;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        database39.users = userList43;
        java.util.ArrayList<user.User> userList45 = database39.users;
        java.util.ArrayList<user.User> userList46 = database39.users;
        database18.users = userList46;
        database13.users = userList46;
        database1.users = userList46;
        database1.load("hi!");
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        database.Database database56 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList57 = database56.users;
        database53.users = userList57;
        java.util.ArrayList<user.User> userList59 = database53.users;
        java.util.ArrayList<user.User> userList60 = database53.users;
        database1.users = userList60;
        database.Database database63 = database.Database.getInstance("hi!");
        database.Database database65 = database.Database.getInstance("hi!");
        user.User[] userArray66 = new user.User[] {};
        java.util.ArrayList<user.User> userList67 = new java.util.ArrayList<user.User>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<user.User>) userList67, userArray66);
        database65.users = userList67;
        database.Database database71 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList72 = database71.users;
        database65.users = userList72;
        database.Database database75 = database.Database.getInstance("hi!");
        user.User[] userArray76 = new user.User[] {};
        java.util.ArrayList<user.User> userList77 = new java.util.ArrayList<user.User>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<user.User>) userList77, userArray76);
        database75.users = userList77;
        database.Database database81 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList82 = database81.users;
        database75.users = userList82;
        database65.users = userList82;
        java.util.ArrayList<user.User> userList85 = database65.users;
        database65.load("hi!");
        database65.update("hi!");
        database65.update("hi!");
        java.util.ArrayList<user.User> userList92 = database65.users;
        database63.users = userList92;
        database1.users = userList92;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(database63);
        org.junit.Assert.assertNotNull(database65);
        org.junit.Assert.assertNotNull(userArray66);
        org.junit.Assert.assertArrayEquals(userArray66, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(database71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database75);
        org.junit.Assert.assertNotNull(userArray76);
        org.junit.Assert.assertArrayEquals(userArray76, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(database81);
        org.junit.Assert.assertNotNull(userList82);
        org.junit.Assert.assertNotNull(userList85);
        org.junit.Assert.assertNotNull(userList92);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        java.util.ArrayList<user.User> userList21 = database1.users;
        java.util.ArrayList<user.User> userList22 = database1.users;
        database1.update("hi!");
        database1.update("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList29 = database1.users;
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList29);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList30 = database29.users;
        java.util.ArrayList<user.User> userList31 = database29.users;
        java.util.ArrayList<user.User> userList32 = database29.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database.Database database37 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList38 = database37.users;
        database34.users = userList38;
        database29.users = userList38;
        database.Database database42 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList43 = database42.users;
        java.util.ArrayList<user.User> userList44 = database42.users;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        java.util.ArrayList<user.User> userList48 = database46.users;
        database.Database database50 = database.Database.getInstance("hi!");
        user.User[] userArray51 = new user.User[] {};
        java.util.ArrayList<user.User> userList52 = new java.util.ArrayList<user.User>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<user.User>) userList52, userArray51);
        database50.users = userList52;
        database46.users = userList52;
        database42.users = userList52;
        database29.users = userList52;
        database.Database database59 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList60 = database59.users;
        database.Database database62 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList63 = database62.users;
        database59.users = userList63;
        database29.users = userList63;
        java.util.ArrayList<user.User> userList66 = database29.users;
        database25.users = userList66;
        database1.users = userList66;
        database.Database database70 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList71 = database70.users;
        java.util.ArrayList<user.User> userList72 = database70.users;
        java.util.ArrayList<user.User> userList73 = database70.users;
        database70.load("hi!");
        database70.load("hi!");
        java.util.ArrayList<user.User> userList78 = database70.users;
        database1.users = userList78;
        java.util.ArrayList<user.User> userList80 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(userList44);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userArray51);
        org.junit.Assert.assertArrayEquals(userArray51, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(database59);
        org.junit.Assert.assertNotNull(userList60);
        org.junit.Assert.assertNotNull(database62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(userList66);
        org.junit.Assert.assertNotNull(database70);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(userList73);
        org.junit.Assert.assertNotNull(userList78);
        org.junit.Assert.assertNotNull(userList80);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database.Database database18 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        java.util.ArrayList<user.User> userList24 = database22.users;
        database.Database database26 = database.Database.getInstance("hi!");
        user.User[] userArray27 = new user.User[] {};
        java.util.ArrayList<user.User> userList28 = new java.util.ArrayList<user.User>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<user.User>) userList28, userArray27);
        database26.users = userList28;
        database22.users = userList28;
        database18.users = userList28;
        database5.users = userList28;
        database.Database database35 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList36 = database35.users;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database35.users = userList39;
        database5.users = userList39;
        java.util.ArrayList<user.User> userList42 = database5.users;
        database1.users = userList42;
        database.Database database45 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList46 = database45.users;
        java.util.ArrayList<user.User> userList47 = database45.users;
        java.util.ArrayList<user.User> userList48 = database45.users;
        database.Database database50 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList51 = database50.users;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        database50.users = userList54;
        database45.users = userList54;
        java.util.ArrayList<user.User> userList57 = database45.users;
        database1.users = userList57;
        database.Database database60 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList61 = database60.users;
        java.util.ArrayList<user.User> userList62 = database60.users;
        java.util.ArrayList<user.User> userList63 = database60.users;
        database60.update("hi!");
        database.Database database67 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList68 = database67.users;
        java.util.ArrayList<user.User> userList69 = database67.users;
        java.util.ArrayList<user.User> userList70 = database67.users;
        database67.load("hi!");
        database.Database database74 = database.Database.getInstance("");
        database.Database database76 = database.Database.getInstance("hi!");
        user.User[] userArray77 = new user.User[] {};
        java.util.ArrayList<user.User> userList78 = new java.util.ArrayList<user.User>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<user.User>) userList78, userArray77);
        database76.users = userList78;
        database.Database database82 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList83 = database82.users;
        database76.users = userList83;
        database74.users = userList83;
        database67.users = userList83;
        database60.users = userList83;
        database1.users = userList83;
        java.util.ArrayList<user.User> userList89 = database1.users;
        user.User[] userArray90 = new user.User[] {};
        java.util.ArrayList<user.User> userList91 = new java.util.ArrayList<user.User>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<user.User>) userList91, userArray90);
        database1.users = userList91;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userArray27);
        org.junit.Assert.assertArrayEquals(userArray27, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(database60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(database67);
        org.junit.Assert.assertNotNull(userList68);
        org.junit.Assert.assertNotNull(userList69);
        org.junit.Assert.assertNotNull(userList70);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(database76);
        org.junit.Assert.assertNotNull(userArray77);
        org.junit.Assert.assertArrayEquals(userArray77, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(database82);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(userList89);
        org.junit.Assert.assertNotNull(userArray90);
        org.junit.Assert.assertArrayEquals(userArray90, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        database1.update("hi!");
        java.util.ArrayList<user.User> userList28 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList28);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        database.Database database8 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList9 = database8.users;
        java.util.ArrayList<user.User> userList10 = database8.users;
        java.util.ArrayList<user.User> userList11 = database8.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        database8.users = userList17;
        database.Database database21 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList22 = database21.users;
        java.util.ArrayList<user.User> userList23 = database21.users;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        java.util.ArrayList<user.User> userList27 = database25.users;
        database.Database database29 = database.Database.getInstance("hi!");
        user.User[] userArray30 = new user.User[] {};
        java.util.ArrayList<user.User> userList31 = new java.util.ArrayList<user.User>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<user.User>) userList31, userArray30);
        database29.users = userList31;
        database25.users = userList31;
        database21.users = userList31;
        database8.users = userList31;
        database1.users = userList31;
        database.Database database39 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList40 = database39.users;
        java.util.ArrayList<user.User> userList41 = database39.users;
        database.Database database43 = database.Database.getInstance("hi!");
        user.User[] userArray44 = new user.User[] {};
        java.util.ArrayList<user.User> userList45 = new java.util.ArrayList<user.User>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<user.User>) userList45, userArray44);
        database43.users = userList45;
        database.Database database49 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList50 = database49.users;
        database43.users = userList50;
        database39.users = userList50;
        database1.users = userList50;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList56 = database1.users;
        database.Database database58 = database.Database.getInstance("");
        database.Database database60 = database.Database.getInstance("hi!");
        user.User[] userArray61 = new user.User[] {};
        java.util.ArrayList<user.User> userList62 = new java.util.ArrayList<user.User>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<user.User>) userList62, userArray61);
        database60.users = userList62;
        database.Database database66 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList67 = database66.users;
        database60.users = userList67;
        database58.users = userList67;
        database.Database database71 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList72 = database71.users;
        database.Database database74 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList75 = database74.users;
        database71.users = userList75;
        java.util.ArrayList<user.User> userList77 = database71.users;
        java.util.ArrayList<user.User> userList78 = database71.users;
        database71.load("hi!");
        java.util.ArrayList<user.User> userList81 = database71.users;
        database58.users = userList81;
        database1.users = userList81;
        database.Database database85 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList86 = database85.users;
        java.util.ArrayList<user.User> userList87 = database85.users;
        java.util.ArrayList<user.User> userList88 = database85.users;
        database85.update("hi!");
        java.util.ArrayList<user.User> userList91 = database85.users;
        database1.users = userList91;
        java.lang.Class<?> wildcardClass93 = userList91.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(userList27);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userArray30);
        org.junit.Assert.assertArrayEquals(userArray30, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList41);
        org.junit.Assert.assertNotNull(database43);
        org.junit.Assert.assertNotNull(userArray44);
        org.junit.Assert.assertArrayEquals(userArray44, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(database49);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList56);
        org.junit.Assert.assertNotNull(database58);
        org.junit.Assert.assertNotNull(database60);
        org.junit.Assert.assertNotNull(userArray61);
        org.junit.Assert.assertArrayEquals(userArray61, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(database66);
        org.junit.Assert.assertNotNull(userList67);
        org.junit.Assert.assertNotNull(database71);
        org.junit.Assert.assertNotNull(userList72);
        org.junit.Assert.assertNotNull(database74);
        org.junit.Assert.assertNotNull(userList75);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(userList78);
        org.junit.Assert.assertNotNull(userList81);
        org.junit.Assert.assertNotNull(database85);
        org.junit.Assert.assertNotNull(userList86);
        org.junit.Assert.assertNotNull(userList87);
        org.junit.Assert.assertNotNull(userList88);
        org.junit.Assert.assertNotNull(userList91);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot9 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database1.users = userList8;
        database.Database database11 = database.Database.getInstance("hi!");
        user.User[] userArray12 = new user.User[] {};
        java.util.ArrayList<user.User> userList13 = new java.util.ArrayList<user.User>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<user.User>) userList13, userArray12);
        database11.users = userList13;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database11.users = userList18;
        database1.users = userList18;
        java.util.ArrayList<user.User> userList21 = database1.users;
        database1.load("hi!");
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database.Database database28 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList29 = database28.users;
        database25.users = userList29;
        database1.users = userList29;
        java.util.ArrayList<user.User> userList32 = database1.users;
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userArray12);
        org.junit.Assert.assertArrayEquals(userArray12, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList32);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 1);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot19 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot17 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        database1.update("hi!");
        database.Database database11 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList12 = database11.users;
        java.util.ArrayList<user.User> userList13 = database11.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        java.util.ArrayList<user.User> userList17 = database15.users;
        database.Database database19 = database.Database.getInstance("hi!");
        user.User[] userArray20 = new user.User[] {};
        java.util.ArrayList<user.User> userList21 = new java.util.ArrayList<user.User>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<user.User>) userList21, userArray20);
        database19.users = userList21;
        database15.users = userList21;
        database11.users = userList21;
        database1.users = userList21;
        database.Database database28 = database.Database.getInstance("hi!");
        database.Database database30 = database.Database.getInstance("hi!");
        user.User[] userArray31 = new user.User[] {};
        java.util.ArrayList<user.User> userList32 = new java.util.ArrayList<user.User>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<user.User>) userList32, userArray31);
        database30.users = userList32;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database30.users = userList37;
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database30.users = userList47;
        java.util.ArrayList<user.User> userList50 = database30.users;
        database30.load("hi!");
        database30.update("hi!");
        database30.update("hi!");
        java.util.ArrayList<user.User> userList57 = database30.users;
        database28.users = userList57;
        database1.users = userList57;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userArray20);
        org.junit.Assert.assertArrayEquals(userArray20, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(database28);
        org.junit.Assert.assertNotNull(database30);
        org.junit.Assert.assertNotNull(userArray31);
        org.junit.Assert.assertArrayEquals(userArray31, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList50);
        org.junit.Assert.assertNotNull(userList57);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) ' ');
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 1);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) '4');
        java.lang.Class<?> wildcardClass17 = databaseSingleton0.getClass();
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        database.Database database9 = database.Database.getInstance("hi!");
        user.User[] userArray10 = new user.User[] {};
        java.util.ArrayList<user.User> userList11 = new java.util.ArrayList<user.User>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<user.User>) userList11, userArray10);
        database9.users = userList11;
        database5.users = userList11;
        database1.users = userList11;
        java.util.ArrayList<user.User> userList16 = database1.users;
        java.util.ArrayList<user.User> userList17 = database1.users;
        java.util.ArrayList<user.User> userList18 = null;
        database1.users = userList18;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userArray10);
        org.junit.Assert.assertArrayEquals(userArray10, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList17);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database1.users = userList16;
        java.util.ArrayList<user.User> userList18 = database1.users;
        java.util.ArrayList<user.User> userList19 = database1.users;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database.Database database12 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList13 = database12.users;
        database.Database database15 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList16 = database15.users;
        database12.users = userList16;
        java.util.ArrayList<user.User> userList18 = database12.users;
        java.util.ArrayList<user.User> userList19 = database12.users;
        database1.users = userList19;
        java.util.ArrayList<user.User> userList21 = database1.users;
        java.util.ArrayList<user.User> userList22 = database1.users;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList25 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList25);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database1.load("hi!");
        java.util.ArrayList<user.User> userList9 = database1.users;
        database1.update("hi!");
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database13.users = userList17;
        java.util.ArrayList<user.User> userList19 = database13.users;
        java.util.ArrayList<user.User> userList20 = database13.users;
        database1.users = userList20;
        java.util.ArrayList<user.User> userList22 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (Cannot create a file when that file already exists)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList22);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        java.util.ArrayList<user.User> userList6 = database1.users;
        database1.update("hi!");
        database.Database database10 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList11 = database10.users;
        java.util.ArrayList<user.User> userList12 = database10.users;
        java.util.ArrayList<user.User> userList13 = database10.users;
        database10.load("hi!");
        database.Database database17 = database.Database.getInstance("");
        database.Database database19 = database.Database.getInstance("hi!");
        user.User[] userArray20 = new user.User[] {};
        java.util.ArrayList<user.User> userList21 = new java.util.ArrayList<user.User>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<user.User>) userList21, userArray20);
        database19.users = userList21;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database19.users = userList26;
        database17.users = userList26;
        database10.users = userList26;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        java.util.ArrayList<user.User> userList37 = database31.users;
        java.util.ArrayList<user.User> userList38 = database31.users;
        database10.users = userList38;
        database1.users = userList38;
        database.Database database42 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList43 = database42.users;
        database1.users = userList43;
        // The following exception was thrown during execution in test generation
        try {
            database1.load("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList13);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userArray20);
        org.junit.Assert.assertArrayEquals(userArray20, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = parkingSpot10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList17 = database1.users;
        java.util.ArrayList<user.User> userList18 = database1.users;
        java.util.ArrayList<user.User> userList19 = database1.users;
        java.lang.Class<?> wildcardClass20 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
// flaky "13) test0984(RegressionTest1)":         org.junit.Assert.assertNull(userList2);
// flaky "12) test0984(RegressionTest1)":         org.junit.Assert.assertNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot15 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot(1);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot((int) 'a');
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot21 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        database.Database database4 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList5 = database4.users;
        database1.users = userList5;
        java.util.ArrayList<user.User> userList7 = database1.users;
        java.util.ArrayList<user.User> userList8 = database1.users;
        java.util.ArrayList<user.User> userList9 = database1.users;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database11.users = userList15;
        java.util.ArrayList<user.User> userList17 = database11.users;
        database11.update("hi!");
        java.util.ArrayList<user.User> userList20 = database11.users;
        database1.users = userList20;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList24 = database1.users;
        java.lang.Class<?> wildcardClass25 = userList24.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(database4);
        org.junit.Assert.assertNotNull(userList5);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot(10);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) (short) 0);
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot14 = databaseSingleton0.getParkingSpot((int) (short) 10);
        parking.ParkingSpot parkingSpot16 = databaseSingleton0.getParkingSpot((int) (byte) 100);
        parking.ParkingSpot parkingSpot18 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot20 = databaseSingleton0.getParkingSpot((int) (byte) 10);
        parking.ParkingSpot parkingSpot22 = databaseSingleton0.getParkingSpot((int) (short) 100);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
        org.junit.Assert.assertNull(parkingSpot14);
        org.junit.Assert.assertNull(parkingSpot16);
        org.junit.Assert.assertNull(parkingSpot18);
        org.junit.Assert.assertNull(parkingSpot20);
        org.junit.Assert.assertNull(parkingSpot22);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        database.Database database1 = database.Database.getInstance("hi!");
        user.User[] userArray2 = new user.User[] {};
        java.util.ArrayList<user.User> userList3 = new java.util.ArrayList<user.User>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<user.User>) userList3, userArray2);
        database1.users = userList3;
        database.Database database7 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList8 = database7.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database7.users = userList11;
        database1.users = userList11;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList16 = database1.users;
        database1.load("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userArray2);
        org.junit.Assert.assertArrayEquals(userArray2, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(database7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(userList16);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        database.Database database1 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database1.users = userList7;
        database1.load("hi!");
        java.lang.Class<?> wildcardClass13 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) (short) 1);
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot(100);
        parking.ParkingSpot parkingSpot8 = databaseSingleton0.getParkingSpot((int) (short) 100);
        parking.ParkingSpot parkingSpot10 = databaseSingleton0.getParkingSpot((int) '#');
        parking.ParkingSpot parkingSpot12 = databaseSingleton0.getParkingSpot((int) (byte) 0);
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
        org.junit.Assert.assertNull(parkingSpot8);
        org.junit.Assert.assertNull(parkingSpot10);
        org.junit.Assert.assertNull(parkingSpot12);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList32 = database31.users;
        database.Database database34 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList35 = database34.users;
        database31.users = userList35;
        database1.users = userList35;
        database1.update("hi!");
        database.Database database41 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList42 = database41.users;
        java.util.ArrayList<user.User> userList43 = database41.users;
        database.Database database45 = database.Database.getInstance("hi!");
        user.User[] userArray46 = new user.User[] {};
        java.util.ArrayList<user.User> userList47 = new java.util.ArrayList<user.User>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<user.User>) userList47, userArray46);
        database45.users = userList47;
        database41.users = userList47;
        database1.users = userList47;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(database41);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userArray46);
        org.junit.Assert.assertArrayEquals(userArray46, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList7 = database6.users;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database6.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList15 = database14.users;
        java.util.ArrayList<user.User> userList16 = database14.users;
        database.Database database18 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        user.User[] userArray23 = new user.User[] {};
        java.util.ArrayList<user.User> userList24 = new java.util.ArrayList<user.User>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<user.User>) userList24, userArray23);
        database22.users = userList24;
        database18.users = userList24;
        database14.users = userList24;
        database1.users = userList24;
        database.Database database31 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList32 = database31.users;
        java.util.ArrayList<user.User> userList33 = database31.users;
        java.util.ArrayList<user.User> userList34 = database31.users;
        database31.load("hi!");
        database.Database database38 = database.Database.getInstance("");
        database.Database database40 = database.Database.getInstance("hi!");
        user.User[] userArray41 = new user.User[] {};
        java.util.ArrayList<user.User> userList42 = new java.util.ArrayList<user.User>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<user.User>) userList42, userArray41);
        database40.users = userList42;
        database.Database database46 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList47 = database46.users;
        database40.users = userList47;
        database38.users = userList47;
        database31.users = userList47;
        java.util.ArrayList<user.User> userList51 = database31.users;
        database1.users = userList51;
        java.util.ArrayList<user.User> userList53 = database1.users;
        java.util.ArrayList<user.User> userList54 = database1.users;
        database.Database database56 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList57 = database56.users;
        java.util.ArrayList<user.User> userList58 = database56.users;
        database.Database database60 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList61 = database60.users;
        java.util.ArrayList<user.User> userList62 = database60.users;
        database.Database database64 = database.Database.getInstance("hi!");
        user.User[] userArray65 = new user.User[] {};
        java.util.ArrayList<user.User> userList66 = new java.util.ArrayList<user.User>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<user.User>) userList66, userArray65);
        database64.users = userList66;
        database60.users = userList66;
        database56.users = userList66;
        java.util.ArrayList<user.User> userList71 = database56.users;
        database.Database database73 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList74 = database73.users;
        database.Database database76 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList77 = database76.users;
        database73.users = userList77;
        java.util.ArrayList<user.User> userList79 = database73.users;
        java.util.ArrayList<user.User> userList80 = database73.users;
        database.Database database82 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList83 = database82.users;
        java.util.ArrayList<user.User> userList84 = database82.users;
        java.util.ArrayList<user.User> userList85 = database82.users;
        database73.users = userList85;
        database56.users = userList85;
        database1.users = userList85;
        java.util.ArrayList<user.User> userList89 = database1.users;
        java.util.ArrayList<user.User> userList90 = database1.users;
        // The following exception was thrown during execution in test generation
        try {
            database1.update("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(userList16);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userArray23);
        org.junit.Assert.assertArrayEquals(userArray23, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(database31);
        org.junit.Assert.assertNotNull(userList32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList34);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(database40);
        org.junit.Assert.assertNotNull(userArray41);
        org.junit.Assert.assertArrayEquals(userArray41, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(database46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(database56);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(userList58);
        org.junit.Assert.assertNotNull(database60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(database64);
        org.junit.Assert.assertNotNull(userArray65);
        org.junit.Assert.assertArrayEquals(userArray65, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(userList71);
        org.junit.Assert.assertNotNull(database73);
        org.junit.Assert.assertNotNull(userList74);
        org.junit.Assert.assertNotNull(database76);
        org.junit.Assert.assertNotNull(userList77);
        org.junit.Assert.assertNotNull(userList79);
        org.junit.Assert.assertNotNull(userList80);
        org.junit.Assert.assertNotNull(database82);
        org.junit.Assert.assertNotNull(userList83);
        org.junit.Assert.assertNotNull(userList84);
        org.junit.Assert.assertNotNull(userList85);
        org.junit.Assert.assertNotNull(userList89);
        org.junit.Assert.assertNotNull(userList90);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList28 = database1.users;
        java.util.ArrayList<user.User> userList29 = database1.users;
        java.util.ArrayList<user.User> userList30 = database1.users;
        database1.load("hi!");
        database.Database database34 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList35 = database34.users;
        java.util.ArrayList<user.User> userList36 = database34.users;
        java.util.ArrayList<user.User> userList37 = database34.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database.Database database42 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList43 = database42.users;
        database39.users = userList43;
        database34.users = userList43;
        database.Database database47 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList48 = database47.users;
        java.util.ArrayList<user.User> userList49 = database47.users;
        database.Database database51 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList52 = database51.users;
        java.util.ArrayList<user.User> userList53 = database51.users;
        database.Database database55 = database.Database.getInstance("hi!");
        user.User[] userArray56 = new user.User[] {};
        java.util.ArrayList<user.User> userList57 = new java.util.ArrayList<user.User>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<user.User>) userList57, userArray56);
        database55.users = userList57;
        database51.users = userList57;
        database47.users = userList57;
        database34.users = userList57;
        database1.users = userList57;
        database1.update("hi!");
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList28);
        org.junit.Assert.assertNotNull(userList29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database34);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(database42);
        org.junit.Assert.assertNotNull(userList43);
        org.junit.Assert.assertNotNull(database47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(userList49);
        org.junit.Assert.assertNotNull(database51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(database55);
        org.junit.Assert.assertNotNull(userArray56);
        org.junit.Assert.assertArrayEquals(userArray56, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database.Database database6 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList7 = database6.users;
        java.util.ArrayList<user.User> userList8 = database6.users;
        java.util.ArrayList<user.User> userList9 = database6.users;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database11.users = userList15;
        database6.users = userList15;
        database.Database database19 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList20 = database19.users;
        java.util.ArrayList<user.User> userList21 = database19.users;
        database.Database database23 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList24 = database23.users;
        java.util.ArrayList<user.User> userList25 = database23.users;
        database.Database database27 = database.Database.getInstance("hi!");
        user.User[] userArray28 = new user.User[] {};
        java.util.ArrayList<user.User> userList29 = new java.util.ArrayList<user.User>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<user.User>) userList29, userArray28);
        database27.users = userList29;
        database23.users = userList29;
        database19.users = userList29;
        database6.users = userList29;
        database.Database database36 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList37 = database36.users;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database36.users = userList40;
        database6.users = userList40;
        database1.users = userList40;
        java.lang.Class<?> wildcardClass44 = userList40.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(userList9);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(database23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(database27);
        org.junit.Assert.assertNotNull(userArray28);
        org.junit.Assert.assertArrayEquals(userArray28, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(database36);
        org.junit.Assert.assertNotNull(userList37);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList6 = database5.users;
        java.util.ArrayList<user.User> userList7 = database5.users;
        java.util.ArrayList<user.User> userList8 = database5.users;
        database.Database database10 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList11 = database10.users;
        database.Database database13 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList14 = database13.users;
        database10.users = userList14;
        database5.users = userList14;
        database.Database database18 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList19 = database18.users;
        java.util.ArrayList<user.User> userList20 = database18.users;
        database.Database database22 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList23 = database22.users;
        java.util.ArrayList<user.User> userList24 = database22.users;
        database.Database database26 = database.Database.getInstance("hi!");
        user.User[] userArray27 = new user.User[] {};
        java.util.ArrayList<user.User> userList28 = new java.util.ArrayList<user.User>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<user.User>) userList28, userArray27);
        database26.users = userList28;
        database22.users = userList28;
        database18.users = userList28;
        database5.users = userList28;
        database.Database database35 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList36 = database35.users;
        database.Database database38 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList39 = database38.users;
        database35.users = userList39;
        database5.users = userList39;
        java.util.ArrayList<user.User> userList42 = database5.users;
        database1.users = userList42;
        database.Database database45 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList46 = database45.users;
        java.util.ArrayList<user.User> userList47 = database45.users;
        java.util.ArrayList<user.User> userList48 = database45.users;
        database.Database database50 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList51 = database50.users;
        database.Database database53 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList54 = database53.users;
        database50.users = userList54;
        database45.users = userList54;
        java.util.ArrayList<user.User> userList57 = database45.users;
        database1.users = userList57;
        java.lang.Class<?> wildcardClass59 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userList6);
        org.junit.Assert.assertNotNull(userList7);
        org.junit.Assert.assertNotNull(userList8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userList11);
        org.junit.Assert.assertNotNull(database13);
        org.junit.Assert.assertNotNull(userList14);
        org.junit.Assert.assertNotNull(database18);
        org.junit.Assert.assertNotNull(userList19);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(database22);
        org.junit.Assert.assertNotNull(userList23);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database26);
        org.junit.Assert.assertNotNull(userArray27);
        org.junit.Assert.assertArrayEquals(userArray27, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(database35);
        org.junit.Assert.assertNotNull(userList36);
        org.junit.Assert.assertNotNull(database38);
        org.junit.Assert.assertNotNull(userList39);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(database45);
        org.junit.Assert.assertNotNull(userList46);
        org.junit.Assert.assertNotNull(userList47);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(database50);
        org.junit.Assert.assertNotNull(userList51);
        org.junit.Assert.assertNotNull(database53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList57);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        database.DatabaseSingleton databaseSingleton0 = database.DatabaseSingleton.getInstance();
        parking.ParkingSpot parkingSpot2 = databaseSingleton0.getParkingSpot((int) '4');
        parking.ParkingSpot parkingSpot4 = databaseSingleton0.getParkingSpot(0);
        parking.ParkingSpot parkingSpot6 = databaseSingleton0.getParkingSpot((int) (short) -1);
        parking.ParkingSpot parkingSpot7 = null;
        // The following exception was thrown during execution in test generation
        try {
            databaseSingleton0.saveParkingSpot(parkingSpot7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(databaseSingleton0);
        org.junit.Assert.assertNull(parkingSpot2);
        org.junit.Assert.assertNull(parkingSpot4);
        org.junit.Assert.assertNull(parkingSpot6);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        database.Database database1 = database.Database.getInstance("");
        database.Database database3 = database.Database.getInstance("hi!");
        user.User[] userArray4 = new user.User[] {};
        java.util.ArrayList<user.User> userList5 = new java.util.ArrayList<user.User>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<user.User>) userList5, userArray4);
        database3.users = userList5;
        database.Database database9 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList10 = database9.users;
        database3.users = userList10;
        database1.users = userList10;
        database.Database database14 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList15 = database14.users;
        database.Database database17 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList18 = database17.users;
        database14.users = userList18;
        java.util.ArrayList<user.User> userList20 = database14.users;
        java.util.ArrayList<user.User> userList21 = database14.users;
        database14.load("hi!");
        java.util.ArrayList<user.User> userList24 = database14.users;
        database1.users = userList24;
        database1.load("hi!");
        database.Database database29 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList30 = database29.users;
        database.Database database32 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList33 = database32.users;
        database29.users = userList33;
        java.util.ArrayList<user.User> userList35 = database29.users;
        database29.load("hi!");
        java.util.ArrayList<user.User> userList38 = database29.users;
        database1.users = userList38;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList42 = database1.users;
        java.lang.Class<?> wildcardClass43 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(database3);
        org.junit.Assert.assertNotNull(userArray4);
        org.junit.Assert.assertArrayEquals(userArray4, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(database9);
        org.junit.Assert.assertNotNull(userList10);
        org.junit.Assert.assertNotNull(database14);
        org.junit.Assert.assertNotNull(userList15);
        org.junit.Assert.assertNotNull(database17);
        org.junit.Assert.assertNotNull(userList18);
        org.junit.Assert.assertNotNull(userList20);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList24);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(database32);
        org.junit.Assert.assertNotNull(userList33);
        org.junit.Assert.assertNotNull(userList35);
        org.junit.Assert.assertNotNull(userList38);
        org.junit.Assert.assertNotNull(userList42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        java.util.ArrayList<user.User> userList4 = database1.users;
        database1.load("hi!");
        database.Database database8 = database.Database.getInstance("");
        database.Database database10 = database.Database.getInstance("hi!");
        user.User[] userArray11 = new user.User[] {};
        java.util.ArrayList<user.User> userList12 = new java.util.ArrayList<user.User>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<user.User>) userList12, userArray11);
        database10.users = userList12;
        database.Database database16 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList17 = database16.users;
        database10.users = userList17;
        database8.users = userList17;
        database1.users = userList17;
        java.util.ArrayList<user.User> userList21 = database1.users;
        java.util.ArrayList<user.User> userList22 = database1.users;
        database1.update("hi!");
        java.util.ArrayList<user.User> userList25 = database1.users;
        java.lang.Class<?> wildcardClass26 = database1.getClass();
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(userList4);
        org.junit.Assert.assertNotNull(database8);
        org.junit.Assert.assertNotNull(database10);
        org.junit.Assert.assertNotNull(userArray11);
        org.junit.Assert.assertArrayEquals(userArray11, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(database16);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(userList21);
        org.junit.Assert.assertNotNull(userList22);
        org.junit.Assert.assertNotNull(userList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        database.Database database1 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList2 = database1.users;
        java.util.ArrayList<user.User> userList3 = database1.users;
        database.Database database5 = database.Database.getInstance("hi!");
        user.User[] userArray6 = new user.User[] {};
        java.util.ArrayList<user.User> userList7 = new java.util.ArrayList<user.User>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<user.User>) userList7, userArray6);
        database5.users = userList7;
        database.Database database11 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList12 = database11.users;
        database5.users = userList12;
        database1.users = userList12;
        database1.load("hi!");
        java.util.ArrayList<user.User> userList17 = database1.users;
        database.Database database19 = database.Database.getInstance("hi!");
        user.User[] userArray20 = new user.User[] {};
        java.util.ArrayList<user.User> userList21 = new java.util.ArrayList<user.User>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<user.User>) userList21, userArray20);
        database19.users = userList21;
        database.Database database25 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList26 = database25.users;
        database19.users = userList26;
        database.Database database29 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList30 = database29.users;
        java.util.ArrayList<user.User> userList31 = database29.users;
        database.Database database33 = database.Database.getInstance("hi!");
        user.User[] userArray34 = new user.User[] {};
        java.util.ArrayList<user.User> userList35 = new java.util.ArrayList<user.User>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<user.User>) userList35, userArray34);
        database33.users = userList35;
        database.Database database39 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList40 = database39.users;
        database33.users = userList40;
        database29.users = userList40;
        database29.load("hi!");
        java.util.ArrayList<user.User> userList45 = database29.users;
        database29.load("hi!");
        java.util.ArrayList<user.User> userList48 = database29.users;
        database19.users = userList48;
        database.Database database51 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList52 = database51.users;
        java.util.ArrayList<user.User> userList53 = database51.users;
        java.util.ArrayList<user.User> userList54 = database51.users;
        java.util.ArrayList<user.User> userList55 = database51.users;
        database19.users = userList55;
        database19.update("hi!");
        database.Database database60 = database.Database.getInstance("");
        java.util.ArrayList<user.User> userList61 = database60.users;
        java.util.ArrayList<user.User> userList62 = database60.users;
        java.util.ArrayList<user.User> userList63 = database60.users;
        database60.load("hi!");
        database.Database database67 = database.Database.getInstance("");
        database.Database database69 = database.Database.getInstance("hi!");
        user.User[] userArray70 = new user.User[] {};
        java.util.ArrayList<user.User> userList71 = new java.util.ArrayList<user.User>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<user.User>) userList71, userArray70);
        database69.users = userList71;
        database.Database database75 = database.Database.getInstance("hi!");
        java.util.ArrayList<user.User> userList76 = database75.users;
        database69.users = userList76;
        database67.users = userList76;
        database60.users = userList76;
        database19.users = userList76;
        database1.users = userList76;
        org.junit.Assert.assertNotNull(database1);
        org.junit.Assert.assertNotNull(userList2);
        org.junit.Assert.assertNotNull(userList3);
        org.junit.Assert.assertNotNull(database5);
        org.junit.Assert.assertNotNull(userArray6);
        org.junit.Assert.assertArrayEquals(userArray6, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(database11);
        org.junit.Assert.assertNotNull(userList12);
        org.junit.Assert.assertNotNull(userList17);
        org.junit.Assert.assertNotNull(database19);
        org.junit.Assert.assertNotNull(userArray20);
        org.junit.Assert.assertArrayEquals(userArray20, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(database25);
        org.junit.Assert.assertNotNull(userList26);
        org.junit.Assert.assertNotNull(database29);
        org.junit.Assert.assertNotNull(userList30);
        org.junit.Assert.assertNotNull(userList31);
        org.junit.Assert.assertNotNull(database33);
        org.junit.Assert.assertNotNull(userArray34);
        org.junit.Assert.assertArrayEquals(userArray34, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(database39);
        org.junit.Assert.assertNotNull(userList40);
        org.junit.Assert.assertNotNull(userList45);
        org.junit.Assert.assertNotNull(userList48);
        org.junit.Assert.assertNotNull(database51);
        org.junit.Assert.assertNotNull(userList52);
        org.junit.Assert.assertNotNull(userList53);
        org.junit.Assert.assertNotNull(userList54);
        org.junit.Assert.assertNotNull(userList55);
        org.junit.Assert.assertNotNull(database60);
        org.junit.Assert.assertNotNull(userList61);
        org.junit.Assert.assertNotNull(userList62);
        org.junit.Assert.assertNotNull(userList63);
        org.junit.Assert.assertNotNull(database67);
        org.junit.Assert.assertNotNull(database69);
        org.junit.Assert.assertNotNull(userArray70);
        org.junit.Assert.assertArrayEquals(userArray70, new user.User[] {});
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(database75);
        org.junit.Assert.assertNotNull(userList76);
    }
}
