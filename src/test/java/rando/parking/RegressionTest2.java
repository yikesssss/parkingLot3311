package rando.parking;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        java.lang.String str11 = handicapAccessDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = handicapAccessDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking", "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.util.List<parking.ParkingSpot> parkingSpotList28 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        java.lang.String str35 = parkingSpot33.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot33);
        parking.ParkingLotManager parkingLotManager37 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager37.addParkingSpot(parkingSpot41);
        java.util.List<parking.ParkingSpot> parkingSpotList43 = parkingLotManager37.getParkingSpots();
        parking.ParkingLotManager parkingLotManager44 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot48 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str49 = parkingSpot48.getLocation();
        java.lang.String str50 = parkingSpot48.getLocation();
        parkingLotManager44.addParkingSpot(parkingSpot48);
        parking.ParkingSpot parkingSpot55 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str56 = parkingSpot55.getLocation();
        parkingLotManager44.addParkingSpot(parkingSpot55);
        java.util.List<parking.ParkingSpot> parkingSpotList58 = parkingLotManager44.getParkingSpots();
        parking.ParkingSpot parkingSpot62 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str63 = parkingSpot62.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator64 = new parking.CoveredParkingDecorator(parkingSpot62);
        java.lang.String str65 = coveredParkingDecorator64.getDetails();
        parking.EVChargingDecorator eVChargingDecorator66 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator64);
        java.lang.String str67 = coveredParkingDecorator64.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator68 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator64);
        parkingLotManager44.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator64);
        java.util.List<parking.ParkingSpot> parkingSpotList70 = parkingLotManager44.getParkingSpots();
        parking.ParkingSpot parkingSpot74 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator75 = new parking.EVChargingDecorator(parkingSpot74);
        parking.EVChargingDecorator eVChargingDecorator76 = new parking.EVChargingDecorator(parkingSpot74);
        parking.CoveredParkingDecorator coveredParkingDecorator77 = new parking.CoveredParkingDecorator(parkingSpot74);
        parkingLotManager44.addParkingSpot(parkingSpot74);
        parkingLotManager37.addParkingSpot(parkingSpot74);
        parkingLotManager0.addParkingSpot(parkingSpot74);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList28);
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(parkingLotManager37);
        org.junit.Assert.assertNotNull(parkingSpotList43);
        org.junit.Assert.assertNotNull(parkingLotManager44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(parkingSpotList58);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str65, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str67, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList70);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        int int9 = eVChargingDecorator6.getId();
        java.lang.String str10 = eVChargingDecorator6.getLocation();
        java.lang.String str11 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        int int13 = parkingSpot9.getId();
        java.lang.String str14 = parkingSpot9.getLocation();
        int int15 = parkingSpot9.getId();
        java.lang.Class<?> wildcardClass16 = parkingSpot9.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '#', "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        int int4 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getParkingLot();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        int int11 = eVChargingDecorator8.getId();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str14 = eVChargingDecorator13.getDetails();
        java.lang.String str15 = eVChargingDecorator13.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        int int4 = parkingSpot3.getId();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str8 = eVChargingDecorator7.getParkingLot();
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        java.lang.String str10 = eVChargingDecorator7.getLocation();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        java.lang.String str8 = handicapAccessDecorator6.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str7 = eVChargingDecorator6.getDetails();
        java.lang.String str8 = eVChargingDecorator6.getDetails();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        java.lang.String str13 = eVChargingDecorator8.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        java.lang.String str9 = handicapAccessDecorator6.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str9 = handicapAccessDecorator8.getDetails();
        java.lang.String str10 = handicapAccessDecorator8.getDetails();
        java.lang.String str11 = handicapAccessDecorator8.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        java.util.List<parking.ParkingSpot> parkingSpotList25 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList26 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList27 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot31 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str32 = parkingSpot31.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator(parkingSpot31);
        parking.EVChargingDecorator eVChargingDecorator34 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator33);
        parking.EVChargingDecorator eVChargingDecorator35 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator34);
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator34);
        parking.HandicapAccessDecorator handicapAccessDecorator37 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator36);
        java.lang.String str39 = eVChargingDecorator36.getDetails();
        java.lang.String str40 = eVChargingDecorator36.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList25);
        org.junit.Assert.assertNotNull(parkingSpotList26);
        org.junit.Assert.assertNotNull(parkingSpotList27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str39, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str40, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str11 = parkingSpot10.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator(parkingSpot10);
        java.lang.String str13 = coveredParkingDecorator12.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        java.lang.String str15 = coveredParkingDecorator14.getDetails();
        java.lang.String str16 = coveredParkingDecorator14.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator14);
        parking.ParkingLotManager parkingLotManager18 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot22 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str23 = parkingSpot22.getLocation();
        java.lang.String str24 = parkingSpot22.getLocation();
        parkingLotManager18.addParkingSpot(parkingSpot22);
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str30 = parkingSpot29.getLocation();
        parkingLotManager18.addParkingSpot(parkingSpot29);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager18.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager18.getParkingSpots();
        parking.ParkingLotManager parkingLotManager34 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot38 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str39 = parkingSpot38.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator(parkingSpot38);
        java.lang.String str41 = coveredParkingDecorator40.getDetails();
        parking.EVChargingDecorator eVChargingDecorator42 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator40);
        parkingLotManager34.addParkingSpot((parking.ParkingSpot) eVChargingDecorator42);
        java.lang.String str44 = eVChargingDecorator42.getDetails();
        parkingLotManager18.addParkingSpot((parking.ParkingSpot) eVChargingDecorator42);
        parking.HandicapAccessDecorator handicapAccessDecorator46 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator42);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator46);
        java.util.List<parking.ParkingSpot> parkingSpotList48 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot49 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingLotManager0.addParkingSpot(parkingSpot49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingLotManager34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str41, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str44, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList48);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator20 = new parking.HandicapAccessDecorator(parkingSpot17);
        java.lang.String str21 = handicapAccessDecorator20.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator20);
        java.lang.String str23 = handicapAccessDecorator20.getDetails();
        java.lang.String str24 = handicapAccessDecorator20.getDetails();
        java.lang.String str25 = handicapAccessDecorator20.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str23, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str24, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str25, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = coveredParkingDecorator8.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator11);
        java.lang.String str13 = eVChargingDecorator11.getDetails();
        java.lang.String str14 = eVChargingDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager9 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager9.addParkingSpot(parkingSpot13);
        java.lang.String str15 = parkingSpot13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator(parkingSpot13);
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str18 = eVChargingDecorator16.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator16);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager20.addParkingSpot(parkingSpot24);
        java.lang.String str26 = parkingSpot24.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot24);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        int int30 = handicapAccessDecorator29.getId();
        java.lang.String str31 = handicapAccessDecorator29.getLocation();
        java.lang.String str32 = handicapAccessDecorator29.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str38 = parkingSpot37.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator39 = new parking.CoveredParkingDecorator(parkingSpot37);
        java.lang.String str40 = coveredParkingDecorator39.getDetails();
        java.lang.String str41 = coveredParkingDecorator39.getDetails();
        java.lang.String str42 = coveredParkingDecorator39.getLocation();
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator39);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator43);
        parking.ParkingLotManager parkingLotManager45 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot49 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str50 = parkingSpot49.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator51 = new parking.CoveredParkingDecorator(parkingSpot49);
        java.lang.String str52 = coveredParkingDecorator51.getDetails();
        parking.EVChargingDecorator eVChargingDecorator53 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator51);
        parkingLotManager45.addParkingSpot((parking.ParkingSpot) eVChargingDecorator53);
        java.lang.String str55 = eVChargingDecorator53.getLocation();
        int int56 = eVChargingDecorator53.getId();
        parking.EVChargingDecorator eVChargingDecorator57 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator53);
        java.lang.String str58 = eVChargingDecorator53.getDetails();
        java.lang.String str59 = eVChargingDecorator53.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator53);
        parking.ParkingLotManager parkingLotManager61 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot65 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager61.addParkingSpot(parkingSpot65);
        java.lang.String str67 = parkingSpot65.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator68 = new parking.CoveredParkingDecorator(parkingSpot65);
        parking.EVChargingDecorator eVChargingDecorator69 = new parking.EVChargingDecorator(parkingSpot65);
        int int70 = eVChargingDecorator69.getId();
        java.lang.String str71 = eVChargingDecorator69.getDetails();
        java.lang.String str72 = eVChargingDecorator69.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator69);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingLotManager9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str32, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str40, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str41, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(parkingLotManager45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str52, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str58, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str59, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingLotManager61);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str71, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str72, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str14 = eVChargingDecorator8.getLocation();
        java.lang.String str15 = eVChargingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator16 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str18 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available", "Parking Spot ID: 32, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        java.lang.String str13 = coveredParkingDecorator5.getDetails();
        java.lang.String str14 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int16 = coveredParkingDecorator5.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str8 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str24 = eVChargingDecorator21.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str24, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        java.lang.String str7 = parkingSpot4.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        int int9 = parkingSpot4.getId();
        java.lang.String str10 = parkingSpot4.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str22 = coveredParkingDecorator20.getDetails();
        java.lang.String str23 = coveredParkingDecorator20.getDetails();
        java.lang.String str24 = coveredParkingDecorator20.getDetails();
        int int25 = coveredParkingDecorator20.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str22, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str23, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str24, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        int int7 = parkingSpot4.getId();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator(parkingSpot4);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str7 = handicapAccessDecorator6.getLocation();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        java.lang.String str9 = handicapAccessDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator10);
        java.lang.String str13 = eVChargingDecorator10.getDetails();
        java.lang.String str14 = eVChargingDecorator10.getDetails();
        java.lang.String str15 = eVChargingDecorator10.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        java.lang.String str10 = eVChargingDecorator7.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator20 = new parking.HandicapAccessDecorator(parkingSpot17);
        java.lang.String str21 = handicapAccessDecorator20.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator20);
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot((-1), "", "");
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        java.lang.String str29 = parkingSpot26.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot26);
        parking.ParkingLotManager parkingLotManager31 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager31.addParkingSpot(parkingSpot35);
        java.lang.String str37 = parkingSpot35.getLocation();
        int int38 = parkingSpot35.getId();
        parking.EVChargingDecorator eVChargingDecorator39 = new parking.EVChargingDecorator(parkingSpot35);
        parking.HandicapAccessDecorator handicapAccessDecorator40 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator39);
        java.lang.String str41 = handicapAccessDecorator40.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator40);
        java.lang.String str43 = handicapAccessDecorator40.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(parkingLotManager31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str41, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str43, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        java.lang.String str11 = handicapAccessDecorator6.getDetails();
        int int12 = handicapAccessDecorator6.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.Class<?> wildcardClass10 = eVChargingDecorator9.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str9 = handicapAccessDecorator6.getDetails();
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        java.lang.String str11 = handicapAccessDecorator6.getDetails();
        int int12 = handicapAccessDecorator6.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str10 = handicapAccessDecorator6.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.Class<?> wildcardClass12 = handicapAccessDecorator6.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList12 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str17 = parkingSpot16.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator18 = new parking.CoveredParkingDecorator(parkingSpot16);
        java.lang.String str19 = coveredParkingDecorator18.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList25 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingLotManager0.addParkingSpot(parkingSpot26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(parkingSpotList12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(parkingSpotList25);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = coveredParkingDecorator8.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator11);
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: ");
        int int4 = parkingSpot3.getId();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        java.lang.String str13 = coveredParkingDecorator9.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        java.lang.String str31 = eVChargingDecorator28.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator28);
        java.lang.String str34 = eVChargingDecorator28.getDetails();
        parking.EVChargingDecorator eVChargingDecorator35 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        java.lang.String str36 = eVChargingDecorator28.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str36, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 100, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str4, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) 'a', "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str5 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 97, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str5, "Parking Spot ID: 97, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(100, "Parking Spot ID: -1, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: ", "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        java.lang.String str8 = eVChargingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        java.lang.Class<?> wildcardClass10 = coveredParkingDecorator9.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager24 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager24.addParkingSpot(parkingSpot28);
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        java.lang.String str35 = parkingSpot33.getLocation();
        parkingLotManager24.addParkingSpot(parkingSpot33);
        int int37 = parkingSpot33.getId();
        java.lang.String str38 = parkingSpot33.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot33);
        java.util.List<parking.ParkingSpot> parkingSpotList40 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str45 = parkingSpot44.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator46 = new parking.CoveredParkingDecorator(parkingSpot44);
        parking.HandicapAccessDecorator handicapAccessDecorator47 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator46);
        java.lang.String str48 = handicapAccessDecorator47.getDetails();
        java.lang.String str49 = handicapAccessDecorator47.getDetails();
        java.lang.String str50 = handicapAccessDecorator47.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator51 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator47);
        int int52 = handicapAccessDecorator47.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator47);
        java.lang.Class<?> wildcardClass54 = handicapAccessDecorator47.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertNotNull(parkingLotManager24);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(parkingSpotList40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str48, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str49, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        int int7 = parkingSpot4.getId();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str13 = eVChargingDecorator8.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((-1), "", "");
        parkingLotManager0.addParkingSpot(parkingSpot16);
        parking.CoveredParkingDecorator coveredParkingDecorator18 = new parking.CoveredParkingDecorator(parkingSpot16);
        java.lang.String str19 = coveredParkingDecorator18.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        java.lang.String str32 = parkingSpot27.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator(parkingSpot27);
        parking.HandicapAccessDecorator handicapAccessDecorator34 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator33);
        java.lang.String str35 = handicapAccessDecorator33.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str32, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str35, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        java.lang.String str11 = handicapAccessDecorator7.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str13 = handicapAccessDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str10 = eVChargingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator11);
        java.lang.String str13 = eVChargingDecorator11.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = eVChargingDecorator11.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator11);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot18);
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator22.getLocation();
        java.lang.String str24 = coveredParkingDecorator22.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking" + "'", str24, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking");
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        java.lang.String str40 = coveredParkingDecorator36.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str40, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str13 = eVChargingDecorator12.getDetails();
        java.lang.String str14 = eVChargingDecorator12.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(35, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking", "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = parkingSpot3.getDetails();
        java.lang.String str7 = parkingSpot3.getParkingLot();
        int int8 = parkingSpot3.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str6, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str14 = eVChargingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator13);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str5 = coveredParkingDecorator4.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str5, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator(parkingSpot11);
        java.lang.String str16 = handicapAccessDecorator15.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator15);
        java.lang.String str18 = handicapAccessDecorator15.getLocation();
        java.lang.String str19 = handicapAccessDecorator15.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking, EV Charging Available");
        java.lang.String str4 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 0, Location: Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking, EV Charging Available" + "'", str4, "Parking Spot ID: 0, Location: Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        int int11 = eVChargingDecorator8.getId();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator12);
        java.lang.String str14 = eVChargingDecorator12.getDetails();
        java.lang.String str15 = eVChargingDecorator12.getLocation();
        java.lang.Class<?> wildcardClass16 = eVChargingDecorator12.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int12 = handicapAccessDecorator11.getId();
        java.lang.String str13 = handicapAccessDecorator11.getDetails();
        java.lang.String str14 = handicapAccessDecorator11.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "Parking Spot ID: 1, Location: , Lot: ", "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: Parking Spot ID: 1, Location: , Lot: , Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available" + "'", str4, "Parking Spot ID: 1, Location: Parking Spot ID: 1, Location: , Lot: , Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: , Lot: " + "'", str5, "Parking Spot ID: 1, Location: , Lot: ");
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        java.lang.String str5 = parkingSpot3.getLocation();
        java.lang.String str6 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str14 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str16 = coveredParkingDecorator5.getDetails();
        java.lang.String str17 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str17, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        int int6 = coveredParkingDecorator5.getId();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(32, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Handicap Accessible", "Parking Spot ID: -1, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, Covered Parking");
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        int int5 = parkingSpot3.getId();
        java.lang.String str6 = parkingSpot3.getLocation();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available" + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str9 = handicapAccessDecorator6.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str12 = coveredParkingDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator(parkingSpot11);
        java.lang.String str16 = handicapAccessDecorator15.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator15);
        int int18 = coveredParkingDecorator17.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str29 = handicapAccessDecorator28.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager24 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager24.addParkingSpot(parkingSpot28);
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        java.lang.String str35 = parkingSpot33.getLocation();
        parkingLotManager24.addParkingSpot(parkingSpot33);
        int int37 = parkingSpot33.getId();
        java.lang.String str38 = parkingSpot33.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot33);
        java.util.List<parking.ParkingSpot> parkingSpotList40 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str45 = parkingSpot44.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator46 = new parking.CoveredParkingDecorator(parkingSpot44);
        parking.HandicapAccessDecorator handicapAccessDecorator47 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator46);
        java.lang.String str48 = handicapAccessDecorator47.getDetails();
        java.lang.String str49 = handicapAccessDecorator47.getDetails();
        java.lang.String str50 = handicapAccessDecorator47.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator51 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator47);
        int int52 = handicapAccessDecorator47.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator47);
        parking.ParkingSpot parkingSpot57 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str58 = parkingSpot57.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator59 = new parking.CoveredParkingDecorator(parkingSpot57);
        java.lang.String str60 = coveredParkingDecorator59.getDetails();
        parking.EVChargingDecorator eVChargingDecorator61 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator59);
        parking.CoveredParkingDecorator coveredParkingDecorator62 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator59);
        parking.CoveredParkingDecorator coveredParkingDecorator63 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator62);
        parking.EVChargingDecorator eVChargingDecorator64 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator63);
        java.lang.String str65 = coveredParkingDecorator63.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator63);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertNotNull(parkingLotManager24);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(parkingSpotList40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str48, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str49, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str60, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str65, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking");
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str4, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 100, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str6 = handicapAccessDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str6, "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getDetails();
        int int8 = coveredParkingDecorator5.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot10);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator11);
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator12);
        java.lang.String str14 = eVChargingDecorator12.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator12);
        java.util.List<parking.ParkingSpot> parkingSpotList16 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot(0, "", "Parking Spot ID: 32, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        java.lang.String str21 = parkingSpot20.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot20);
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str14, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertNotNull(parkingSpotList16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(parkingSpotList23);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        java.lang.String str13 = eVChargingDecorator8.getParkingLot();
        java.lang.String str14 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getParkingLot();
        int int9 = coveredParkingDecorator7.getId();
        java.lang.String str10 = coveredParkingDecorator7.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        int int11 = eVChargingDecorator8.getId();
        java.lang.String str12 = eVChargingDecorator8.getLocation();
        java.lang.String str13 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '4', "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str5 = eVChargingDecorator4.getDetails();
        java.lang.String str6 = eVChargingDecorator4.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator4);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, EV Charging Available" + "'", str5, "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available" + "'", str6, "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available" + "'", str8, "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        java.lang.String str5 = parkingSpot3.getLocation();
        java.lang.String str6 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        java.lang.String str13 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int8 = coveredParkingDecorator7.getId();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        java.lang.String str17 = parkingSpot15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot15);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager20.addParkingSpot(parkingSpot24);
        java.lang.String str26 = parkingSpot24.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot24);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        java.lang.String str31 = coveredParkingDecorator27.getDetails();
        int int32 = coveredParkingDecorator27.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str30, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str31, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot18);
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingLotManager parkingLotManager22 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str27 = parkingSpot26.getLocation();
        java.lang.String str28 = parkingSpot26.getLocation();
        parkingLotManager22.addParkingSpot(parkingSpot26);
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        parkingLotManager22.addParkingSpot(parkingSpot33);
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str40 = parkingSpot39.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator(parkingSpot39);
        parking.EVChargingDecorator eVChargingDecorator42 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator41);
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator42);
        parkingLotManager22.addParkingSpot((parking.ParkingSpot) eVChargingDecorator43);
        parking.ParkingLotManager parkingLotManager45 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot49 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager45.addParkingSpot(parkingSpot49);
        java.lang.String str51 = parkingSpot49.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator52 = new parking.HandicapAccessDecorator(parkingSpot49);
        parkingLotManager22.addParkingSpot(parkingSpot49);
        java.lang.String str54 = parkingSpot49.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot49);
        parking.ParkingLotManager parkingLotManager56 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot60 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager56.addParkingSpot(parkingSpot60);
        java.lang.String str62 = parkingSpot60.getDetails();
        parking.EVChargingDecorator eVChargingDecorator63 = new parking.EVChargingDecorator(parkingSpot60);
        java.lang.String str64 = parkingSpot60.getLocation();
        parking.EVChargingDecorator eVChargingDecorator65 = new parking.EVChargingDecorator(parkingSpot60);
        java.lang.String str66 = eVChargingDecorator65.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator65);
        java.lang.String str68 = eVChargingDecorator65.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingLotManager22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(parkingLotManager45);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str54, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertNotNull(parkingLotManager56);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str62, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str68, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        int int11 = eVChargingDecorator8.getId();
        java.lang.Class<?> wildcardClass12 = eVChargingDecorator8.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator7);
        java.util.List<parking.ParkingSpot> parkingSpotList12 = parkingLotManager0.getParkingSpots();
        java.lang.Class<?> wildcardClass13 = parkingSpotList12.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        int int13 = handicapAccessDecorator12.getId();
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator12);
        java.lang.String str15 = handicapAccessDecorator12.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible" + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available", "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        int int7 = parkingSpot4.getId();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str11 = parkingSpot4.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator(parkingSpot4);
        java.lang.String str13 = parkingSpot4.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(100, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Covered Parking, EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator(parkingSpot19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator(parkingSpot19);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str28 = parkingSpot27.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator(parkingSpot27);
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        int int31 = handicapAccessDecorator30.getId();
        java.lang.String str32 = handicapAccessDecorator30.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator30);
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        java.lang.String str36 = coveredParkingDecorator35.getDetails();
        java.lang.String str37 = coveredParkingDecorator35.getDetails();
        java.lang.String str38 = coveredParkingDecorator35.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str36, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) -1, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available", "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator4);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        int int4 = parkingSpot3.getId();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot18);
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingLotManager parkingLotManager22 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str27 = parkingSpot26.getLocation();
        java.lang.String str28 = parkingSpot26.getLocation();
        parkingLotManager22.addParkingSpot(parkingSpot26);
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        parkingLotManager22.addParkingSpot(parkingSpot33);
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str40 = parkingSpot39.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator(parkingSpot39);
        parking.EVChargingDecorator eVChargingDecorator42 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator41);
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator42);
        parkingLotManager22.addParkingSpot((parking.ParkingSpot) eVChargingDecorator43);
        parking.ParkingLotManager parkingLotManager45 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot49 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager45.addParkingSpot(parkingSpot49);
        java.lang.String str51 = parkingSpot49.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator52 = new parking.HandicapAccessDecorator(parkingSpot49);
        parkingLotManager22.addParkingSpot(parkingSpot49);
        java.lang.String str54 = parkingSpot49.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot49);
        java.util.List<parking.ParkingSpot> parkingSpotList56 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot60 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str61 = parkingSpot60.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator62 = new parking.CoveredParkingDecorator(parkingSpot60);
        parking.EVChargingDecorator eVChargingDecorator63 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator62);
        parking.EVChargingDecorator eVChargingDecorator64 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator63);
        parking.EVChargingDecorator eVChargingDecorator65 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator63);
        java.lang.String str66 = eVChargingDecorator63.getDetails();
        parking.EVChargingDecorator eVChargingDecorator67 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator63);
        java.lang.String str68 = eVChargingDecorator67.getDetails();
        java.lang.String str69 = eVChargingDecorator67.getDetails();
        parking.EVChargingDecorator eVChargingDecorator70 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator67);
        parking.CoveredParkingDecorator coveredParkingDecorator71 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator70);
        parking.CoveredParkingDecorator coveredParkingDecorator72 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator70);
        java.lang.String str73 = coveredParkingDecorator72.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator72);
        java.util.List<parking.ParkingSpot> parkingSpotList75 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot79 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str80 = parkingSpot79.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator81 = new parking.CoveredParkingDecorator(parkingSpot79);
        java.lang.String str82 = coveredParkingDecorator81.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator83 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator81);
        parking.EVChargingDecorator eVChargingDecorator84 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator81);
        parking.EVChargingDecorator eVChargingDecorator85 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator84);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator85);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingLotManager22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(parkingLotManager45);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str54, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertNotNull(parkingSpotList56);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str66, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str68, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str69, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking" + "'", str73, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList75);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str82, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        java.lang.String str9 = coveredParkingDecorator5.getLocation();
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        java.lang.String str11 = coveredParkingDecorator9.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        int int9 = eVChargingDecorator7.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = eVChargingDecorator7.getDetails();
        java.lang.String str12 = eVChargingDecorator7.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str12 = coveredParkingDecorator11.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator11);
        java.lang.String str14 = coveredParkingDecorator11.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        int int7 = parkingSpot4.getId();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        int int11 = eVChargingDecorator8.getId();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        java.lang.String str13 = eVChargingDecorator8.getLocation();
        java.lang.String str14 = eVChargingDecorator8.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.util.List<parking.ParkingSpot> parkingSpotList24 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList25 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(parkingSpotList24);
        org.junit.Assert.assertNotNull(parkingSpotList25);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator(parkingSpot35);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator36);
        parking.ParkingLotManager parkingLotManager38 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot42 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager38.addParkingSpot(parkingSpot42);
        java.lang.String str44 = parkingSpot42.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator45 = new parking.CoveredParkingDecorator(parkingSpot42);
        java.lang.String str46 = coveredParkingDecorator45.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator47 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator45);
        parking.CoveredParkingDecorator coveredParkingDecorator48 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator47);
        java.lang.String str49 = coveredParkingDecorator48.getDetails();
        int int50 = coveredParkingDecorator48.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator48);
        java.util.List<parking.ParkingSpot> parkingSpotList52 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList53 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList54 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList55 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertNotNull(parkingLotManager38);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str46, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str49, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(parkingSpotList52);
        org.junit.Assert.assertNotNull(parkingSpotList53);
        org.junit.Assert.assertNotNull(parkingSpotList54);
        org.junit.Assert.assertNotNull(parkingSpotList55);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        int int5 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        java.lang.String str11 = handicapAccessDecorator7.getParkingLot();
        int int12 = handicapAccessDecorator7.getId();
        java.lang.String str13 = handicapAccessDecorator7.getLocation();
        java.lang.String str14 = handicapAccessDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) -1, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available", "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        int int5 = parkingSpot3.getId();
        java.lang.String str6 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str6, "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        java.lang.String str13 = handicapAccessDecorator12.getDetails();
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator12);
        int int15 = handicapAccessDecorator12.getId();
        int int16 = handicapAccessDecorator12.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        java.lang.String str41 = coveredParkingDecorator40.getDetails();
        java.lang.String str42 = coveredParkingDecorator40.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str41, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str42, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = coveredParkingDecorator8.getDetails();
        java.lang.String str10 = coveredParkingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str12 = coveredParkingDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator(parkingSpot11);
        java.lang.String str16 = eVChargingDecorator15.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) 'a', "Parking Spot ID: -1, Location: , Lot: , Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        int int26 = parkingSpot25.getId();
        int int27 = parkingSpot25.getId();
        parkingLotManager0.addParkingSpot(parkingSpot25);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        int int6 = parkingSpot3.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str23 = eVChargingDecorator21.getLocation();
        int int24 = eVChargingDecorator21.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator25 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator21);
        int int26 = handicapAccessDecorator25.getId();
        java.lang.String str27 = handicapAccessDecorator25.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Handicap Accessible" + "'", str27, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        java.lang.String str13 = coveredParkingDecorator5.getDetails();
        java.lang.String str14 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str16 = coveredParkingDecorator15.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) 'a', "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Handicap Accessible", "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        java.lang.String str13 = handicapAccessDecorator12.getLocation();
        int int14 = handicapAccessDecorator12.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str5 = handicapAccessDecorator4.getParkingLot();
        java.lang.String str6 = handicapAccessDecorator4.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 10, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str6, "Parking Spot ID: 10, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) 'a', "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, EV Charging Available, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str11 = parkingSpot10.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator(parkingSpot10);
        java.lang.String str13 = coveredParkingDecorator12.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        java.lang.String str15 = coveredParkingDecorator14.getDetails();
        java.lang.String str16 = coveredParkingDecorator14.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator14);
        parking.ParkingLotManager parkingLotManager18 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot22 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str23 = parkingSpot22.getLocation();
        java.lang.String str24 = parkingSpot22.getLocation();
        parkingLotManager18.addParkingSpot(parkingSpot22);
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str30 = parkingSpot29.getLocation();
        parkingLotManager18.addParkingSpot(parkingSpot29);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager18.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager18.getParkingSpots();
        parking.ParkingLotManager parkingLotManager34 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot38 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str39 = parkingSpot38.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator(parkingSpot38);
        java.lang.String str41 = coveredParkingDecorator40.getDetails();
        parking.EVChargingDecorator eVChargingDecorator42 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator40);
        parkingLotManager34.addParkingSpot((parking.ParkingSpot) eVChargingDecorator42);
        java.lang.String str44 = eVChargingDecorator42.getDetails();
        parkingLotManager18.addParkingSpot((parking.ParkingSpot) eVChargingDecorator42);
        parking.HandicapAccessDecorator handicapAccessDecorator46 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator42);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator46);
        java.lang.Class<?> wildcardClass48 = handicapAccessDecorator46.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingLotManager34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str41, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str44, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        int int9 = eVChargingDecorator8.getId();
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        java.lang.String str11 = handicapAccessDecorator7.getParkingLot();
        java.lang.String str12 = handicapAccessDecorator7.getDetails();
        java.lang.String str13 = handicapAccessDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        int int9 = eVChargingDecorator7.getId();
        int int10 = eVChargingDecorator7.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.Class<?> wildcardClass12 = eVChargingDecorator7.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str8 = eVChargingDecorator7.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        java.lang.String str11 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator(parkingSpot9);
        java.lang.String str14 = eVChargingDecorator13.getDetails();
        java.lang.String str15 = eVChargingDecorator13.getParkingLot();
        java.lang.String str16 = eVChargingDecorator13.getDetails();
        java.lang.String str17 = eVChargingDecorator13.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        java.lang.String str9 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str10 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str11 = coveredParkingDecorator5.getLocation();
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = coveredParkingDecorator8.getDetails();
        java.lang.String str10 = coveredParkingDecorator8.getDetails();
        java.lang.String str11 = coveredParkingDecorator8.getDetails();
        java.lang.String str12 = coveredParkingDecorator8.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList9 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList10 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingSpotList9);
        org.junit.Assert.assertNotNull(parkingSpotList10);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        int int10 = eVChargingDecorator6.getId();
        java.lang.String str11 = eVChargingDecorator6.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator13);
        java.lang.String str15 = handicapAccessDecorator13.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = handicapAccessDecorator11.getDetails();
        java.lang.String str13 = handicapAccessDecorator11.getDetails();
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        java.lang.String str15 = handicapAccessDecorator11.getLocation();
        java.lang.String str16 = handicapAccessDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        int int11 = eVChargingDecorator8.getId();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator12);
        java.lang.String str14 = eVChargingDecorator12.getDetails();
        java.lang.String str15 = eVChargingDecorator12.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        int int5 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str7 = parkingSpot3.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str9 = handicapAccessDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        int int5 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str8 = coveredParkingDecorator6.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator5);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager33 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager33.addParkingSpot(parkingSpot37);
        java.lang.String str39 = parkingSpot37.getLocation();
        int int40 = parkingSpot37.getId();
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator(parkingSpot37);
        parking.HandicapAccessDecorator handicapAccessDecorator42 = new parking.HandicapAccessDecorator(parkingSpot37);
        parkingLotManager0.addParkingSpot(parkingSpot37);
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str48 = parkingSpot47.getLocation();
        int int49 = parkingSpot47.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator50 = new parking.CoveredParkingDecorator(parkingSpot47);
        parking.EVChargingDecorator eVChargingDecorator51 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator50);
        java.lang.String str52 = coveredParkingDecorator50.getDetails();
        int int53 = coveredParkingDecorator50.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator50);
        java.util.List<parking.ParkingSpot> parkingSpotList55 = parkingLotManager0.getParkingSpots();
        java.lang.Class<?> wildcardClass56 = parkingSpotList55.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingLotManager33);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str52, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(parkingSpotList55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager7 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager7.addParkingSpot(parkingSpot11);
        java.lang.String str13 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator(parkingSpot11);
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator(parkingSpot11);
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator15);
        java.lang.String str17 = handicapAccessDecorator16.getLocation();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator16);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator16);
        java.lang.String str20 = handicapAccessDecorator16.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator16);
        java.lang.String str22 = coveredParkingDecorator21.getLocation();
        java.lang.String str23 = coveredParkingDecorator21.getDetails();
        java.lang.String str24 = coveredParkingDecorator21.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingLotManager7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str20, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str23, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str24, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingLotManager parkingLotManager31 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager31.addParkingSpot(parkingSpot35);
        java.lang.String str37 = parkingSpot35.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator(parkingSpot35);
        java.lang.String str39 = coveredParkingDecorator38.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator38);
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str45 = parkingSpot44.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator46 = new parking.CoveredParkingDecorator(parkingSpot44);
        java.lang.String str47 = coveredParkingDecorator46.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator48 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator46);
        java.lang.String str49 = coveredParkingDecorator46.getDetails();
        java.lang.String str50 = coveredParkingDecorator46.getLocation();
        java.lang.String str51 = coveredParkingDecorator46.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator46);
        java.util.List<parking.ParkingSpot> parkingSpotList53 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList54 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str39, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str47, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str49, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(parkingSpotList53);
        org.junit.Assert.assertNotNull(parkingSpotList54);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        java.util.List<parking.ParkingSpot> parkingSpotList1 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager2 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot6 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str7 = parkingSpot6.getLocation();
        java.lang.String str8 = parkingSpot6.getLocation();
        parkingLotManager2.addParkingSpot(parkingSpot6);
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str14 = parkingSpot13.getLocation();
        parkingLotManager2.addParkingSpot(parkingSpot13);
        java.util.List<parking.ParkingSpot> parkingSpotList16 = parkingLotManager2.getParkingSpots();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        java.lang.String str25 = coveredParkingDecorator22.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator26 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager2.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator22);
        java.lang.String str29 = coveredParkingDecorator22.getDetails();
        int int30 = coveredParkingDecorator22.getId();
        java.lang.String str31 = coveredParkingDecorator22.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList1);
        org.junit.Assert.assertNotNull(parkingLotManager2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(parkingSpotList16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str25, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str31, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str8 = coveredParkingDecorator6.getDetails();
        int int9 = coveredParkingDecorator6.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(32, "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str6 = eVChargingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, EV Charging Available" + "'", str6, "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager9 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager9.addParkingSpot(parkingSpot13);
        java.lang.String str15 = parkingSpot13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator(parkingSpot13);
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str18 = eVChargingDecorator16.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator16);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager20.addParkingSpot(parkingSpot24);
        java.lang.String str26 = parkingSpot24.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot24);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        int int30 = handicapAccessDecorator29.getId();
        java.lang.String str31 = handicapAccessDecorator29.getLocation();
        java.lang.String str32 = handicapAccessDecorator29.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str38 = parkingSpot37.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator39 = new parking.CoveredParkingDecorator(parkingSpot37);
        java.lang.String str40 = coveredParkingDecorator39.getDetails();
        java.lang.String str41 = coveredParkingDecorator39.getDetails();
        java.lang.String str42 = coveredParkingDecorator39.getLocation();
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator39);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator43);
        parking.ParkingLotManager parkingLotManager45 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot49 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str50 = parkingSpot49.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator51 = new parking.CoveredParkingDecorator(parkingSpot49);
        java.lang.String str52 = coveredParkingDecorator51.getDetails();
        parking.EVChargingDecorator eVChargingDecorator53 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator51);
        parkingLotManager45.addParkingSpot((parking.ParkingSpot) eVChargingDecorator53);
        java.lang.String str55 = eVChargingDecorator53.getLocation();
        int int56 = eVChargingDecorator53.getId();
        parking.EVChargingDecorator eVChargingDecorator57 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator53);
        java.lang.String str58 = eVChargingDecorator53.getDetails();
        java.lang.String str59 = eVChargingDecorator53.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator53);
        java.lang.String str61 = eVChargingDecorator53.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingLotManager9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str32, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str40, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str41, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(parkingLotManager45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str52, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str58, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str59, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator5.getDetails();
        int int8 = handicapAccessDecorator5.getId();
        java.lang.String str9 = handicapAccessDecorator5.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str11 = handicapAccessDecorator5.getParkingLot();
        java.lang.String str12 = handicapAccessDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator10);
        java.lang.String str13 = eVChargingDecorator10.getDetails();
        java.lang.String str14 = eVChargingDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator10);
        java.lang.String str16 = handicapAccessDecorator15.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.CoveredParkingDecorator coveredParkingDecorator23 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str24 = eVChargingDecorator21.getParkingLot();
        java.lang.String str25 = eVChargingDecorator21.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str25, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        int int11 = eVChargingDecorator8.getId();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.HandicapAccessDecorator handicapAccessDecorator14 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str15 = handicapAccessDecorator14.getDetails();
        java.lang.String str16 = handicapAccessDecorator14.getDetails();
        java.lang.String str17 = handicapAccessDecorator14.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str17, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        java.lang.String str15 = eVChargingDecorator14.getDetails();
        java.lang.String str16 = eVChargingDecorator14.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, EV Charging Available" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, EV Charging Available" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '4', "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator4);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        int int7 = coveredParkingDecorator6.getId();
        java.lang.String str8 = coveredParkingDecorator6.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str8, "Parking Spot ID: -1, Location: , Lot: ");
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str29 = eVChargingDecorator24.getDetails();
        java.lang.String str30 = eVChargingDecorator24.getDetails();
        java.lang.String str31 = eVChargingDecorator24.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        java.lang.String str17 = parkingSpot15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot15);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager20.addParkingSpot(parkingSpot24);
        java.lang.String str26 = parkingSpot24.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot24);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parking.EVChargingDecorator eVChargingDecorator32 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str33 = coveredParkingDecorator27.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str30, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        java.lang.Class<?> wildcardClass9 = handicapAccessDecorator6.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        int int9 = eVChargingDecorator7.getId();
        int int10 = eVChargingDecorator7.getId();
        java.lang.String str11 = eVChargingDecorator7.getDetails();
        java.lang.String str12 = eVChargingDecorator7.getDetails();
        java.lang.String str13 = eVChargingDecorator7.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        java.lang.String str17 = parkingSpot15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot15);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager20.addParkingSpot(parkingSpot24);
        java.lang.String str26 = parkingSpot24.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot24);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parking.EVChargingDecorator eVChargingDecorator32 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parking.EVChargingDecorator eVChargingDecorator33 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator32);
        java.lang.String str34 = eVChargingDecorator33.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str30, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str34, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getDetails();
        java.lang.String str11 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        java.lang.String str13 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager21.addParkingSpot(parkingSpot25);
        java.lang.String str27 = parkingSpot25.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot25);
        java.lang.String str29 = parkingSpot25.getLocation();
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator(parkingSpot25);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator30);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList34 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList35 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str40 = parkingSpot39.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator(parkingSpot39);
        parking.EVChargingDecorator eVChargingDecorator42 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator41);
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator42);
        parking.EVChargingDecorator eVChargingDecorator44 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator42);
        java.lang.String str45 = eVChargingDecorator42.getDetails();
        parking.EVChargingDecorator eVChargingDecorator46 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator42);
        java.lang.String str47 = eVChargingDecorator46.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator48 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator46);
        java.lang.String str49 = eVChargingDecorator46.getDetails();
        java.lang.String str50 = eVChargingDecorator46.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator51 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator46);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator51);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingSpotList34);
        org.junit.Assert.assertNotNull(parkingSpotList35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str45, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str47, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str49, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str50, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str12 = coveredParkingDecorator11.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator11);
        java.lang.String str14 = handicapAccessDecorator13.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "hi!", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator24 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList26 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList27 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList28 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList26);
        org.junit.Assert.assertNotNull(parkingSpotList27);
        org.junit.Assert.assertNotNull(parkingSpotList28);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Covered Parking");
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        java.lang.String str11 = eVChargingDecorator8.getParkingLot();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        java.lang.String str13 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator4);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getParkingLot();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str6, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str14 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str17 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str17, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) 'a', "Parking Spot ID: 1, Location: hi!, Lot: ", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator4);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        int int11 = eVChargingDecorator8.getId();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.HandicapAccessDecorator handicapAccessDecorator14 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str15 = handicapAccessDecorator14.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator14);
        java.lang.String str17 = handicapAccessDecorator16.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible, Handicap Accessible" + "'", str17, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator20 = new parking.HandicapAccessDecorator(parkingSpot17);
        java.lang.String str21 = handicapAccessDecorator20.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator20);
        java.lang.String str23 = handicapAccessDecorator20.getDetails();
        java.lang.String str24 = handicapAccessDecorator20.getDetails();
        int int25 = handicapAccessDecorator20.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator26 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator20);
        java.lang.String str27 = coveredParkingDecorator26.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str23, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str24, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Covered Parking" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator(parkingSpot11);
        java.lang.String str16 = handicapAccessDecorator15.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator15);
        java.lang.String str18 = handicapAccessDecorator15.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: ");
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = coveredParkingDecorator5.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str14 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str17 = handicapAccessDecorator16.getDetails();
        java.lang.String str18 = handicapAccessDecorator16.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str17, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager9 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager9.addParkingSpot(parkingSpot13);
        java.lang.String str15 = parkingSpot13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator(parkingSpot13);
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str18 = eVChargingDecorator16.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator16);
        parking.ParkingSpot parkingSpot23 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str24 = parkingSpot23.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator(parkingSpot23);
        parking.EVChargingDecorator eVChargingDecorator26 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator25);
        parking.EVChargingDecorator eVChargingDecorator27 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator26);
        java.lang.String str28 = eVChargingDecorator26.getLocation();
        int int29 = eVChargingDecorator26.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator26);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        int int35 = parkingSpot34.getId();
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator(parkingSpot34);
        parking.CoveredParkingDecorator coveredParkingDecorator37 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator37);
        parking.ParkingLotManager parkingLotManager39 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot43 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str44 = parkingSpot43.getLocation();
        java.lang.String str45 = parkingSpot43.getLocation();
        parkingLotManager39.addParkingSpot(parkingSpot43);
        parking.ParkingSpot parkingSpot50 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str51 = parkingSpot50.getLocation();
        parkingLotManager39.addParkingSpot(parkingSpot50);
        java.util.List<parking.ParkingSpot> parkingSpotList53 = parkingLotManager39.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList54 = parkingLotManager39.getParkingSpots();
        parking.ParkingLotManager parkingLotManager55 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot59 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str60 = parkingSpot59.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator61 = new parking.CoveredParkingDecorator(parkingSpot59);
        java.lang.String str62 = coveredParkingDecorator61.getDetails();
        parking.EVChargingDecorator eVChargingDecorator63 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator61);
        parkingLotManager55.addParkingSpot((parking.ParkingSpot) eVChargingDecorator63);
        java.lang.String str65 = eVChargingDecorator63.getDetails();
        parkingLotManager39.addParkingSpot((parking.ParkingSpot) eVChargingDecorator63);
        java.util.List<parking.ParkingSpot> parkingSpotList67 = parkingLotManager39.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList68 = parkingLotManager39.getParkingSpots();
        parking.ParkingSpot parkingSpot72 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str73 = parkingSpot72.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator74 = new parking.CoveredParkingDecorator(parkingSpot72);
        parking.EVChargingDecorator eVChargingDecorator75 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator74);
        java.lang.String str76 = coveredParkingDecorator74.getDetails();
        parkingLotManager39.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator74);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator74);
        java.util.List<parking.ParkingSpot> parkingSpotList79 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingLotManager9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(parkingLotManager39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(parkingSpotList53);
        org.junit.Assert.assertNotNull(parkingSpotList54);
        org.junit.Assert.assertNotNull(parkingLotManager55);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str62, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str65, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList67);
        org.junit.Assert.assertNotNull(parkingSpotList68);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str76, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList79);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        int int9 = coveredParkingDecorator5.getId();
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(100, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking", "hi!");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        int int5 = eVChargingDecorator4.getId();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = eVChargingDecorator7.getDetails();
        java.lang.String str12 = eVChargingDecorator7.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.util.List<parking.ParkingSpot> parkingSpotList28 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator(parkingSpot33);
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        java.lang.String str37 = coveredParkingDecorator35.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator35);
        parking.ParkingLotManager parkingLotManager39 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot43 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager39.addParkingSpot(parkingSpot43);
        java.util.List<parking.ParkingSpot> parkingSpotList45 = parkingLotManager39.getParkingSpots();
        parking.ParkingLotManager parkingLotManager46 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot50 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager46.addParkingSpot(parkingSpot50);
        java.lang.String str52 = parkingSpot50.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator53 = new parking.CoveredParkingDecorator(parkingSpot50);
        parking.CoveredParkingDecorator coveredParkingDecorator54 = new parking.CoveredParkingDecorator(parkingSpot50);
        parking.HandicapAccessDecorator handicapAccessDecorator55 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator54);
        java.lang.String str56 = handicapAccessDecorator55.getLocation();
        parking.EVChargingDecorator eVChargingDecorator57 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator55);
        parkingLotManager39.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator55);
        parking.ParkingSpot parkingSpot62 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str63 = parkingSpot62.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator64 = new parking.CoveredParkingDecorator(parkingSpot62);
        java.lang.String str65 = coveredParkingDecorator64.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator66 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator64);
        java.lang.String str67 = handicapAccessDecorator66.getLocation();
        parking.EVChargingDecorator eVChargingDecorator68 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator66);
        java.lang.String str69 = eVChargingDecorator68.getDetails();
        parkingLotManager39.addParkingSpot((parking.ParkingSpot) eVChargingDecorator68);
        java.lang.String str71 = eVChargingDecorator68.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator68);
        parking.ParkingSpot parkingSpot76 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str77 = parkingSpot76.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator78 = new parking.CoveredParkingDecorator(parkingSpot76);
        parking.EVChargingDecorator eVChargingDecorator79 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator78);
        parking.EVChargingDecorator eVChargingDecorator80 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator79);
        parking.EVChargingDecorator eVChargingDecorator81 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator79);
        parking.HandicapAccessDecorator handicapAccessDecorator82 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator81);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator81);
        parking.HandicapAccessDecorator handicapAccessDecorator84 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator81);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList28);
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager39);
        org.junit.Assert.assertNotNull(parkingSpotList45);
        org.junit.Assert.assertNotNull(parkingLotManager46);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str65, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available" + "'", str69, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available" + "'", str71, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str6 = handicapAccessDecorator5.getDetails();
        java.lang.String str7 = handicapAccessDecorator5.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str9 = handicapAccessDecorator6.getParkingLot();
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        java.lang.String str11 = handicapAccessDecorator6.getDetails();
        java.lang.String str12 = handicapAccessDecorator6.getDetails();
        java.lang.String str13 = handicapAccessDecorator6.getDetails();
        java.lang.String str14 = handicapAccessDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '4', "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, Covered Parking" + "'", str6, "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getParkingLot();
        java.lang.String str6 = parkingSpot3.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str8 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        java.lang.String str9 = handicapAccessDecorator6.getDetails();
        java.lang.Class<?> wildcardClass10 = handicapAccessDecorator6.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: 1, Location: , Lot: ", "Parking Spot ID: 1, Location: , Lot: ");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = handicapAccessDecorator11.getDetails();
        java.lang.String str13 = handicapAccessDecorator11.getDetails();
        java.lang.String str14 = handicapAccessDecorator11.getDetails();
        java.lang.String str15 = handicapAccessDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking", "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str5 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 10, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str5, "Parking Spot ID: 10, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList13 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager14.addParkingSpot(parkingSpot18);
        java.lang.String str20 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator(parkingSpot18);
        parkingLotManager0.addParkingSpot(parkingSpot18);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str28 = parkingSpot27.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator(parkingSpot27);
        java.lang.String str30 = coveredParkingDecorator29.getDetails();
        parking.EVChargingDecorator eVChargingDecorator31 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        java.lang.String str32 = coveredParkingDecorator29.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        java.lang.String str34 = coveredParkingDecorator29.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator35 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator35);
        parking.CoveredParkingDecorator coveredParkingDecorator37 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parking.EVChargingDecorator eVChargingDecorator38 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator37);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator37);
        java.util.List<parking.ParkingSpot> parkingSpotList40 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str45 = parkingSpot44.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator46 = new parking.CoveredParkingDecorator(parkingSpot44);
        parking.HandicapAccessDecorator handicapAccessDecorator47 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator46);
        int int48 = handicapAccessDecorator47.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator49 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator47);
        java.lang.String str50 = handicapAccessDecorator47.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator51 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator47);
        parking.CoveredParkingDecorator coveredParkingDecorator52 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator51);
        java.lang.String str53 = coveredParkingDecorator52.getDetails();
        java.lang.String str54 = coveredParkingDecorator52.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator52);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList13);
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Covered Parking" + "'", str53, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Covered Parking");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator(parkingSpot35);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator36);
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator42 = new parking.HandicapAccessDecorator(parkingSpot41);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator42);
        java.util.List<parking.ParkingSpot> parkingSpotList44 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager45 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot49 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str50 = parkingSpot49.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator51 = new parking.CoveredParkingDecorator(parkingSpot49);
        java.lang.String str52 = coveredParkingDecorator51.getDetails();
        parking.EVChargingDecorator eVChargingDecorator53 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator51);
        parkingLotManager45.addParkingSpot((parking.ParkingSpot) eVChargingDecorator53);
        java.lang.String str55 = eVChargingDecorator53.getLocation();
        java.lang.String str56 = eVChargingDecorator53.getDetails();
        java.lang.String str57 = eVChargingDecorator53.getDetails();
        java.lang.String str58 = eVChargingDecorator53.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator53);
        java.lang.Class<?> wildcardClass60 = parkingLotManager0.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertNotNull(parkingSpotList44);
        org.junit.Assert.assertNotNull(parkingLotManager45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str52, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str56, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str57, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str58, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot18);
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getDetails();
        java.lang.String str24 = coveredParkingDecorator20.getDetails();
        java.lang.String str25 = coveredParkingDecorator20.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str23, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str24, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str25, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator11);
        java.lang.String str13 = handicapAccessDecorator12.getParkingLot();
        java.lang.String str14 = handicapAccessDecorator12.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot(10, "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        parkingLotManager0.addParkingSpot(parkingSpot37);
        parking.ParkingLotManager parkingLotManager39 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot43 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str44 = parkingSpot43.getLocation();
        java.lang.String str45 = parkingSpot43.getLocation();
        parkingLotManager39.addParkingSpot(parkingSpot43);
        parking.ParkingSpot parkingSpot50 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str51 = parkingSpot50.getLocation();
        parkingLotManager39.addParkingSpot(parkingSpot50);
        java.util.List<parking.ParkingSpot> parkingSpotList53 = parkingLotManager39.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList54 = parkingLotManager39.getParkingSpots();
        parking.ParkingLotManager parkingLotManager55 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot59 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str60 = parkingSpot59.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator61 = new parking.CoveredParkingDecorator(parkingSpot59);
        java.lang.String str62 = coveredParkingDecorator61.getDetails();
        parking.EVChargingDecorator eVChargingDecorator63 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator61);
        parkingLotManager55.addParkingSpot((parking.ParkingSpot) eVChargingDecorator63);
        java.lang.String str65 = eVChargingDecorator63.getDetails();
        parkingLotManager39.addParkingSpot((parking.ParkingSpot) eVChargingDecorator63);
        java.util.List<parking.ParkingSpot> parkingSpotList67 = parkingLotManager39.getParkingSpots();
        parking.ParkingSpot parkingSpot71 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str72 = parkingSpot71.getLocation();
        int int73 = parkingSpot71.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator74 = new parking.CoveredParkingDecorator(parkingSpot71);
        parking.EVChargingDecorator eVChargingDecorator75 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator74);
        java.lang.String str76 = coveredParkingDecorator74.getDetails();
        java.lang.String str77 = coveredParkingDecorator74.getDetails();
        parkingLotManager39.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator74);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator74);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingLotManager39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(parkingSpotList53);
        org.junit.Assert.assertNotNull(parkingSpotList54);
        org.junit.Assert.assertNotNull(parkingLotManager55);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str62, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str65, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList67);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str76, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str77, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str6 = handicapAccessDecorator5.getLocation();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = handicapAccessDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator8);
        java.lang.String str11 = coveredParkingDecorator10.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, EV Charging Available, Handicap Accessible" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, EV Charging Available, Handicap Accessible, Covered Parking" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, EV Charging Available, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible", "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: ");
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        int int5 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.Class<?> wildcardClass7 = parkingSpot3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        java.util.List<parking.ParkingSpot> parkingSpotList25 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList26 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList27 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot31 = new parking.ParkingSpot((int) (short) 0, "Parking Spot ID: 1, Location: hi!, Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot31);
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList25);
        org.junit.Assert.assertNotNull(parkingSpotList26);
        org.junit.Assert.assertNotNull(parkingSpotList27);
        org.junit.Assert.assertNotNull(parkingSpotList33);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator24 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot(100, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking", "hi!");
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator(parkingSpot29);
        parkingLotManager0.addParkingSpot(parkingSpot29);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot18);
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        java.lang.String str28 = coveredParkingDecorator27.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        java.lang.String str31 = coveredParkingDecorator27.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator38 = new parking.HandicapAccessDecorator(parkingSpot37);
        parkingLotManager0.addParkingSpot(parkingSpot37);
        java.util.List<parking.ParkingSpot> parkingSpotList40 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot(10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        parking.HandicapAccessDecorator handicapAccessDecorator45 = new parking.HandicapAccessDecorator(parkingSpot44);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator45);
        java.lang.String str47 = handicapAccessDecorator45.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator48 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator45);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingSpotList40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Handicap Accessible" + "'", str47, "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.Class<?> wildcardClass8 = coveredParkingDecorator5.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str11 = parkingSpot10.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator(parkingSpot10);
        java.lang.String str13 = coveredParkingDecorator12.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        java.lang.String str15 = coveredParkingDecorator14.getDetails();
        java.lang.String str16 = coveredParkingDecorator14.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator14);
        java.lang.String str18 = coveredParkingDecorator14.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        int int7 = parkingSpot4.getId();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str11 = parkingSpot4.getParkingLot();
        int int12 = parkingSpot4.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        java.lang.String str12 = eVChargingDecorator10.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        java.lang.String str14 = eVChargingDecorator13.getDetails();
        java.lang.String str15 = eVChargingDecorator13.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.CoveredParkingDecorator coveredParkingDecorator23 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str24 = coveredParkingDecorator23.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        java.lang.String str13 = handicapAccessDecorator12.getDetails();
        java.lang.String str14 = handicapAccessDecorator12.getLocation();
        int int15 = handicapAccessDecorator12.getId();
        java.lang.String str16 = handicapAccessDecorator12.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Covered Parking" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Covered Parking");
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        java.lang.String str13 = handicapAccessDecorator12.getDetails();
        java.lang.String str14 = handicapAccessDecorator12.getLocation();
        java.lang.String str15 = handicapAccessDecorator12.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot28);
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        parking.CoveredParkingDecorator coveredParkingDecorator32 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator31);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getDetails();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList12 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str17 = parkingSpot16.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator18 = new parking.CoveredParkingDecorator(parkingSpot16);
        java.lang.String str19 = coveredParkingDecorator18.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList25 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((-1), "", "");
        parking.CoveredParkingDecorator coveredParkingDecorator30 = new parking.CoveredParkingDecorator(parkingSpot29);
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator(parkingSpot29);
        parking.CoveredParkingDecorator coveredParkingDecorator32 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator31);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator31);
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str38 = parkingSpot37.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator39 = new parking.CoveredParkingDecorator(parkingSpot37);
        parking.EVChargingDecorator eVChargingDecorator40 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator39);
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator40);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator40);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(parkingSpotList12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(parkingSpotList25);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getParkingLot();
        java.lang.String str6 = parkingSpot3.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str8 = parkingSpot3.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str9 = handicapAccessDecorator6.getParkingLot();
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        java.lang.String str11 = handicapAccessDecorator6.getDetails();
        java.lang.String str12 = handicapAccessDecorator6.getDetails();
        java.lang.String str13 = handicapAccessDecorator6.getDetails();
        int int14 = handicapAccessDecorator6.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = coveredParkingDecorator8.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = handicapAccessDecorator11.getDetails();
        java.lang.String str13 = handicapAccessDecorator11.getDetails();
        java.lang.String str14 = handicapAccessDecorator11.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator5.getDetails();
        int int8 = handicapAccessDecorator5.getId();
        java.lang.String str9 = handicapAccessDecorator5.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        java.lang.String str9 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str10 = coveredParkingDecorator5.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(35, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible");
        int int4 = parkingSpot3.getId();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList13 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager14.addParkingSpot(parkingSpot18);
        java.lang.String str20 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator(parkingSpot18);
        parkingLotManager0.addParkingSpot(parkingSpot18);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str28 = parkingSpot27.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator(parkingSpot27);
        java.lang.String str30 = coveredParkingDecorator29.getDetails();
        parking.EVChargingDecorator eVChargingDecorator31 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        java.lang.String str32 = coveredParkingDecorator29.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        java.lang.String str34 = coveredParkingDecorator29.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator35 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator35);
        parking.CoveredParkingDecorator coveredParkingDecorator37 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parking.EVChargingDecorator eVChargingDecorator38 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator37);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator37);
        java.util.List<parking.ParkingSpot> parkingSpotList40 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager41 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot45 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager41.addParkingSpot(parkingSpot45);
        parking.ParkingSpot parkingSpot50 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str51 = parkingSpot50.getLocation();
        java.lang.String str52 = parkingSpot50.getLocation();
        parkingLotManager41.addParkingSpot(parkingSpot50);
        parking.ParkingLotManager parkingLotManager54 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot58 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager54.addParkingSpot(parkingSpot58);
        java.lang.String str60 = parkingSpot58.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator61 = new parking.CoveredParkingDecorator(parkingSpot58);
        parkingLotManager41.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator61);
        parking.CoveredParkingDecorator coveredParkingDecorator63 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator61);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator63);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList13);
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList40);
        org.junit.Assert.assertNotNull(parkingLotManager41);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(parkingLotManager54);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        java.lang.String str42 = eVChargingDecorator41.getLocation();
        java.lang.String str43 = eVChargingDecorator41.getParkingLot();
        java.lang.String str44 = eVChargingDecorator41.getLocation();
        java.lang.String str45 = eVChargingDecorator41.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str45, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int8 = coveredParkingDecorator7.getId();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator10);
        java.lang.String str12 = eVChargingDecorator10.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        java.lang.String str11 = handicapAccessDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str6 = handicapAccessDecorator5.getLocation();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str8 = eVChargingDecorator7.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) 'a', "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Covered Parking", "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available");
        int int4 = parkingSpot3.getId();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        java.lang.String str42 = coveredParkingDecorator36.getDetails();
        java.lang.String str43 = coveredParkingDecorator36.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str42, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str43, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) -1, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str23 = eVChargingDecorator21.getLocation();
        int int24 = eVChargingDecorator21.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parking.HandicapAccessDecorator handicapAccessDecorator26 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator25);
        java.lang.String str27 = coveredParkingDecorator25.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Covered Parking" + "'", str27, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList13 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager15 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str20 = parkingSpot19.getLocation();
        java.lang.String str21 = parkingSpot19.getLocation();
        parkingLotManager15.addParkingSpot(parkingSpot19);
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str27 = parkingSpot26.getLocation();
        parkingLotManager15.addParkingSpot(parkingSpot26);
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager15.getParkingSpots();
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator(parkingSpot33);
        java.lang.String str36 = coveredParkingDecorator35.getDetails();
        parking.EVChargingDecorator eVChargingDecorator37 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        java.lang.String str38 = coveredParkingDecorator35.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator39 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        parkingLotManager15.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator35);
        java.util.List<parking.ParkingSpot> parkingSpotList41 = parkingLotManager15.getParkingSpots();
        parking.ParkingSpot parkingSpot45 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator46 = new parking.EVChargingDecorator(parkingSpot45);
        parking.EVChargingDecorator eVChargingDecorator47 = new parking.EVChargingDecorator(parkingSpot45);
        parking.CoveredParkingDecorator coveredParkingDecorator48 = new parking.CoveredParkingDecorator(parkingSpot45);
        parkingLotManager15.addParkingSpot(parkingSpot45);
        parkingLotManager0.addParkingSpot(parkingSpot45);
        parking.ParkingLotManager parkingLotManager51 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot55 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager51.addParkingSpot(parkingSpot55);
        java.lang.String str57 = parkingSpot55.getDetails();
        parking.EVChargingDecorator eVChargingDecorator58 = new parking.EVChargingDecorator(parkingSpot55);
        parking.EVChargingDecorator eVChargingDecorator59 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator58);
        int int60 = eVChargingDecorator58.getId();
        int int61 = eVChargingDecorator58.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator62 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator58);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator62);
        parking.ParkingLotManager parkingLotManager64 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot68 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager64.addParkingSpot(parkingSpot68);
        java.lang.String str70 = parkingSpot68.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator71 = new parking.CoveredParkingDecorator(parkingSpot68);
        parking.CoveredParkingDecorator coveredParkingDecorator72 = new parking.CoveredParkingDecorator(parkingSpot68);
        parking.HandicapAccessDecorator handicapAccessDecorator73 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator72);
        parking.EVChargingDecorator eVChargingDecorator74 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator72);
        parking.HandicapAccessDecorator handicapAccessDecorator75 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator72);
        int int76 = coveredParkingDecorator72.getId();
        java.lang.String str77 = coveredParkingDecorator72.getDetails();
        int int78 = coveredParkingDecorator72.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator72);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingSpotList13);
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingLotManager15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str36, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str38, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList41);
        org.junit.Assert.assertNotNull(parkingLotManager51);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str57, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(parkingLotManager64);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str77, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot10);
        java.lang.String str12 = parkingSpot10.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot10);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager14.addParkingSpot(parkingSpot18);
        java.lang.String str20 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator(parkingSpot18);
        parking.EVChargingDecorator eVChargingDecorator23 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingLotManager parkingLotManager25 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager25.addParkingSpot(parkingSpot29);
        java.lang.String str31 = parkingSpot29.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator32 = new parking.CoveredParkingDecorator(parkingSpot29);
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator(parkingSpot29);
        parking.HandicapAccessDecorator handicapAccessDecorator34 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator33);
        parking.EVChargingDecorator eVChargingDecorator35 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator33);
        parking.HandicapAccessDecorator handicapAccessDecorator36 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator33);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator36);
        java.lang.String str38 = handicapAccessDecorator36.getDetails();
        int int39 = handicapAccessDecorator36.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str12, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(parkingLotManager25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str38, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) 'a', "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator4);
        java.lang.String str6 = eVChargingDecorator4.getDetails();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 97, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible, EV Charging Available" + "'", str6, "Parking Spot ID: 97, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str14 = parkingSpot13.getParkingLot();
        java.lang.String str15 = parkingSpot13.getParkingLot();
        java.lang.String str16 = parkingSpot13.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot13);
        parking.ParkingSpot parkingSpot21 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str22 = parkingSpot21.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator23 = new parking.CoveredParkingDecorator(parkingSpot21);
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator(parkingSpot21);
        parkingLotManager0.addParkingSpot(parkingSpot21);
        parking.ParkingSpot parkingSpot26 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingLotManager0.addParkingSpot(parkingSpot26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str16, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str9 = handicapAccessDecorator6.getParkingLot();
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        java.lang.String str11 = handicapAccessDecorator6.getDetails();
        java.lang.String str12 = handicapAccessDecorator6.getDetails();
        java.lang.String str13 = handicapAccessDecorator6.getDetails();
        java.lang.String str14 = handicapAccessDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        int int10 = eVChargingDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str12 = eVChargingDecorator6.getDetails();
        java.lang.String str13 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str7 = eVChargingDecorator6.getDetails();
        java.lang.String str8 = eVChargingDecorator6.getDetails();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        java.lang.String str10 = eVChargingDecorator6.getDetails();
        java.lang.String str11 = eVChargingDecorator6.getDetails();
        java.lang.String str12 = eVChargingDecorator6.getDetails();
        java.lang.String str13 = eVChargingDecorator6.getDetails();
        java.lang.String str14 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList13 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager14.addParkingSpot(parkingSpot18);
        java.lang.String str20 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator(parkingSpot18);
        parkingLotManager0.addParkingSpot(parkingSpot18);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str28 = parkingSpot27.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator(parkingSpot27);
        java.lang.String str30 = coveredParkingDecorator29.getDetails();
        parking.EVChargingDecorator eVChargingDecorator31 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        java.lang.String str32 = coveredParkingDecorator29.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        java.lang.String str34 = coveredParkingDecorator29.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator35 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator35);
        parking.CoveredParkingDecorator coveredParkingDecorator37 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parking.EVChargingDecorator eVChargingDecorator38 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator37);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator37);
        java.lang.String str40 = coveredParkingDecorator37.getDetails();
        java.lang.String str41 = coveredParkingDecorator37.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList13);
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking" + "'", str40, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking" + "'", str41, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking");
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager31 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager31.addParkingSpot(parkingSpot35);
        java.lang.String str37 = parkingSpot35.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator(parkingSpot35);
        parking.CoveredParkingDecorator coveredParkingDecorator39 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator38);
        java.lang.String str40 = coveredParkingDecorator38.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator41 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator38);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator38);
        parking.ParkingLotManager parkingLotManager43 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager43.addParkingSpot(parkingSpot47);
        java.lang.String str49 = parkingSpot47.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator50 = new parking.CoveredParkingDecorator(parkingSpot47);
        parking.CoveredParkingDecorator coveredParkingDecorator51 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator50);
        java.lang.String str52 = coveredParkingDecorator50.getDetails();
        java.lang.String str53 = coveredParkingDecorator50.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator54 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator50);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator50);
        parking.ParkingSpot parkingSpot56 = null;
        // The following exception was thrown during execution in test generation
        try {
            parkingLotManager0.addParkingSpot(parkingSpot56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"parking.ParkingSpot.getId()\" because \"spot\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingLotManager31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str40, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager43);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str52, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str53, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator(parkingSpot4);
        java.lang.String str9 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str11 = parkingSpot4.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        java.util.List<parking.ParkingSpot> parkingSpotList25 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList26 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList27 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot31 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str32 = parkingSpot31.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator(parkingSpot31);
        parking.EVChargingDecorator eVChargingDecorator34 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator33);
        parking.EVChargingDecorator eVChargingDecorator35 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator34);
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator34);
        parking.HandicapAccessDecorator handicapAccessDecorator37 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator36);
        java.lang.String str39 = eVChargingDecorator36.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList25);
        org.junit.Assert.assertNotNull(parkingSpotList26);
        org.junit.Assert.assertNotNull(parkingSpotList27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str39, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, Covered Parking");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        java.lang.String str5 = parkingSpot3.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, Covered Parking" + "'", str4, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str5, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager33 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager33.addParkingSpot(parkingSpot37);
        java.lang.String str39 = parkingSpot37.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator(parkingSpot37);
        java.lang.String str41 = coveredParkingDecorator40.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator42 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator40);
        parking.CoveredParkingDecorator coveredParkingDecorator43 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator42);
        java.lang.String str44 = coveredParkingDecorator43.getDetails();
        java.lang.String str45 = coveredParkingDecorator43.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator43);
        java.util.List<parking.ParkingSpot> parkingSpotList47 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager48 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot52 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str53 = parkingSpot52.getLocation();
        java.lang.String str54 = parkingSpot52.getLocation();
        parkingLotManager48.addParkingSpot(parkingSpot52);
        parking.ParkingSpot parkingSpot59 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str60 = parkingSpot59.getLocation();
        parkingLotManager48.addParkingSpot(parkingSpot59);
        parking.ParkingSpot parkingSpot65 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str66 = parkingSpot65.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator67 = new parking.CoveredParkingDecorator(parkingSpot65);
        parking.EVChargingDecorator eVChargingDecorator68 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator67);
        parking.EVChargingDecorator eVChargingDecorator69 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator68);
        parkingLotManager48.addParkingSpot((parking.ParkingSpot) eVChargingDecorator69);
        java.lang.String str71 = eVChargingDecorator69.getLocation();
        int int72 = eVChargingDecorator69.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator73 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator69);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator73);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingLotManager33);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str41, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str44, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList47);
        org.junit.Assert.assertNotNull(parkingLotManager48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        int int10 = eVChargingDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str12 = handicapAccessDecorator11.getDetails();
        java.lang.String str13 = handicapAccessDecorator11.getDetails();
        java.lang.String str14 = handicapAccessDecorator11.getDetails();
        int int15 = handicapAccessDecorator11.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        parking.ParkingLotManager parkingLotManager32 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot36 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str37 = parkingSpot36.getLocation();
        java.lang.String str38 = parkingSpot36.getLocation();
        parkingLotManager32.addParkingSpot(parkingSpot36);
        parking.ParkingSpot parkingSpot43 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str44 = parkingSpot43.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator45 = new parking.CoveredParkingDecorator(parkingSpot43);
        java.lang.String str46 = coveredParkingDecorator45.getDetails();
        parking.EVChargingDecorator eVChargingDecorator47 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator45);
        java.lang.String str48 = coveredParkingDecorator45.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator49 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator45);
        java.lang.String str50 = coveredParkingDecorator45.getDetails();
        parking.EVChargingDecorator eVChargingDecorator51 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator45);
        parkingLotManager32.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator45);
        int int53 = coveredParkingDecorator45.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator45);
        java.lang.String str55 = coveredParkingDecorator45.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator56 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator45);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingLotManager32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str46, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str48, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str50, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str55, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str8 = eVChargingDecorator7.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        java.lang.String str11 = eVChargingDecorator7.getDetails();
        java.lang.String str12 = eVChargingDecorator7.getParkingLot();
        java.lang.Class<?> wildcardClass13 = eVChargingDecorator7.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: ");
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        int int11 = eVChargingDecorator8.getId();
        int int12 = eVChargingDecorator8.getId();
        int int13 = eVChargingDecorator8.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator24 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList26 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot30 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator31 = new parking.EVChargingDecorator(parkingSpot30);
        parkingLotManager0.addParkingSpot(parkingSpot30);
        parking.ParkingSpot parkingSpot36 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        parkingLotManager0.addParkingSpot(parkingSpot36);
        parking.ParkingLotManager parkingLotManager38 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot42 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager38.addParkingSpot(parkingSpot42);
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str48 = parkingSpot47.getLocation();
        java.lang.String str49 = parkingSpot47.getLocation();
        parkingLotManager38.addParkingSpot(parkingSpot47);
        parking.ParkingLotManager parkingLotManager51 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot55 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager51.addParkingSpot(parkingSpot55);
        java.lang.String str57 = parkingSpot55.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator58 = new parking.CoveredParkingDecorator(parkingSpot55);
        parkingLotManager38.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator58);
        parking.CoveredParkingDecorator coveredParkingDecorator60 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator58);
        parking.CoveredParkingDecorator coveredParkingDecorator61 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator58);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator61);
        java.lang.String str63 = coveredParkingDecorator61.getLocation();
        java.lang.String str64 = coveredParkingDecorator61.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList26);
        org.junit.Assert.assertNotNull(parkingLotManager38);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(parkingLotManager51);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking" + "'", str64, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList12 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str17 = parkingSpot16.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator18 = new parking.CoveredParkingDecorator(parkingSpot16);
        java.lang.String str19 = coveredParkingDecorator18.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingLotManager parkingLotManager25 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager25.addParkingSpot(parkingSpot29);
        java.lang.String str31 = parkingSpot29.getLocation();
        int int32 = parkingSpot29.getId();
        parking.EVChargingDecorator eVChargingDecorator33 = new parking.EVChargingDecorator(parkingSpot29);
        java.lang.String str34 = eVChargingDecorator33.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator33);
        java.lang.String str36 = eVChargingDecorator33.getDetails();
        java.lang.String str37 = eVChargingDecorator33.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(parkingSpotList12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(parkingLotManager25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str34, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str36, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str37, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = coveredParkingDecorator8.getParkingLot();
        int int11 = coveredParkingDecorator8.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 100, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str5 = handicapAccessDecorator4.getLocation();
        java.lang.String str6 = handicapAccessDecorator4.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available" + "'", str5, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str6, "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str5 = parkingSpot3.getLocation();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        int int11 = handicapAccessDecorator9.getId();
        java.lang.Class<?> wildcardClass12 = handicapAccessDecorator9.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking, EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '#', "", "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, Handicap Accessible, Handicap Accessible");
        java.lang.String str4 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 35, Location: , Lot: Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, Handicap Accessible, Handicap Accessible" + "'", str4, "Parking Spot ID: 35, Location: , Lot: Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getLocation();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        int int10 = eVChargingDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        int int12 = eVChargingDecorator6.getId();
        java.lang.String str13 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parking.HandicapAccessDecorator handicapAccessDecorator23 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot((int) 'a', "Parking Spot ID: -1, Location: , Lot: , Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        java.lang.String str29 = parkingSpot28.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.lang.String str31 = parkingSpot28.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str31, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        int int11 = eVChargingDecorator10.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        java.lang.String str15 = coveredParkingDecorator12.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager9 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager9.addParkingSpot(parkingSpot13);
        java.lang.String str15 = parkingSpot13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator(parkingSpot13);
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str18 = eVChargingDecorator16.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator16);
        parking.ParkingSpot parkingSpot23 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str24 = parkingSpot23.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator(parkingSpot23);
        parking.EVChargingDecorator eVChargingDecorator26 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator25);
        parking.EVChargingDecorator eVChargingDecorator27 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator26);
        java.lang.String str28 = eVChargingDecorator26.getLocation();
        int int29 = eVChargingDecorator26.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator26);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        parking.EVChargingDecorator eVChargingDecorator37 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parking.EVChargingDecorator eVChargingDecorator38 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator37);
        java.lang.String str39 = eVChargingDecorator37.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator37);
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator45 = new parking.EVChargingDecorator(parkingSpot44);
        parking.EVChargingDecorator eVChargingDecorator46 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator45);
        parking.CoveredParkingDecorator coveredParkingDecorator47 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator46);
        int int48 = coveredParkingDecorator47.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator47);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingLotManager9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str39, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 32 + "'", int48 == 32);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking, EV Charging Available" + "'", str8, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 10, "Parking Spot ID: 97, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible, EV Charging Available", "Parking Spot ID: 1, Location: , Lot: ");
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        java.lang.String str4 = parkingSpot3.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        java.util.List<parking.ParkingSpot> parkingSpotList25 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: ");
        parking.CoveredParkingDecorator coveredParkingDecorator30 = new parking.CoveredParkingDecorator(parkingSpot29);
        parkingLotManager0.addParkingSpot(parkingSpot29);
        parking.ParkingLotManager parkingLotManager32 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot36 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager32.addParkingSpot(parkingSpot36);
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str42 = parkingSpot41.getLocation();
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator(parkingSpot41);
        parkingLotManager32.addParkingSpot(parkingSpot41);
        parking.EVChargingDecorator eVChargingDecorator45 = new parking.EVChargingDecorator(parkingSpot41);
        parkingLotManager0.addParkingSpot(parkingSpot41);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList25);
        org.junit.Assert.assertNotNull(parkingLotManager32);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        java.lang.String str41 = coveredParkingDecorator36.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        int int5 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        int int11 = eVChargingDecorator8.getId();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str13 = eVChargingDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.Class<?> wildcardClass14 = eVChargingDecorator13.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str6 = handicapAccessDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str8 = eVChargingDecorator7.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str7 = eVChargingDecorator6.getDetails();
        java.lang.String str8 = eVChargingDecorator6.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str10 = handicapAccessDecorator9.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator(parkingSpot9);
        java.lang.String str14 = eVChargingDecorator13.getDetails();
        java.lang.String str15 = eVChargingDecorator13.getParkingLot();
        java.lang.String str16 = eVChargingDecorator13.getDetails();
        java.lang.String str17 = eVChargingDecorator13.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager21.addParkingSpot(parkingSpot25);
        java.lang.String str27 = parkingSpot25.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot25);
        java.lang.String str29 = parkingSpot25.getLocation();
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator(parkingSpot25);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator30);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager34 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot38 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager34.addParkingSpot(parkingSpot38);
        java.lang.String str40 = parkingSpot38.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator(parkingSpot38);
        parking.CoveredParkingDecorator coveredParkingDecorator42 = new parking.CoveredParkingDecorator(parkingSpot38);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator42);
        java.lang.String str44 = coveredParkingDecorator42.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingLotManager34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager32 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot36 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager32.addParkingSpot(parkingSpot36);
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str42 = parkingSpot41.getLocation();
        java.lang.String str43 = parkingSpot41.getLocation();
        parkingLotManager32.addParkingSpot(parkingSpot41);
        parking.ParkingLotManager parkingLotManager45 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot49 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager45.addParkingSpot(parkingSpot49);
        java.lang.String str51 = parkingSpot49.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator52 = new parking.HandicapAccessDecorator(parkingSpot49);
        java.lang.String str53 = handicapAccessDecorator52.getDetails();
        parkingLotManager32.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator52);
        java.lang.String str55 = handicapAccessDecorator52.getDetails();
        java.lang.String str56 = handicapAccessDecorator52.getDetails();
        int int57 = handicapAccessDecorator52.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator58 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator52);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator58);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertNotNull(parkingLotManager32);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(parkingLotManager45);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str53, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str55, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str56, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        int int12 = coveredParkingDecorator8.getId();
        java.lang.String str13 = coveredParkingDecorator8.getLocation();
        java.lang.String str14 = coveredParkingDecorator8.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str28 = eVChargingDecorator24.getDetails();
        java.lang.String str29 = eVChargingDecorator24.getDetails();
        java.lang.String str30 = eVChargingDecorator24.getDetails();
        java.lang.String str31 = eVChargingDecorator24.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str31, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList9 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList10 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingSpotList9);
        org.junit.Assert.assertNotNull(parkingSpotList10);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str8 = parkingSpot4.getLocation();
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str10 = eVChargingDecorator9.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator9);
        java.lang.String str12 = eVChargingDecorator9.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available");
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(97, "Parking Spot ID: 97, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        int int10 = eVChargingDecorator7.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str14 = handicapAccessDecorator9.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot18);
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        java.lang.String str28 = coveredParkingDecorator27.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        java.lang.String str31 = coveredParkingDecorator27.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList34 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList35 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingSpotList34);
        org.junit.Assert.assertNotNull(parkingSpotList35);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.util.List<parking.ParkingSpot> parkingSpotList28 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager29 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        java.lang.String str35 = parkingSpot33.getLocation();
        parkingLotManager29.addParkingSpot(parkingSpot33);
        parking.ParkingSpot parkingSpot40 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str41 = parkingSpot40.getLocation();
        parkingLotManager29.addParkingSpot(parkingSpot40);
        java.util.List<parking.ParkingSpot> parkingSpotList43 = parkingLotManager29.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList44 = parkingLotManager29.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList45 = parkingLotManager29.getParkingSpots();
        parking.ParkingSpot parkingSpot49 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str50 = parkingSpot49.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator51 = new parking.CoveredParkingDecorator(parkingSpot49);
        parking.EVChargingDecorator eVChargingDecorator52 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator51);
        parking.EVChargingDecorator eVChargingDecorator53 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator52);
        parking.EVChargingDecorator eVChargingDecorator54 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator52);
        java.lang.String str55 = eVChargingDecorator52.getDetails();
        parking.EVChargingDecorator eVChargingDecorator56 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator52);
        java.lang.String str57 = eVChargingDecorator56.getDetails();
        parkingLotManager29.addParkingSpot((parking.ParkingSpot) eVChargingDecorator56);
        java.lang.String str59 = eVChargingDecorator56.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator56);
        parking.HandicapAccessDecorator handicapAccessDecorator61 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator56);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList28);
        org.junit.Assert.assertNotNull(parkingLotManager29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(parkingSpotList43);
        org.junit.Assert.assertNotNull(parkingSpotList44);
        org.junit.Assert.assertNotNull(parkingSpotList45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str55, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str57, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str59, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: -1, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking" + "'", str4, "Parking Spot ID: -1, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: -1, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking" + "'", str5, "Parking Spot ID: -1, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot(0, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking, EV Charging Available");
        parkingLotManager0.addParkingSpot(parkingSpot17);
        parking.ParkingLotManager parkingLotManager19 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot23 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager19.addParkingSpot(parkingSpot23);
        java.lang.String str25 = parkingSpot23.getDetails();
        parking.EVChargingDecorator eVChargingDecorator26 = new parking.EVChargingDecorator(parkingSpot23);
        java.lang.String str27 = parkingSpot23.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot23);
        parkingLotManager0.addParkingSpot(parkingSpot23);
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot23);
        java.lang.String str31 = handicapAccessDecorator30.getDetails();
        java.lang.String str32 = handicapAccessDecorator30.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager19);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str25, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str31, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str9 = handicapAccessDecorator6.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator11);
        java.lang.String str13 = coveredParkingDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Covered Parking" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingLotManager parkingLotManager6 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager6.addParkingSpot(parkingSpot10);
        java.lang.String str12 = parkingSpot10.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot10);
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        java.util.List<parking.ParkingSpot> parkingSpotList16 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        parking.EVChargingDecorator eVChargingDecorator23 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator23);
        parking.EVChargingDecorator eVChargingDecorator25 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator23);
        java.lang.String str26 = eVChargingDecorator23.getDetails();
        parking.EVChargingDecorator eVChargingDecorator27 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator23);
        java.lang.String str28 = eVChargingDecorator27.getDetails();
        java.lang.String str29 = eVChargingDecorator27.getDetails();
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator27);
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator30);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator31);
        java.lang.String str33 = coveredParkingDecorator31.getLocation();
        parking.EVChargingDecorator eVChargingDecorator34 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator31);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingLotManager6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str8 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Covered Parking");
        int int4 = parkingSpot3.getId();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        java.lang.String str13 = handicapAccessDecorator11.getDetails();
        java.lang.String str14 = handicapAccessDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str11 = eVChargingDecorator6.getDetails();
        java.lang.String str12 = eVChargingDecorator6.getDetails();
        java.lang.String str13 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        java.lang.String str7 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str10 = eVChargingDecorator9.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        java.lang.String str11 = coveredParkingDecorator10.getDetails();
        int int12 = coveredParkingDecorator10.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator10);
        java.lang.String str14 = handicapAccessDecorator13.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking, Handicap Accessible" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        java.lang.String str13 = handicapAccessDecorator9.getDetails();
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(100, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking", "hi!");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str5 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 100, Location: Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking, Lot: hi!" + "'", str5, "Parking Spot ID: 100, Location: Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking, Lot: hi!");
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator24 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList26 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot30 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator31 = new parking.EVChargingDecorator(parkingSpot30);
        parkingLotManager0.addParkingSpot(parkingSpot30);
        parking.ParkingSpot parkingSpot36 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        parkingLotManager0.addParkingSpot(parkingSpot36);
        parking.ParkingLotManager parkingLotManager38 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot42 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager38.addParkingSpot(parkingSpot42);
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str48 = parkingSpot47.getLocation();
        java.lang.String str49 = parkingSpot47.getLocation();
        parkingLotManager38.addParkingSpot(parkingSpot47);
        parking.ParkingLotManager parkingLotManager51 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot55 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager51.addParkingSpot(parkingSpot55);
        java.lang.String str57 = parkingSpot55.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator58 = new parking.CoveredParkingDecorator(parkingSpot55);
        parkingLotManager38.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator58);
        parking.CoveredParkingDecorator coveredParkingDecorator60 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator58);
        parking.CoveredParkingDecorator coveredParkingDecorator61 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator58);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator61);
        java.lang.String str63 = coveredParkingDecorator61.getLocation();
        parking.EVChargingDecorator eVChargingDecorator64 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator61);
        java.lang.String str65 = eVChargingDecorator64.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList26);
        org.junit.Assert.assertNotNull(parkingLotManager38);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(parkingLotManager51);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, EV Charging Available" + "'", str65, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        java.lang.String str9 = handicapAccessDecorator6.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking, EV Charging Available", "hi!");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        java.util.List<parking.ParkingSpot> parkingSpotList21 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        java.lang.String str28 = coveredParkingDecorator27.getDetails();
        parking.EVChargingDecorator eVChargingDecorator29 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((int) '#', "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking, EV Charging Available", "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str36 = coveredParkingDecorator35.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator35);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str36, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str23 = eVChargingDecorator21.getLocation();
        int int24 = eVChargingDecorator21.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.Class<?> wildcardClass26 = eVChargingDecorator21.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator(parkingSpot11);
        java.lang.String str16 = parkingSpot11.getParkingLot();
        java.lang.String str17 = parkingSpot11.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str17, "Parking Spot ID: -1, Location: , Lot: ");
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible", "");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str23 = eVChargingDecorator21.getLocation();
        int int24 = eVChargingDecorator21.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str26 = eVChargingDecorator21.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator27 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parking.CoveredParkingDecorator coveredParkingDecorator28 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.Class<?> wildcardClass29 = eVChargingDecorator21.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager24 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str29 = parkingSpot28.getLocation();
        java.lang.String str30 = parkingSpot28.getLocation();
        parkingLotManager24.addParkingSpot(parkingSpot28);
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str36 = parkingSpot35.getLocation();
        parkingLotManager24.addParkingSpot(parkingSpot35);
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str42 = parkingSpot41.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator43 = new parking.CoveredParkingDecorator(parkingSpot41);
        parking.EVChargingDecorator eVChargingDecorator44 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator43);
        parking.EVChargingDecorator eVChargingDecorator45 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator44);
        parkingLotManager24.addParkingSpot((parking.ParkingSpot) eVChargingDecorator45);
        parking.CoveredParkingDecorator coveredParkingDecorator47 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator45);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator45);
        parking.HandicapAccessDecorator handicapAccessDecorator49 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator45);
        java.lang.Class<?> wildcardClass50 = handicapAccessDecorator49.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertNotNull(parkingLotManager24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        java.lang.String str17 = parkingSpot15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot15);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        parking.ParkingSpot parkingSpot23 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str24 = parkingSpot23.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator(parkingSpot23);
        java.lang.String str26 = coveredParkingDecorator25.getDetails();
        java.lang.String str27 = coveredParkingDecorator25.getParkingLot();
        java.lang.String str28 = coveredParkingDecorator25.getParkingLot();
        java.lang.String str29 = coveredParkingDecorator25.getParkingLot();
        int int30 = coveredParkingDecorator25.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator25);
        parking.ParkingLotManager parkingLotManager32 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot36 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager32.addParkingSpot(parkingSpot36);
        java.lang.String str38 = parkingSpot36.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator39 = new parking.CoveredParkingDecorator(parkingSpot36);
        parking.EVChargingDecorator eVChargingDecorator40 = new parking.EVChargingDecorator(parkingSpot36);
        java.lang.String str41 = eVChargingDecorator40.getDetails();
        parking.EVChargingDecorator eVChargingDecorator42 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator40);
        parking.CoveredParkingDecorator coveredParkingDecorator43 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator42);
        java.lang.String str44 = eVChargingDecorator42.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator42);
        parking.ParkingLotManager parkingLotManager46 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot50 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager46.addParkingSpot(parkingSpot50);
        java.lang.String str52 = parkingSpot50.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator53 = new parking.CoveredParkingDecorator(parkingSpot50);
        parking.CoveredParkingDecorator coveredParkingDecorator54 = new parking.CoveredParkingDecorator(parkingSpot50);
        parking.CoveredParkingDecorator coveredParkingDecorator55 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator54);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator55);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(parkingLotManager32);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str41, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(parkingLotManager46);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = coveredParkingDecorator5.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '#', "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available", "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(100, "Parking Spot ID: 0, Location: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: -1, Location: , Lot: ");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str5 = coveredParkingDecorator4.getDetails();
        java.lang.String str6 = coveredParkingDecorator4.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str5, "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str11 = handicapAccessDecorator9.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        java.lang.String str12 = coveredParkingDecorator11.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator11);
        int int14 = handicapAccessDecorator13.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator(parkingSpot9);
        java.lang.String str12 = coveredParkingDecorator11.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator11);
        java.lang.String str14 = coveredParkingDecorator11.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator11);
        java.lang.String str16 = coveredParkingDecorator11.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator11);
        java.lang.String str18 = handicapAccessDecorator17.getDetails();
        java.lang.String str19 = handicapAccessDecorator17.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator17);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator(parkingSpot9);
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator11);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator12);
        java.lang.String str14 = eVChargingDecorator12.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator12);
        java.lang.String str16 = eVChargingDecorator12.getDetails();
        parking.EVChargingDecorator eVChargingDecorator17 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator12);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator17);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        java.util.List<parking.ParkingSpot> parkingSpotList25 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList26 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot30 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str31 = parkingSpot30.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator32 = new parking.CoveredParkingDecorator(parkingSpot30);
        java.lang.String str33 = coveredParkingDecorator32.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator34 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator32);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator34);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList25);
        org.junit.Assert.assertNotNull(parkingSpotList26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str33, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList13 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList13);
        org.junit.Assert.assertNotNull(parkingSpotList14);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(10, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str4, "Parking Spot ID: 10, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "Parking Spot ID: 100, Location: Parking Spot ID: 1, Location: hi!, Lot: , Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking", "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available");
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((-1), "", "");
        parkingLotManager0.addParkingSpot(parkingSpot16);
        java.lang.String str18 = parkingSpot16.getLocation();
        java.lang.String str19 = parkingSpot16.getDetails();
        java.lang.String str20 = parkingSpot16.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator(parkingSpot16);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str19, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str7 = eVChargingDecorator6.getDetails();
        int int8 = eVChargingDecorator6.getId();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) 'a', "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, EV Charging Available, EV Charging Available");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: -1, Location: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible", "");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.Class<?> wildcardClass5 = parkingSpot3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = coveredParkingDecorator5.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str14 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str17 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str18 = coveredParkingDecorator5.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager31 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager31.addParkingSpot(parkingSpot35);
        java.lang.String str37 = parkingSpot35.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator(parkingSpot35);
        parking.CoveredParkingDecorator coveredParkingDecorator39 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator38);
        java.lang.String str40 = coveredParkingDecorator38.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator41 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator38);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator38);
        parking.ParkingSpot parkingSpot46 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str47 = parkingSpot46.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator48 = new parking.CoveredParkingDecorator(parkingSpot46);
        java.lang.String str49 = coveredParkingDecorator48.getDetails();
        parking.EVChargingDecorator eVChargingDecorator50 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator48);
        java.lang.String str51 = coveredParkingDecorator48.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator52 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator48);
        java.lang.String str53 = coveredParkingDecorator48.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator54 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator48);
        java.lang.String str55 = handicapAccessDecorator54.getDetails();
        java.lang.String str56 = handicapAccessDecorator54.getDetails();
        parking.EVChargingDecorator eVChargingDecorator57 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator54);
        java.lang.String str58 = handicapAccessDecorator54.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator54);
        java.lang.String str60 = handicapAccessDecorator54.getDetails();
        java.lang.String str61 = handicapAccessDecorator54.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingLotManager31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str40, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str49, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str51, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str53, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str55, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str56, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str60, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str61, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingLotManager parkingLotManager31 = parking.ParkingLotManager.getInstance();
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager31.getParkingSpots();
        parking.ParkingSpot parkingSpot36 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str37 = parkingSpot36.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator(parkingSpot36);
        parking.EVChargingDecorator eVChargingDecorator39 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator38);
        parking.EVChargingDecorator eVChargingDecorator40 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator39);
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator39);
        java.lang.String str42 = eVChargingDecorator39.getDetails();
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator39);
        parkingLotManager31.addParkingSpot((parking.ParkingSpot) eVChargingDecorator39);
        java.lang.String str45 = eVChargingDecorator39.getDetails();
        java.lang.String str46 = eVChargingDecorator39.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator39);
        java.lang.Class<?> wildcardClass48 = eVChargingDecorator39.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager31);
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str42, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str45, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str46, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator24 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList26 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot30 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator31 = new parking.EVChargingDecorator(parkingSpot30);
        parking.EVChargingDecorator eVChargingDecorator32 = new parking.EVChargingDecorator(parkingSpot30);
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator(parkingSpot30);
        parkingLotManager0.addParkingSpot(parkingSpot30);
        parking.HandicapAccessDecorator handicapAccessDecorator35 = new parking.HandicapAccessDecorator(parkingSpot30);
        java.lang.Class<?> wildcardClass36 = handicapAccessDecorator35.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList26);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator(parkingSpot26);
        parking.HandicapAccessDecorator handicapAccessDecorator29 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator29);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str35 = parkingSpot34.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator(parkingSpot34);
        java.lang.String str37 = coveredParkingDecorator36.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator36);
        parking.CoveredParkingDecorator coveredParkingDecorator40 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        java.lang.String str42 = eVChargingDecorator41.getLocation();
        java.lang.String str43 = eVChargingDecorator41.getParkingLot();
        java.lang.String str44 = eVChargingDecorator41.getLocation();
        java.lang.String str45 = eVChargingDecorator41.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str45, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator(parkingSpot4);
        java.lang.String str8 = handicapAccessDecorator7.getLocation();
        int int9 = handicapAccessDecorator7.getId();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str11 = handicapAccessDecorator7.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str7 = coveredParkingDecorator5.getDetails();
        java.lang.String str8 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str6 = handicapAccessDecorator5.getLocation();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = handicapAccessDecorator8.getDetails();
        java.lang.String str10 = handicapAccessDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, EV Charging Available, Handicap Accessible" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, EV Charging Available, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str7 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        int int9 = handicapAccessDecorator6.getId();
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        java.lang.String str11 = handicapAccessDecorator6.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        int int13 = handicapAccessDecorator6.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        java.lang.String str9 = coveredParkingDecorator5.getParkingLot();
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        int int7 = parkingSpot4.getId();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        java.lang.String str14 = handicapAccessDecorator13.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager21.addParkingSpot(parkingSpot25);
        java.lang.String str27 = parkingSpot25.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot25);
        java.lang.String str29 = parkingSpot25.getLocation();
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator(parkingSpot25);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator30);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList34 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList35 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot39);
        parking.HandicapAccessDecorator handicapAccessDecorator41 = new parking.HandicapAccessDecorator(parkingSpot39);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingSpotList34);
        org.junit.Assert.assertNotNull(parkingSpotList35);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator12);
        java.lang.Class<?> wildcardClass15 = eVChargingDecorator14.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        java.lang.String str25 = eVChargingDecorator22.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator26 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator22);
        int int27 = coveredParkingDecorator26.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str25, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str7 = eVChargingDecorator6.getDetails();
        java.lang.String str8 = eVChargingDecorator6.getDetails();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        java.lang.String str10 = eVChargingDecorator6.getDetails();
        java.lang.String str11 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((-1), "", "");
        parkingLotManager0.addParkingSpot(parkingSpot16);
        java.lang.String str18 = parkingSpot16.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot16);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        java.lang.String str22 = handicapAccessDecorator19.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str22, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '4', "Parking Spot ID: 10, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available", "");
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str11 = eVChargingDecorator8.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str28 = parkingSpot27.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator(parkingSpot27);
        java.lang.String str30 = coveredParkingDecorator29.getDetails();
        parking.EVChargingDecorator eVChargingDecorator31 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        java.lang.String str32 = coveredParkingDecorator29.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        java.lang.String str34 = coveredParkingDecorator29.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator35 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        java.lang.String str37 = coveredParkingDecorator29.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator29);
        parking.ParkingLotManager parkingLotManager39 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot43 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager39.addParkingSpot(parkingSpot43);
        java.lang.String str45 = parkingSpot43.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator46 = new parking.CoveredParkingDecorator(parkingSpot43);
        parking.EVChargingDecorator eVChargingDecorator47 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator46);
        parking.HandicapAccessDecorator handicapAccessDecorator48 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator46);
        java.lang.String str49 = handicapAccessDecorator48.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator50 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator48);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator48);
        parking.ParkingSpot parkingSpot55 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str56 = parkingSpot55.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator57 = new parking.CoveredParkingDecorator(parkingSpot55);
        java.lang.String str58 = coveredParkingDecorator57.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator59 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator57);
        parking.HandicapAccessDecorator handicapAccessDecorator60 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator59);
        parking.EVChargingDecorator eVChargingDecorator61 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator59);
        parking.CoveredParkingDecorator coveredParkingDecorator62 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator61);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator62);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager39);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str49, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str58, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parking.HandicapAccessDecorator handicapAccessDecorator23 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator23);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager21.addParkingSpot(parkingSpot25);
        java.lang.String str27 = parkingSpot25.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot25);
        java.lang.String str29 = parkingSpot25.getLocation();
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator(parkingSpot25);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator30);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList34 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList35 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str40 = parkingSpot39.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator41 = new parking.CoveredParkingDecorator(parkingSpot39);
        java.lang.String str42 = coveredParkingDecorator41.getDetails();
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator41);
        parking.CoveredParkingDecorator coveredParkingDecorator44 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator43);
        java.lang.String str45 = coveredParkingDecorator44.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator46 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator44);
        parking.EVChargingDecorator eVChargingDecorator47 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator44);
        java.lang.String str48 = eVChargingDecorator47.getDetails();
        parking.EVChargingDecorator eVChargingDecorator49 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator47);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator47);
        java.util.List<parking.ParkingSpot> parkingSpotList51 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingSpotList34);
        org.junit.Assert.assertNotNull(parkingSpotList35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str42, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available" + "'", str48, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList51);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator20 = new parking.HandicapAccessDecorator(parkingSpot17);
        java.lang.String str21 = handicapAccessDecorator20.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator20);
        java.lang.String str23 = handicapAccessDecorator20.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator24 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator20);
        java.lang.String str25 = coveredParkingDecorator24.getLocation();
        java.lang.String str26 = coveredParkingDecorator24.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str23, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Covered Parking" + "'", str26, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        int int11 = eVChargingDecorator10.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available" + "'", str4, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str6 = handicapAccessDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str8 = eVChargingDecorator7.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = handicapAccessDecorator11.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        java.lang.String str17 = parkingSpot15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot15);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager20.addParkingSpot(parkingSpot24);
        java.lang.String str26 = parkingSpot24.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot24);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parking.EVChargingDecorator eVChargingDecorator32 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str33 = eVChargingDecorator32.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str30, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str33, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList13 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager14.addParkingSpot(parkingSpot18);
        java.lang.String str20 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator(parkingSpot18);
        parkingLotManager0.addParkingSpot(parkingSpot18);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str28 = parkingSpot27.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator(parkingSpot27);
        java.lang.String str30 = coveredParkingDecorator29.getDetails();
        parking.EVChargingDecorator eVChargingDecorator31 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        java.lang.String str32 = coveredParkingDecorator29.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        java.lang.String str34 = coveredParkingDecorator29.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator35 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        parking.CoveredParkingDecorator coveredParkingDecorator36 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator35);
        parking.CoveredParkingDecorator coveredParkingDecorator37 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator36);
        parking.EVChargingDecorator eVChargingDecorator38 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator37);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator37);
        java.lang.String str40 = coveredParkingDecorator37.getDetails();
        java.lang.Class<?> wildcardClass41 = coveredParkingDecorator37.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList13);
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking" + "'", str40, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking", "Parking Spot ID: 1, Location: Parking Spot ID: 1, Location: , Lot: , Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        java.lang.String str23 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator24 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList26 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot30 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator31 = new parking.EVChargingDecorator(parkingSpot30);
        parkingLotManager0.addParkingSpot(parkingSpot30);
        parking.ParkingSpot parkingSpot36 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        parkingLotManager0.addParkingSpot(parkingSpot36);
        java.util.List<parking.ParkingSpot> parkingSpotList38 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList26);
        org.junit.Assert.assertNotNull(parkingSpotList38);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parking.HandicapAccessDecorator handicapAccessDecorator23 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator22);
        java.lang.String str25 = handicapAccessDecorator22.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str25, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot10 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot10);
        java.lang.String str12 = parkingSpot10.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot10);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str12, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int8 = eVChargingDecorator7.getId();
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator4);
        java.lang.Class<?> wildcardClass6 = coveredParkingDecorator5.getClass();
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.CoveredParkingDecorator coveredParkingDecorator23 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        java.lang.String str24 = eVChargingDecorator21.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parking.EVChargingDecorator eVChargingDecorator26 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator25);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        int int5 = parkingSpot3.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str8 = eVChargingDecorator7.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = coveredParkingDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        java.lang.String str31 = eVChargingDecorator28.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList34 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList35 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager36 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot40 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str41 = parkingSpot40.getLocation();
        java.lang.String str42 = parkingSpot40.getLocation();
        parkingLotManager36.addParkingSpot(parkingSpot40);
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str48 = parkingSpot47.getLocation();
        parkingLotManager36.addParkingSpot(parkingSpot47);
        parking.ParkingSpot parkingSpot53 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str54 = parkingSpot53.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator55 = new parking.CoveredParkingDecorator(parkingSpot53);
        parking.EVChargingDecorator eVChargingDecorator56 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator55);
        parking.EVChargingDecorator eVChargingDecorator57 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator56);
        parkingLotManager36.addParkingSpot((parking.ParkingSpot) eVChargingDecorator57);
        java.util.List<parking.ParkingSpot> parkingSpotList59 = parkingLotManager36.getParkingSpots();
        parking.ParkingSpot parkingSpot63 = new parking.ParkingSpot((int) (byte) 100, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available", "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking");
        parkingLotManager36.addParkingSpot(parkingSpot63);
        parkingLotManager0.addParkingSpot(parkingSpot63);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingSpotList34);
        org.junit.Assert.assertNotNull(parkingSpotList35);
        org.junit.Assert.assertNotNull(parkingLotManager36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(parkingSpotList59);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = coveredParkingDecorator8.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str6 = handicapAccessDecorator5.getLocation();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str8 = handicapAccessDecorator5.getDetails();
        java.lang.String str9 = handicapAccessDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = coveredParkingDecorator5.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str14 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str16 = handicapAccessDecorator15.getDetails();
        java.lang.String str17 = handicapAccessDecorator15.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str17, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str10 = eVChargingDecorator9.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        java.util.List<parking.ParkingSpot> parkingSpotList1 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager2 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot6 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str7 = parkingSpot6.getLocation();
        java.lang.String str8 = parkingSpot6.getLocation();
        parkingLotManager2.addParkingSpot(parkingSpot6);
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str14 = parkingSpot13.getLocation();
        parkingLotManager2.addParkingSpot(parkingSpot13);
        java.util.List<parking.ParkingSpot> parkingSpotList16 = parkingLotManager2.getParkingSpots();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        java.lang.String str25 = coveredParkingDecorator22.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator26 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager2.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator22);
        parking.ParkingSpot parkingSpot32 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        java.lang.String str33 = parkingSpot32.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator34 = new parking.CoveredParkingDecorator(parkingSpot32);
        parkingLotManager0.addParkingSpot(parkingSpot32);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList1);
        org.junit.Assert.assertNotNull(parkingLotManager2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(parkingSpotList16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str25, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str33, "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '4', "hi!", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str5 = eVChargingDecorator4.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 52, Location: hi!, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str5, "Parking Spot ID: 52, Location: hi!, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        int int9 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str11 = handicapAccessDecorator10.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        java.lang.String str7 = parkingSpot4.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator(parkingSpot4);
        java.lang.String str9 = handicapAccessDecorator8.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingLotManager parkingLotManager23 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager23.addParkingSpot(parkingSpot27);
        java.lang.String str29 = parkingSpot27.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator(parkingSpot27);
        parkingLotManager0.addParkingSpot(parkingSpot27);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager33 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager33.addParkingSpot(parkingSpot37);
        java.lang.String str39 = parkingSpot37.getLocation();
        int int40 = parkingSpot37.getId();
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator(parkingSpot37);
        parking.HandicapAccessDecorator handicapAccessDecorator42 = new parking.HandicapAccessDecorator(parkingSpot37);
        parkingLotManager0.addParkingSpot(parkingSpot37);
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str48 = parkingSpot47.getLocation();
        int int49 = parkingSpot47.getId();
        parking.CoveredParkingDecorator coveredParkingDecorator50 = new parking.CoveredParkingDecorator(parkingSpot47);
        parking.EVChargingDecorator eVChargingDecorator51 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator50);
        java.lang.String str52 = coveredParkingDecorator50.getDetails();
        int int53 = coveredParkingDecorator50.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator50);
        parking.CoveredParkingDecorator coveredParkingDecorator55 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator50);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingLotManager23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingLotManager33);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str52, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        java.lang.String str9 = handicapAccessDecorator6.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        int int11 = handicapAccessDecorator6.getId();
        parking.EVChargingDecorator eVChargingDecorator12 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str13 = handicapAccessDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        parking.HandicapAccessDecorator handicapAccessDecorator28 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        int int29 = handicapAccessDecorator28.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator28);
        parking.HandicapAccessDecorator handicapAccessDecorator32 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator28);
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator32);
        java.lang.String str34 = handicapAccessDecorator33.getDetails();
        java.lang.String str35 = handicapAccessDecorator33.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Handicap Accessible" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Handicap Accessible" + "'", str35, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getLocation();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        java.lang.String str13 = eVChargingDecorator8.getDetails();
        java.lang.String str14 = eVChargingDecorator8.getDetails();
        java.lang.String str15 = eVChargingDecorator8.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator5.getDetails();
        java.lang.String str8 = handicapAccessDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str8, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        java.lang.String str7 = parkingSpot4.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator8);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        java.lang.String str5 = parkingSpot3.getDetails();
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str7 = eVChargingDecorator6.getDetails();
        int int8 = eVChargingDecorator6.getId();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str11 = coveredParkingDecorator10.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str5, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot18);
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator19);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        java.lang.String str28 = coveredParkingDecorator27.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.String str30 = coveredParkingDecorator27.getDetails();
        java.lang.String str31 = coveredParkingDecorator27.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.lang.Class<?> wildcardClass33 = parkingLotManager0.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator5.getDetails();
        int int8 = handicapAccessDecorator5.getId();
        java.lang.String str9 = handicapAccessDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '4', "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str5 = eVChargingDecorator4.getDetails();
        java.lang.String str6 = eVChargingDecorator4.getParkingLot();
        java.lang.String str7 = eVChargingDecorator4.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, EV Charging Available" + "'", str5, "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available" + "'", str6, "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, EV Charging Available" + "'", str7, "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available", "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, EV Charging Available");
        java.lang.String str4 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 0, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Lot: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, EV Charging Available" + "'", str4, "Parking Spot ID: 0, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Lot: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Lot: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, EV Charging Available");
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList13 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager15 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str20 = parkingSpot19.getLocation();
        java.lang.String str21 = parkingSpot19.getLocation();
        parkingLotManager15.addParkingSpot(parkingSpot19);
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str27 = parkingSpot26.getLocation();
        parkingLotManager15.addParkingSpot(parkingSpot26);
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager15.getParkingSpots();
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator35 = new parking.CoveredParkingDecorator(parkingSpot33);
        java.lang.String str36 = coveredParkingDecorator35.getDetails();
        parking.EVChargingDecorator eVChargingDecorator37 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        java.lang.String str38 = coveredParkingDecorator35.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator39 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator35);
        parkingLotManager15.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator35);
        java.util.List<parking.ParkingSpot> parkingSpotList41 = parkingLotManager15.getParkingSpots();
        parking.ParkingSpot parkingSpot45 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator46 = new parking.EVChargingDecorator(parkingSpot45);
        parking.EVChargingDecorator eVChargingDecorator47 = new parking.EVChargingDecorator(parkingSpot45);
        parking.CoveredParkingDecorator coveredParkingDecorator48 = new parking.CoveredParkingDecorator(parkingSpot45);
        parkingLotManager15.addParkingSpot(parkingSpot45);
        parkingLotManager0.addParkingSpot(parkingSpot45);
        java.util.List<parking.ParkingSpot> parkingSpotList51 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot55 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str56 = parkingSpot55.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator57 = new parking.CoveredParkingDecorator(parkingSpot55);
        int int58 = parkingSpot55.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator59 = new parking.HandicapAccessDecorator(parkingSpot55);
        java.lang.String str60 = handicapAccessDecorator59.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator59);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingSpotList13);
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingLotManager15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str36, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str38, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList41);
        org.junit.Assert.assertNotNull(parkingSpotList51);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str60, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 1, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, EV Charging Available", "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible, Covered Parking, Covered Parking");
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '#', "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Covered Parking", "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        java.lang.Class<?> wildcardClass4 = parkingSpot3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        java.lang.Class<?> wildcardClass12 = eVChargingDecorator10.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str9 = handicapAccessDecorator6.getParkingLot();
        java.lang.String str10 = handicapAccessDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator10);
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator12);
        java.lang.String str14 = handicapAccessDecorator12.getParkingLot();
        java.lang.String str15 = handicapAccessDecorator12.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Handicap Accessible" + "'", str15, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Handicap Accessible");
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        parking.ParkingSpot parkingSpot31 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str32 = parkingSpot31.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator(parkingSpot31);
        java.lang.String str34 = coveredParkingDecorator33.getDetails();
        parking.EVChargingDecorator eVChargingDecorator35 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator33);
        java.lang.String str36 = coveredParkingDecorator33.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator37 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator33);
        java.lang.String str38 = handicapAccessDecorator37.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator39 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator37);
        java.lang.String str40 = handicapAccessDecorator39.getDetails();
        java.lang.String str41 = handicapAccessDecorator39.getDetails();
        java.lang.String str42 = handicapAccessDecorator39.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator39);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str36, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str38, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str40, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str41, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str42, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        java.lang.String str11 = handicapAccessDecorator7.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        int int13 = handicapAccessDecorator7.getId();
        java.lang.Class<?> wildcardClass14 = handicapAccessDecorator7.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getDetails();
        java.lang.String str11 = eVChargingDecorator8.getDetails();
        java.lang.String str12 = eVChargingDecorator8.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        java.lang.String str15 = coveredParkingDecorator13.getLocation();
        int int16 = coveredParkingDecorator13.getId();
        java.lang.String str17 = coveredParkingDecorator13.getDetails();
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str17, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str14 = parkingSpot13.getParkingLot();
        java.lang.String str15 = parkingSpot13.getParkingLot();
        java.lang.String str16 = parkingSpot13.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot13);
        java.lang.String str18 = parkingSpot13.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str16, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str18, "Parking Spot ID: -1, Location: , Lot: ");
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str8 = eVChargingDecorator6.getDetails();
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getLocation();
        java.lang.String str9 = handicapAccessDecorator7.getDetails();
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        java.lang.String str11 = handicapAccessDecorator7.getDetails();
        java.lang.String str12 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str14 = handicapAccessDecorator13.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator4);
        java.lang.String str6 = coveredParkingDecorator5.getParkingLot();
        java.lang.Class<?> wildcardClass7 = coveredParkingDecorator5.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager24 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str29 = parkingSpot28.getLocation();
        java.lang.String str30 = parkingSpot28.getLocation();
        parkingLotManager24.addParkingSpot(parkingSpot28);
        parking.ParkingSpot parkingSpot35 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str36 = parkingSpot35.getLocation();
        parkingLotManager24.addParkingSpot(parkingSpot35);
        parking.ParkingSpot parkingSpot41 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str42 = parkingSpot41.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator43 = new parking.CoveredParkingDecorator(parkingSpot41);
        parking.EVChargingDecorator eVChargingDecorator44 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator43);
        parking.EVChargingDecorator eVChargingDecorator45 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator44);
        parkingLotManager24.addParkingSpot((parking.ParkingSpot) eVChargingDecorator45);
        parking.CoveredParkingDecorator coveredParkingDecorator47 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator45);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator45);
        parking.EVChargingDecorator eVChargingDecorator49 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator45);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertNotNull(parkingLotManager24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager12 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str17 = parkingSpot16.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator18 = new parking.CoveredParkingDecorator(parkingSpot16);
        java.lang.String str19 = coveredParkingDecorator18.getDetails();
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator18);
        parkingLotManager12.addParkingSpot((parking.ParkingSpot) eVChargingDecorator20);
        java.lang.String str22 = eVChargingDecorator20.getDetails();
        java.lang.String str23 = eVChargingDecorator20.getDetails();
        java.lang.String str24 = eVChargingDecorator20.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        java.lang.String str26 = eVChargingDecorator20.getLocation();
        java.lang.String str27 = eVChargingDecorator20.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator28 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator20);
        java.lang.String str30 = eVChargingDecorator20.getParkingLot();
        java.lang.String str31 = eVChargingDecorator20.getDetails();
        java.lang.String str32 = eVChargingDecorator20.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(parkingLotManager12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str19, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str22, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str24, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str27, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str31, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        java.util.List<parking.ParkingSpot> parkingSpotList1 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager2 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot6 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str7 = parkingSpot6.getLocation();
        java.lang.String str8 = parkingSpot6.getLocation();
        parkingLotManager2.addParkingSpot(parkingSpot6);
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str14 = parkingSpot13.getLocation();
        parkingLotManager2.addParkingSpot(parkingSpot13);
        java.util.List<parking.ParkingSpot> parkingSpotList16 = parkingLotManager2.getParkingSpots();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        java.lang.String str25 = coveredParkingDecorator22.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator26 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager2.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator22);
        java.util.List<parking.ParkingSpot> parkingSpotList29 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList1);
        org.junit.Assert.assertNotNull(parkingLotManager2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(parkingSpotList16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str25, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList29);
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        java.lang.String str17 = parkingSpot15.getDetails();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator(parkingSpot15);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator18);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager20.addParkingSpot(parkingSpot24);
        java.lang.String str26 = parkingSpot24.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot24);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator27);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot36 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str37 = parkingSpot36.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator38 = new parking.CoveredParkingDecorator(parkingSpot36);
        parking.EVChargingDecorator eVChargingDecorator39 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator38);
        parking.EVChargingDecorator eVChargingDecorator40 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator39);
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator39);
        java.lang.String str42 = eVChargingDecorator39.getDetails();
        parking.EVChargingDecorator eVChargingDecorator43 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator39);
        java.lang.String str44 = eVChargingDecorator43.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator43);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str17, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str42, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str44, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str26 = parkingSpot25.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator27 = new parking.HandicapAccessDecorator(parkingSpot25);
        parking.CoveredParkingDecorator coveredParkingDecorator28 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator27);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator27);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList30);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int8 = coveredParkingDecorator7.getId();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator10);
        int int12 = handicapAccessDecorator11.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getLocation();
        java.lang.String str9 = handicapAccessDecorator7.getDetails();
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        java.lang.String str11 = handicapAccessDecorator7.getDetails();
        java.lang.String str12 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator13 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str14 = handicapAccessDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        int int7 = parkingSpot4.getId();
        java.lang.String str8 = parkingSpot4.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        int int9 = eVChargingDecorator7.getId();
        int int10 = eVChargingDecorator7.getId();
        java.lang.String str11 = eVChargingDecorator7.getDetails();
        java.lang.String str12 = eVChargingDecorator7.getDetails();
        int int13 = eVChargingDecorator7.getId();
        java.lang.String str14 = eVChargingDecorator7.getDetails();
        java.lang.Class<?> wildcardClass15 = eVChargingDecorator7.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        java.lang.String str12 = eVChargingDecorator10.getDetails();
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator13);
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator13);
        java.lang.String str16 = eVChargingDecorator13.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: 97, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        parking.ParkingSpot parkingSpot21 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator(parkingSpot21);
        parking.EVChargingDecorator eVChargingDecorator23 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator22);
        parking.CoveredParkingDecorator coveredParkingDecorator24 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator23);
        java.lang.String str25 = coveredParkingDecorator24.getDetails();
        java.lang.String str26 = coveredParkingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator24);
        parking.ParkingLotManager parkingLotManager28 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot32 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str33 = parkingSpot32.getLocation();
        java.lang.String str34 = parkingSpot32.getLocation();
        parkingLotManager28.addParkingSpot(parkingSpot32);
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str40 = parkingSpot39.getLocation();
        parkingLotManager28.addParkingSpot(parkingSpot39);
        parking.ParkingLotManager parkingLotManager42 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot46 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str47 = parkingSpot46.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator48 = new parking.CoveredParkingDecorator(parkingSpot46);
        java.lang.String str49 = coveredParkingDecorator48.getDetails();
        parking.EVChargingDecorator eVChargingDecorator50 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator48);
        parkingLotManager42.addParkingSpot((parking.ParkingSpot) eVChargingDecorator50);
        parkingLotManager28.addParkingSpot((parking.ParkingSpot) eVChargingDecorator50);
        parking.EVChargingDecorator eVChargingDecorator53 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator50);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator50);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking" + "'", str25, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking" + "'", str26, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , EV Charging Available, EV Charging Available, Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(parkingLotManager42);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str49, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator20 = new parking.HandicapAccessDecorator(parkingSpot17);
        java.lang.String str21 = handicapAccessDecorator20.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator20);
        parking.EVChargingDecorator eVChargingDecorator23 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator20);
        int int24 = handicapAccessDecorator20.getId();
        java.lang.String str25 = handicapAccessDecorator20.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        java.lang.String str7 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str9 = coveredParkingDecorator5.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int12 = handicapAccessDecorator11.getId();
        java.lang.String str13 = handicapAccessDecorator11.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        int int4 = parkingSpot3.getId();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '#', "", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str7 = coveredParkingDecorator6.getParkingLot();
        int int8 = coveredParkingDecorator6.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator20 = new parking.HandicapAccessDecorator(parkingSpot17);
        java.lang.String str21 = handicapAccessDecorator20.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator20);
        java.lang.String str23 = handicapAccessDecorator20.getDetails();
        java.lang.String str24 = handicapAccessDecorator20.getDetails();
        int int25 = handicapAccessDecorator20.getId();
        java.lang.String str26 = handicapAccessDecorator20.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str23, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str24, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible" + "'", str26, "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int8 = coveredParkingDecorator7.getId();
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        java.lang.String str12 = eVChargingDecorator10.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        java.lang.String str7 = parkingSpot4.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str9 = parkingSpot4.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking", "Parking Spot ID: 97, Location: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str11 = eVChargingDecorator6.getDetails();
        java.lang.String str12 = eVChargingDecorator6.getParkingLot();
        java.lang.String str13 = eVChargingDecorator6.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        java.lang.String str7 = parkingSpot4.getLocation();
        java.lang.String str8 = parkingSpot4.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        int int9 = eVChargingDecorator7.getId();
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList7 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList8 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager9 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager9.addParkingSpot(parkingSpot13);
        java.lang.String str15 = parkingSpot13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator16 = new parking.EVChargingDecorator(parkingSpot13);
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator16);
        java.lang.String str18 = eVChargingDecorator16.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator16);
        parking.ParkingSpot parkingSpot23 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str24 = parkingSpot23.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator25 = new parking.CoveredParkingDecorator(parkingSpot23);
        parking.EVChargingDecorator eVChargingDecorator26 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator25);
        parking.EVChargingDecorator eVChargingDecorator27 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator26);
        java.lang.String str28 = eVChargingDecorator26.getLocation();
        int int29 = eVChargingDecorator26.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator26);
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((-1), "", "");
        int int35 = parkingSpot34.getId();
        parking.EVChargingDecorator eVChargingDecorator36 = new parking.EVChargingDecorator(parkingSpot34);
        parking.CoveredParkingDecorator coveredParkingDecorator37 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator36);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator37);
        parking.ParkingLotManager parkingLotManager39 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot43 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str44 = parkingSpot43.getLocation();
        java.lang.String str45 = parkingSpot43.getLocation();
        parkingLotManager39.addParkingSpot(parkingSpot43);
        parking.ParkingSpot parkingSpot50 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str51 = parkingSpot50.getLocation();
        parkingLotManager39.addParkingSpot(parkingSpot50);
        java.util.List<parking.ParkingSpot> parkingSpotList53 = parkingLotManager39.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList54 = parkingLotManager39.getParkingSpots();
        parking.ParkingLotManager parkingLotManager55 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot59 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str60 = parkingSpot59.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator61 = new parking.CoveredParkingDecorator(parkingSpot59);
        java.lang.String str62 = coveredParkingDecorator61.getDetails();
        parking.EVChargingDecorator eVChargingDecorator63 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator61);
        parkingLotManager55.addParkingSpot((parking.ParkingSpot) eVChargingDecorator63);
        java.lang.String str65 = eVChargingDecorator63.getDetails();
        parkingLotManager39.addParkingSpot((parking.ParkingSpot) eVChargingDecorator63);
        java.util.List<parking.ParkingSpot> parkingSpotList67 = parkingLotManager39.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList68 = parkingLotManager39.getParkingSpots();
        parking.ParkingSpot parkingSpot72 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str73 = parkingSpot72.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator74 = new parking.CoveredParkingDecorator(parkingSpot72);
        parking.EVChargingDecorator eVChargingDecorator75 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator74);
        java.lang.String str76 = coveredParkingDecorator74.getDetails();
        parkingLotManager39.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator74);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator74);
        parking.ParkingSpot parkingSpot82 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str83 = parkingSpot82.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator84 = new parking.CoveredParkingDecorator(parkingSpot82);
        parking.HandicapAccessDecorator handicapAccessDecorator85 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator84);
        int int86 = handicapAccessDecorator85.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator87 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator85);
        java.lang.String str88 = handicapAccessDecorator85.getDetails();
        java.lang.String str89 = handicapAccessDecorator85.getDetails();
        java.lang.String str90 = handicapAccessDecorator85.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator85);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingSpotList7);
        org.junit.Assert.assertNotNull(parkingSpotList8);
        org.junit.Assert.assertNotNull(parkingLotManager9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(parkingLotManager39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(parkingSpotList53);
        org.junit.Assert.assertNotNull(parkingSpotList54);
        org.junit.Assert.assertNotNull(parkingLotManager55);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str62, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str65, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList67);
        org.junit.Assert.assertNotNull(parkingSpotList68);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str76, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str88, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str89, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str90, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str12 = coveredParkingDecorator5.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str14 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str16 = handicapAccessDecorator15.getDetails();
        java.lang.String str17 = handicapAccessDecorator15.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str17, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.lang.String str14 = parkingSpot11.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator(parkingSpot11);
        java.lang.String str16 = parkingSpot11.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str18 = parkingSpot11.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator(parkingSpot11);
        int int20 = handicapAccessDecorator19.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str16, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , Handicap Accessible");
        java.lang.String str4 = parkingSpot3.getLocation();
        java.lang.Class<?> wildcardClass5 = parkingSpot3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str9 = parkingSpot4.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator(parkingSpot4);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator8);
        parking.ParkingSpot parkingSpot13 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str14 = parkingSpot13.getParkingLot();
        java.lang.String str15 = parkingSpot13.getParkingLot();
        java.lang.String str16 = parkingSpot13.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot13);
        parking.ParkingSpot parkingSpot21 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str22 = parkingSpot21.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator23 = new parking.CoveredParkingDecorator(parkingSpot21);
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator(parkingSpot21);
        parkingLotManager0.addParkingSpot(parkingSpot21);
        parking.ParkingSpot parkingSpot29 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str30 = parkingSpot29.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot29);
        parking.EVChargingDecorator eVChargingDecorator32 = new parking.EVChargingDecorator(parkingSpot29);
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator32);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str16, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str30, "Parking Spot ID: 1, Location: hi!, Lot: ");
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        java.util.List<parking.ParkingSpot> parkingSpotList22 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager24 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager24.addParkingSpot(parkingSpot28);
        parking.ParkingSpot parkingSpot33 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str34 = parkingSpot33.getLocation();
        java.lang.String str35 = parkingSpot33.getLocation();
        parkingLotManager24.addParkingSpot(parkingSpot33);
        int int37 = parkingSpot33.getId();
        java.lang.String str38 = parkingSpot33.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot33);
        java.util.List<parking.ParkingSpot> parkingSpotList40 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot44 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str45 = parkingSpot44.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator46 = new parking.CoveredParkingDecorator(parkingSpot44);
        parking.HandicapAccessDecorator handicapAccessDecorator47 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator46);
        java.lang.String str48 = handicapAccessDecorator47.getDetails();
        java.lang.String str49 = handicapAccessDecorator47.getDetails();
        java.lang.String str50 = handicapAccessDecorator47.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator51 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator47);
        int int52 = handicapAccessDecorator47.getId();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator47);
        parking.CoveredParkingDecorator coveredParkingDecorator54 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator47);
        parking.HandicapAccessDecorator handicapAccessDecorator55 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator54);
        java.lang.String str56 = coveredParkingDecorator54.getDetails();
        java.lang.String str57 = coveredParkingDecorator54.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList22);
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertNotNull(parkingLotManager24);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(parkingSpotList40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str48, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str49, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str56, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking" + "'", str57, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Covered Parking");
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator13 = new parking.CoveredParkingDecorator(parkingSpot11);
        java.lang.String str14 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str16 = coveredParkingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        java.lang.String str18 = coveredParkingDecorator13.getDetails();
        parking.EVChargingDecorator eVChargingDecorator19 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator13);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator13);
        parking.ParkingLotManager parkingLotManager21 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager21.addParkingSpot(parkingSpot25);
        java.lang.String str27 = parkingSpot25.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot25);
        java.lang.String str29 = parkingSpot25.getLocation();
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator(parkingSpot25);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator30);
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList33 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList34 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList35 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((int) (byte) 0, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible", "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        parking.HandicapAccessDecorator handicapAccessDecorator40 = new parking.HandicapAccessDecorator(parkingSpot39);
        java.lang.String str41 = handicapAccessDecorator40.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator40);
        java.lang.String str43 = handicapAccessDecorator40.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str16, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str18, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingLotManager21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingSpotList33);
        org.junit.Assert.assertNotNull(parkingSpotList34);
        org.junit.Assert.assertNotNull(parkingSpotList35);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible" + "'", str41, "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible" + "'", str43, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible");
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.util.List<parking.ParkingSpot> parkingSpotList6 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager7 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager7.addParkingSpot(parkingSpot11);
        java.lang.String str13 = parkingSpot11.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator14 = new parking.CoveredParkingDecorator(parkingSpot11);
        parking.CoveredParkingDecorator coveredParkingDecorator15 = new parking.CoveredParkingDecorator(parkingSpot11);
        parking.HandicapAccessDecorator handicapAccessDecorator16 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator15);
        java.lang.String str17 = handicapAccessDecorator16.getLocation();
        parking.EVChargingDecorator eVChargingDecorator18 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator16);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator16);
        parking.ParkingLotManager parkingLotManager20 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot24 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str25 = parkingSpot24.getLocation();
        java.lang.String str26 = parkingSpot24.getLocation();
        parkingLotManager20.addParkingSpot(parkingSpot24);
        parking.ParkingSpot parkingSpot31 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str32 = parkingSpot31.getLocation();
        parkingLotManager20.addParkingSpot(parkingSpot31);
        java.util.List<parking.ParkingSpot> parkingSpotList34 = parkingLotManager20.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList35 = parkingLotManager20.getParkingSpots();
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator40 = new parking.EVChargingDecorator(parkingSpot39);
        parking.EVChargingDecorator eVChargingDecorator41 = new parking.EVChargingDecorator(parkingSpot39);
        parking.HandicapAccessDecorator handicapAccessDecorator42 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator41);
        parkingLotManager20.addParkingSpot((parking.ParkingSpot) eVChargingDecorator41);
        java.lang.String str44 = eVChargingDecorator41.getLocation();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator41);
        parking.ParkingLotManager parkingLotManager46 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot50 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str51 = parkingSpot50.getLocation();
        java.lang.String str52 = parkingSpot50.getLocation();
        parkingLotManager46.addParkingSpot(parkingSpot50);
        parking.ParkingSpot parkingSpot57 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str58 = parkingSpot57.getLocation();
        parkingLotManager46.addParkingSpot(parkingSpot57);
        parking.ParkingLotManager parkingLotManager60 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot64 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str65 = parkingSpot64.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator66 = new parking.CoveredParkingDecorator(parkingSpot64);
        java.lang.String str67 = coveredParkingDecorator66.getDetails();
        parking.EVChargingDecorator eVChargingDecorator68 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator66);
        parkingLotManager60.addParkingSpot((parking.ParkingSpot) eVChargingDecorator68);
        parkingLotManager46.addParkingSpot((parking.ParkingSpot) eVChargingDecorator68);
        parking.ParkingSpot parkingSpot74 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager46.addParkingSpot(parkingSpot74);
        java.util.List<parking.ParkingSpot> parkingSpotList76 = parkingLotManager46.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList77 = parkingLotManager46.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList78 = parkingLotManager46.getParkingSpots();
        parking.ParkingLotManager parkingLotManager79 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot83 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager79.addParkingSpot(parkingSpot83);
        java.lang.String str85 = parkingSpot83.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator86 = new parking.CoveredParkingDecorator(parkingSpot83);
        parking.CoveredParkingDecorator coveredParkingDecorator87 = new parking.CoveredParkingDecorator(parkingSpot83);
        parking.HandicapAccessDecorator handicapAccessDecorator88 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator87);
        parking.HandicapAccessDecorator handicapAccessDecorator89 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator87);
        parkingLotManager46.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator87);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator87);
        parking.EVChargingDecorator eVChargingDecorator92 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator87);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertNotNull(parkingSpotList6);
        org.junit.Assert.assertNotNull(parkingLotManager7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(parkingLotManager20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(parkingSpotList34);
        org.junit.Assert.assertNotNull(parkingSpotList35);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str44, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertNotNull(parkingLotManager46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(parkingLotManager60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str67, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList76);
        org.junit.Assert.assertNotNull(parkingSpotList77);
        org.junit.Assert.assertNotNull(parkingSpotList78);
        org.junit.Assert.assertNotNull(parkingLotManager79);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '#', "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available, Covered Parking, EV Charging Available", "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        parking.CoveredParkingDecorator coveredParkingDecorator4 = new parking.CoveredParkingDecorator(parkingSpot3);
        int int5 = coveredParkingDecorator4.getId();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getParkingLot();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str16 = parkingSpot15.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator17 = new parking.HandicapAccessDecorator(parkingSpot15);
        parking.HandicapAccessDecorator handicapAccessDecorator18 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator17);
        java.lang.String str19 = handicapAccessDecorator18.getDetails();
        java.lang.String str20 = handicapAccessDecorator18.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator21 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator18);
        java.lang.String str22 = handicapAccessDecorator18.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator18);
        java.util.List<parking.ParkingSpot> parkingSpotList24 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str19, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str20, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible" + "'", str22, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertNotNull(parkingSpotList24);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        int int7 = handicapAccessDecorator6.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str10 = handicapAccessDecorator6.getLocation();
        parking.HandicapAccessDecorator handicapAccessDecorator11 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str12 = handicapAccessDecorator6.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator(parkingSpot19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator(parkingSpot19);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator21);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str28 = parkingSpot27.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator(parkingSpot27);
        parking.HandicapAccessDecorator handicapAccessDecorator30 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        int int31 = handicapAccessDecorator30.getId();
        java.lang.String str32 = handicapAccessDecorator30.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator30);
        parking.EVChargingDecorator eVChargingDecorator35 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator30);
        java.lang.String str36 = eVChargingDecorator35.getDetails();
        java.lang.String str37 = eVChargingDecorator35.getDetails();
        java.lang.String str38 = eVChargingDecorator35.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available" + "'", str36, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "", "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Covered Parking");
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        java.lang.String str13 = handicapAccessDecorator9.getDetails();
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.EVChargingDecorator eVChargingDecorator15 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator(parkingSpot9);
        int int14 = eVChargingDecorator13.getId();
        java.lang.String str15 = eVChargingDecorator13.getDetails();
        java.lang.String str16 = eVChargingDecorator13.getDetails();
        java.lang.String str17 = eVChargingDecorator13.getLocation();
        int int18 = eVChargingDecorator13.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(32, "Parking Spot ID: 52, Location: Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, EV Charging Available, EV Charging Available", "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator(parkingSpot9);
        int int14 = eVChargingDecorator13.getId();
        java.lang.String str15 = eVChargingDecorator13.getDetails();
        java.lang.String str16 = eVChargingDecorator13.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str4 = parkingSpot3.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator5.getDetails();
        int int8 = handicapAccessDecorator5.getId();
        java.lang.String str9 = handicapAccessDecorator5.getLocation();
        java.lang.String str10 = handicapAccessDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str4, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str7, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible");
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getParkingLot();
        int int9 = coveredParkingDecorator7.getId();
        java.lang.String str10 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getParkingLot();
        int int9 = coveredParkingDecorator7.getId();
        java.lang.String str10 = coveredParkingDecorator7.getDetails();
        java.lang.String str11 = coveredParkingDecorator7.getDetails();
        java.lang.String str12 = coveredParkingDecorator7.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        int int7 = parkingSpot4.getId();
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str10 = eVChargingDecorator8.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str12 = eVChargingDecorator11.getDetails();
        int int13 = eVChargingDecorator11.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) '#', "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, EV Charging Available", "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager16 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot20 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str21 = parkingSpot20.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator(parkingSpot20);
        java.lang.String str23 = coveredParkingDecorator22.getDetails();
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parkingLotManager16.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str26 = eVChargingDecorator24.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator24);
        java.lang.String str28 = eVChargingDecorator24.getDetails();
        java.lang.String str29 = eVChargingDecorator24.getDetails();
        int int30 = eVChargingDecorator24.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertNotNull(parkingLotManager16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str23, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str26, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str28, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 100, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator5 = new parking.HandicapAccessDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator5);
        java.lang.String str7 = handicapAccessDecorator5.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 0, "", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, Covered Parking");
        java.lang.String str4 = parkingSpot3.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        java.util.List<parking.ParkingSpot> parkingSpotList14 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList15 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot19 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str20 = parkingSpot19.getParkingLot();
        java.lang.String str21 = parkingSpot19.getDetails();
        parkingLotManager0.addParkingSpot(parkingSpot19);
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot(1, "hi!", "hi!");
        java.lang.String str27 = parkingSpot26.getDetails();
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator(parkingSpot26);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        parking.ParkingLotManager parkingLotManager30 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot34 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager30.addParkingSpot(parkingSpot34);
        parking.ParkingSpot parkingSpot39 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str40 = parkingSpot39.getLocation();
        java.lang.String str41 = parkingSpot39.getLocation();
        parkingLotManager30.addParkingSpot(parkingSpot39);
        parking.ParkingLotManager parkingLotManager43 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot47 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager43.addParkingSpot(parkingSpot47);
        java.lang.String str49 = parkingSpot47.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator50 = new parking.CoveredParkingDecorator(parkingSpot47);
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator50);
        parking.ParkingSpot parkingSpot55 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str56 = parkingSpot55.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator57 = new parking.CoveredParkingDecorator(parkingSpot55);
        parking.HandicapAccessDecorator handicapAccessDecorator58 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator57);
        int int59 = handicapAccessDecorator58.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator60 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator58);
        parkingLotManager30.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator58);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator58);
        java.util.List<parking.ParkingSpot> parkingSpotList63 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot67 = new parking.ParkingSpot(10, "Parking Spot ID: -1, Location: , Lot: ", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
        parking.EVChargingDecorator eVChargingDecorator68 = new parking.EVChargingDecorator(parkingSpot67);
        parking.HandicapAccessDecorator handicapAccessDecorator69 = new parking.HandicapAccessDecorator(parkingSpot67);
        parkingLotManager0.addParkingSpot(parkingSpot67);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingSpotList14);
        org.junit.Assert.assertNotNull(parkingSpotList15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: " + "'", str21, "Parking Spot ID: -1, Location: , Lot: ");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: hi!" + "'", str27, "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        org.junit.Assert.assertNotNull(parkingLotManager30);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(parkingLotManager43);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(parkingSpotList63);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator7);
        parking.ParkingLotManager parkingLotManager12 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot16 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager12.addParkingSpot(parkingSpot16);
        java.lang.String str18 = parkingSpot16.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot16);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        java.lang.String str21 = eVChargingDecorator20.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator20);
        parking.ParkingSpot parkingSpot26 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str27 = parkingSpot26.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator28 = new parking.CoveredParkingDecorator(parkingSpot26);
        java.lang.String str29 = coveredParkingDecorator28.getDetails();
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator28);
        parking.CoveredParkingDecorator coveredParkingDecorator31 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator30);
        java.lang.String str32 = coveredParkingDecorator31.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator33 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator31);
        java.lang.String str34 = coveredParkingDecorator31.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator35 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator31);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator35);
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertNotNull(parkingLotManager12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str21, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str29, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (short) 0, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking, EV Charging Available");
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        java.lang.String str5 = parkingSpot3.getLocation();
        java.lang.String str6 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        int int9 = coveredParkingDecorator8.getId();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str11 = coveredParkingDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking");
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) (byte) 10, "Parking Spot ID: -1, Location: , Lot: , Handicap Accessible, Handicap Accessible", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.CoveredParkingDecorator coveredParkingDecorator22 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parking.CoveredParkingDecorator coveredParkingDecorator23 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator22);
        parking.EVChargingDecorator eVChargingDecorator24 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator23);
        java.lang.String str25 = coveredParkingDecorator23.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking" + "'", str25, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Covered Parking, Covered Parking");
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: 32, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available", "Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible");
        java.lang.String str4 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: 32, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible" + "'", str4, "Parking Spot ID: 32, Location: Parking Spot ID: 32, Location: Parking Spot ID: 1, Location: hi!, Lot: hi!, Handicap Accessible, Lot: Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Lot: Parking Spot ID: 100, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str19 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot18);
        java.lang.String str21 = coveredParkingDecorator20.getDetails();
        parking.EVChargingDecorator eVChargingDecorator22 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator20);
        parkingLotManager14.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator22);
        parking.ParkingSpot parkingSpot28 = new parking.ParkingSpot(100, "Parking Spot ID: 1, Location: hi!, Lot: hi!", "Parking Spot ID: 1, Location: hi!, Lot: hi!");
        parkingLotManager0.addParkingSpot(parkingSpot28);
        java.util.List<parking.ParkingSpot> parkingSpotList30 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList31 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList32 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager33 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot37 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager33.addParkingSpot(parkingSpot37);
        parking.ParkingSpot parkingSpot42 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str43 = parkingSpot42.getLocation();
        parking.EVChargingDecorator eVChargingDecorator44 = new parking.EVChargingDecorator(parkingSpot42);
        parkingLotManager33.addParkingSpot(parkingSpot42);
        parking.EVChargingDecorator eVChargingDecorator46 = new parking.EVChargingDecorator(parkingSpot42);
        java.lang.String str47 = eVChargingDecorator46.getDetails();
        java.lang.String str48 = eVChargingDecorator46.getDetails();
        java.lang.String str49 = eVChargingDecorator46.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator50 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator46);
        java.lang.String str51 = eVChargingDecorator46.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator46);
        java.lang.String str53 = eVChargingDecorator46.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str21, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertNotNull(parkingSpotList30);
        org.junit.Assert.assertNotNull(parkingSpotList31);
        org.junit.Assert.assertNotNull(parkingSpotList32);
        org.junit.Assert.assertNotNull(parkingLotManager33);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str47, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str48, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str49, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str51, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str53, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator(parkingSpot4);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        java.lang.String str12 = eVChargingDecorator10.getLocation();
        java.lang.String str13 = eVChargingDecorator10.getDetails();
        java.lang.String str14 = eVChargingDecorator10.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        java.lang.String str11 = parkingSpot9.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.ParkingLotManager parkingLotManager13 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager13.addParkingSpot(parkingSpot17);
        java.lang.String str19 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator20 = new parking.CoveredParkingDecorator(parkingSpot17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) coveredParkingDecorator20);
        parking.ParkingSpot parkingSpot25 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str26 = parkingSpot25.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator27 = new parking.CoveredParkingDecorator(parkingSpot25);
        parking.EVChargingDecorator eVChargingDecorator28 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator27);
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        parking.EVChargingDecorator eVChargingDecorator30 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator28);
        java.lang.String str31 = eVChargingDecorator28.getParkingLot();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator28);
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator28);
        java.lang.String str34 = eVChargingDecorator28.getLocation();
        java.lang.Class<?> wildcardClass35 = eVChargingDecorator28.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(parkingLotManager13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator9);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        java.lang.String str12 = eVChargingDecorator10.getParkingLot();
        java.lang.String str13 = eVChargingDecorator10.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str10 = handicapAccessDecorator7.getDetails();
        java.lang.String str11 = handicapAccessDecorator7.getParkingLot();
        int int12 = handicapAccessDecorator7.getId();
        java.lang.String str13 = handicapAccessDecorator7.getDetails();
        java.lang.String str14 = handicapAccessDecorator7.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str10 = coveredParkingDecorator5.getDetails();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        int int13 = coveredParkingDecorator5.getId();
        java.lang.String str14 = coveredParkingDecorator5.getDetails();
        java.lang.String str15 = coveredParkingDecorator5.getLocation();
        int int16 = coveredParkingDecorator5.getId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str14, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str9 = coveredParkingDecorator5.getDetails();
        java.lang.String str10 = coveredParkingDecorator5.getLocation();
        java.lang.String str11 = coveredParkingDecorator5.getDetails();
        java.lang.String str12 = coveredParkingDecorator5.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str12, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Covered Parking", "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        parking.HandicapAccessDecorator handicapAccessDecorator4 = new parking.HandicapAccessDecorator(parkingSpot3);
        java.lang.String str5 = handicapAccessDecorator4.getDetails();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Covered Parking, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str5, "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Covered Parking, Lot: Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available", "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        java.lang.String str6 = parkingSpot3.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str4, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Lot: Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str6, "Parking Spot ID: 0, Location: Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, Lot: Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "", "Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        java.lang.String str4 = parkingSpot3.getDetails();
        int int5 = parkingSpot3.getId();
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator(parkingSpot3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available" + "'", str4, "Parking Spot ID: 0, Location: , Lot: Parking Spot ID: 1, Location: hi!, Lot: hi!, EV Charging Available");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        parking.EVChargingDecorator eVChargingDecorator13 = new parking.EVChargingDecorator(parkingSpot9);
        java.lang.String str14 = eVChargingDecorator13.getDetails();
        java.lang.String str15 = eVChargingDecorator13.getDetails();
        java.lang.String str16 = eVChargingDecorator13.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator17 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator13);
        java.lang.String str18 = eVChargingDecorator13.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator19 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator13);
        java.lang.Class<?> wildcardClass20 = eVChargingDecorator13.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str15, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str16, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str18, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (byte) -1, "Parking Spot ID: -1, Location: , Lot: ", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot9 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str10 = parkingSpot9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator(parkingSpot9);
        parkingLotManager0.addParkingSpot(parkingSpot9);
        java.util.List<parking.ParkingSpot> parkingSpotList13 = parkingLotManager0.getParkingSpots();
        parking.ParkingLotManager parkingLotManager14 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot18 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager14.addParkingSpot(parkingSpot18);
        java.lang.String str20 = parkingSpot18.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator21 = new parking.CoveredParkingDecorator(parkingSpot18);
        parking.HandicapAccessDecorator handicapAccessDecorator22 = new parking.HandicapAccessDecorator(parkingSpot18);
        parkingLotManager0.addParkingSpot(parkingSpot18);
        java.util.List<parking.ParkingSpot> parkingSpotList24 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList25 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList26 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList13);
        org.junit.Assert.assertNotNull(parkingLotManager14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(parkingSpotList24);
        org.junit.Assert.assertNotNull(parkingSpotList25);
        org.junit.Assert.assertNotNull(parkingSpotList26);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.HandicapAccessDecorator handicapAccessDecorator6 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str7 = handicapAccessDecorator6.getDetails();
        java.lang.String str8 = handicapAccessDecorator6.getDetails();
        java.lang.String str9 = handicapAccessDecorator6.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator10 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator6);
        java.lang.String str11 = handicapAccessDecorator6.getLocation();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot(0, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Covered Parking, Covered Parking, Handicap Accessible", "Parking Spot ID: 32, Location: Parking Spot ID: -1, Location: , Lot: , Lot: , Handicap Accessible");
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = coveredParkingDecorator8.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator8 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str9 = eVChargingDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator10 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str11 = handicapAccessDecorator10.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator10);
        java.lang.String str13 = handicapAccessDecorator12.getLocation();
        java.lang.String str14 = handicapAccessDecorator12.getDetails();
        java.lang.String str15 = handicapAccessDecorator12.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator16 = new parking.CoveredParkingDecorator((parking.ParkingSpot) handicapAccessDecorator12);
        java.lang.String str17 = handicapAccessDecorator12.getParkingLot();
        java.lang.String str18 = handicapAccessDecorator12.getParkingLot();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: " + "'", str6, "Parking Spot ID: 1, Location: hi!, Lot: ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible" + "'", str11, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible" + "'", str14, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        java.lang.String str6 = parkingSpot4.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot4);
        parking.ParkingSpot parkingSpot11 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str12 = parkingSpot11.getLocation();
        parkingLotManager0.addParkingSpot(parkingSpot11);
        parking.ParkingSpot parkingSpot17 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str18 = parkingSpot17.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator(parkingSpot17);
        parking.EVChargingDecorator eVChargingDecorator20 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator19);
        parking.EVChargingDecorator eVChargingDecorator21 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator20);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator21);
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        parking.ParkingSpot parkingSpot27 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str28 = parkingSpot27.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator29 = new parking.CoveredParkingDecorator(parkingSpot27);
        java.lang.String str30 = coveredParkingDecorator29.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator31 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator29);
        java.lang.String str32 = handicapAccessDecorator31.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator33 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator31);
        java.lang.String str34 = handicapAccessDecorator31.getDetails();
        java.lang.String str35 = handicapAccessDecorator31.getParkingLot();
        parking.HandicapAccessDecorator handicapAccessDecorator36 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator31);
        java.lang.String str37 = handicapAccessDecorator36.getDetails();
        java.lang.String str38 = handicapAccessDecorator36.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator36);
        java.lang.String str40 = handicapAccessDecorator36.getParkingLot();
        java.lang.String str41 = handicapAccessDecorator36.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str30, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str32, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str34, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str37, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str38, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str41, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        int int4 = parkingSpot3.getId();
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator(parkingSpot3);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        java.lang.String str7 = coveredParkingDecorator6.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        java.lang.String str9 = coveredParkingDecorator6.getParkingLot();
        java.lang.String str10 = coveredParkingDecorator6.getDetails();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking" + "'", str7, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , EV Charging Available, Covered Parking");
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getParkingLot();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator7 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = handicapAccessDecorator7.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) handicapAccessDecorator7);
        java.lang.String str10 = handicapAccessDecorator9.getDetails();
        java.lang.String str11 = handicapAccessDecorator9.getDetails();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, Handicap Accessible, Handicap Accessible");
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator6 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator6);
        java.lang.String str9 = eVChargingDecorator8.getDetails();
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator8);
        java.lang.String str12 = eVChargingDecorator8.getParkingLot();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available" + "'", str9, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((int) ' ', "Parking Spot ID: -1, Location: , Lot: ", "");
        parking.EVChargingDecorator eVChargingDecorator4 = new parking.EVChargingDecorator(parkingSpot3);
        parking.EVChargingDecorator eVChargingDecorator5 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator4);
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator5);
        int int7 = eVChargingDecorator5.getId();
        java.lang.Class<?> wildcardClass8 = eVChargingDecorator5.getClass();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str9 = coveredParkingDecorator7.getDetails();
        java.lang.String str10 = coveredParkingDecorator7.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        parking.HandicapAccessDecorator handicapAccessDecorator12 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator11);
        java.lang.Class<?> wildcardClass13 = handicapAccessDecorator12.getClass();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking" + "'", str9, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str4 = parkingSpot3.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator5 = new parking.CoveredParkingDecorator(parkingSpot3);
        java.lang.String str6 = coveredParkingDecorator5.getDetails();
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str8 = coveredParkingDecorator5.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator5);
        java.lang.String str11 = eVChargingDecorator10.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator12 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str6, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking" + "'", str8, "Parking Spot ID: -1, Location: , Lot: , Covered Parking");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str11, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        java.lang.String str10 = handicapAccessDecorator9.getLocation();
        parking.EVChargingDecorator eVChargingDecorator11 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        java.lang.String str12 = handicapAccessDecorator9.getDetails();
        java.lang.String str13 = handicapAccessDecorator9.getDetails();
        parking.EVChargingDecorator eVChargingDecorator14 = new parking.EVChargingDecorator((parking.ParkingSpot) handicapAccessDecorator9);
        parking.HandicapAccessDecorator handicapAccessDecorator15 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator14);
        int int16 = handicapAccessDecorator15.getId();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible" + "'", str13, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, Handicap Accessible");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((-1), "", "");
        java.lang.String str5 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator6 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.EVChargingDecorator eVChargingDecorator7 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator6);
        parking.EVChargingDecorator eVChargingDecorator8 = new parking.EVChargingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        parking.CoveredParkingDecorator coveredParkingDecorator9 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator7);
        java.lang.String str10 = eVChargingDecorator7.getDetails();
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) eVChargingDecorator7);
        parking.ParkingSpot parkingSpot15 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        java.lang.String str16 = parkingSpot15.getLocation();
        parking.EVChargingDecorator eVChargingDecorator17 = new parking.EVChargingDecorator(parkingSpot15);
        parking.HandicapAccessDecorator handicapAccessDecorator18 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator17);
        parking.CoveredParkingDecorator coveredParkingDecorator19 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator17);
        java.lang.String str20 = eVChargingDecorator17.getDetails();
        parking.HandicapAccessDecorator handicapAccessDecorator21 = new parking.HandicapAccessDecorator((parking.ParkingSpot) eVChargingDecorator17);
        parkingLotManager0.addParkingSpot((parking.ParkingSpot) handicapAccessDecorator21);
        java.util.List<parking.ParkingSpot> parkingSpotList23 = parkingLotManager0.getParkingSpots();
        java.util.List<parking.ParkingSpot> parkingSpotList24 = parkingLotManager0.getParkingSpots();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available" + "'", str20, "Parking Spot ID: 1, Location: hi!, Lot: , EV Charging Available");
        org.junit.Assert.assertNotNull(parkingSpotList23);
        org.junit.Assert.assertNotNull(parkingSpotList24);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        parking.ParkingSpot parkingSpot3 = new parking.ParkingSpot((-1), "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available", "Parking Spot ID: -1, Location: , Lot: , Covered Parking, EV Charging Available, EV Charging Available, EV Charging Available");
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        java.lang.String str8 = coveredParkingDecorator7.getParkingLot();
        parking.EVChargingDecorator eVChargingDecorator9 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator7);
        java.lang.String str10 = eVChargingDecorator9.getDetails();
        parking.CoveredParkingDecorator coveredParkingDecorator11 = new parking.CoveredParkingDecorator((parking.ParkingSpot) eVChargingDecorator9);
        java.lang.String str12 = coveredParkingDecorator11.getDetails();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str10, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available, Covered Parking" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available, Covered Parking");
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        parking.ParkingLotManager parkingLotManager0 = parking.ParkingLotManager.getInstance();
        parking.ParkingSpot parkingSpot4 = new parking.ParkingSpot((int) (short) 1, "hi!", "");
        parkingLotManager0.addParkingSpot(parkingSpot4);
        java.lang.String str6 = parkingSpot4.getLocation();
        parking.CoveredParkingDecorator coveredParkingDecorator7 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.CoveredParkingDecorator coveredParkingDecorator8 = new parking.CoveredParkingDecorator(parkingSpot4);
        parking.HandicapAccessDecorator handicapAccessDecorator9 = new parking.HandicapAccessDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        parking.EVChargingDecorator eVChargingDecorator10 = new parking.EVChargingDecorator((parking.ParkingSpot) coveredParkingDecorator8);
        int int11 = eVChargingDecorator10.getId();
        java.lang.String str12 = eVChargingDecorator10.getDetails();
        java.lang.String str13 = eVChargingDecorator10.getLocation();
        org.junit.Assert.assertNotNull(parkingLotManager0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available" + "'", str12, "Parking Spot ID: 1, Location: hi!, Lot: , Covered Parking, EV Charging Available");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }
}

